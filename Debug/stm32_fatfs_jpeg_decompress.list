
stm32_fatfs_jpeg_decompress.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002256c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002220  08022710  08022710  00023710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024930  08024930  00026074  2**0
                  CONTENTS
  4 .ARM          00000008  08024930  08024930  00025930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024938  08024938  00026074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024938  08024938  00025938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802493c  0802493c  0002593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08024940  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000078  080249b4  00026078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  080249b4  00026510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00026074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034dba  00000000  00000000  000260a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000638d  00000000  00000000  0005ae5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  000611f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f27  00000000  00000000  000625f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dded  00000000  00000000  0006351f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032360  00000000  00000000  0008130c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd7d  00000000  00000000  000b366c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001413e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005434  00000000  00000000  0014142c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00146860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080226f4 	.word	0x080226f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080226f4 	.word	0x080226f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <jpeg_decode>:

uint16_t RGB16PixelColor;
static uint8_t *rowBuff;

static uint8_t jpeg_decode(JFILE *file, uint8_t *rowBuff, int posx, int posy,
		UINT *iw, UINT *ih) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	@ 0x38
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
	uint32_t line_counter = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t i = 0, xc = 0, ratio;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t offset = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	JSAMPROW buffer[2] = { 0 };
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]

	UINT lcdWidth, lcdHeight;

	buffer[0] = rowBuff;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
	lcdWidth = 240;
 8000dda:	23f0      	movs	r3, #240	@ 0xf0
 8000ddc:	623b      	str	r3, [r7, #32]
	lcdHeight = 180;
 8000dde:	23b4      	movs	r3, #180	@ 0xb4
 8000de0:	61fb      	str	r3, [r7, #28]

	cinfo.err = jpeg_std_error(&jerr);
 8000de2:	4894      	ldr	r0, [pc, #592]	@ (8001034 <jpeg_decode+0x288>)
 8000de4:	f010 fabc 	bl	8011360 <jpeg_std_error>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a93      	ldr	r2, [pc, #588]	@ (8001038 <jpeg_decode+0x28c>)
 8000dec:	6013      	str	r3, [r2, #0]

	jpeg_create_decompress(&cinfo);
 8000dee:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000df2:	2150      	movs	r1, #80	@ 0x50
 8000df4:	4890      	ldr	r0, [pc, #576]	@ (8001038 <jpeg_decode+0x28c>)
 8000df6:	f004 fea3 	bl	8005b40 <jpeg_CreateDecompress>

	jpeg_stdio_src(&cinfo, file);
 8000dfa:	68f9      	ldr	r1, [r7, #12]
 8000dfc:	488e      	ldr	r0, [pc, #568]	@ (8001038 <jpeg_decode+0x28c>)
 8000dfe:	f006 fc03 	bl	8007608 <jpeg_stdio_src>

	jpeg_read_header(&cinfo, TRUE);
 8000e02:	2101      	movs	r1, #1
 8000e04:	488c      	ldr	r0, [pc, #560]	@ (8001038 <jpeg_decode+0x28c>)
 8000e06:	f005 f851 	bl	8005eac <jpeg_read_header>
	if (cinfo.image_width > 6000) {
 8000e0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001038 <jpeg_decode+0x28c>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d901      	bls.n	8000e1a <jpeg_decode+0x6e>
//	  showMessage("Image width exceeds 6000!!!", 5);
		return 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e108      	b.n	800102c <jpeg_decode+0x280>
	}

	if (cinfo.image_width > lcdWidth) {
 8000e1a:	4b87      	ldr	r3, [pc, #540]	@ (8001038 <jpeg_decode+0x28c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	6a3a      	ldr	r2, [r7, #32]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d226      	bcs.n	8000e72 <jpeg_decode+0xc6>
		ratio = cinfo.image_width / lcdWidth;
 8000e24:	4b84      	ldr	r3, [pc, #528]	@ (8001038 <jpeg_decode+0x28c>)
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	61bb      	str	r3, [r7, #24]
		cinfo.scale_num = 1;
 8000e30:	4b81      	ldr	r3, [pc, #516]	@ (8001038 <jpeg_decode+0x28c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (ratio <= 8) {
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d817      	bhi.n	8000e6c <jpeg_decode+0xc0>
			cinfo.scale_denom = 1;
 8000e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8001038 <jpeg_decode+0x28c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	631a      	str	r2, [r3, #48]	@ 0x30
			for (int s = 0x8; s > 0x01; s /= 2) {
 8000e42:	2308      	movs	r3, #8
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e46:	e00d      	b.n	8000e64 <jpeg_decode+0xb8>
				if (ratio & s) {
 8000e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <jpeg_decode+0xae>
					cinfo.scale_denom = s;
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	4a78      	ldr	r2, [pc, #480]	@ (8001038 <jpeg_decode+0x28c>)
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
					break;
 8000e58:	e00b      	b.n	8000e72 <jpeg_decode+0xc6>
			for (int s = 0x8; s > 0x01; s /= 2) {
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5c:	0fda      	lsrs	r2, r3, #31
 8000e5e:	4413      	add	r3, r2
 8000e60:	105b      	asrs	r3, r3, #1
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	dcee      	bgt.n	8000e48 <jpeg_decode+0x9c>
 8000e6a:	e002      	b.n	8000e72 <jpeg_decode+0xc6>
				}
			}
		} else {
			cinfo.scale_denom = 8;
 8000e6c:	4b72      	ldr	r3, [pc, #456]	@ (8001038 <jpeg_decode+0x28c>)
 8000e6e:	2208      	movs	r2, #8
 8000e70:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}

	cinfo.dct_method = JDCT_IFAST;
 8000e72:	4b71      	ldr	r3, [pc, #452]	@ (8001038 <jpeg_decode+0x28c>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	jpeg_start_decompress(&cinfo);
 8000e7a:	486f      	ldr	r0, [pc, #444]	@ (8001038 <jpeg_decode+0x28c>)
 8000e7c:	f005 f923 	bl	80060c6 <jpeg_start_decompress>
	if (cinfo.output_width > lcdWidth) {
 8000e80:	4b6d      	ldr	r3, [pc, #436]	@ (8001038 <jpeg_decode+0x28c>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e84:	6a3a      	ldr	r2, [r7, #32]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d218      	bcs.n	8000ebc <jpeg_decode+0x110>
		offset = cinfo.output_width / lcdWidth;
 8000e8a:	4b6b      	ldr	r3, [pc, #428]	@ (8001038 <jpeg_decode+0x28c>)
 8000e8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (cinfo.output_width % lcdWidth > lcdWidth / 4)
 8000e98:	4b67      	ldr	r3, [pc, #412]	@ (8001038 <jpeg_decode+0x28c>)
 8000e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e9c:	6a3a      	ldr	r2, [r7, #32]
 8000e9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ea2:	6a39      	ldr	r1, [r7, #32]
 8000ea4:	fb01 f202 	mul.w	r2, r1, r2
 8000ea8:	1a9a      	subs	r2, r3, r2
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d904      	bls.n	8000ebc <jpeg_decode+0x110>
			offset++;
 8000eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	if (posx < 0 || posy < 0) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db02      	blt.n	8000ec8 <jpeg_decode+0x11c>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	da1d      	bge.n	8000f04 <jpeg_decode+0x158>
		posx = (lcdWidth - (cinfo.output_width * (offset - 1) / offset)) / 2;
 8000ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8001038 <jpeg_decode+0x28c>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ecc:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000ed0:	3a01      	subs	r2, #1
 8000ed2:	fb03 f202 	mul.w	r2, r3, r2
 8000ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	6a3a      	ldr	r2, [r7, #32]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	607b      	str	r3, [r7, #4]
		posy = (lcdHeight - (cinfo.output_height * (offset - 1) / offset)) / 2;
 8000ee6:	4b54      	ldr	r3, [pc, #336]	@ (8001038 <jpeg_decode+0x28c>)
 8000ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000eea:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	fb03 f202 	mul.w	r2, r3, r2
 8000ef4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	085b      	lsrs	r3, r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
	}
	*iw = cinfo.image_width;
 8000f04:	4b4c      	ldr	r3, [pc, #304]	@ (8001038 <jpeg_decode+0x28c>)
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f0a:	601a      	str	r2, [r3, #0]
	*ih = cinfo.image_height;
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001038 <jpeg_decode+0x28c>)
 8000f0e:	6a1a      	ldr	r2, [r3, #32]
 8000f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f12:	601a      	str	r2, [r3, #0]

	//ILI9341_FillScreen(ILI9341_BLACK);

	if (posx > 0 && cinfo.output_width / offset < lcdWidth) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
		/*ILI9341_FillRectangle(posx - 1, posy - 1,
				cinfo.output_width / offset + 2,
				cinfo.output_height / offset + 2, ILI9341_WHITE);*/
	}

	while (cinfo.output_scanline < cinfo.output_height
 8000f18:	e073      	b.n	8001002 <jpeg_decode+0x256>
			&& line_counter < lcdHeight - posy) {
		(void) jpeg_read_scanlines(&cinfo, buffer, 1);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	4845      	ldr	r0, [pc, #276]	@ (8001038 <jpeg_decode+0x28c>)
 8000f24:	f005 f9b7 	bl	8006296 <jpeg_read_scanlines>
		RGB_matrix = (RGB_typedef*) buffer[0];
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4a44      	ldr	r2, [pc, #272]	@ (800103c <jpeg_decode+0x290>)
 8000f2c:	6013      	str	r3, [r2, #0]
		for (i = 0, xc = 0; i < cinfo.output_width && xc < (lcdWidth - posx);
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f36:	e03b      	b.n	8000fb0 <jpeg_decode+0x204>
				i += offset, xc++) {
			RGB16PixelColor = (uint16_t) (((RGB_matrix[i].R & 0x00F8) >> 3)
 8000f38:	4b40      	ldr	r3, [pc, #256]	@ (800103c <jpeg_decode+0x290>)
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	b2db      	uxtb	r3, r3
					| ((RGB_matrix[i].G & 0x00FC) << 3)
 8000f4c:	b219      	sxth	r1, r3
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <jpeg_decode+0x290>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	4403      	add	r3, r0
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	b219      	sxth	r1, r3
					| ((RGB_matrix[i].B & 0x00F8) << 8));
 8000f6c:	4b33      	ldr	r3, [pc, #204]	@ (800103c <jpeg_decode+0x290>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	4403      	add	r3, r0
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f84:	f023 0307 	bic.w	r3, r3, #7
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	b21b      	sxth	r3, r3
			RGB16PixelColor = (uint16_t) (((RGB_matrix[i].R & 0x00F8) >> 3)
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <jpeg_decode+0x294>)
 8000f92:	801a      	strh	r2, [r3, #0]
			//ILI9341_DrawPixel(xc + posx, line_counter + posy, RGB16PixelColor);

			/**debug_line**/
			dbg_pixel_color = RGB_matrix->R;
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <jpeg_decode+0x290>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <jpeg_decode+0x298>)
 8000f9e:	801a      	strh	r2, [r3, #0]
				i += offset, xc++) {
 8000fa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fa6:	4413      	add	r3, r2
 8000fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fac:	3301      	adds	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (i = 0, xc = 0; i < cinfo.output_width && xc < (lcdWidth - posx);
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <jpeg_decode+0x28c>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d205      	bcs.n	8000fc6 <jpeg_decode+0x21a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a3a      	ldr	r2, [r7, #32]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3b8      	bcc.n	8000f38 <jpeg_decode+0x18c>
			/**debug_line**/

		}
		for (i = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fca:	e009      	b.n	8000fe0 <jpeg_decode+0x234>
				i < offset - 1 && cinfo.output_scanline < cinfo.output_height;
				i++)
			(void) jpeg_read_scanlines(&cinfo, buffer, 1);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4818      	ldr	r0, [pc, #96]	@ (8001038 <jpeg_decode+0x28c>)
 8000fd6:	f005 f95e 	bl	8006296 <jpeg_read_scanlines>
				i++)
 8000fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fdc:	3301      	adds	r3, #1
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
				i < offset - 1 && cinfo.output_scanline < cinfo.output_height;
 8000fe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d206      	bcs.n	8000ffc <jpeg_decode+0x250>
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <jpeg_decode+0x28c>)
 8000ff0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000ff4:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <jpeg_decode+0x28c>)
 8000ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3e7      	bcc.n	8000fcc <jpeg_decode+0x220>

		line_counter++;
 8000ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffe:	3301      	adds	r3, #1
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
	while (cinfo.output_scanline < cinfo.output_height
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <jpeg_decode+0x28c>)
 8001004:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <jpeg_decode+0x28c>)
 800100a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
			&& line_counter < lcdHeight - posy) {
 800100c:	429a      	cmp	r2, r3
 800100e:	d206      	bcs.n	800101e <jpeg_decode+0x272>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001018:	429a      	cmp	r2, r3
 800101a:	f4ff af7e 	bcc.w	8000f1a <jpeg_decode+0x16e>

	}

	jpeg_finish_decompress(&cinfo);
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <jpeg_decode+0x28c>)
 8001020:	f004 ffee 	bl	8006000 <jpeg_finish_decompress>

	jpeg_destroy_decompress(&cinfo);
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <jpeg_decode+0x28c>)
 8001026:	f004 fe14 	bl	8005c52 <jpeg_destroy_decompress>

	return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3738      	adds	r7, #56	@ 0x38
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000280 	.word	0x20000280
 8001038:	20000098 	.word	0x20000098
 800103c:	20000304 	.word	0x20000304
 8001040:	20000308 	.word	0x20000308
 8001044:	20000370 	.word	0x20000370

08001048 <jpeg_screen_view>:

void jpeg_screen_view(char *fn, int px, int py, UINT *iw, UINT *ih) {
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	f2ad 4d7c 	subw	sp, sp, #1148	@ 0x47c
 800104e:	af02      	add	r7, sp, #8
 8001050:	f507 648e 	add.w	r4, r7, #1136	@ 0x470
 8001054:	f2a4 4464 	subw	r4, r4, #1124	@ 0x464
 8001058:	6020      	str	r0, [r4, #0]
 800105a:	f507 608e 	add.w	r0, r7, #1136	@ 0x470
 800105e:	f5a0 608d 	sub.w	r0, r0, #1128	@ 0x468
 8001062:	6001      	str	r1, [r0, #0]
 8001064:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8001068:	f2a1 416c 	subw	r1, r1, #1132	@ 0x46c
 800106c:	600a      	str	r2, [r1, #0]
 800106e:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 8001072:	f5a2 628e 	sub.w	r2, r2, #1136	@ 0x470
 8001076:	6013      	str	r3, [r2, #0]

//  uint32_t oldBaudRate;

	//char sf[256];

	rowBuff = JMALLOC(2048);
 8001078:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800107c:	f020 fe8a 	bl	8021d94 <malloc>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <jpeg_screen_view+0xd8>)
 8001086:	601a      	str	r2, [r3, #0]

//  sprintf(sf, "%s%s", path, fn);
	if (f_mount(&fs, "", 0) != FR_OK) {
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2200      	movs	r2, #0
 800108e:	4925      	ldr	r1, [pc, #148]	@ (8001124 <jpeg_screen_view+0xdc>)
 8001090:	4618      	mov	r0, r3
 8001092:	f004 f8a5 	bl	80051e0 <f_mount>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <jpeg_screen_view+0x60>
		JFREE(rowBuff);
 800109c:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <jpeg_screen_view+0xd8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f020 fe7f 	bl	8021da4 <free>
 80010a6:	e037      	b.n	8001118 <jpeg_screen_view+0xd0>
		return;
	}
	if (f_open(&file, fn, FA_READ) == FR_OK) {
 80010a8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80010ac:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 80010b0:	f507 7010 	add.w	r0, r7, #576	@ 0x240
 80010b4:	2201      	movs	r2, #1
 80010b6:	6819      	ldr	r1, [r3, #0]
 80010b8:	f004 f8d8 	bl	800526c <f_open>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11e      	bne.n	8001100 <jpeg_screen_view+0xb8>
		jpeg_decode(&file, rowBuff, px, py, iw, ih);
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <jpeg_screen_view+0xd8>)
 80010c4:	681c      	ldr	r4, [r3, #0]
 80010c6:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80010ca:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80010ce:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 80010d2:	f5a2 628d 	sub.w	r2, r2, #1128	@ 0x468
 80010d6:	f507 7010 	add.w	r0, r7, #576	@ 0x240
 80010da:	f8d7 1480 	ldr.w	r1, [r7, #1152]	@ 0x480
 80010de:	9101      	str	r1, [sp, #4]
 80010e0:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 80010e4:	f5a1 618e 	sub.w	r1, r1, #1136	@ 0x470
 80010e8:	6809      	ldr	r1, [r1, #0]
 80010ea:	9100      	str	r1, [sp, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	4621      	mov	r1, r4
 80010f2:	f7ff fe5b 	bl	8000dac <jpeg_decode>
		f_close(&file);
 80010f6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fc2d 	bl	800595a <f_close>
	} else {
//	  sprintf(sf, "%s\nFile open Error!!", sf);
		//ILI9341_WriteString(0, 0, "File open Error", Font_7x10, ILI9341_RED,
		//		ILI9341_WHITE);
	}
	f_mount(&fs, "", 0);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	4907      	ldr	r1, [pc, #28]	@ (8001124 <jpeg_screen_view+0xdc>)
 8001108:	4618      	mov	r0, r3
 800110a:	f004 f869 	bl	80051e0 <f_mount>
	JFREE(rowBuff);
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <jpeg_screen_view+0xd8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f020 fe46 	bl	8021da4 <free>
//  HAL_SPI_DeInit(&hspi2);
//	hspi2.Init.BaudRatePrescaler = oldBaudRate;
//	HAL_SPI_Init(&hspi2);

}
 8001118:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	2000030c 	.word	0x2000030c
 8001124:	08022710 	.word	0x08022710

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112e:	f000 fa2d 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001132:	f000 f81d 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001136:	f000 f8af 	bl	8001298 <MX_GPIO_Init>
  MX_SPI2_Init();
 800113a:	f000 f877 	bl	800122c <MX_SPI2_Init>
  MX_FATFS_Init();
 800113e:	f001 fdb5 	bl	8002cac <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001142:	f002 faf5 	bl	8003730 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(3000); //a short delay is important to let the SD card settle
 8001146:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800114a:	f000 fa91 	bl	8001670 <HAL_Delay>
	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);*/
	jpeg_screen_view("01.jpg", 0, 0, &iw, &ih);
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <main+0x3c>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <main+0x40>)
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <main+0x44>)
 800115a:	f7ff ff75 	bl	8001048 <jpeg_screen_view>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <main+0x36>
 8001162:	bf00      	nop
 8001164:	2000036c 	.word	0x2000036c
 8001168:	20000368 	.word	0x20000368
 800116c:	08022714 	.word	0x08022714

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	@ 0x50
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	@ 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f020 fee6 	bl	8021f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <SystemClock_Config+0xb4>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <SystemClock_Config+0xb4>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <SystemClock_Config+0xb4>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <SystemClock_Config+0xb8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001228 <SystemClock_Config+0xb8>)
 80011ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <SystemClock_Config+0xb8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d4:	2310      	movs	r3, #16
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fced 	bl	8001bc0 <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011ec:	f000 f896 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f000 ff50 	bl	80020b0 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001216:	f000 f881 	bl	800131c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	@ 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001232:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <MX_SPI2_Init+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001238:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_SPI2_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001260:	2228      	movs	r2, #40	@ 0x28
 8001262:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_SPI2_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_SPI2_Init+0x64>)
 8001278:	220a      	movs	r2, #10
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_SPI2_Init+0x64>)
 800127e:	f001 f8c3 	bl	8002408 <HAL_SPI_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001288:	f000 f848 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000310 	.word	0x20000310
 8001294:	40003800 	.word	0x40003800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <MX_GPIO_Init+0x7c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <MX_GPIO_Init+0x7c>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_GPIO_Init+0x7c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_GPIO_Init+0x7c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <MX_GPIO_Init+0x7c>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_GPIO_Init+0x7c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2120      	movs	r1, #32
 80012ea:	480b      	ldr	r0, [pc, #44]	@ (8001318 <MX_GPIO_Init+0x80>)
 80012ec:	f000 fc4e 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80012f0:	2320      	movs	r3, #32
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_GPIO_Init+0x80>)
 8001308:	f000 fabc 	bl	8001884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40020800 	.word	0x40020800

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <HAL_MspInit+0x4c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_MspInit+0x4c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <HAL_SPI_MspInit+0xc0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d14a      	bne.n	8001430 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b27      	ldr	r3, [pc, #156]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a26      	ldr	r2, [pc, #152]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b24      	ldr	r3, [pc, #144]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_SPI_MspInit+0xc4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013fe:	2305      	movs	r3, #5
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	@ (8001440 <HAL_SPI_MspInit+0xc8>)
 800140a:	f000 fa3b 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800140e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001420:	2305      	movs	r3, #5
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	@ (8001444 <HAL_SPI_MspInit+0xcc>)
 800142c:	f000 fa2a 	bl	8001884 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	@ 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40003800 	.word	0x40003800
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800
 8001444:	40020400 	.word	0x40020400

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149e:	f000 f8c7 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f020 fd52 	bl	8021f80 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20020000 	.word	0x20020000
 8001508:	00000400 	.word	0x00000400
 800150c:	20000374 	.word	0x20000374
 8001510:	20000510 	.word	0x20000510

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001570 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800153c:	f7ff ffea 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f020 fd11 	bl	8021f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff fddd 	bl	8001128 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800157c:	08024940 	.word	0x08024940
  ldr r2, =_sbss
 8001580:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001584:	20000510 	.word	0x20000510

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <HAL_Init+0x40>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800159a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_Init+0x40>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_Init+0x40>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f931 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff feb2 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f93b 	bl	800186a <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f911 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	@ (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	20000378 	.word	0x20000378

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000378 	.word	0x20000378

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5c 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e159      	b.n	8001b54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8148 	bne.w	8001b4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a2 	beq.w	8001b4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b57      	ldr	r3, [pc, #348]	@ (8001b6c <HAL_GPIO_Init+0x2e8>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a56      	ldr	r2, [pc, #344]	@ (8001b6c <HAL_GPIO_Init+0x2e8>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b54      	ldr	r3, [pc, #336]	@ (8001b6c <HAL_GPIO_Init+0x2e8>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a52      	ldr	r2, [pc, #328]	@ (8001b70 <HAL_GPIO_Init+0x2ec>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a49      	ldr	r2, [pc, #292]	@ (8001b74 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0x202>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a48      	ldr	r2, [pc, #288]	@ (8001b78 <HAL_GPIO_Init+0x2f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x1fe>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a47      	ldr	r2, [pc, #284]	@ (8001b7c <HAL_GPIO_Init+0x2f8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x1fa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a46      	ldr	r2, [pc, #280]	@ (8001b80 <HAL_GPIO_Init+0x2fc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x1f6>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a45      	ldr	r2, [pc, #276]	@ (8001b84 <HAL_GPIO_Init+0x300>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x1f2>
 8001a72:	2304      	movs	r3, #4
 8001a74:	e008      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e004      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_GPIO_Init+0x204>
 8001a86:	2300      	movs	r3, #0
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f002 0203 	and.w	r2, r2, #3
 8001a8e:	0092      	lsls	r2, r2, #2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a98:	4935      	ldr	r1, [pc, #212]	@ (8001b70 <HAL_GPIO_Init+0x2ec>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa6:	4b38      	ldr	r3, [pc, #224]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aca:	4a2f      	ldr	r2, [pc, #188]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af4:	4a24      	ldr	r2, [pc, #144]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001afa:	4b23      	ldr	r3, [pc, #140]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b24:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f67f aea2 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40013c00 	.word	0x40013c00

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e267      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d075      	beq.n	8001cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bde:	4b88      	ldr	r3, [pc, #544]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d00c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bea:	4b85      	ldr	r3, [pc, #532]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d112      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b82      	ldr	r3, [pc, #520]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	4b7e      	ldr	r3, [pc, #504]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d157      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e242      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x74>
 8001c26:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b70      	ldr	r3, [pc, #448]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6f      	ldr	r2, [pc, #444]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c58:	4b69      	ldr	r3, [pc, #420]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a68      	ldr	r2, [pc, #416]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a65      	ldr	r2, [pc, #404]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fcee 	bl	8001658 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fcea 	bl	8001658 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e207      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5b      	ldr	r3, [pc, #364]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fcda 	bl	8001658 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fcd6 	bl	8001658 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1f3      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b51      	ldr	r3, [pc, #324]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xe8>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce2:	4b47      	ldr	r3, [pc, #284]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b44      	ldr	r3, [pc, #272]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c7      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4937      	ldr	r1, [pc, #220]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b34      	ldr	r3, [pc, #208]	@ (8001e04 <HAL_RCC_OscConfig+0x244>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff fc8f 	bl	8001658 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fc8b 	bl	8001658 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a8      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b28      	ldr	r3, [pc, #160]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4925      	ldr	r1, [pc, #148]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <HAL_RCC_OscConfig+0x244>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fc6e 	bl	8001658 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fc6a 	bl	8001658 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e187      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d036      	beq.n	8001e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_RCC_OscConfig+0x248>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fc4e 	bl	8001658 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fc4a 	bl	8001658 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e167      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x200>
 8001dde:	e01b      	b.n	8001e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_RCC_OscConfig+0x248>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fc37 	bl	8001658 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	e00e      	b.n	8001e0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff fc33 	bl	8001658 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d907      	bls.n	8001e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e150      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	42470000 	.word	0x42470000
 8001e08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	4b88      	ldr	r3, [pc, #544]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1ea      	bne.n	8001dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8097 	beq.w	8001f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b81      	ldr	r3, [pc, #516]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e46:	4b7a      	ldr	r3, [pc, #488]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e56:	4b77      	ldr	r3, [pc, #476]	@ (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e62:	4b74      	ldr	r3, [pc, #464]	@ (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a73      	ldr	r2, [pc, #460]	@ (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fbf3 	bl	8001658 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e76:	f7ff fbef 	bl	8001658 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e10c      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	4b6a      	ldr	r3, [pc, #424]	@ (8002034 <HAL_RCC_OscConfig+0x474>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2ea>
 8001e9c:	4b64      	ldr	r3, [pc, #400]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea0:	4a63      	ldr	r2, [pc, #396]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea8:	e01c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x324>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x30c>
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb6:	4a5e      	ldr	r2, [pc, #376]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec2:	4a5b      	ldr	r2, [pc, #364]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x324>
 8001ecc:	4b58      	ldr	r3, [pc, #352]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed0:	4a57      	ldr	r2, [pc, #348]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed8:	4b55      	ldr	r3, [pc, #340]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001edc:	4a54      	ldr	r2, [pc, #336]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 0304 	bic.w	r3, r3, #4
 8001ee2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d015      	beq.n	8001f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eec:	f7ff fbb4 	bl	8001658 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fbb0 	bl	8001658 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0cb      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0a:	4b49      	ldr	r3, [pc, #292]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0ee      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x334>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fb9e 	bl	8001658 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7ff fb9a 	bl	8001658 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0b5      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f36:	4b3e      	ldr	r3, [pc, #248]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ee      	bne.n	8001f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f48:	4b39      	ldr	r3, [pc, #228]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	4a38      	ldr	r2, [pc, #224]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a1 	beq.w	80020a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f5e:	4b34      	ldr	r3, [pc, #208]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d05c      	beq.n	8002024 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d141      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <HAL_RCC_OscConfig+0x478>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fb6e 	bl	8001658 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff fb6a 	bl	8001658 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e087      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	491b      	ldr	r1, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <HAL_RCC_OscConfig+0x478>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff fb43 	bl	8001658 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fb3f 	bl	8001658 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e05c      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x416>
 8001ff4:	e054      	b.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <HAL_RCC_OscConfig+0x478>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fb2c 	bl	8001658 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff fb28 	bl	8001658 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e045      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_RCC_OscConfig+0x470>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x444>
 8002022:	e03d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e038      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000
 8002038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4ec>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d028      	beq.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d121      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11a      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0cc      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b68      	ldr	r3, [pc, #416]	@ (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d90c      	bls.n	80020ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b65      	ldr	r3, [pc, #404]	@ (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	@ (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a58      	ldr	r2, [pc, #352]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800210e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a52      	ldr	r2, [pc, #328]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d044      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d119      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d003      	beq.n	800216e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	2b03      	cmp	r3, #3
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b3f      	ldr	r3, [pc, #252]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4b3b      	ldr	r3, [pc, #236]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e067      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218e:	4b37      	ldr	r3, [pc, #220]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4934      	ldr	r1, [pc, #208]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff fa5a 	bl	8001658 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	e00a      	b.n	80021be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	f7ff fa56 	bl	8001658 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e04f      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 020c 	and.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1eb      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d20c      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	@ (8002270 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f9ba 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023c00 	.word	0x40023c00
 800226c:	40023800 	.word	0x40023800
 8002270:	08023a70 	.word	0x08023a70
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002280:	b090      	sub	sp, #64	@ 0x40
 8002282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002294:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b08      	cmp	r3, #8
 800229e:	d00d      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x40>
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	f200 80a1 	bhi.w	80023e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ae:	e09b      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b53      	ldr	r3, [pc, #332]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x184>)
 80022b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022b4:	e09b      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b6:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x188>)
 80022b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ba:	e098      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022bc:	4b4f      	ldr	r3, [pc, #316]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	4b4d      	ldr	r3, [pc, #308]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d2:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	2200      	movs	r2, #0
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022e4:	2100      	movs	r1, #0
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e8:	fb03 f201 	mul.w	r2, r3, r1
 80022ec:	2300      	movs	r3, #0
 80022ee:	fb00 f303 	mul.w	r3, r0, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	4a43      	ldr	r2, [pc, #268]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f6:	fba0 1202 	umull	r1, r2, r0, r2
 80022fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022fc:	460a      	mov	r2, r1
 80022fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002302:	4413      	add	r3, r2
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002308:	2200      	movs	r2, #0
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	61fa      	str	r2, [r7, #28]
 800230e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002312:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002316:	f7fe fbd1 	bl	8000abc <__aeabi_uldivmod>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4613      	mov	r3, r2
 8002320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002322:	e053      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002324:	4b35      	ldr	r3, [pc, #212]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	2200      	movs	r2, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	617a      	str	r2, [r7, #20]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002336:	f04f 0b00 	mov.w	fp, #0
 800233a:	4652      	mov	r2, sl
 800233c:	465b      	mov	r3, fp
 800233e:	f04f 0000 	mov.w	r0, #0
 8002342:	f04f 0100 	mov.w	r1, #0
 8002346:	0159      	lsls	r1, r3, #5
 8002348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800234c:	0150      	lsls	r0, r2, #5
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	ebb2 080a 	subs.w	r8, r2, sl
 8002356:	eb63 090b 	sbc.w	r9, r3, fp
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002366:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800236a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800236e:	ebb2 0408 	subs.w	r4, r2, r8
 8002372:	eb63 0509 	sbc.w	r5, r3, r9
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	00eb      	lsls	r3, r5, #3
 8002380:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002384:	00e2      	lsls	r2, r4, #3
 8002386:	4614      	mov	r4, r2
 8002388:	461d      	mov	r5, r3
 800238a:	eb14 030a 	adds.w	r3, r4, sl
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	eb45 030b 	adc.w	r3, r5, fp
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023a2:	4629      	mov	r1, r5
 80023a4:	028b      	lsls	r3, r1, #10
 80023a6:	4621      	mov	r1, r4
 80023a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ac:	4621      	mov	r1, r4
 80023ae:	028a      	lsls	r2, r1, #10
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b6:	2200      	movs	r2, #0
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023c0:	f7fe fb7c 	bl	8000abc <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4613      	mov	r3, r2
 80023ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x180>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	3301      	adds	r3, #1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023e6:	e002      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x184>)
 80023ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3740      	adds	r7, #64	@ 0x40
 80023f4:	46bd      	mov	sp, r7
 80023f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	00f42400 	.word	0x00f42400
 8002404:	017d7840 	.word	0x017d7840

08002408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07b      	b.n	8002512 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800242a:	d009      	beq.n	8002440 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
 8002432:	e005      	b.n	8002440 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe ff8c 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002476:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c4:	ea42 0103 	orr.w	r1, r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0104 	and.w	r1, r3, #4
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	f003 0210 	and.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002500:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b088      	sub	sp, #32
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800252a:	f7ff f895 	bl	8001658 <HAL_GetTick>
 800252e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d001      	beq.n	8002544 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
 8002542:	e12a      	b.n	800279a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_SPI_Transmit+0x36>
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e122      	b.n	800279a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_SPI_Transmit+0x48>
 800255e:	2302      	movs	r3, #2
 8002560:	e11b      	b.n	800279a <HAL_SPI_Transmit+0x280>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025b0:	d10f      	bne.n	80025d2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025dc:	2b40      	cmp	r3, #64	@ 0x40
 80025de:	d007      	beq.n	80025f0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025f8:	d152      	bne.n	80026a0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_Transmit+0xee>
 8002602:	8b7b      	ldrh	r3, [r7, #26]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d145      	bne.n	8002694 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	1c9a      	adds	r2, r3, #2
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800262c:	e032      	b.n	8002694 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d112      	bne.n	8002662 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	881a      	ldrh	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	1c9a      	adds	r2, r3, #2
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002660:	e018      	b.n	8002694 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002662:	f7fe fff9 	bl	8001658 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d803      	bhi.n	800267a <HAL_SPI_Transmit+0x160>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d102      	bne.n	8002680 <HAL_SPI_Transmit+0x166>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e082      	b.n	800279a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1c7      	bne.n	800262e <HAL_SPI_Transmit+0x114>
 800269e:	e053      	b.n	8002748 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_SPI_Transmit+0x194>
 80026a8:	8b7b      	ldrh	r3, [r7, #26]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d147      	bne.n	800273e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	330c      	adds	r3, #12
 80026b8:	7812      	ldrb	r2, [r2, #0]
 80026ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026d4:	e033      	b.n	800273e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d113      	bne.n	800270c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	86da      	strh	r2, [r3, #54]	@ 0x36
 800270a:	e018      	b.n	800273e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800270c:	f7fe ffa4 	bl	8001658 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d803      	bhi.n	8002724 <HAL_SPI_Transmit+0x20a>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d102      	bne.n	800272a <HAL_SPI_Transmit+0x210>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e02d      	b.n	800279a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1c6      	bne.n	80026d6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	6839      	ldr	r1, [r7, #0]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fa59 	bl	8002c04 <SPI_EndRxTxTransaction>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002798:	2300      	movs	r3, #0
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08a      	sub	sp, #40	@ 0x28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027b0:	2301      	movs	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027b4:	f7fe ff50 	bl	8001658 <HAL_GetTick>
 80027b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027cc:	7ffb      	ldrb	r3, [r7, #31]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d00c      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x4a>
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027d8:	d106      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x46>
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d001      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e17f      	b.n	8002aec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_SPI_TransmitReceive+0x5c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_SPI_TransmitReceive+0x5c>
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e174      	b.n	8002aec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x6e>
 800280c:	2302      	movs	r3, #2
 800280e:	e16d      	b.n	8002aec <HAL_SPI_TransmitReceive+0x34a>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b04      	cmp	r3, #4
 8002822:	d003      	beq.n	800282c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2205      	movs	r2, #5
 8002828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	887a      	ldrh	r2, [r7, #2]
 8002842:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	887a      	ldrh	r2, [r7, #2]
 800284e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286c:	2b40      	cmp	r3, #64	@ 0x40
 800286e:	d007      	beq.n	8002880 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800287e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002888:	d17e      	bne.n	8002988 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_TransmitReceive+0xf6>
 8002892:	8afb      	ldrh	r3, [r7, #22]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d16c      	bne.n	8002972 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028bc:	e059      	b.n	8002972 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d11b      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x162>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x162>
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d113      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	881a      	ldrh	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	1c9a      	adds	r2, r3, #2
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d119      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x1a4>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002926:	b292      	uxth	r2, r2
 8002928:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002942:	2301      	movs	r3, #1
 8002944:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002946:	f7fe fe87 	bl	8001658 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002952:	429a      	cmp	r2, r3
 8002954:	d80d      	bhi.n	8002972 <HAL_SPI_TransmitReceive+0x1d0>
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d009      	beq.n	8002972 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0bc      	b.n	8002aec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1a0      	bne.n	80028be <HAL_SPI_TransmitReceive+0x11c>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d19b      	bne.n	80028be <HAL_SPI_TransmitReceive+0x11c>
 8002986:	e082      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_SPI_TransmitReceive+0x1f4>
 8002990:	8afb      	ldrh	r3, [r7, #22]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d171      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029bc:	e05d      	b.n	8002a7a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d11c      	bne.n	8002a06 <HAL_SPI_TransmitReceive+0x264>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d017      	beq.n	8002a06 <HAL_SPI_TransmitReceive+0x264>
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d114      	bne.n	8002a06 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	330c      	adds	r3, #12
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d119      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x2a6>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d014      	beq.n	8002a48 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a44:	2301      	movs	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a48:	f7fe fe06 	bl	8001658 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d803      	bhi.n	8002a60 <HAL_SPI_TransmitReceive+0x2be>
 8002a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5e:	d102      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x2c4>
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e038      	b.n	8002aec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d19c      	bne.n	80029be <HAL_SPI_TransmitReceive+0x21c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d197      	bne.n	80029be <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a3a      	ldr	r2, [r7, #32]
 8002a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f8b6 	bl	8002c04 <SPI_EndRxTxTransaction>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e01d      	b.n	8002aec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3728      	adds	r7, #40	@ 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b04:	f7fe fda8 	bl	8001658 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b14:	f7fe fda0 	bl	8001658 <HAL_GetTick>
 8002b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b1a:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	015b      	lsls	r3, r3, #5
 8002b20:	0d1b      	lsrs	r3, r3, #20
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b2a:	e054      	b.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b32:	d050      	beq.n	8002bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b34:	f7fe fd90 	bl	8001658 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d902      	bls.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d13d      	bne.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b62:	d111      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6c:	d004      	beq.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b76:	d107      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b90:	d10f      	bne.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e017      	b.n	8002bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d19b      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000000 	.word	0x20000000

08002c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2201      	movs	r2, #1
 8002c18:	2102      	movs	r1, #2
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff ff6a 	bl	8002af4 <SPI_WaitFlagStateUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2a:	f043 0220 	orr.w	r2, r3, #32
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e032      	b.n	8002c9c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <SPI_EndRxTxTransaction+0xa0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca8 <SPI_EndRxTxTransaction+0xa4>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	0d5b      	lsrs	r3, r3, #21
 8002c42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c54:	d112      	bne.n	8002c7c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2180      	movs	r1, #128	@ 0x80
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff ff47 	bl	8002af4 <SPI_WaitFlagStateUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d016      	beq.n	8002c9a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e00f      	b.n	8002c9c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	2b80      	cmp	r3, #128	@ 0x80
 8002c94:	d0f2      	beq.n	8002c7c <SPI_EndRxTxTransaction+0x78>
 8002c96:	e000      	b.n	8002c9a <SPI_EndRxTxTransaction+0x96>
        break;
 8002c98:	bf00      	nop
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	165e9f81 	.word	0x165e9f81

08002cac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002cb0:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <MX_FATFS_Init+0x18>)
 8002cb2:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <MX_FATFS_Init+0x1c>)
 8002cb4:	f002 fec8 	bl	8005a48 <FATFS_LinkDriver>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <MX_FATFS_Init+0x20>)
 8002cbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000380 	.word	0x20000380
 8002cc8:	2000000c 	.word	0x2000000c
 8002ccc:	2000037c 	.word	0x2000037c

08002cd0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002cd4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <USER_initialize+0x24>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
    return USER_SPI_initialize(pdrv);//Stat;
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f9de 	bl	80030b4 <USER_SPI_initialize>
 8002cf8:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000009 	.word	0x20000009

08002d08 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <USER_status+0x24>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
    return USER_SPI_status(pdrv);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 faa0 	bl	8003260 <USER_SPI_status>
 8002d20:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000009 	.word	0x20000009

08002d30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8002d40:	7bf8      	ldrb	r0, [r7, #15]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	f000 faa0 	bl	800328c <USER_SPI_read>
 8002d4c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4603      	mov	r3, r0
 8002d64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8002d66:	7bf8      	ldrb	r0, [r7, #15]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68b9      	ldr	r1, [r7, #8]
 8002d6e:	f000 faf3 	bl	8003358 <USER_SPI_write>
 8002d72:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	603a      	str	r2, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8002d90:	79b9      	ldrb	r1, [r7, #6]
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fb5a 	bl	8003450 <USER_SPI_ioctl>
 8002d9c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002db0:	f7fe fc52 	bl	8001658 <HAL_GetTick>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <SPI_Timer_On+0x20>)
 8002db8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002dba:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <SPI_Timer_On+0x24>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000388 	.word	0x20000388
 8002dcc:	2000038c 	.word	0x2000038c

08002dd0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002dd4:	f7fe fc40 	bl	8001658 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <SPI_Timer_Status+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <SPI_Timer_Status+0x28>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	bf34      	ite	cc
 8002de8:	2301      	movcc	r3, #1
 8002dea:	2300      	movcs	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000388 	.word	0x20000388
 8002df8:	2000038c 	.word	0x2000038c

08002dfc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002e06:	f107 020f 	add.w	r2, r7, #15
 8002e0a:	1df9      	adds	r1, r7, #7
 8002e0c:	2332      	movs	r3, #50	@ 0x32
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	4804      	ldr	r0, [pc, #16]	@ (8002e24 <xchg_spi+0x28>)
 8002e14:	f7ff fcc5 	bl	80027a2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000310 	.word	0x20000310

08002e28 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e00a      	b.n	8002e4e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	18d4      	adds	r4, r2, r3
 8002e3e:	20ff      	movs	r0, #255	@ 0xff
 8002e40:	f7ff ffdc 	bl	8002dfc <xchg_spi>
 8002e44:	4603      	mov	r3, r0
 8002e46:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d3f0      	bcc.n	8002e38 <rcvr_spi_multi+0x10>
	}
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4803      	ldr	r0, [pc, #12]	@ (8002e84 <xmit_spi_multi+0x24>)
 8002e76:	f7ff fb50 	bl	800251a <HAL_SPI_Transmit>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000310 	.word	0x20000310

08002e88 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002e90:	f7fe fbe2 	bl	8001658 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002e9a:	20ff      	movs	r0, #255	@ 0xff
 8002e9c:	f7ff ffae 	bl	8002dfc <xchg_spi>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2bff      	cmp	r3, #255	@ 0xff
 8002ea8:	d007      	beq.n	8002eba <wait_ready+0x32>
 8002eaa:	f7fe fbd5 	bl	8001658 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d8ef      	bhi.n	8002e9a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2bff      	cmp	r3, #255	@ 0xff
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	4803      	ldr	r0, [pc, #12]	@ (8002ee8 <despiselect+0x18>)
 8002eda:	f7fe fe57 	bl	8001b8c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002ede:	20ff      	movs	r0, #255	@ 0xff
 8002ee0:	f7ff ff8c 	bl	8002dfc <xchg_spi>

}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40020800 	.word	0x40020800

08002eec <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2120      	movs	r1, #32
 8002ef4:	4809      	ldr	r0, [pc, #36]	@ (8002f1c <spiselect+0x30>)
 8002ef6:	f7fe fe49 	bl	8001b8c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002efa:	20ff      	movs	r0, #255	@ 0xff
 8002efc:	f7ff ff7e 	bl	8002dfc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002f00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f04:	f7ff ffc0 	bl	8002e88 <wait_ready>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <spiselect+0x26>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e002      	b.n	8002f18 <spiselect+0x2c>

	despiselect();
 8002f12:	f7ff ffdd 	bl	8002ed0 <despiselect>
	return 0;	/* Timeout */
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40020800 	.word	0x40020800

08002f20 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002f2a:	20c8      	movs	r0, #200	@ 0xc8
 8002f2c:	f7ff ff3c 	bl	8002da8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002f30:	20ff      	movs	r0, #255	@ 0xff
 8002f32:	f7ff ff63 	bl	8002dfc <xchg_spi>
 8002f36:	4603      	mov	r3, r0
 8002f38:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2bff      	cmp	r3, #255	@ 0xff
 8002f3e:	d104      	bne.n	8002f4a <rcvr_datablock+0x2a>
 8002f40:	f7ff ff46 	bl	8002dd0 <SPI_Timer_Status>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f2      	bne.n	8002f30 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2bfe      	cmp	r3, #254	@ 0xfe
 8002f4e:	d001      	beq.n	8002f54 <rcvr_datablock+0x34>
 8002f50:	2300      	movs	r3, #0
 8002f52:	e00a      	b.n	8002f6a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002f54:	6839      	ldr	r1, [r7, #0]
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff66 	bl	8002e28 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002f5c:	20ff      	movs	r0, #255	@ 0xff
 8002f5e:	f7ff ff4d 	bl	8002dfc <xchg_spi>
 8002f62:	20ff      	movs	r0, #255	@ 0xff
 8002f64:	f7ff ff4a 	bl	8002dfc <xchg_spi>

	return 1;						/* Function succeeded */
 8002f68:	2301      	movs	r3, #1
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002f7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f82:	f7ff ff81 	bl	8002e88 <wait_ready>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <xmit_datablock+0x1e>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e01e      	b.n	8002fce <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff32 	bl	8002dfc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2bfd      	cmp	r3, #253	@ 0xfd
 8002f9c:	d016      	beq.n	8002fcc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002f9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff5c 	bl	8002e60 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002fa8:	20ff      	movs	r0, #255	@ 0xff
 8002faa:	f7ff ff27 	bl	8002dfc <xchg_spi>
 8002fae:	20ff      	movs	r0, #255	@ 0xff
 8002fb0:	f7ff ff24 	bl	8002dfc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002fb4:	20ff      	movs	r0, #255	@ 0xff
 8002fb6:	f7ff ff21 	bl	8002dfc <xchg_spi>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d001      	beq.n	8002fcc <xmit_datablock+0x5a>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <xmit_datablock+0x5c>
	}
	return 1;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	6039      	str	r1, [r7, #0]
 8002fe0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da0e      	bge.n	8003008 <send_cmd+0x32>
		cmd &= 0x7F;
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ff0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2037      	movs	r0, #55	@ 0x37
 8002ff6:	f7ff ffee 	bl	8002fd6 <send_cmd>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002ffe:	7bbb      	ldrb	r3, [r7, #14]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d901      	bls.n	8003008 <send_cmd+0x32>
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	e051      	b.n	80030ac <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d008      	beq.n	8003020 <send_cmd+0x4a>
		despiselect();
 800300e:	f7ff ff5f 	bl	8002ed0 <despiselect>
		if (!spiselect()) return 0xFF;
 8003012:	f7ff ff6b 	bl	8002eec <spiselect>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <send_cmd+0x4a>
 800301c:	23ff      	movs	r3, #255	@ 0xff
 800301e:	e045      	b.n	80030ac <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fee7 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	0e1b      	lsrs	r3, r3, #24
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fee1 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fedb 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fed5 	bl	8002dfc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fed0 	bl	8002dfc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <send_cmd+0x94>
 8003066:	2395      	movs	r3, #149	@ 0x95
 8003068:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d101      	bne.n	8003074 <send_cmd+0x9e>
 8003070:	2387      	movs	r3, #135	@ 0x87
 8003072:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fec0 	bl	8002dfc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d102      	bne.n	8003088 <send_cmd+0xb2>
 8003082:	20ff      	movs	r0, #255	@ 0xff
 8003084:	f7ff feba 	bl	8002dfc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003088:	230a      	movs	r3, #10
 800308a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800308c:	20ff      	movs	r0, #255	@ 0xff
 800308e:	f7ff feb5 	bl	8002dfc <xchg_spi>
 8003092:	4603      	mov	r3, r0
 8003094:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da05      	bge.n	80030aa <send_cmd+0xd4>
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <send_cmd+0xb6>

	return res;							/* Return received response */
 80030aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <USER_SPI_initialize+0x14>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0c2      	b.n	800324e <USER_SPI_initialize+0x19a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80030c8:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <USER_SPI_initialize+0x1a4>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <USER_SPI_initialize+0x2a>
 80030d6:	4b60      	ldr	r3, [pc, #384]	@ (8003258 <USER_SPI_initialize+0x1a4>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e0b7      	b.n	800324e <USER_SPI_initialize+0x19a>

	//FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80030de:	230a      	movs	r3, #10
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	e005      	b.n	80030f0 <USER_SPI_initialize+0x3c>
 80030e4:	20ff      	movs	r0, #255	@ 0xff
 80030e6:	f7ff fe89 	bl	8002dfc <xchg_spi>
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f6      	bne.n	80030e4 <USER_SPI_initialize+0x30>

	ty = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80030fa:	2100      	movs	r1, #0
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7ff ff6a 	bl	8002fd6 <send_cmd>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	f040 808b 	bne.w	8003220 <USER_SPI_initialize+0x16c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800310a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800310e:	f7ff fe4b 	bl	8002da8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003112:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003116:	2008      	movs	r0, #8
 8003118:	f7ff ff5d 	bl	8002fd6 <send_cmd>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d151      	bne.n	80031c6 <USER_SPI_initialize+0x112>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e00d      	b.n	8003144 <USER_SPI_initialize+0x90>
 8003128:	7bfc      	ldrb	r4, [r7, #15]
 800312a:	20ff      	movs	r0, #255	@ 0xff
 800312c:	f7ff fe66 	bl	8002dfc <xchg_spi>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	f104 0310 	add.w	r3, r4, #16
 8003138:	443b      	add	r3, r7
 800313a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	3301      	adds	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d9ee      	bls.n	8003128 <USER_SPI_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800314a:	7abb      	ldrb	r3, [r7, #10]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d167      	bne.n	8003220 <USER_SPI_initialize+0x16c>
 8003150:	7afb      	ldrb	r3, [r7, #11]
 8003152:	2baa      	cmp	r3, #170	@ 0xaa
 8003154:	d164      	bne.n	8003220 <USER_SPI_initialize+0x16c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003156:	bf00      	nop
 8003158:	f7ff fe3a 	bl	8002dd0 <SPI_Timer_Status>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <USER_SPI_initialize+0xbe>
 8003162:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003166:	20a9      	movs	r0, #169	@ 0xa9
 8003168:	f7ff ff35 	bl	8002fd6 <send_cmd>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f2      	bne.n	8003158 <USER_SPI_initialize+0xa4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003172:	f7ff fe2d 	bl	8002dd0 <SPI_Timer_Status>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d051      	beq.n	8003220 <USER_SPI_initialize+0x16c>
 800317c:	2100      	movs	r1, #0
 800317e:	203a      	movs	r0, #58	@ 0x3a
 8003180:	f7ff ff29 	bl	8002fd6 <send_cmd>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d14a      	bne.n	8003220 <USER_SPI_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	e00d      	b.n	80031ac <USER_SPI_initialize+0xf8>
 8003190:	7bfc      	ldrb	r4, [r7, #15]
 8003192:	20ff      	movs	r0, #255	@ 0xff
 8003194:	f7ff fe32 	bl	8002dfc <xchg_spi>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	f104 0310 	add.w	r3, r4, #16
 80031a0:	443b      	add	r3, r7
 80031a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d9ee      	bls.n	8003190 <USER_SPI_initialize+0xdc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80031b2:	7a3b      	ldrb	r3, [r7, #8]
 80031b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <USER_SPI_initialize+0x10c>
 80031bc:	230c      	movs	r3, #12
 80031be:	e000      	b.n	80031c2 <USER_SPI_initialize+0x10e>
 80031c0:	2304      	movs	r3, #4
 80031c2:	737b      	strb	r3, [r7, #13]
 80031c4:	e02c      	b.n	8003220 <USER_SPI_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80031c6:	2100      	movs	r1, #0
 80031c8:	20a9      	movs	r0, #169	@ 0xa9
 80031ca:	f7ff ff04 	bl	8002fd6 <send_cmd>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d804      	bhi.n	80031de <USER_SPI_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80031d4:	2302      	movs	r3, #2
 80031d6:	737b      	strb	r3, [r7, #13]
 80031d8:	23a9      	movs	r3, #169	@ 0xa9
 80031da:	73bb      	strb	r3, [r7, #14]
 80031dc:	e003      	b.n	80031e6 <USER_SPI_initialize+0x132>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80031de:	2301      	movs	r3, #1
 80031e0:	737b      	strb	r3, [r7, #13]
 80031e2:	2301      	movs	r3, #1
 80031e4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80031e6:	bf00      	nop
 80031e8:	f7ff fdf2 	bl	8002dd0 <SPI_Timer_Status>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <USER_SPI_initialize+0x14e>
 80031f2:	7bbb      	ldrb	r3, [r7, #14]
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff feed 	bl	8002fd6 <send_cmd>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f2      	bne.n	80031e8 <USER_SPI_initialize+0x134>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003202:	f7ff fde5 	bl	8002dd0 <SPI_Timer_Status>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <USER_SPI_initialize+0x168>
 800320c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003210:	2010      	movs	r0, #16
 8003212:	f7ff fee0 	bl	8002fd6 <send_cmd>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <USER_SPI_initialize+0x16c>
				ty = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003220:	4a0e      	ldr	r2, [pc, #56]	@ (800325c <USER_SPI_initialize+0x1a8>)
 8003222:	7b7b      	ldrb	r3, [r7, #13]
 8003224:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003226:	f7ff fe53 	bl	8002ed0 <despiselect>

	if (ty) {			/* OK */
 800322a:	7b7b      	ldrb	r3, [r7, #13]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <USER_SPI_initialize+0x18e>
		//FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003230:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <USER_SPI_initialize+0x1a4>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <USER_SPI_initialize+0x1a4>)
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e002      	b.n	8003248 <USER_SPI_initialize+0x194>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003242:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <USER_SPI_initialize+0x1a4>)
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <USER_SPI_initialize+0x1a4>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop
 8003258:	20000020 	.word	0x20000020
 800325c:	20000384 	.word	0x20000384

08003260 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <USER_SPI_status+0x14>
 8003270:	2301      	movs	r3, #1
 8003272:	e002      	b.n	800327a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <USER_SPI_status+0x28>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000020 	.word	0x20000020

0800328c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <USER_SPI_read+0x1c>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <USER_SPI_read+0x20>
 80032a8:	2304      	movs	r3, #4
 80032aa:	e04d      	b.n	8003348 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <USER_SPI_read+0xc4>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <USER_SPI_read+0x32>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e044      	b.n	8003348 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80032be:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <USER_SPI_read+0xc8>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <USER_SPI_read+0x44>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	025b      	lsls	r3, r3, #9
 80032ce:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d111      	bne.n	80032fa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	2011      	movs	r0, #17
 80032da:	f7ff fe7c 	bl	8002fd6 <send_cmd>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d129      	bne.n	8003338 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80032e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032e8:	68b8      	ldr	r0, [r7, #8]
 80032ea:	f7ff fe19 	bl	8002f20 <rcvr_datablock>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <USER_SPI_read+0xac>
			count = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	e01e      	b.n	8003338 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	2012      	movs	r0, #18
 80032fe:	f7ff fe6a 	bl	8002fd6 <send_cmd>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d117      	bne.n	8003338 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800330c:	68b8      	ldr	r0, [r7, #8]
 800330e:	f7ff fe07 	bl	8002f20 <rcvr_datablock>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <USER_SPI_read+0xa2>
				buff += 512;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800331e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	3b01      	subs	r3, #1
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ed      	bne.n	8003308 <USER_SPI_read+0x7c>
 800332c:	e000      	b.n	8003330 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800332e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003330:	2100      	movs	r1, #0
 8003332:	200c      	movs	r0, #12
 8003334:	f7ff fe4f 	bl	8002fd6 <send_cmd>
		}
	}
	despiselect();
 8003338:	f7ff fdca 	bl	8002ed0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000020 	.word	0x20000020
 8003354:	20000384 	.word	0x20000384

08003358 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <USER_SPI_write+0x1c>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <USER_SPI_write+0x20>
 8003374:	2304      	movs	r3, #4
 8003376:	e063      	b.n	8003440 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003378:	4b33      	ldr	r3, [pc, #204]	@ (8003448 <USER_SPI_write+0xf0>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <USER_SPI_write+0x32>
 8003386:	2303      	movs	r3, #3
 8003388:	e05a      	b.n	8003440 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <USER_SPI_write+0xf0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <USER_SPI_write+0x44>
 8003398:	2302      	movs	r3, #2
 800339a:	e051      	b.n	8003440 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800339c:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <USER_SPI_write+0xf4>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <USER_SPI_write+0x56>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d110      	bne.n	80033d6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	2018      	movs	r0, #24
 80033b8:	f7ff fe0d 	bl	8002fd6 <send_cmd>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d136      	bne.n	8003430 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80033c2:	21fe      	movs	r1, #254	@ 0xfe
 80033c4:	68b8      	ldr	r0, [r7, #8]
 80033c6:	f7ff fdd4 	bl	8002f72 <xmit_datablock>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02f      	beq.n	8003430 <USER_SPI_write+0xd8>
			count = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	e02c      	b.n	8003430 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80033d6:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <USER_SPI_write+0xf4>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	f003 0306 	and.w	r3, r3, #6
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <USER_SPI_write+0x92>
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	2097      	movs	r0, #151	@ 0x97
 80033e6:	f7ff fdf6 	bl	8002fd6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	2019      	movs	r0, #25
 80033ee:	f7ff fdf2 	bl	8002fd6 <send_cmd>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11b      	bne.n	8003430 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80033f8:	21fc      	movs	r1, #252	@ 0xfc
 80033fa:	68b8      	ldr	r0, [r7, #8]
 80033fc:	f7ff fdb9 	bl	8002f72 <xmit_datablock>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <USER_SPI_write+0xc4>
				buff += 512;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800340c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	3b01      	subs	r3, #1
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <USER_SPI_write+0xa0>
 800341a:	e000      	b.n	800341e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800341c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800341e:	21fd      	movs	r1, #253	@ 0xfd
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff fda6 	bl	8002f72 <xmit_datablock>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <USER_SPI_write+0xd8>
 800342c:	2301      	movs	r3, #1
 800342e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003430:	f7ff fd4e 	bl	8002ed0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000020 	.word	0x20000020
 800344c:	20000384 	.word	0x20000384

08003450 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08c      	sub	sp, #48	@ 0x30
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	603a      	str	r2, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	460b      	mov	r3, r1
 800345e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <USER_SPI_ioctl+0x1a>
 8003466:	2304      	movs	r3, #4
 8003468:	e15a      	b.n	8003720 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800346a:	4baf      	ldr	r3, [pc, #700]	@ (8003728 <USER_SPI_ioctl+0x2d8>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <USER_SPI_ioctl+0x2c>
 8003478:	2303      	movs	r3, #3
 800347a:	e151      	b.n	8003720 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8003482:	79bb      	ldrb	r3, [r7, #6]
 8003484:	2b04      	cmp	r3, #4
 8003486:	f200 8136 	bhi.w	80036f6 <USER_SPI_ioctl+0x2a6>
 800348a:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <USER_SPI_ioctl+0x40>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034a5 	.word	0x080034a5
 8003494:	080034b9 	.word	0x080034b9
 8003498:	080036f7 	.word	0x080036f7
 800349c:	08003565 	.word	0x08003565
 80034a0:	0800365b 	.word	0x0800365b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80034a4:	f7ff fd22 	bl	8002eec <spiselect>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8127 	beq.w	80036fe <USER_SPI_ioctl+0x2ae>
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80034b6:	e122      	b.n	80036fe <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80034b8:	2100      	movs	r1, #0
 80034ba:	2009      	movs	r0, #9
 80034bc:	f7ff fd8b 	bl	8002fd6 <send_cmd>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 811d 	bne.w	8003702 <USER_SPI_ioctl+0x2b2>
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	2110      	movs	r1, #16
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fd26 	bl	8002f20 <rcvr_datablock>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8113 	beq.w	8003702 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80034dc:	7b3b      	ldrb	r3, [r7, #12]
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d111      	bne.n	800350a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80034e6:	7d7b      	ldrb	r3, [r7, #21]
 80034e8:	461a      	mov	r2, r3
 80034ea:	7d3b      	ldrb	r3, [r7, #20]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	4413      	add	r3, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80034fa:	4413      	add	r3, r2
 80034fc:	3301      	adds	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	029a      	lsls	r2, r3, #10
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e028      	b.n	800355c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800350a:	7c7b      	ldrb	r3, [r7, #17]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	b2da      	uxtb	r2, r3
 8003512:	7dbb      	ldrb	r3, [r7, #22]
 8003514:	09db      	lsrs	r3, r3, #7
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4413      	add	r3, r2
 800351a:	b2da      	uxtb	r2, r3
 800351c:	7d7b      	ldrb	r3, [r7, #21]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0306 	and.w	r3, r3, #6
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4413      	add	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3302      	adds	r3, #2
 800352e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003532:	7d3b      	ldrb	r3, [r7, #20]
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	441a      	add	r2, r3
 8003540:	7cbb      	ldrb	r3, [r7, #18]
 8003542:	029b      	lsls	r3, r3, #10
 8003544:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003548:	4413      	add	r3, r2
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800354e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003552:	3b09      	subs	r3, #9
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	409a      	lsls	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003562:	e0ce      	b.n	8003702 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003564:	4b71      	ldr	r3, [pc, #452]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003570:	2100      	movs	r1, #0
 8003572:	208d      	movs	r0, #141	@ 0x8d
 8003574:	f7ff fd2f 	bl	8002fd6 <send_cmd>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 80c3 	bne.w	8003706 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003580:	20ff      	movs	r0, #255	@ 0xff
 8003582:	f7ff fc3b 	bl	8002dfc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	2110      	movs	r1, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fcc7 	bl	8002f20 <rcvr_datablock>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80b6 	beq.w	8003706 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800359a:	2330      	movs	r3, #48	@ 0x30
 800359c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80035a0:	e007      	b.n	80035b2 <USER_SPI_ioctl+0x162>
 80035a2:	20ff      	movs	r0, #255	@ 0xff
 80035a4:	f7ff fc2a 	bl	8002dfc <xchg_spi>
 80035a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035ac:	3b01      	subs	r3, #1
 80035ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80035b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f3      	bne.n	80035a2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80035ba:	7dbb      	ldrb	r3, [r7, #22]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	2310      	movs	r3, #16
 80035c4:	fa03 f202 	lsl.w	r2, r3, r2
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80035d2:	e098      	b.n	8003706 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80035d4:	2100      	movs	r1, #0
 80035d6:	2009      	movs	r0, #9
 80035d8:	f7ff fcfd 	bl	8002fd6 <send_cmd>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8091 	bne.w	8003706 <USER_SPI_ioctl+0x2b6>
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	2110      	movs	r1, #16
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fc98 	bl	8002f20 <rcvr_datablock>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8087 	beq.w	8003706 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80035f8:	4b4c      	ldr	r3, [pc, #304]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d012      	beq.n	800362a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003604:	7dbb      	ldrb	r3, [r7, #22]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800360c:	7dfa      	ldrb	r2, [r7, #23]
 800360e:	09d2      	lsrs	r2, r2, #7
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4413      	add	r3, r2
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	7e7b      	ldrb	r3, [r7, #25]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	461a      	mov	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e013      	b.n	8003652 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800362a:	7dbb      	ldrb	r3, [r7, #22]
 800362c:	109b      	asrs	r3, r3, #2
 800362e:	b29b      	uxth	r3, r3
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	3301      	adds	r3, #1
 8003636:	7dfa      	ldrb	r2, [r7, #23]
 8003638:	00d2      	lsls	r2, r2, #3
 800363a:	f002 0218 	and.w	r2, r2, #24
 800363e:	7df9      	ldrb	r1, [r7, #23]
 8003640:	0949      	lsrs	r1, r1, #5
 8003642:	b2c9      	uxtb	r1, r1
 8003644:	440a      	add	r2, r1
 8003646:	3201      	adds	r2, #1
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	461a      	mov	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003658:	e055      	b.n	8003706 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800365a:	4b34      	ldr	r3, [pc, #208]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f003 0306 	and.w	r3, r3, #6
 8003662:	2b00      	cmp	r3, #0
 8003664:	d051      	beq.n	800370a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003666:	f107 020c 	add.w	r2, r7, #12
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	210b      	movs	r1, #11
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff feee 	bl	8003450 <USER_SPI_ioctl>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d149      	bne.n	800370e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800367a:	7b3b      	ldrb	r3, [r7, #12]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <USER_SPI_ioctl+0x23e>
 8003684:	7dbb      	ldrb	r3, [r7, #22]
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d041      	beq.n	8003712 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	623b      	str	r3, [r7, #32]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800369e:	4b23      	ldr	r3, [pc, #140]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	025b      	lsls	r3, r3, #9
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80036b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b8:	2020      	movs	r0, #32
 80036ba:	f7ff fc8c 	bl	8002fd6 <send_cmd>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d128      	bne.n	8003716 <USER_SPI_ioctl+0x2c6>
 80036c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036c6:	2021      	movs	r0, #33	@ 0x21
 80036c8:	f7ff fc85 	bl	8002fd6 <send_cmd>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d121      	bne.n	8003716 <USER_SPI_ioctl+0x2c6>
 80036d2:	2100      	movs	r1, #0
 80036d4:	2026      	movs	r0, #38	@ 0x26
 80036d6:	f7ff fc7e 	bl	8002fd6 <send_cmd>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11a      	bne.n	8003716 <USER_SPI_ioctl+0x2c6>
 80036e0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80036e4:	f7ff fbd0 	bl	8002e88 <wait_ready>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80036f4:	e00f      	b.n	8003716 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80036f6:	2304      	movs	r3, #4
 80036f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80036fc:	e00c      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 80036fe:	bf00      	nop
 8003700:	e00a      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 8003702:	bf00      	nop
 8003704:	e008      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 8003706:	bf00      	nop
 8003708:	e006      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800370a:	bf00      	nop
 800370c:	e004      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 8003716:	bf00      	nop
	}

	despiselect();
 8003718:	f7ff fbda 	bl	8002ed0 <despiselect>

	return res;
 800371c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003720:	4618      	mov	r0, r3
 8003722:	3730      	adds	r7, #48	@ 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000020 	.word	0x20000020
 800372c:	20000384 	.word	0x20000384

08003730 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <read_file>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

size_t read_file (FIL  *file, uint8_t *buf, uint32_t sizeofbuf)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
static size_t BytesReadfile ;
f_read (file, buf , sizeofbuf, &BytesReadfile);
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <read_file+0x24>)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f001 ff44 	bl	80055e0 <f_read>
return BytesReadfile;
 8003758:	4b02      	ldr	r3, [pc, #8]	@ (8003764 <read_file+0x24>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000390 	.word	0x20000390

08003768 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <disk_status+0x30>)
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	79fa      	ldrb	r2, [r7, #7]
 8003780:	4905      	ldr	r1, [pc, #20]	@ (8003798 <disk_status+0x30>)
 8003782:	440a      	add	r2, r1
 8003784:	7a12      	ldrb	r2, [r2, #8]
 8003786:	4610      	mov	r0, r2
 8003788:	4798      	blx	r3
 800378a:	4603      	mov	r3, r0
 800378c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200003bc 	.word	0x200003bc

0800379c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4a0e      	ldr	r2, [pc, #56]	@ (80037e8 <disk_initialize+0x4c>)
 80037ae:	5cd3      	ldrb	r3, [r2, r3]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d114      	bne.n	80037de <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	4a0c      	ldr	r2, [pc, #48]	@ (80037e8 <disk_initialize+0x4c>)
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	79fa      	ldrb	r2, [r7, #7]
 80037c2:	4909      	ldr	r1, [pc, #36]	@ (80037e8 <disk_initialize+0x4c>)
 80037c4:	440a      	add	r2, r1
 80037c6:	7a12      	ldrb	r2, [r2, #8]
 80037c8:	4610      	mov	r0, r2
 80037ca:	4798      	blx	r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	4a03      	ldr	r2, [pc, #12]	@ (80037e8 <disk_initialize+0x4c>)
 80037da:	2101      	movs	r1, #1
 80037dc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200003bc 	.word	0x200003bc

080037ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003828 <disk_read+0x3c>)
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	689c      	ldr	r4, [r3, #8]
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <disk_read+0x3c>)
 800380c:	4413      	add	r3, r2
 800380e:	7a18      	ldrb	r0, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	47a0      	blx	r4
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]
  return res;
 800381c:	7dfb      	ldrb	r3, [r7, #23]
}
 800381e:	4618      	mov	r0, r3
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	bf00      	nop
 8003828:	200003bc 	.word	0x200003bc

0800382c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <disk_write+0x3c>)
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	68dc      	ldr	r4, [r3, #12]
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	4a07      	ldr	r2, [pc, #28]	@ (8003868 <disk_write+0x3c>)
 800384c:	4413      	add	r3, r2
 800384e:	7a18      	ldrb	r0, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	47a0      	blx	r4
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]
  return res;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd90      	pop	{r4, r7, pc}
 8003866:	bf00      	nop
 8003868:	200003bc 	.word	0x200003bc

0800386c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	603a      	str	r2, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
 8003878:	460b      	mov	r3, r1
 800387a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <disk_ioctl+0x38>)
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	79fa      	ldrb	r2, [r7, #7]
 800388a:	4906      	ldr	r1, [pc, #24]	@ (80038a4 <disk_ioctl+0x38>)
 800388c:	440a      	add	r2, r1
 800388e:	7a10      	ldrb	r0, [r2, #8]
 8003890:	79b9      	ldrb	r1, [r7, #6]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4798      	blx	r3
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]
  return res;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	200003bc 	.word	0x200003bc

080038a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b21a      	sxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b21b      	sxth	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80038ca:	89fb      	ldrh	r3, [r7, #14]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3303      	adds	r3, #3
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	3202      	adds	r2, #2
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	3201      	adds	r2, #1
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	7812      	ldrb	r2, [r2, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003910:	68fb      	ldr	r3, [r7, #12]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	887a      	ldrh	r2, [r7, #2]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	1c53      	adds	r3, r2, #1
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	6179      	str	r1, [r7, #20]
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3b01      	subs	r3, #1
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f1      	bne.n	80039c6 <mem_cpy+0x1a>
	}
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80039ee:	b480      	push	{r7}
 80039f0:	b087      	sub	sp, #28
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	617a      	str	r2, [r7, #20]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f3      	bne.n	80039fe <mem_set+0x10>
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	@ 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	61fa      	str	r2, [r7, #28]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4619      	mov	r1, r3
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	61ba      	str	r2, [r7, #24]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	1acb      	subs	r3, r1, r3
 8003a50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <mem_cmp+0x40>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0eb      	beq.n	8003a3c <mem_cmp+0x18>

	return r;
 8003a64:	697b      	ldr	r3, [r7, #20]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3724      	adds	r7, #36	@ 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003a7c:	e002      	b.n	8003a84 <chk_chr+0x12>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3301      	adds	r3, #1
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <chk_chr+0x26>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d1f2      	bne.n	8003a7e <chk_chr+0xc>
	return *str;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e029      	b.n	8003b10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003abc:	4a27      	ldr	r2, [pc, #156]	@ (8003b5c <chk_lock+0xb4>)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	4413      	add	r3, r2
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01d      	beq.n	8003b06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003aca:	4a24      	ldr	r2, [pc, #144]	@ (8003b5c <chk_lock+0xb4>)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	4413      	add	r3, r2
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d116      	bne.n	8003b0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003adc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b5c <chk_lock+0xb4>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d10c      	bne.n	8003b0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003af0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b5c <chk_lock+0xb4>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	3308      	adds	r3, #8
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d102      	bne.n	8003b0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003b04:	e007      	b.n	8003b16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d9d2      	bls.n	8003abc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d109      	bne.n	8003b30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <chk_lock+0x80>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d101      	bne.n	8003b2c <chk_lock+0x84>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e010      	b.n	8003b4e <chk_lock+0xa6>
 8003b2c:	2312      	movs	r3, #18
 8003b2e:	e00e      	b.n	8003b4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <chk_lock+0xa0>
 8003b36:	4a09      	ldr	r2, [pc, #36]	@ (8003b5c <chk_lock+0xb4>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	330c      	adds	r3, #12
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b46:	d101      	bne.n	8003b4c <chk_lock+0xa4>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	e000      	b.n	8003b4e <chk_lock+0xa6>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	2000039c 	.word	0x2000039c

08003b60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e002      	b.n	8003b72 <enq_lock+0x12>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d806      	bhi.n	8003b86 <enq_lock+0x26>
 8003b78:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <enq_lock+0x40>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4413      	add	r3, r2
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f2      	bne.n	8003b6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000039c 	.word	0x2000039c

08003ba4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e01f      	b.n	8003bf4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003bb4:	4a41      	ldr	r2, [pc, #260]	@ (8003cbc <inc_lock+0x118>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d113      	bne.n	8003bee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8003cbc <inc_lock+0x118>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d109      	bne.n	8003bee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003bda:	4a38      	ldr	r2, [pc, #224]	@ (8003cbc <inc_lock+0x118>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4413      	add	r3, r2
 8003be2:	3308      	adds	r3, #8
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d006      	beq.n	8003bfc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d9dc      	bls.n	8003bb4 <inc_lock+0x10>
 8003bfa:	e000      	b.n	8003bfe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003bfc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d132      	bne.n	8003c6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e002      	b.n	8003c10 <inc_lock+0x6c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d806      	bhi.n	8003c24 <inc_lock+0x80>
 8003c16:	4a29      	ldr	r2, [pc, #164]	@ (8003cbc <inc_lock+0x118>)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f2      	bne.n	8003c0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d101      	bne.n	8003c2e <inc_lock+0x8a>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e040      	b.n	8003cb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4922      	ldr	r1, [pc, #136]	@ (8003cbc <inc_lock+0x118>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	440b      	add	r3, r1
 8003c3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	491e      	ldr	r1, [pc, #120]	@ (8003cbc <inc_lock+0x118>)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	440b      	add	r3, r1
 8003c48:	3304      	adds	r3, #4
 8003c4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	491a      	ldr	r1, [pc, #104]	@ (8003cbc <inc_lock+0x118>)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	440b      	add	r3, r1
 8003c58:	3308      	adds	r3, #8
 8003c5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003c5c:	4a17      	ldr	r2, [pc, #92]	@ (8003cbc <inc_lock+0x118>)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	4413      	add	r3, r2
 8003c64:	330c      	adds	r3, #12
 8003c66:	2200      	movs	r2, #0
 8003c68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <inc_lock+0xe0>
 8003c70:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <inc_lock+0x118>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4413      	add	r3, r2
 8003c78:	330c      	adds	r3, #12
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <inc_lock+0xe0>
 8003c80:	2300      	movs	r3, #0
 8003c82:	e015      	b.n	8003cb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <inc_lock+0xf8>
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <inc_lock+0x118>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	330c      	adds	r3, #12
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	e001      	b.n	8003ca0 <inc_lock+0xfc>
 8003c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca0:	4906      	ldr	r1, [pc, #24]	@ (8003cbc <inc_lock+0x118>)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	440b      	add	r3, r1
 8003ca8:	330c      	adds	r3, #12
 8003caa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	2000039c 	.word	0x2000039c

08003cc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d825      	bhi.n	8003d20 <dec_lock+0x60>
		n = Files[i].ctr;
 8003cd4:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <dec_lock+0x74>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4413      	add	r3, r2
 8003cdc:	330c      	adds	r3, #12
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003ce2:	89fb      	ldrh	r3, [r7, #14]
 8003ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ce8:	d101      	bne.n	8003cee <dec_lock+0x2e>
 8003cea:	2300      	movs	r3, #0
 8003cec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003cee:	89fb      	ldrh	r3, [r7, #14]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <dec_lock+0x3a>
 8003cf4:	89fb      	ldrh	r3, [r7, #14]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003d34 <dec_lock+0x74>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	330c      	adds	r3, #12
 8003d04:	89fa      	ldrh	r2, [r7, #14]
 8003d06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003d08:	89fb      	ldrh	r3, [r7, #14]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <dec_lock+0x5a>
 8003d0e:	4a09      	ldr	r2, [pc, #36]	@ (8003d34 <dec_lock+0x74>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	4413      	add	r3, r2
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	737b      	strb	r3, [r7, #13]
 8003d1e:	e001      	b.n	8003d24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003d20:	2302      	movs	r3, #2
 8003d22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003d24:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	2000039c 	.word	0x2000039c

08003d38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e010      	b.n	8003d68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d46:	4a0d      	ldr	r2, [pc, #52]	@ (8003d7c <clear_lock+0x44>)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d105      	bne.n	8003d62 <clear_lock+0x2a>
 8003d56:	4a09      	ldr	r2, [pc, #36]	@ (8003d7c <clear_lock+0x44>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	4413      	add	r3, r2
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3301      	adds	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d9eb      	bls.n	8003d46 <clear_lock+0xe>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	2000039c 	.word	0x2000039c

08003d80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d034      	beq.n	8003dfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7858      	ldrb	r0, [r3, #1]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003da4:	2301      	movs	r3, #1
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	f7ff fd40 	bl	800382c <disk_write>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e022      	b.n	8003dfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	1ad2      	subs	r2, r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d217      	bcs.n	8003dfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	e010      	b.n	8003df8 <sync_window+0x78>
					wsect += fs->fsize;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	7858      	ldrb	r0, [r3, #1]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003dea:	2301      	movs	r3, #1
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	f7ff fd1d 	bl	800382c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d8eb      	bhi.n	8003dd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d01b      	beq.n	8003e58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ffad 	bl	8003d80 <sync_window>
 8003e26:	4603      	mov	r3, r0
 8003e28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d113      	bne.n	8003e58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	7858      	ldrb	r0, [r3, #1]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	f7ff fcd5 	bl	80037ec <disk_read>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff87 	bl	8003d80 <sync_window>
 8003e72:	4603      	mov	r3, r0
 8003e74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d158      	bne.n	8003f2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d148      	bne.n	8003f16 <sync_fs+0xb2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	791b      	ldrb	r3, [r3, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d144      	bne.n	8003f16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3330      	adds	r3, #48	@ 0x30
 8003e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fda9 	bl	80039ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3330      	adds	r3, #48	@ 0x30
 8003ea0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003ea4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fd38 	bl	800391e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3330      	adds	r3, #48	@ 0x30
 8003eb2:	4921      	ldr	r1, [pc, #132]	@ (8003f38 <sync_fs+0xd4>)
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fd4d 	bl	8003954 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3330      	adds	r3, #48	@ 0x30
 8003ebe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003ec2:	491e      	ldr	r1, [pc, #120]	@ (8003f3c <sync_fs+0xd8>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fd45 	bl	8003954 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3330      	adds	r3, #48	@ 0x30
 8003ece:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7ff fd3b 	bl	8003954 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3330      	adds	r3, #48	@ 0x30
 8003ee2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7ff fd31 	bl	8003954 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7858      	ldrb	r0, [r3, #1]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f7ff fc8e 	bl	800382c <disk_write>
			fs->fsi_flag = 0;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fca4 	bl	800386c <disk_ioctl>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <sync_fs+0xca>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	41615252 	.word	0x41615252
 8003f3c:	61417272 	.word	0x61417272

08003f40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3b02      	subs	r3, #2
 8003f4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	3b02      	subs	r3, #2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d301      	bcc.n	8003f60 <clust2sect+0x20>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e008      	b.n	8003f72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	895b      	ldrh	r3, [r3, #10]
 8003f64:	461a      	mov	r2, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	fb03 f202 	mul.w	r2, r3, r2
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	4413      	add	r3, r2
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d904      	bls.n	8003f9e <get_fat+0x20>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e08e      	b.n	80040c2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d061      	beq.n	8004076 <get_fat+0xf8>
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	dc7b      	bgt.n	80040ae <get_fat+0x130>
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d002      	beq.n	8003fc0 <get_fat+0x42>
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d041      	beq.n	8004042 <get_fat+0xc4>
 8003fbe:	e076      	b.n	80040ae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6a1a      	ldr	r2, [r3, #32]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	0a5b      	lsrs	r3, r3, #9
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6938      	ldr	r0, [r7, #16]
 8003fdc:	f7ff ff14 	bl	8003e08 <move_window>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d166      	bne.n	80040b4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ff8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6a1a      	ldr	r2, [r3, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	4413      	add	r3, r2
 8004004:	4619      	mov	r1, r3
 8004006:	6938      	ldr	r0, [r7, #16]
 8004008:	f7ff fefe 	bl	8003e08 <move_window>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d152      	bne.n	80040b8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <get_fat+0xba>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	e002      	b.n	800403e <get_fat+0xc0>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	617b      	str	r3, [r7, #20]
			break;
 8004040:	e03f      	b.n	80040c2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	4413      	add	r3, r2
 800404c:	4619      	mov	r1, r3
 800404e:	6938      	ldr	r0, [r7, #16]
 8004050:	f7ff feda 	bl	8003e08 <move_window>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d130      	bne.n	80040bc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004068:	4413      	add	r3, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fc1c 	bl	80038a8 <ld_word>
 8004070:	4603      	mov	r3, r0
 8004072:	617b      	str	r3, [r7, #20]
			break;
 8004074:	e025      	b.n	80040c2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6a1a      	ldr	r2, [r3, #32]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	09db      	lsrs	r3, r3, #7
 800407e:	4413      	add	r3, r2
 8004080:	4619      	mov	r1, r3
 8004082:	6938      	ldr	r0, [r7, #16]
 8004084:	f7ff fec0 	bl	8003e08 <move_window>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d118      	bne.n	80040c0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800409c:	4413      	add	r3, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fc1a 	bl	80038d8 <ld_dword>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040aa:	617b      	str	r3, [r7, #20]
			break;
 80040ac:	e009      	b.n	80040c2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e006      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040b4:	bf00      	nop
 80040b6:	e004      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040b8:	bf00      	nop
 80040ba:	e002      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80040c0:	bf00      	nop
		}
	}

	return val;
 80040c2:	697b      	ldr	r3, [r7, #20]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80040d8:	2302      	movs	r3, #2
 80040da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	f240 80d9 	bls.w	8004296 <put_fat+0x1ca>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f080 80d3 	bcs.w	8004296 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	f000 8096 	beq.w	8004226 <put_fat+0x15a>
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	f300 80cb 	bgt.w	8004296 <put_fat+0x1ca>
 8004100:	2b01      	cmp	r3, #1
 8004102:	d002      	beq.n	800410a <put_fat+0x3e>
 8004104:	2b02      	cmp	r3, #2
 8004106:	d06e      	beq.n	80041e6 <put_fat+0x11a>
 8004108:	e0c5      	b.n	8004296 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	0a5b      	lsrs	r3, r3, #9
 8004120:	4413      	add	r3, r2
 8004122:	4619      	mov	r1, r3
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f7ff fe6f 	bl	8003e08 <move_window>
 800412a:	4603      	mov	r3, r0
 800412c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800412e:	7ffb      	ldrb	r3, [r7, #31]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 80a9 	bne.w	8004288 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	1c59      	adds	r1, r3, #1
 8004140:	61b9      	str	r1, [r7, #24]
 8004142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004146:	4413      	add	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <put_fat+0xa4>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b25b      	sxtb	r3, r3
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b25a      	sxtb	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	b25b      	sxtb	r3, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	b25b      	sxtb	r3, r3
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e001      	b.n	8004174 <put_fat+0xa8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	0a5b      	lsrs	r3, r3, #9
 8004186:	4413      	add	r3, r2
 8004188:	4619      	mov	r1, r3
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff fe3c 	bl	8003e08 <move_window>
 8004190:	4603      	mov	r3, r0
 8004192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d178      	bne.n	800428c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	4413      	add	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <put_fat+0xf0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e00e      	b.n	80041da <put_fat+0x10e>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	f023 030f 	bic.w	r3, r3, #15
 80041c6:	b25a      	sxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	70da      	strb	r2, [r3, #3]
			break;
 80041e4:	e057      	b.n	8004296 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	4413      	add	r3, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fe08 	bl	8003e08 <move_window>
 80041f8:	4603      	mov	r3, r0
 80041fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d146      	bne.n	8004290 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004210:	4413      	add	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	b292      	uxth	r2, r2
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fb80 	bl	800391e <st_word>
			fs->wflag = 1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	70da      	strb	r2, [r3, #3]
			break;
 8004224:	e037      	b.n	8004296 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	09db      	lsrs	r3, r3, #7
 800422e:	4413      	add	r3, r2
 8004230:	4619      	mov	r1, r3
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fde8 	bl	8003e08 <move_window>
 8004238:	4603      	mov	r3, r0
 800423a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800423c:	7ffb      	ldrb	r3, [r7, #31]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d128      	bne.n	8004294 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004256:	4413      	add	r3, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fb3d 	bl	80038d8 <ld_dword>
 800425e:	4603      	mov	r3, r0
 8004260:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004264:	4323      	orrs	r3, r4
 8004266:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004276:	4413      	add	r3, r2
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fb6a 	bl	8003954 <st_dword>
			fs->wflag = 1;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	70da      	strb	r2, [r3, #3]
			break;
 8004286:	e006      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004288:	bf00      	nop
 800428a:	e004      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004294:	bf00      	nop
		}
	}
	return res;
 8004296:	7ffb      	ldrb	r3, [r7, #31]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3724      	adds	r7, #36	@ 0x24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}

080042a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d904      	bls.n	80042c6 <remove_chain+0x26>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d301      	bcc.n	80042ca <remove_chain+0x2a>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e04b      	b.n	8004362 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f7ff fef8 	bl	80040cc <put_fat>
 80042dc:	4603      	mov	r3, r0
 80042de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80042e0:	7ffb      	ldrb	r3, [r7, #31]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <remove_chain+0x4a>
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	e03b      	b.n	8004362 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff fe46 	bl	8003f7e <get_fat>
 80042f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d031      	beq.n	800435e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <remove_chain+0x64>
 8004300:	2302      	movs	r3, #2
 8004302:	e02e      	b.n	8004362 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d101      	bne.n	8004310 <remove_chain+0x70>
 800430c:	2301      	movs	r3, #1
 800430e:	e028      	b.n	8004362 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004310:	2200      	movs	r2, #0
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	69b8      	ldr	r0, [r7, #24]
 8004316:	f7ff fed9 	bl	80040cc <put_fat>
 800431a:	4603      	mov	r3, r0
 800431c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800431e:	7ffb      	ldrb	r3, [r7, #31]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <remove_chain+0x88>
 8004324:	7ffb      	ldrb	r3, [r7, #31]
 8004326:	e01c      	b.n	8004362 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	3b02      	subs	r3, #2
 8004332:	429a      	cmp	r2, r3
 8004334:	d20b      	bcs.n	800434e <remove_chain+0xae>
			fs->free_clst++;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d3c6      	bcc.n	80042ea <remove_chain+0x4a>
 800435c:	e000      	b.n	8004360 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800435e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b088      	sub	sp, #32
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <create_chain+0x2c>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	429a      	cmp	r2, r3
 8004394:	d31b      	bcc.n	80043ce <create_chain+0x64>
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e018      	b.n	80043ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fded 	bl	8003f7e <get_fat>
 80043a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d801      	bhi.n	80043b0 <create_chain+0x46>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e070      	b.n	8004492 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d101      	bne.n	80043bc <create_chain+0x52>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	e06a      	b.n	8004492 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d201      	bcs.n	80043ca <create_chain+0x60>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	e063      	b.n	8004492 <create_chain+0x128>
		scl = clst;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d307      	bcc.n	80043f2 <create_chain+0x88>
				ncl = 2;
 80043e2:	2302      	movs	r3, #2
 80043e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d901      	bls.n	80043f2 <create_chain+0x88>
 80043ee:	2300      	movs	r3, #0
 80043f0:	e04f      	b.n	8004492 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80043f2:	69f9      	ldr	r1, [r7, #28]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fdc2 	bl	8003f7e <get_fat>
 80043fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d003      	beq.n	8004410 <create_chain+0xa6>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d101      	bne.n	8004414 <create_chain+0xaa>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	e03e      	b.n	8004492 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	d1da      	bne.n	80043d2 <create_chain+0x68>
 800441c:	2300      	movs	r3, #0
 800441e:	e038      	b.n	8004492 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004420:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	69f9      	ldr	r1, [r7, #28]
 8004428:	6938      	ldr	r0, [r7, #16]
 800442a:	f7ff fe4f 	bl	80040cc <put_fat>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <create_chain+0xe2>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f7ff fe42 	bl	80040cc <put_fat>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <create_chain+0x116>
		fs->last_clst = ncl;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	3b02      	subs	r3, #2
 8004462:	429a      	cmp	r2, r3
 8004464:	d804      	bhi.n	8004470 <create_chain+0x106>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	1e5a      	subs	r2, r3, #1
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	791b      	ldrb	r3, [r3, #4]
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	711a      	strb	r2, [r3, #4]
 800447e:	e007      	b.n	8004490 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <create_chain+0x122>
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e000      	b.n	800448e <create_chain+0x124>
 800448c:	2301      	movs	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004490:	69fb      	ldr	r3, [r7, #28]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	3304      	adds	r3, #4
 80044b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	0a5b      	lsrs	r3, r3, #9
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	8952      	ldrh	r2, [r2, #10]
 80044ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80044be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	613a      	str	r2, [r7, #16]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <clmt_clust+0x3a>
 80044d0:	2300      	movs	r3, #0
 80044d2:	e010      	b.n	80044f6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d307      	bcc.n	80044ec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3304      	adds	r3, #4
 80044e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044ea:	e7e9      	b.n	80044c0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80044ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4413      	add	r3, r2
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004518:	d204      	bcs.n	8004524 <dir_sdi+0x22>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004524:	2302      	movs	r3, #2
 8004526:	e063      	b.n	80045f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <dir_sdi+0x46>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10c      	bne.n	8004568 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	8912      	ldrh	r2, [r2, #8]
 8004556:	4293      	cmp	r3, r2
 8004558:	d301      	bcc.n	800455e <dir_sdi+0x5c>
 800455a:	2302      	movs	r3, #2
 800455c:	e048      	b.n	80045f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e029      	b.n	80045bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	895b      	ldrh	r3, [r3, #10]
 800456c:	025b      	lsls	r3, r3, #9
 800456e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004570:	e019      	b.n	80045a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd01 	bl	8003f7e <get_fat>
 800457c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d101      	bne.n	800458a <dir_sdi+0x88>
 8004586:	2301      	movs	r3, #1
 8004588:	e032      	b.n	80045f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d904      	bls.n	800459a <dir_sdi+0x98>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	429a      	cmp	r2, r3
 8004598:	d301      	bcc.n	800459e <dir_sdi+0x9c>
 800459a:	2302      	movs	r3, #2
 800459c:	e028      	b.n	80045f0 <dir_sdi+0xee>
			ofs -= csz;
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d2e1      	bcs.n	8004572 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	6938      	ldr	r0, [r7, #16]
 80045b2:	f7ff fcc5 	bl	8003f40 <clust2sect>
 80045b6:	4602      	mov	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <dir_sdi+0xcc>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e010      	b.n	80045f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	0a5b      	lsrs	r3, r3, #9
 80045d6:	441a      	add	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	3320      	adds	r3, #32
 800460e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <dir_next+0x28>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800461e:	d301      	bcc.n	8004624 <dir_next+0x2c>
 8004620:	2304      	movs	r3, #4
 8004622:	e0aa      	b.n	800477a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8098 	bne.w	8004760 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	8912      	ldrh	r2, [r2, #8]
 800464a:	4293      	cmp	r3, r2
 800464c:	f0c0 8088 	bcc.w	8004760 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
 8004656:	2304      	movs	r3, #4
 8004658:	e08f      	b.n	800477a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	0a5b      	lsrs	r3, r3, #9
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	8952      	ldrh	r2, [r2, #10]
 8004662:	3a01      	subs	r2, #1
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d17a      	bne.n	8004760 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7ff fc83 	bl	8003f7e <get_fat>
 8004678:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d801      	bhi.n	8004684 <dir_next+0x8c>
 8004680:	2302      	movs	r3, #2
 8004682:	e07a      	b.n	800477a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d101      	bne.n	8004690 <dir_next+0x98>
 800468c:	2301      	movs	r3, #1
 800468e:	e074      	b.n	800477a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	429a      	cmp	r2, r3
 8004698:	d358      	bcc.n	800474c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	61da      	str	r2, [r3, #28]
 80046a6:	2304      	movs	r3, #4
 80046a8:	e067      	b.n	800477a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7ff fe59 	bl	800436a <create_chain>
 80046b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <dir_next+0xcc>
 80046c0:	2307      	movs	r3, #7
 80046c2:	e05a      	b.n	800477a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <dir_next+0xd6>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e055      	b.n	800477a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d101      	bne.n	80046da <dir_next+0xe2>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e04f      	b.n	800477a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fb50 	bl	8003d80 <sync_window>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <dir_next+0xf2>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e047      	b.n	800477a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3330      	adds	r3, #48	@ 0x30
 80046ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f97a 	bl	80039ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	6979      	ldr	r1, [r7, #20]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff fc1d 	bl	8003f40 <clust2sect>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800470c:	e012      	b.n	8004734 <dir_next+0x13c>
						fs->wflag = 1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fb33 	bl	8003d80 <sync_window>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <dir_next+0x12c>
 8004720:	2301      	movs	r3, #1
 8004722:	e02a      	b.n	800477a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3301      	adds	r3, #1
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	895b      	ldrh	r3, [r3, #10]
 8004738:	461a      	mov	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4293      	cmp	r3, r2
 800473e:	d3e6      	bcc.n	800470e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004752:	6979      	ldr	r1, [r7, #20]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff fbf3 	bl	8003f40 <clust2sect>
 800475a:	4602      	mov	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	441a      	add	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b086      	sub	sp, #24
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004792:	2100      	movs	r1, #0
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff feb4 	bl	8004502 <dir_sdi>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d12b      	bne.n	80047fc <dir_alloc+0x7a>
		n = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4619      	mov	r1, r3
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff fb2a 	bl	8003e08 <move_window>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11d      	bne.n	80047fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2be5      	cmp	r3, #229	@ 0xe5
 80047c6:	d004      	beq.n	80047d2 <dir_alloc+0x50>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3301      	adds	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d102      	bne.n	80047e6 <dir_alloc+0x64>
 80047e0:	e00c      	b.n	80047fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80047e6:	2101      	movs	r1, #1
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff05 	bl	80045f8 <dir_next>
 80047ee:	4603      	mov	r3, r0
 80047f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0d7      	beq.n	80047a8 <dir_alloc+0x26>
 80047f8:	e000      	b.n	80047fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80047fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d101      	bne.n	8004806 <dir_alloc+0x84>
 8004802:	2307      	movs	r3, #7
 8004804:	75fb      	strb	r3, [r7, #23]
	return res;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	331a      	adds	r3, #26
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f842 	bl	80038a8 <ld_word>
 8004824:	4603      	mov	r3, r0
 8004826:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d109      	bne.n	8004844 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	3314      	adds	r3, #20
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff f837 	bl	80038a8 <ld_word>
 800483a:	4603      	mov	r3, r0
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	331a      	adds	r3, #26
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	b292      	uxth	r2, r2
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff f85a 	bl	800391e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b03      	cmp	r3, #3
 8004870:	d109      	bne.n	8004886 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f103 0214 	add.w	r2, r3, #20
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	b29b      	uxth	r3, r3
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7ff f84c 	bl	800391e <st_word>
	}
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800489c:	2100      	movs	r1, #0
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fe2f 	bl	8004502 <dir_sdi>
 80048a4:	4603      	mov	r3, r0
 80048a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <dir_find+0x24>
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	e03e      	b.n	8004930 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4619      	mov	r1, r3
 80048b8:	6938      	ldr	r0, [r7, #16]
 80048ba:	f7ff faa5 	bl	8003e08 <move_window>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d12f      	bne.n	8004928 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <dir_find+0x4e>
 80048d6:	2304      	movs	r3, #4
 80048d8:	75fb      	strb	r3, [r7, #23]
 80048da:	e028      	b.n	800492e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	330b      	adds	r3, #11
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	330b      	adds	r3, #11
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <dir_find+0x86>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a18      	ldr	r0, [r3, #32]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3324      	adds	r3, #36	@ 0x24
 8004906:	220b      	movs	r2, #11
 8004908:	4619      	mov	r1, r3
 800490a:	f7ff f88b 	bl	8003a24 <mem_cmp>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004914:	2100      	movs	r1, #0
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe6e 	bl	80045f8 <dir_next>
 800491c:	4603      	mov	r3, r0
 800491e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0c5      	beq.n	80048b2 <dir_find+0x24>
 8004926:	e002      	b.n	800492e <dir_find+0xa0>
		if (res != FR_OK) break;
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800492c:	bf00      	nop

	return res;
 800492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004946:	2101      	movs	r1, #1
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff1a 	bl	8004782 <dir_alloc>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d11c      	bne.n	8004992 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4619      	mov	r1, r3
 800495e:	68b8      	ldr	r0, [r7, #8]
 8004960:	f7ff fa52 	bl	8003e08 <move_window>
 8004964:	4603      	mov	r3, r0
 8004966:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d111      	bne.n	8004992 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	2220      	movs	r2, #32
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff f839 	bl	80039ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a18      	ldr	r0, [r3, #32]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3324      	adds	r3, #36	@ 0x24
 8004984:	220b      	movs	r2, #11
 8004986:	4619      	mov	r1, r3
 8004988:	f7ff f810 	bl	80039ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2201      	movs	r2, #1
 8004990:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004992:	7bfb      	ldrb	r3, [r7, #15]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3324      	adds	r3, #36	@ 0x24
 80049b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80049b2:	220b      	movs	r2, #11
 80049b4:	2120      	movs	r1, #32
 80049b6:	68b8      	ldr	r0, [r7, #8]
 80049b8:	f7ff f819 	bl	80039ee <mem_set>
	si = i = 0; ni = 8;
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	2308      	movs	r3, #8
 80049c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	61fa      	str	r2, [r7, #28]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80049d6:	7efb      	ldrb	r3, [r7, #27]
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d94e      	bls.n	8004a7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80049dc:	7efb      	ldrb	r3, [r7, #27]
 80049de:	2b2f      	cmp	r3, #47	@ 0x2f
 80049e0:	d006      	beq.n	80049f0 <create_name+0x54>
 80049e2:	7efb      	ldrb	r3, [r7, #27]
 80049e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80049e6:	d110      	bne.n	8004a0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80049e8:	e002      	b.n	80049f0 <create_name+0x54>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3301      	adds	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80049fa:	d0f6      	beq.n	80049ea <create_name+0x4e>
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a06:	d0f0      	beq.n	80049ea <create_name+0x4e>
			break;
 8004a08:	e038      	b.n	8004a7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004a0a:	7efb      	ldrb	r3, [r7, #27]
 8004a0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a0e:	d003      	beq.n	8004a18 <create_name+0x7c>
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d30c      	bcc.n	8004a32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b0b      	cmp	r3, #11
 8004a1c:	d002      	beq.n	8004a24 <create_name+0x88>
 8004a1e:	7efb      	ldrb	r3, [r7, #27]
 8004a20:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a22:	d001      	beq.n	8004a28 <create_name+0x8c>
 8004a24:	2306      	movs	r3, #6
 8004a26:	e044      	b.n	8004ab2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004a28:	2308      	movs	r3, #8
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	230b      	movs	r3, #11
 8004a2e:	617b      	str	r3, [r7, #20]
			continue;
 8004a30:	e022      	b.n	8004a78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004a32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	da04      	bge.n	8004a44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	3b80      	subs	r3, #128	@ 0x80
 8004a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004abc <create_name+0x120>)
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004a44:	7efb      	ldrb	r3, [r7, #27]
 8004a46:	4619      	mov	r1, r3
 8004a48:	481d      	ldr	r0, [pc, #116]	@ (8004ac0 <create_name+0x124>)
 8004a4a:	f7ff f812 	bl	8003a72 <chk_chr>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <create_name+0xbc>
 8004a54:	2306      	movs	r3, #6
 8004a56:	e02c      	b.n	8004ab2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004a58:	7efb      	ldrb	r3, [r7, #27]
 8004a5a:	2b60      	cmp	r3, #96	@ 0x60
 8004a5c:	d905      	bls.n	8004a6a <create_name+0xce>
 8004a5e:	7efb      	ldrb	r3, [r7, #27]
 8004a60:	2b7a      	cmp	r3, #122	@ 0x7a
 8004a62:	d802      	bhi.n	8004a6a <create_name+0xce>
 8004a64:	7efb      	ldrb	r3, [r7, #27]
 8004a66:	3b20      	subs	r3, #32
 8004a68:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	613a      	str	r2, [r7, #16]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	4413      	add	r3, r2
 8004a74:	7efa      	ldrb	r2, [r7, #27]
 8004a76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004a78:	e7a6      	b.n	80049c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004a7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	441a      	add	r2, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <create_name+0xf4>
 8004a8c:	2306      	movs	r3, #6
 8004a8e:	e010      	b.n	8004ab2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2be5      	cmp	r3, #229	@ 0xe5
 8004a96:	d102      	bne.n	8004a9e <create_name+0x102>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2205      	movs	r2, #5
 8004a9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004a9e:	7efb      	ldrb	r3, [r7, #27]
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d801      	bhi.n	8004aa8 <create_name+0x10c>
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	e000      	b.n	8004aaa <create_name+0x10e>
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	330b      	adds	r3, #11
 8004aae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004ab0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	08023a80 	.word	0x08023a80
 8004ac0:	0802271c 	.word	0x0802271c

08004ac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004ad8:	e002      	b.n	8004ae0 <follow_path+0x1c>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b2f      	cmp	r3, #47	@ 0x2f
 8004ae6:	d0f8      	beq.n	8004ada <follow_path+0x16>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b5c      	cmp	r3, #92	@ 0x5c
 8004aee:	d0f4      	beq.n	8004ada <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b1f      	cmp	r3, #31
 8004afc:	d80a      	bhi.n	8004b14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2280      	movs	r2, #128	@ 0x80
 8004b02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004b06:	2100      	movs	r1, #0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fcfa 	bl	8004502 <dir_sdi>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
 8004b12:	e043      	b.n	8004b9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b14:	463b      	mov	r3, r7
 8004b16:	4619      	mov	r1, r3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff3f 	bl	800499c <create_name>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d134      	bne.n	8004b92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff feb0 	bl	800488e <dir_find>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004b38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d127      	bne.n	8004b96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004b46:	7afb      	ldrb	r3, [r7, #11]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d122      	bne.n	8004b96 <follow_path+0xd2>
 8004b50:	2305      	movs	r3, #5
 8004b52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004b54:	e01f      	b.n	8004b96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11c      	bne.n	8004b9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	799b      	ldrb	r3, [r3, #6]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004b6c:	2305      	movs	r3, #5
 8004b6e:	75fb      	strb	r3, [r7, #23]
 8004b70:	e014      	b.n	8004b9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	4413      	add	r3, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fe43 	bl	8004810 <ld_clust>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b90:	e7c0      	b.n	8004b14 <follow_path+0x50>
			if (res != FR_OK) break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <follow_path+0xd8>
				break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b9a:	bf00      	nop
			}
		}
	}

	return res;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d031      	beq.n	8004c20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e002      	b.n	8004bca <get_ldnumber+0x24>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d903      	bls.n	8004bda <get_ldnumber+0x34>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b3a      	cmp	r3, #58	@ 0x3a
 8004bd8:	d1f4      	bne.n	8004bc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b3a      	cmp	r3, #58	@ 0x3a
 8004be0:	d11c      	bne.n	8004c1c <get_ldnumber+0x76>
			tp = *path;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	60fa      	str	r2, [r7, #12]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	3b30      	subs	r3, #48	@ 0x30
 8004bf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	d80e      	bhi.n	8004c18 <get_ldnumber+0x72>
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d10a      	bne.n	8004c18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <get_ldnumber+0x72>
					vol = (int)i;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	e002      	b.n	8004c22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004c20:	693b      	ldr	r3, [r7, #16]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	70da      	strb	r2, [r3, #3]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff f8dc 	bl	8003e08 <move_window>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <check_fs+0x2a>
 8004c56:	2304      	movs	r3, #4
 8004c58:	e038      	b.n	8004ccc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3330      	adds	r3, #48	@ 0x30
 8004c5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fe20 	bl	80038a8 <ld_word>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <check_fs+0x48>
 8004c74:	2303      	movs	r3, #3
 8004c76:	e029      	b.n	8004ccc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c7e:	2be9      	cmp	r3, #233	@ 0xe9
 8004c80:	d009      	beq.n	8004c96 <check_fs+0x66>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c88:	2beb      	cmp	r3, #235	@ 0xeb
 8004c8a:	d11e      	bne.n	8004cca <check_fs+0x9a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c92:	2b90      	cmp	r3, #144	@ 0x90
 8004c94:	d119      	bne.n	8004cca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3330      	adds	r3, #48	@ 0x30
 8004c9a:	3336      	adds	r3, #54	@ 0x36
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fe1b 	bl	80038d8 <ld_dword>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <check_fs+0xa4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <check_fs+0x82>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e00c      	b.n	8004ccc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3330      	adds	r3, #48	@ 0x30
 8004cb6:	3352      	adds	r3, #82	@ 0x52
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fe0d 	bl	80038d8 <ld_dword>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4a05      	ldr	r2, [pc, #20]	@ (8004cd8 <check_fs+0xa8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <check_fs+0x9a>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004cca:	2302      	movs	r3, #2
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	00544146 	.word	0x00544146
 8004cd8:	33544146 	.word	0x33544146

08004cdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b096      	sub	sp, #88	@ 0x58
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff ff58 	bl	8004ba6 <get_ldnumber>
 8004cf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da01      	bge.n	8004d02 <find_volume+0x26>
 8004cfe:	230b      	movs	r3, #11
 8004d00:	e22d      	b.n	800515e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004d02:	4aa1      	ldr	r2, [pc, #644]	@ (8004f88 <find_volume+0x2ac>)
 8004d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <find_volume+0x3a>
 8004d12:	230c      	movs	r3, #12
 8004d14:	e223      	b.n	800515e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fd19 	bl	8003768 <disk_status>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <find_volume+0x82>
 8004d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004d5a:	230a      	movs	r3, #10
 8004d5c:	e1ff      	b.n	800515e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e1fd      	b.n	800515e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe fd11 	bl	800379c <disk_initialize>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004d80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e1e6      	b.n	800515e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <find_volume+0xca>
 8004d96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004da2:	230a      	movs	r3, #10
 8004da4:	e1db      	b.n	800515e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004daa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004dac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004dae:	f7ff ff3f 	bl	8004c30 <check_fs>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004db8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d149      	bne.n	8004e54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dc4:	e01e      	b.n	8004e04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004dd4:	4413      	add	r3, r2
 8004dd6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	3304      	adds	r3, #4
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <find_volume+0x114>
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	3308      	adds	r3, #8
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe fd76 	bl	80038d8 <ld_dword>
 8004dec:	4602      	mov	r2, r0
 8004dee:	e000      	b.n	8004df2 <find_volume+0x116>
 8004df0:	2200      	movs	r2, #0
 8004df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	3358      	adds	r3, #88	@ 0x58
 8004df8:	443b      	add	r3, r7
 8004dfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e00:	3301      	adds	r3, #1
 8004e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d9dd      	bls.n	8004dc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <find_volume+0x13e>
 8004e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e16:	3b01      	subs	r3, #1
 8004e18:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	3358      	adds	r3, #88	@ 0x58
 8004e20:	443b      	add	r3, r7
 8004e22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004e26:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <find_volume+0x15e>
 8004e2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e32:	f7ff fefd 	bl	8004c30 <check_fs>
 8004e36:	4603      	mov	r3, r0
 8004e38:	e000      	b.n	8004e3c <find_volume+0x160>
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004e40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d905      	bls.n	8004e54 <find_volume+0x178>
 8004e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d9e2      	bls.n	8004e1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004e54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d101      	bne.n	8004e60 <find_volume+0x184>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e17e      	b.n	800515e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004e60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d901      	bls.n	8004e6c <find_volume+0x190>
 8004e68:	230d      	movs	r3, #13
 8004e6a:	e178      	b.n	800515e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6e:	3330      	adds	r3, #48	@ 0x30
 8004e70:	330b      	adds	r3, #11
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe fd18 	bl	80038a8 <ld_word>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7e:	d001      	beq.n	8004e84 <find_volume+0x1a8>
 8004e80:	230d      	movs	r3, #13
 8004e82:	e16c      	b.n	800515e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	3330      	adds	r3, #48	@ 0x30
 8004e88:	3316      	adds	r3, #22
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fd0c 	bl	80038a8 <ld_word>
 8004e90:	4603      	mov	r3, r0
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <find_volume+0x1cc>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	3330      	adds	r3, #48	@ 0x30
 8004e9e:	3324      	adds	r3, #36	@ 0x24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fd19 	bl	80038d8 <ld_dword>
 8004ea6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	789b      	ldrb	r3, [r3, #2]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d005      	beq.n	8004ecc <find_volume+0x1f0>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec2:	789b      	ldrb	r3, [r3, #2]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d001      	beq.n	8004ecc <find_volume+0x1f0>
 8004ec8:	230d      	movs	r3, #13
 8004eca:	e148      	b.n	800515e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ece:	789b      	ldrb	r3, [r3, #2]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	895b      	ldrh	r3, [r3, #10]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <find_volume+0x224>
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	895b      	ldrh	r3, [r3, #10]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	895b      	ldrh	r3, [r3, #10]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <find_volume+0x228>
 8004f00:	230d      	movs	r3, #13
 8004f02:	e12c      	b.n	800515e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	3330      	adds	r3, #48	@ 0x30
 8004f08:	3311      	adds	r3, #17
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fccc 	bl	80038a8 <ld_word>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	891b      	ldrh	r3, [r3, #8]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <find_volume+0x24e>
 8004f26:	230d      	movs	r3, #13
 8004f28:	e119      	b.n	800515e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	3330      	adds	r3, #48	@ 0x30
 8004f2e:	3313      	adds	r3, #19
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe fcb9 	bl	80038a8 <ld_word>
 8004f36:	4603      	mov	r3, r0
 8004f38:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <find_volume+0x272>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	3330      	adds	r3, #48	@ 0x30
 8004f44:	3320      	adds	r3, #32
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe fcc6 	bl	80038d8 <ld_dword>
 8004f4c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f50:	3330      	adds	r3, #48	@ 0x30
 8004f52:	330e      	adds	r3, #14
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fca7 	bl	80038a8 <ld_word>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004f5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <find_volume+0x28c>
 8004f64:	230d      	movs	r3, #13
 8004f66:	e0fa      	b.n	800515e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004f68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6c:	4413      	add	r3, r2
 8004f6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f70:	8912      	ldrh	r2, [r2, #8]
 8004f72:	0912      	lsrs	r2, r2, #4
 8004f74:	b292      	uxth	r2, r2
 8004f76:	4413      	add	r3, r2
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d204      	bcs.n	8004f8c <find_volume+0x2b0>
 8004f82:	230d      	movs	r3, #13
 8004f84:	e0eb      	b.n	800515e <find_volume+0x482>
 8004f86:	bf00      	nop
 8004f88:	20000394 	.word	0x20000394
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004f8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f94:	8952      	ldrh	r2, [r2, #10]
 8004f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <find_volume+0x2ca>
 8004fa2:	230d      	movs	r3, #13
 8004fa4:	e0db      	b.n	800515e <find_volume+0x482>
		fmt = FS_FAT32;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d802      	bhi.n	8004fbc <find_volume+0x2e0>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d802      	bhi.n	8004fcc <find_volume+0x2f0>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	1c9a      	adds	r2, r3, #2
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fd8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004fda:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fde:	441a      	add	r2, r3
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004fe4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	441a      	add	r2, r3
 8004fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004fee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d11e      	bne.n	8005034 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	3330      	adds	r3, #48	@ 0x30
 8004ffa:	332a      	adds	r3, #42	@ 0x2a
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fc53 	bl	80038a8 <ld_word>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <find_volume+0x330>
 8005008:	230d      	movs	r3, #13
 800500a:	e0a8      	b.n	800515e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800500c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500e:	891b      	ldrh	r3, [r3, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <find_volume+0x33c>
 8005014:	230d      	movs	r3, #13
 8005016:	e0a2      	b.n	800515e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	3330      	adds	r3, #48	@ 0x30
 800501c:	332c      	adds	r3, #44	@ 0x2c
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fc5a 	bl	80038d8 <ld_dword>
 8005024:	4602      	mov	r2, r0
 8005026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005028:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800502a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	647b      	str	r3, [r7, #68]	@ 0x44
 8005032:	e01f      	b.n	8005074 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	891b      	ldrh	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <find_volume+0x364>
 800503c:	230d      	movs	r3, #13
 800503e:	e08e      	b.n	800515e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005046:	441a      	add	r2, r3
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800504c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005050:	2b02      	cmp	r3, #2
 8005052:	d103      	bne.n	800505c <find_volume+0x380>
 8005054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	e00a      	b.n	8005072 <find_volume+0x396>
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	085a      	lsrs	r2, r3, #1
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005072:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800507e:	0a5b      	lsrs	r3, r3, #9
 8005080:	429a      	cmp	r2, r3
 8005082:	d201      	bcs.n	8005088 <find_volume+0x3ac>
 8005084:	230d      	movs	r3, #13
 8005086:	e06a      	b.n	800515e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	611a      	str	r2, [r3, #16]
 8005090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	2280      	movs	r2, #128	@ 0x80
 800509c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800509e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d149      	bne.n	800513a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	3330      	adds	r3, #48	@ 0x30
 80050aa:	3330      	adds	r3, #48	@ 0x30
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe fbfb 	bl	80038a8 <ld_word>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d140      	bne.n	800513a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80050b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050ba:	3301      	adds	r3, #1
 80050bc:	4619      	mov	r1, r3
 80050be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050c0:	f7fe fea2 	bl	8003e08 <move_window>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d137      	bne.n	800513a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	2200      	movs	r2, #0
 80050ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	3330      	adds	r3, #48	@ 0x30
 80050d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fbe5 	bl	80038a8 <ld_word>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d127      	bne.n	800513a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ec:	3330      	adds	r3, #48	@ 0x30
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fbf2 	bl	80038d8 <ld_dword>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <find_volume+0x48c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d11e      	bne.n	800513a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fe:	3330      	adds	r3, #48	@ 0x30
 8005100:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fbe7 	bl	80038d8 <ld_dword>
 800510a:	4603      	mov	r3, r0
 800510c:	4a17      	ldr	r2, [pc, #92]	@ (800516c <find_volume+0x490>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d113      	bne.n	800513a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	3330      	adds	r3, #48	@ 0x30
 8005116:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fbdc 	bl	80038d8 <ld_dword>
 8005120:	4602      	mov	r2, r0
 8005122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005124:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	3330      	adds	r3, #48	@ 0x30
 800512a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fbd2 	bl	80038d8 <ld_dword>
 8005134:	4602      	mov	r2, r0
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005140:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <find_volume+0x494>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	3301      	adds	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	4b09      	ldr	r3, [pc, #36]	@ (8005170 <find_volume+0x494>)
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	4b08      	ldr	r3, [pc, #32]	@ (8005170 <find_volume+0x494>)
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005154:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005156:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005158:	f7fe fdee 	bl	8003d38 <clear_lock>
#endif
	return FR_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3758      	adds	r7, #88	@ 0x58
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	41615252 	.word	0x41615252
 800516c:	61417272 	.word	0x61417272
 8005170:	20000398 	.word	0x20000398

08005174 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800517e:	2309      	movs	r3, #9
 8005180:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <validate+0x4e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d018      	beq.n	80051c2 <validate+0x4e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d013      	beq.n	80051c2 <validate+0x4e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	889a      	ldrh	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	88db      	ldrh	r3, [r3, #6]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d10c      	bne.n	80051c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fada 	bl	8003768 <disk_status>
 80051b4:	4603      	mov	r3, r0
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <validate+0x4e>
			res = FR_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <validate+0x5a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	e000      	b.n	80051d0 <validate+0x5c>
 80051ce:	2300      	movs	r3, #0
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	6013      	str	r3, [r2, #0]
	return res;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80051f2:	f107 0310 	add.w	r3, r7, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fcd5 	bl	8004ba6 <get_ldnumber>
 80051fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	da01      	bge.n	8005208 <f_mount+0x28>
 8005204:	230b      	movs	r3, #11
 8005206:	e02b      	b.n	8005260 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005208:	4a17      	ldr	r2, [pc, #92]	@ (8005268 <f_mount+0x88>)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005218:	69b8      	ldr	r0, [r7, #24]
 800521a:	f7fe fd8d 	bl	8003d38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	490d      	ldr	r1, [pc, #52]	@ (8005268 <f_mount+0x88>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <f_mount+0x66>
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <f_mount+0x6a>
 8005246:	2300      	movs	r3, #0
 8005248:	e00a      	b.n	8005260 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800524a:	f107 010c 	add.w	r1, r7, #12
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	2200      	movs	r2, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fd41 	bl	8004cdc <find_volume>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800525e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000394 	.word	0x20000394

0800526c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b098      	sub	sp, #96	@ 0x60
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <f_open+0x18>
 8005280:	2309      	movs	r3, #9
 8005282:	e1a9      	b.n	80055d8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800528a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800528c:	79fa      	ldrb	r2, [r7, #7]
 800528e:	f107 0110 	add.w	r1, r7, #16
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fd20 	bl	8004cdc <find_volume>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80052a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 818d 	bne.w	80055c6 <f_open+0x35a>
		dj.obj.fs = fs;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	f107 0314 	add.w	r3, r7, #20
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fc03 	bl	8004ac4 <follow_path>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80052c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d118      	bne.n	80052fe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80052cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052d0:	b25b      	sxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	da03      	bge.n	80052de <f_open+0x72>
				res = FR_INVALID_NAME;
 80052d6:	2306      	movs	r3, #6
 80052d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80052dc:	e00f      	b.n	80052fe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf8c      	ite	hi
 80052e4:	2301      	movhi	r3, #1
 80052e6:	2300      	movls	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fbd8 	bl	8003aa8 <chk_lock>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	f003 031c 	and.w	r3, r3, #28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d07f      	beq.n	8005408 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005308:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800530c:	2b00      	cmp	r3, #0
 800530e:	d017      	beq.n	8005340 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005310:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005314:	2b04      	cmp	r3, #4
 8005316:	d10e      	bne.n	8005336 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005318:	f7fe fc22 	bl	8003b60 <enq_lock>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d006      	beq.n	8005330 <f_open+0xc4>
 8005322:	f107 0314 	add.w	r3, r7, #20
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fb06 	bl	8004938 <dir_register>
 800532c:	4603      	mov	r3, r0
 800532e:	e000      	b.n	8005332 <f_open+0xc6>
 8005330:	2312      	movs	r3, #18
 8005332:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	f043 0308 	orr.w	r3, r3, #8
 800533c:	71fb      	strb	r3, [r7, #7]
 800533e:	e010      	b.n	8005362 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005340:	7ebb      	ldrb	r3, [r7, #26]
 8005342:	f003 0311 	and.w	r3, r3, #17
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <f_open+0xe6>
					res = FR_DENIED;
 800534a:	2307      	movs	r3, #7
 800534c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005350:	e007      	b.n	8005362 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <f_open+0xf6>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005362:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005366:	2b00      	cmp	r3, #0
 8005368:	d168      	bne.n	800543c <f_open+0x1d0>
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d063      	beq.n	800543c <f_open+0x1d0>
				dw = GET_FATTIME();
 8005374:	f7fd fcac 	bl	8002cd0 <get_fattime>
 8005378:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	330e      	adds	r3, #14
 800537e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005380:	4618      	mov	r0, r3
 8005382:	f7fe fae7 	bl	8003954 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	3316      	adds	r3, #22
 800538a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fae1 	bl	8003954 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005394:	330b      	adds	r3, #11
 8005396:	2220      	movs	r2, #32
 8005398:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fa35 	bl	8004810 <ld_clust>
 80053a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053ac:	2200      	movs	r2, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fa4d 	bl	800484e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80053b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b6:	331c      	adds	r3, #28
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe faca 	bl	8003954 <st_dword>
					fs->wflag = 1;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2201      	movs	r2, #1
 80053c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80053c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d037      	beq.n	800543c <f_open+0x1d0>
						dw = fs->winsect;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80053d2:	f107 0314 	add.w	r3, r7, #20
 80053d6:	2200      	movs	r2, #0
 80053d8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe ff60 	bl	80042a0 <remove_chain>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80053e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d126      	bne.n	800543c <f_open+0x1d0>
							res = move_window(fs, dw);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fd08 	bl	8003e08 <move_window>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005402:	3a01      	subs	r2, #1
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	e019      	b.n	800543c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005408:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800540c:	2b00      	cmp	r3, #0
 800540e:	d115      	bne.n	800543c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005410:	7ebb      	ldrb	r3, [r7, #26]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <f_open+0x1b6>
					res = FR_NO_FILE;
 800541a:	2304      	movs	r3, #4
 800541c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005420:	e00c      	b.n	800543c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <f_open+0x1d0>
 800542c:	7ebb      	ldrb	r3, [r7, #26]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <f_open+0x1d0>
						res = FR_DENIED;
 8005436:	2307      	movs	r3, #7
 8005438:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800543c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005440:	2b00      	cmp	r3, #0
 8005442:	d126      	bne.n	8005492 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005454:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800545e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	2b01      	cmp	r3, #1
 8005468:	bf8c      	ite	hi
 800546a:	2301      	movhi	r3, #1
 800546c:	2300      	movls	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f7fe fb93 	bl	8003ba4 <inc_lock>
 800547e:	4602      	mov	r2, r0
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <f_open+0x226>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005492:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 8095 	bne.w	80055c6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f9b4 	bl	8004810 <ld_clust>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b0:	331c      	adds	r3, #28
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fa10 	bl	80038d8 <ld_dword>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	88da      	ldrh	r2, [r3, #6]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	79fa      	ldrb	r2, [r7, #7]
 80054d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3330      	adds	r3, #48	@ 0x30
 80054ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fa7a 	bl	80039ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d060      	beq.n	80055c6 <f_open+0x35a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d05c      	beq.n	80055c6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	895b      	ldrh	r3, [r3, #10]
 8005518:	025b      	lsls	r3, r3, #9
 800551a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	657b      	str	r3, [r7, #84]	@ 0x54
 8005528:	e016      	b.n	8005558 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fd25 	bl	8003f7e <get_fat>
 8005534:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005538:	2b01      	cmp	r3, #1
 800553a:	d802      	bhi.n	8005542 <f_open+0x2d6>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d102      	bne.n	8005550 <f_open+0x2e4>
 800554a:	2301      	movs	r3, #1
 800554c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	657b      	str	r3, [r7, #84]	@ 0x54
 8005558:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800555c:	2b00      	cmp	r3, #0
 800555e:	d103      	bne.n	8005568 <f_open+0x2fc>
 8005560:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005564:	429a      	cmp	r2, r3
 8005566:	d8e0      	bhi.n	800552a <f_open+0x2be>
				}
				fp->clust = clst;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800556c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800556e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005572:	2b00      	cmp	r3, #0
 8005574:	d127      	bne.n	80055c6 <f_open+0x35a>
 8005576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557c:	2b00      	cmp	r3, #0
 800557e:	d022      	beq.n	80055c6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005584:	4618      	mov	r0, r3
 8005586:	f7fe fcdb 	bl	8003f40 <clust2sect>
 800558a:	6478      	str	r0, [r7, #68]	@ 0x44
 800558c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <f_open+0x32e>
						res = FR_INT_ERR;
 8005592:	2302      	movs	r3, #2
 8005594:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005598:	e015      	b.n	80055c6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800559a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559c:	0a5a      	lsrs	r2, r3, #9
 800559e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	7858      	ldrb	r0, [r3, #1]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	2301      	movs	r3, #1
 80055b6:	f7fe f919 	bl	80037ec <disk_read>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <f_open+0x35a>
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80055c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <f_open+0x368>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80055d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3760      	adds	r7, #96	@ 0x60
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08e      	sub	sp, #56	@ 0x38
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f107 0214 	add.w	r2, r7, #20
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fdb7 	bl	8005174 <validate>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800560c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <f_read+0x44>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	7d5b      	ldrb	r3, [r3, #21]
 8005618:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800561c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <f_read+0x4a>
 8005624:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005628:	e115      	b.n	8005856 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	7d1b      	ldrb	r3, [r3, #20]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <f_read+0x5a>
 8005636:	2307      	movs	r3, #7
 8005638:	e10d      	b.n	8005856 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	429a      	cmp	r2, r3
 800564c:	f240 80fe 	bls.w	800584c <f_read+0x26c>
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005654:	e0fa      	b.n	800584c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 80c6 	bne.w	80057f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	0a5b      	lsrs	r3, r3, #9
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	8952      	ldrh	r2, [r2, #10]
 800566e:	3a01      	subs	r2, #1
 8005670:	4013      	ands	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d12f      	bne.n	80056da <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	633b      	str	r3, [r7, #48]	@ 0x30
 8005688:	e013      	b.n	80056b2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7fe fefe 	bl	800449a <clmt_clust>
 800569e:	6338      	str	r0, [r7, #48]	@ 0x30
 80056a0:	e007      	b.n	80056b2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe fc67 	bl	8003f7e <get_fat>
 80056b0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d804      	bhi.n	80056c2 <f_read+0xe2>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2202      	movs	r2, #2
 80056bc:	755a      	strb	r2, [r3, #21]
 80056be:	2302      	movs	r3, #2
 80056c0:	e0c9      	b.n	8005856 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d104      	bne.n	80056d4 <f_read+0xf4>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	755a      	strb	r2, [r3, #21]
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0c0      	b.n	8005856 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f7fe fc2c 	bl	8003f40 <clust2sect>
 80056e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <f_read+0x11a>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2202      	movs	r2, #2
 80056f4:	755a      	strb	r2, [r3, #21]
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0ad      	b.n	8005856 <f_read+0x276>
			sect += csect;
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0a5b      	lsrs	r3, r3, #9
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d039      	beq.n	8005782 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	4413      	add	r3, r2
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	8952      	ldrh	r2, [r2, #10]
 8005718:	4293      	cmp	r3, r2
 800571a:	d905      	bls.n	8005728 <f_read+0x148>
					cc = fs->csize - csect;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	895b      	ldrh	r3, [r3, #10]
 8005720:	461a      	mov	r2, r3
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	7858      	ldrb	r0, [r3, #1]
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005732:	f7fe f85b 	bl	80037ec <disk_read>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d004      	beq.n	8005746 <f_read+0x166>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	755a      	strb	r2, [r3, #21]
 8005742:	2301      	movs	r3, #1
 8005744:	e087      	b.n	8005856 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	7d1b      	ldrb	r3, [r3, #20]
 800574a:	b25b      	sxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	da14      	bge.n	800577a <f_read+0x19a>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1a      	ldr	r2, [r3, #32]
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800575a:	429a      	cmp	r2, r3
 800575c:	d90d      	bls.n	800577a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	025b      	lsls	r3, r3, #9
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	18d0      	adds	r0, r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3330      	adds	r3, #48	@ 0x30
 8005770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005774:	4619      	mov	r1, r3
 8005776:	f7fe f919 	bl	80039ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	025b      	lsls	r3, r3, #9
 800577e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005780:	e050      	b.n	8005824 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	429a      	cmp	r2, r3
 800578a:	d02e      	beq.n	80057ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	7d1b      	ldrb	r3, [r3, #20]
 8005790:	b25b      	sxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	da18      	bge.n	80057c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	7858      	ldrb	r0, [r3, #1]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	2301      	movs	r3, #1
 80057a6:	f7fe f841 	bl	800382c <disk_write>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <f_read+0x1da>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	755a      	strb	r2, [r3, #21]
 80057b6:	2301      	movs	r3, #1
 80057b8:	e04d      	b.n	8005856 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	7d1b      	ldrb	r3, [r3, #20]
 80057be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	7858      	ldrb	r0, [r3, #1]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057d2:	2301      	movs	r3, #1
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	f7fe f809 	bl	80037ec <disk_read>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <f_read+0x20a>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	755a      	strb	r2, [r3, #21]
 80057e6:	2301      	movs	r3, #1
 80057e8:	e035      	b.n	8005856 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80057fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	429a      	cmp	r2, r3
 8005804:	d901      	bls.n	800580a <f_read+0x22a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005818:	4413      	add	r3, r2
 800581a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800581c:	4619      	mov	r1, r3
 800581e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005820:	f7fe f8c4 	bl	80039ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	4413      	add	r3, r2
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	441a      	add	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	619a      	str	r2, [r3, #24]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	441a      	add	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	f47f af01 	bne.w	8005656 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3738      	adds	r7, #56	@ 0x38
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f107 0208 	add.w	r2, r7, #8
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fc80 	bl	8005174 <validate>
 8005874:	4603      	mov	r3, r0
 8005876:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d168      	bne.n	8005950 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	7d1b      	ldrb	r3, [r3, #20]
 8005882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d062      	beq.n	8005950 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	7d1b      	ldrb	r3, [r3, #20]
 800588e:	b25b      	sxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	da15      	bge.n	80058c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	7858      	ldrb	r0, [r3, #1]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1a      	ldr	r2, [r3, #32]
 80058a2:	2301      	movs	r3, #1
 80058a4:	f7fd ffc2 	bl	800382c <disk_write>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <f_sync+0x54>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e04f      	b.n	8005952 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7d1b      	ldrb	r3, [r3, #20]
 80058b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80058c0:	f7fd fa06 	bl	8002cd0 <get_fattime>
 80058c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7fe fa9a 	bl	8003e08 <move_window>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d138      	bne.n	8005950 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	330b      	adds	r3, #11
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	330b      	adds	r3, #11
 80058ee:	f042 0220 	orr.w	r2, r2, #32
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	461a      	mov	r2, r3
 8005900:	68f9      	ldr	r1, [r7, #12]
 8005902:	f7fe ffa4 	bl	800484e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f103 021c 	add.w	r2, r3, #28
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f7fe f81e 	bl	8003954 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3316      	adds	r3, #22
 800591c:	6939      	ldr	r1, [r7, #16]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe f818 	bl	8003954 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3312      	adds	r3, #18
 8005928:	2100      	movs	r1, #0
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd fff7 	bl	800391e <st_word>
					fs->wflag = 1;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2201      	movs	r2, #1
 8005934:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fa93 	bl	8003e64 <sync_fs>
 800593e:	4603      	mov	r3, r0
 8005940:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	7d1b      	ldrb	r3, [r3, #20]
 8005946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800594a:	b2da      	uxtb	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005950:	7dfb      	ldrb	r3, [r7, #23]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff ff7b 	bl	800585e <f_sync>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d118      	bne.n	80059a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f107 0208 	add.w	r2, r7, #8
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff fbfa 	bl	8005174 <validate>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10c      	bne.n	80059a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe f996 	bl	8003cc0 <dec_lock>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80059c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 80059c8:	7a5b      	ldrb	r3, [r3, #9]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d131      	bne.n	8005a34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80059d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 80059d2:	7a5b      	ldrb	r3, [r3, #9]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 80059da:	2100      	movs	r1, #0
 80059dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80059de:	4b19      	ldr	r3, [pc, #100]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 80059e0:	7a5b      	ldrb	r3, [r3, #9]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	4a17      	ldr	r2, [pc, #92]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80059ee:	4b15      	ldr	r3, [pc, #84]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 80059f0:	7a5b      	ldrb	r3, [r3, #9]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b13      	ldr	r3, [pc, #76]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 80059f8:	4413      	add	r3, r2
 80059fa:	79fa      	ldrb	r2, [r7, #7]
 80059fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80059fe:	4b11      	ldr	r3, [pc, #68]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 8005a00:	7a5b      	ldrb	r3, [r3, #9]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	b2d1      	uxtb	r1, r2
 8005a08:	4a0e      	ldr	r2, [pc, #56]	@ (8005a44 <FATFS_LinkDriverEx+0x94>)
 8005a0a:	7251      	strb	r1, [r2, #9]
 8005a0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005a0e:	7dbb      	ldrb	r3, [r7, #22]
 8005a10:	3330      	adds	r3, #48	@ 0x30
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	223a      	movs	r2, #58	@ 0x3a
 8005a1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	3302      	adds	r3, #2
 8005a24:	222f      	movs	r2, #47	@ 0x2f
 8005a26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	3303      	adds	r3, #3
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200003bc 	.word	0x200003bc

08005a48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005a52:	2200      	movs	r2, #0
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff ffaa 	bl	80059b0 <FATFS_LinkDriverEx>
 8005a5c:	4603      	mov	r3, r0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <jpeg_abort>:
 * responsibility.
 */

GLOBAL(void)
jpeg_abort (j_common_ptr cinfo)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01e      	beq.n	8005ab4 <jpeg_abort+0x4e>
    return;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 8005a76:	2301      	movs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e008      	b.n	8005a8e <jpeg_abort+0x28>
    (*cinfo->mem->free_pool) (cinfo, pool);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dcf3      	bgt.n	8005a7c <jpeg_abort+0x16>
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <jpeg_abort+0x46>
    cinfo->global_state = DSTATE_START;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	22c8      	movs	r2, #200	@ 0xc8
 8005aa0:	615a      	str	r2, [r3, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
 8005aaa:	e004      	b.n	8005ab6 <jpeg_abort+0x50>
  } else {
    cinfo->global_state = CSTATE_START;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2264      	movs	r2, #100	@ 0x64
 8005ab0:	615a      	str	r2, [r3, #20]
 8005ab2:	e000      	b.n	8005ab6 <jpeg_abort+0x50>
    return;
 8005ab4:	bf00      	nop
  }
}
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <jpeg_destroy>:
 * responsibility.
 */

GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <jpeg_destroy+0x1a>
    (*cinfo->mem->self_destruct) (cinfo);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	605a      	str	r2, [r3, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	615a      	str	r2, [r3, #20]
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2284      	movs	r2, #132	@ 0x84
 8005afa:	2100      	movs	r1, #0
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
 8005b00:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return tbl;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005b26:	2100      	movs	r1, #0
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
 8005b2c:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  return tbl;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <jpeg_CreateDecompress>:
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL(void)
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	605a      	str	r2, [r3, #4]
  if (version != JPEG_LIB_VERSION)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b50      	cmp	r3, #80	@ 0x50
 8005b56:	d010      	beq.n	8005b7a <jpeg_CreateDecompress+0x3a>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	220d      	movs	r2, #13
 8005b5e:	615a      	str	r2, [r3, #20]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2250      	movs	r2, #80	@ 0x50
 8005b66:	619a      	str	r2, [r3, #24]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	61da      	str	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f5b3 7ff4 	cmp.w	r3, #488	@ 0x1e8
 8005b80:	d011      	beq.n	8005ba6 <jpeg_CreateDecompress+0x66>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2216      	movs	r2, #22
 8005b88:	615a      	str	r2, [r3, #20]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8005b92:	619a      	str	r2, [r3, #24]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	61da      	str	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	4798      	blx	r3
   * client_data, so we have to save and restore those fields.
   * Note: if application hasn't set client_data, tools like Purify may
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	617b      	str	r3, [r7, #20]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 8005bb2:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f01c f9c9 	bl	8021f50 <memset>
    cinfo->err = err;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	601a      	str	r2, [r3, #0]
    cinfo->client_data = client_data;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	60da      	str	r2, [r3, #12]
  }
  cinfo->is_decompressor = TRUE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	611a      	str	r2, [r3, #16]

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f019 fcbb 	bl	801f54c <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	609a      	str	r2, [r3, #8]
  cinfo->src = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	619a      	str	r2, [r3, #24]

  for (i = 0; i < NUM_QUANT_TBLS; i++)
 8005be2:	2300      	movs	r3, #0
 8005be4:	61fb      	str	r3, [r7, #28]
 8005be6:	e009      	b.n	8005bfc <jpeg_CreateDecompress+0xbc>
    cinfo->quant_tbl_ptrs[i] = NULL;
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	3328      	adds	r3, #40	@ 0x28
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_QUANT_TBLS; i++)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	ddf2      	ble.n	8005be8 <jpeg_CreateDecompress+0xa8>

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	e010      	b.n	8005c2a <jpeg_CreateDecompress+0xea>
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	332c      	adds	r3, #44	@ 0x2c
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	605a      	str	r2, [r3, #4]
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3330      	adds	r3, #48	@ 0x30
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	2200      	movs	r2, #0
 8005c22:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	ddeb      	ble.n	8005c08 <jpeg_CreateDecompress+0xc8>
  }

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  jinit_marker_reader(cinfo);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f009 fe07 	bl	800f84c <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f007 f80c 	bl	800cc5c <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	22c8      	movs	r2, #200	@ 0xc8
 8005c48:	615a      	str	r2, [r3, #20]
}
 8005c4a:	bf00      	nop
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <jpeg_destroy_decompress>:
 * Destruction of a JPEG decompression object
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff ff2e 	bl	8005abc <jpeg_destroy>
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <default_decompress_parms>:
 * Set default decompression parameters.
 */

LOCAL(void)
default_decompress_parms (j_decompress_ptr cinfo)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Guess the input colorspace, and set output colorspace accordingly. */
  /* (Wish JPEG committee had provided a real way to specify this...) */
  /* Note application may override our guesses. */
  switch (cinfo->num_components) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	f000 8097 	beq.w	8005da8 <default_decompress_parms+0x140>
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	f300 80ca 	bgt.w	8005e14 <default_decompress_parms+0x1ac>
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d002      	beq.n	8005c8a <default_decompress_parms+0x22>
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d009      	beq.n	8005c9c <default_decompress_parms+0x34>
 8005c88:	e0c4      	b.n	8005e14 <default_decompress_parms+0x1ac>
  case 1:
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    cinfo->out_color_space = JCS_GRAYSCALE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8005c9a:	e0c4      	b.n	8005e26 <default_decompress_parms+0x1be>
    
  case 3:
    if (cinfo->saw_JFIF_marker) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <default_decompress_parms+0x48>
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2203      	movs	r2, #3
 8005caa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8005cae:	e076      	b.n	8005d9e <default_decompress_parms+0x136>
    } else if (cinfo->saw_Adobe_marker) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d027      	beq.n	8005d0a <default_decompress_parms+0xa2>
      switch (cinfo->Adobe_transform) {
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <default_decompress_parms+0x62>
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d005      	beq.n	8005cd4 <default_decompress_parms+0x6c>
 8005cc8:	e009      	b.n	8005cde <default_decompress_parms+0x76>
      case 0:
	cinfo->jpeg_color_space = JCS_RGB;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	break;
 8005cd2:	e064      	b.n	8005d9e <default_decompress_parms+0x136>
      case 1:
	cinfo->jpeg_color_space = JCS_YCbCr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	break;
 8005cdc:	e05f      	b.n	8005d9e <default_decompress_parms+0x136>
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2274      	movs	r2, #116	@ 0x74
 8005ce4:	615a      	str	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	619a      	str	r2, [r3, #24]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2203      	movs	r2, #3
 8005d04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	break;
 8005d08:	e049      	b.n	8005d9e <default_decompress_parms+0x136>
      }
    } else {
      /* Saw no special markers, try to guess from the component IDs */
      int cid0 = cinfo->comp_info[0].component_id;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	617b      	str	r3, [r7, #20]
      int cid1 = cinfo->comp_info[1].component_id;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d1a:	3358      	adds	r3, #88	@ 0x58
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	613b      	str	r3, [r7, #16]
      int cid2 = cinfo->comp_info[2].component_id;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d26:	33b0      	adds	r3, #176	@ 0xb0
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]

      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10a      	bne.n	8005d48 <default_decompress_parms+0xe0>
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d107      	bne.n	8005d48 <default_decompress_parms+0xe0>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d104      	bne.n	8005d48 <default_decompress_parms+0xe0>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2203      	movs	r2, #3
 8005d42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8005d46:	e02a      	b.n	8005d9e <default_decompress_parms+0x136>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b52      	cmp	r3, #82	@ 0x52
 8005d4c:	d10a      	bne.n	8005d64 <default_decompress_parms+0xfc>
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b47      	cmp	r3, #71	@ 0x47
 8005d52:	d107      	bne.n	8005d64 <default_decompress_parms+0xfc>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b42      	cmp	r3, #66	@ 0x42
 8005d58:	d104      	bne.n	8005d64 <default_decompress_parms+0xfc>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8005d62:	e01c      	b.n	8005d9e <default_decompress_parms+0x136>
      else {
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3318      	adds	r3, #24
 8005d6a:	60bb      	str	r3, [r7, #8]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3304      	adds	r3, #4
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2271      	movs	r2, #113	@ 0x71
 8005d88:	615a      	str	r2, [r3, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2101      	movs	r1, #1
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2203      	movs	r2, #3
 8005d9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
      }
    }
    /* Always guess RGB is proper output colorspace. */
    cinfo->out_color_space = JCS_RGB;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8005da6:	e03e      	b.n	8005e26 <default_decompress_parms+0x1be>
    
  case 4:
    if (cinfo->saw_Adobe_marker) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d027      	beq.n	8005e02 <default_decompress_parms+0x19a>
      switch (cinfo->Adobe_transform) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <default_decompress_parms+0x15a>
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d005      	beq.n	8005dcc <default_decompress_parms+0x164>
 8005dc0:	e009      	b.n	8005dd6 <default_decompress_parms+0x16e>
      case 0:
	cinfo->jpeg_color_space = JCS_CMYK;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	break;
 8005dca:	e01e      	b.n	8005e0a <default_decompress_parms+0x1a2>
      case 2:
	cinfo->jpeg_color_space = JCS_YCCK;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2205      	movs	r2, #5
 8005dd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	break;
 8005dd4:	e019      	b.n	8005e0a <default_decompress_parms+0x1a2>
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2274      	movs	r2, #116	@ 0x74
 8005ddc:	615a      	str	r2, [r3, #20]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	619a      	str	r2, [r3, #24]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f04f 31ff 	mov.w	r1, #4294967295
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	break;
 8005e00:	e003      	b.n	8005e0a <default_decompress_parms+0x1a2>
      }
    } else {
      /* No special markers, assume straight CMYK. */
      cinfo->jpeg_color_space = JCS_CMYK;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }
    cinfo->out_color_space = JCS_CMYK;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8005e12:	e008      	b.n	8005e26 <default_decompress_parms+0x1be>
    
  default:
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    cinfo->out_color_space = JCS_UNKNOWN;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    break;
 8005e24:	bf00      	nop
  }

  /* Set defaults for other decompression parameters. */
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  cinfo->scale_denom = cinfo->block_size;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  cinfo->output_gamma = 1.0;
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	4b18      	ldr	r3, [pc, #96]	@ (8005ea8 <default_decompress_parms+0x240>)
 8005e46:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  cinfo->buffered_image = FALSE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	641a      	str	r2, [r3, #64]	@ 0x40
  cinfo->raw_data_out = FALSE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	645a      	str	r2, [r3, #68]	@ 0x44
  cinfo->dct_method = JDCT_DEFAULT;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  cinfo->do_fancy_upsampling = TRUE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	64da      	str	r2, [r3, #76]	@ 0x4c
  cinfo->do_block_smoothing = TRUE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	651a      	str	r2, [r3, #80]	@ 0x50
  cinfo->quantize_colors = FALSE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* We set these in case application only sets quantize_colors. */
  cinfo->dither_mode = JDITHER_FS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
#ifdef QUANT_2PASS_SUPPORTED
  cinfo->two_pass_quantize = TRUE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
#else
  cinfo->two_pass_quantize = FALSE;
#endif
  cinfo->desired_number_of_colors = 256;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e84:	661a      	str	r2, [r3, #96]	@ 0x60
  cinfo->colormap = NULL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  /* Initialize for no mode change in buffered-image mode. */
  cinfo->enable_1pass_quant = FALSE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	665a      	str	r2, [r3, #100]	@ 0x64
  cinfo->enable_external_quant = FALSE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	669a      	str	r2, [r3, #104]	@ 0x68
  cinfo->enable_2pass_quant = FALSE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8005ea0:	bf00      	nop
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	3ff00000 	.word	0x3ff00000

08005eac <jpeg_read_header>:
 * extra error checking.
 */

GLOBAL(int)
jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  int retcode;

  if (cinfo->global_state != DSTATE_START &&
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ebc:	d011      	beq.n	8005ee2 <jpeg_read_header+0x36>
      cinfo->global_state != DSTATE_INHEADER)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
  if (cinfo->global_state != DSTATE_START &&
 8005ec2:	2bc9      	cmp	r3, #201	@ 0xc9
 8005ec4:	d00d      	beq.n	8005ee2 <jpeg_read_header+0x36>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2215      	movs	r2, #21
 8005ecc:	615a      	str	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6952      	ldr	r2, [r2, #20]
 8005ed6:	619a      	str	r2, [r3, #24]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3

  retcode = jpeg_consume_input(cinfo);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f828 	bl	8005f38 <jpeg_consume_input>
 8005ee8:	60f8      	str	r0, [r7, #12]

  switch (retcode) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d00b      	beq.n	8005f08 <jpeg_read_header+0x5c>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	dc1b      	bgt.n	8005f2e <jpeg_read_header+0x82>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <jpeg_read_header+0x80>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d115      	bne.n	8005f2e <jpeg_read_header+0x82>
  case JPEG_REACHED_SOS:
    retcode = JPEG_HEADER_OK;
 8005f02:	2301      	movs	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
    break;
 8005f06:	e012      	b.n	8005f2e <jpeg_read_header+0x82>
  case JPEG_REACHED_EOI:
    if (require_image)		/* Complain if application wanted an image */
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <jpeg_read_header+0x74>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2235      	movs	r2, #53	@ 0x35
 8005f14:	615a      	str	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
    /* Reset to start state; it would be safer to require the application to
     * call jpeg_abort, but we can't change it now for compatibility reasons.
     * A side effect is to free any temporary memory (there shouldn't be any).
     */
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff fda0 	bl	8005a66 <jpeg_abort>
    retcode = JPEG_HEADER_TABLES_ONLY;
 8005f26:	2302      	movs	r3, #2
 8005f28:	60fb      	str	r3, [r7, #12]
    break;
 8005f2a:	e000      	b.n	8005f2e <jpeg_read_header+0x82>
  case JPEG_SUSPENDED:
    /* no work */
    break;
 8005f2c:	bf00      	nop
  }

  return retcode;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <jpeg_consume_input>:
 * method.
 */

GLOBAL(int)
jpeg_consume_input (j_decompress_ptr cinfo)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  int retcode = JPEG_SUSPENDED;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	3bc8      	subs	r3, #200	@ 0xc8
 8005f4a:	2b0a      	cmp	r3, #10
 8005f4c:	d842      	bhi.n	8005fd4 <jpeg_consume_input+0x9c>
 8005f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <jpeg_consume_input+0x1c>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	08005f9d 	.word	0x08005f9d
 8005f5c:	08005fbf 	.word	0x08005fbf
 8005f60:	08005fc5 	.word	0x08005fc5
 8005f64:	08005fc5 	.word	0x08005fc5
 8005f68:	08005fc5 	.word	0x08005fc5
 8005f6c:	08005fc5 	.word	0x08005fc5
 8005f70:	08005fc5 	.word	0x08005fc5
 8005f74:	08005fc5 	.word	0x08005fc5
 8005f78:	08005fd5 	.word	0x08005fd5
 8005f7c:	08005fc5 	.word	0x08005fc5
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	22c9      	movs	r2, #201	@ 0xc9
 8005f9a:	615a      	str	r2, [r3, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
 8005fa8:	60f8      	str	r0, [r7, #12]
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d120      	bne.n	8005ff2 <jpeg_consume_input+0xba>
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fe59 	bl	8005c68 <default_decompress_parms>
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	22ca      	movs	r2, #202	@ 0xca
 8005fba:	615a      	str	r2, [r3, #20]
    }
    break;
 8005fbc:	e019      	b.n	8005ff2 <jpeg_consume_input+0xba>
  case DSTATE_READY:
    /* Can't advance past first SOS until start_decompress is called */
    retcode = JPEG_REACHED_SOS;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
    break;
 8005fc2:	e017      	b.n	8005ff4 <jpeg_consume_input+0xbc>
  case DSTATE_SCANNING:
  case DSTATE_RAW_OK:
  case DSTATE_BUFIMAGE:
  case DSTATE_BUFPOST:
  case DSTATE_STOPPING:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
 8005fd0:	60f8      	str	r0, [r7, #12]
    break;
 8005fd2:	e00f      	b.n	8005ff4 <jpeg_consume_input+0xbc>
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2215      	movs	r2, #21
 8005fda:	615a      	str	r2, [r3, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6952      	ldr	r2, [r2, #20]
 8005fe4:	619a      	str	r2, [r3, #24]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
 8005ff0:	e000      	b.n	8005ff4 <jpeg_consume_input+0xbc>
    break;
 8005ff2:	bf00      	nop
  }
  return retcode;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop

08006000 <jpeg_finish_decompress>:
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	2bcd      	cmp	r3, #205	@ 0xcd
 800600e:	d003      	beq.n	8006018 <jpeg_finish_decompress+0x18>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8006014:	2bce      	cmp	r3, #206	@ 0xce
 8006016:	d11d      	bne.n	8006054 <jpeg_finish_decompress+0x54>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d119      	bne.n	8006054 <jpeg_finish_decompress+0x54>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800602a:	429a      	cmp	r2, r3
 800602c:	d208      	bcs.n	8006040 <jpeg_finish_decompress+0x40>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2245      	movs	r2, #69	@ 0x45
 8006034:	615a      	str	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	22d2      	movs	r2, #210	@ 0xd2
 8006050:	615a      	str	r2, [r3, #20]
 8006052:	e019      	b.n	8006088 <jpeg_finish_decompress+0x88>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	2bcf      	cmp	r3, #207	@ 0xcf
 800605a:	d103      	bne.n	8006064 <jpeg_finish_decompress+0x64>
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	22d2      	movs	r2, #210	@ 0xd2
 8006060:	615a      	str	r2, [r3, #20]
 8006062:	e01d      	b.n	80060a0 <jpeg_finish_decompress+0xa0>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	2bd2      	cmp	r3, #210	@ 0xd2
 800606a:	d019      	beq.n	80060a0 <jpeg_finish_decompress+0xa0>
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2215      	movs	r2, #21
 8006072:	615a      	str	r2, [r3, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6952      	ldr	r2, [r2, #20]
 800607c:	619a      	str	r2, [r3, #24]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8006088:	e00a      	b.n	80060a0 <jpeg_finish_decompress+0xa0>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <jpeg_finish_decompress+0xa0>
      return FALSE;		/* Suspend, come back later */
 800609c:	2300      	movs	r3, #0
 800609e:	e00e      	b.n	80060be <jpeg_finish_decompress+0xbe>
  while (! cinfo->inputctl->eoi_reached) {
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0ee      	beq.n	800608a <jpeg_finish_decompress+0x8a>
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fcd5 	bl	8005a66 <jpeg_abort>
  return TRUE;
 80060bc:	2301      	movs	r3, #1
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <jpeg_start_decompress>:
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_start_decompress (j_decompress_ptr cinfo)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  if (cinfo->global_state == DSTATE_READY) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2bca      	cmp	r3, #202	@ 0xca
 80060d4:	d10e      	bne.n	80060f4 <jpeg_start_decompress+0x2e>
    /* First call: initialize master control, select active modules */
    jinit_master_decompress(cinfo);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f00a f81e 	bl	8010118 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <jpeg_start_decompress+0x28>
      /* No more work here; expecting jpeg_start_output next */
      cinfo->global_state = DSTATE_BUFIMAGE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	22cf      	movs	r2, #207	@ 0xcf
 80060e8:	615a      	str	r2, [r3, #20]
      return TRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e063      	b.n	80061b6 <jpeg_start_decompress+0xf0>
    }
    cinfo->global_state = DSTATE_PRELOAD;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	22cb      	movs	r2, #203	@ 0xcb
 80060f2:	615a      	str	r2, [r3, #20]
  }
  if (cinfo->global_state == DSTATE_PRELOAD) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	2bcb      	cmp	r3, #203	@ 0xcb
 80060fa:	d146      	bne.n	800618a <jpeg_start_decompress+0xc4>
    /* If file has multiple scans, absorb them all into the coef buffer */
    if (cinfo->inputctl->has_multiple_scans) {
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d039      	beq.n	800617c <jpeg_start_decompress+0xb6>
#ifdef D_MULTISCAN_FILES_SUPPORTED
      for (;;) {
	int retcode;
	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <jpeg_start_decompress+0x54>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
	/* Absorb some more input */
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
 8006126:	60f8      	str	r0, [r7, #12]
	if (retcode == JPEG_SUSPENDED)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <jpeg_start_decompress+0x6c>
	  return FALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	e041      	b.n	80061b6 <jpeg_start_decompress+0xf0>
	if (retcode == JPEG_REACHED_EOI)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d020      	beq.n	800617a <jpeg_start_decompress+0xb4>
	  break;
	/* Advance progress counter if appropriate */
	if (cinfo->progress != NULL &&
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0e3      	beq.n	8006108 <jpeg_start_decompress+0x42>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d002      	beq.n	800614c <jpeg_start_decompress+0x86>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d1dd      	bne.n	8006108 <jpeg_start_decompress+0x42>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	3201      	adds	r2, #1
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	429a      	cmp	r2, r3
 8006160:	dbd2      	blt.n	8006108 <jpeg_start_decompress+0x42>
	    /* jdmaster underestimated number of scans; ratchet up one scan */
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800616e:	4619      	mov	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	440a      	add	r2, r1
 8006176:	609a      	str	r2, [r3, #8]
      for (;;) {
 8006178:	e7c6      	b.n	8006108 <jpeg_start_decompress+0x42>
	  break;
 800617a:	bf00      	nop
      }
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* D_MULTISCAN_FILES_SUPPORTED */
    }
    cinfo->output_scan_number = cinfo->input_scan_number;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8006188:	e011      	b.n	80061ae <jpeg_start_decompress+0xe8>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2bcc      	cmp	r3, #204	@ 0xcc
 8006190:	d00d      	beq.n	80061ae <jpeg_start_decompress+0xe8>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2215      	movs	r2, #21
 8006198:	615a      	str	r2, [r3, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6952      	ldr	r2, [r2, #20]
 80061a2:	619a      	str	r2, [r3, #24]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
  /* Perform any dummy output passes, and set up for the final pass */
  return output_pass_setup(cinfo);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f805 	bl	80061be <output_pass_setup>
 80061b4:	4603      	mov	r3, r0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <output_pass_setup>:
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
 80061be:	b590      	push	{r4, r7, lr}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	2bcc      	cmp	r3, #204	@ 0xcc
 80061cc:	d04f      	beq.n	800626e <output_pass_setup+0xb0>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	22cc      	movs	r2, #204	@ 0xcc
 80061e6:	615a      	str	r2, [r3, #20]
  }
  /* Loop over any required dummy passes */
  while (cinfo->master->is_dummy_pass) {
 80061e8:	e041      	b.n	800626e <output_pass_setup+0xb0>
#ifdef QUANT_2PASS_SUPPORTED
    /* Crank through the dummy pass */
    while (cinfo->output_scanline < cinfo->output_height) {
      JDIMENSION last_scanline;
      /* Call progress monitor hook if present */
      if (cinfo->progress != NULL) {
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00f      	beq.n	8006212 <output_pass_setup+0x54>
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	605a      	str	r2, [r3, #4]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	609a      	str	r2, [r3, #8]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006218:	60fb      	str	r3, [r7, #12]
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8006220:	685c      	ldr	r4, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f103 028c 	add.w	r2, r3, #140	@ 0x8c
 8006228:	2300      	movs	r3, #0
 800622a:	2100      	movs	r1, #0
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	47a0      	blx	r4
				    &cinfo->output_scanline, (JDIMENSION) 0);
      if (cinfo->output_scanline == last_scanline)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	429a      	cmp	r2, r3
 800623a:	d101      	bne.n	8006240 <output_pass_setup+0x82>
	return FALSE;		/* No progress made, must suspend */
 800623c:	2300      	movs	r3, #0
 800623e:	e026      	b.n	800628e <output_pass_setup+0xd0>
    while (cinfo->output_scanline < cinfo->output_height) {
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800624a:	429a      	cmp	r2, r3
 800624c:	d3cd      	bcc.n	80061ea <output_pass_setup+0x2c>
    }
    /* Finish up dummy pass, and set up for another one */
    (*cinfo->master->finish_output_pass) (cinfo);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  while (cinfo->master->is_dummy_pass) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e2      	bne.n	8006240 <output_pass_setup+0x82>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <output_pass_setup+0xc8>
 8006282:	22ce      	movs	r2, #206	@ 0xce
 8006284:	e000      	b.n	8006288 <output_pass_setup+0xca>
 8006286:	22cd      	movs	r2, #205	@ 0xcd
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	615a      	str	r2, [r3, #20]
  return TRUE;
 800628c:	2301      	movs	r3, #1
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	bd90      	pop	{r4, r7, pc}

08006296 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8006296:	b590      	push	{r4, r7, lr}
 8006298:	b087      	sub	sp, #28
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2bcd      	cmp	r3, #205	@ 0xcd
 80062a8:	d00d      	beq.n	80062c6 <jpeg_read_scanlines+0x30>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2215      	movs	r2, #21
 80062b0:	615a      	str	r2, [r3, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	6952      	ldr	r2, [r2, #20]
 80062ba:	619a      	str	r2, [r3, #24]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d30c      	bcc.n	80062ee <jpeg_read_scanlines+0x58>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	227e      	movs	r2, #126	@ 0x7e
 80062da:	615a      	str	r2, [r3, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f04f 31ff 	mov.w	r1, #4294967295
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	4798      	blx	r3
    return 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e028      	b.n	8006340 <jpeg_read_scanlines+0xaa>
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00f      	beq.n	8006316 <jpeg_read_scanlines+0x80>
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	605a      	str	r2, [r3, #4]
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	609a      	str	r2, [r3, #8]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	4798      	blx	r3
  }

  /* Process some data */
  row_ctr = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8006320:	685c      	ldr	r4, [r3, #4]
 8006322:	f107 0214 	add.w	r2, r7, #20
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	47a0      	blx	r4
  cinfo->output_scanline += row_ctr;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	441a      	add	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  return row_ctr;
 800633e:	697b      	ldr	r3, [r7, #20]
}
 8006340:	4618      	mov	r0, r3
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	bd90      	pop	{r4, r7, pc}

08006348 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  struct jpeg_source_mgr * src = cinfo->src;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	60fb      	str	r3, [r7, #12]

  if (src->bytes_in_buffer == 0)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10f      	bne.n	800637e <get_byte+0x36>
    if (! (*src->fill_input_buffer) (cinfo))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d108      	bne.n	800637e <get_byte+0x36>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2219      	movs	r2, #25
 8006372:	615a      	str	r2, [r3, #20]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
  src->bytes_in_buffer--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	1e5a      	subs	r2, r3, #1
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
  return GETJOCTET(*src->next_input_byte++);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	6011      	str	r1, [r2, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800639c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 41d0 	ldr.w	r4, [r3, #464]	@ 0x1d0
  register unsigned char nl, nm;
  register INT32 qe, temp;
  register int sv, data;

  /* Renormalization & data input per section D.2.6 */
  while (e->a < 0x8000L) {
 80063ae:	e036      	b.n	800641e <arith_decode+0x82>
    if (--e->ct < 0) {
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	6123      	str	r3, [r4, #16]
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	da2d      	bge.n	8006418 <arith_decode+0x7c>
      /* Need to fetch next data byte */
      if (cinfo->unread_marker)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <arith_decode+0x2e>
	data = 0;		/* stuff zero data */
 80063c6:	2500      	movs	r5, #0
 80063c8:	e013      	b.n	80063f2 <arith_decode+0x56>
      else {
	data = get_byte(cinfo);	/* read next input byte */
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ffbc 	bl	8006348 <get_byte>
 80063d0:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 80063d2:	2dff      	cmp	r5, #255	@ 0xff
 80063d4:	d10d      	bne.n	80063f2 <arith_decode+0x56>
	  do data = get_byte(cinfo);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff ffb6 	bl	8006348 <get_byte>
 80063dc:	4605      	mov	r5, r0
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 80063de:	2dff      	cmp	r5, #255	@ 0xff
 80063e0:	d0f9      	beq.n	80063d6 <arith_decode+0x3a>
	  if (data == 0)
 80063e2:	2d00      	cmp	r5, #0
 80063e4:	d101      	bne.n	80063ea <arith_decode+0x4e>
	    data = 0xFF;	/* discard stuffed zero byte */
 80063e6:	25ff      	movs	r5, #255	@ 0xff
 80063e8:	e003      	b.n	80063f2 <arith_decode+0x56>
	     * a marker while processing the compressed data
	     * segment is legal in arithmetic coding.
	     * The convention is to supply zero data
	     * then until decoding is complete.
	     */
	    cinfo->unread_marker = data;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 51b4 	str.w	r5, [r3, #436]	@ 0x1b4
	    data = 0;
 80063f0:	2500      	movs	r5, #0
	  }
	}
      }
      e->c = (e->c << 8) | data; /* insert data into C register */
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	432b      	orrs	r3, r5
 80063f8:	60a3      	str	r3, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	3308      	adds	r3, #8
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	da08      	bge.n	8006418 <arith_decode+0x7c>
	/* Need more initial bytes */
	if (++e->ct == 0)
 8006406:	6923      	ldr	r3, [r4, #16]
 8006408:	3301      	adds	r3, #1
 800640a:	6123      	str	r3, [r4, #16]
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d102      	bne.n	8006418 <arith_decode+0x7c>
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8006412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006416:	60e3      	str	r3, [r4, #12]
    }
    e->a <<= 1;
 8006418:	68e3      	ldr	r3, [r4, #12]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	60e3      	str	r3, [r4, #12]
  while (e->a < 0x8000L) {
 800641e:	68e3      	ldr	r3, [r4, #12]
 8006420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006424:	dbc4      	blt.n	80063b0 <arith_decode+0x14>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	461e      	mov	r6, r3
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800642c:	f006 037f 	and.w	r3, r6, #127	@ 0x7f
 8006430:	4a2c      	ldr	r2, [pc, #176]	@ (80064e4 <arith_decode+0x148>)
 8006432:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8006436:	fa5f f985 	uxtb.w	r9, r5
 800643a:	122d      	asrs	r5, r5, #8
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800643c:	fa5f f885 	uxtb.w	r8, r5
 8006440:	122d      	asrs	r5, r5, #8

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
 8006442:	68e3      	ldr	r3, [r4, #12]
 8006444:	1b5a      	subs	r2, r3, r5
  e->a = temp;
 8006446:	60e2      	str	r2, [r4, #12]
  temp <<= e->ct;
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	409a      	lsls	r2, r3
  if (e->c >= temp) {
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	dc21      	bgt.n	8006496 <arith_decode+0xfa>
    e->c -= temp;
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	60a3      	str	r3, [r4, #8]
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8006458:	68e3      	ldr	r3, [r4, #12]
 800645a:	429d      	cmp	r5, r3
 800645c:	dd0c      	ble.n	8006478 <arith_decode+0xdc>
      e->a = qe;
 800645e:	60e5      	str	r5, [r4, #12]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8006460:	b273      	sxtb	r3, r6
 8006462:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006466:	b25a      	sxtb	r2, r3
 8006468:	fa4f f388 	sxtb.w	r3, r8
 800646c:	4053      	eors	r3, r2
 800646e:	b25b      	sxtb	r3, r3
 8006470:	b2da      	uxtb	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e02e      	b.n	80064d6 <arith_decode+0x13a>
    } else {
      e->a = qe;
 8006478:	60e5      	str	r5, [r4, #12]
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800647a:	b273      	sxtb	r3, r6
 800647c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006480:	b25a      	sxtb	r2, r3
 8006482:	fa4f f389 	sxtb.w	r3, r9
 8006486:	4053      	eors	r3, r2
 8006488:	b25b      	sxtb	r3, r3
 800648a:	b2da      	uxtb	r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	701a      	strb	r2, [r3, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8006490:	f086 0680 	eor.w	r6, r6, #128	@ 0x80
 8006494:	e01f      	b.n	80064d6 <arith_decode+0x13a>
    }
  } else if (e->a < 0x8000L) {
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800649c:	da1b      	bge.n	80064d6 <arith_decode+0x13a>
    /* Conditional MPS (more probable symbol) exchange */
    if (e->a < qe) {
 800649e:	68e3      	ldr	r3, [r4, #12]
 80064a0:	429d      	cmp	r5, r3
 80064a2:	dd0d      	ble.n	80064c0 <arith_decode+0x124>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 80064a4:	b273      	sxtb	r3, r6
 80064a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064aa:	b25a      	sxtb	r2, r3
 80064ac:	fa4f f389 	sxtb.w	r3, r9
 80064b0:	4053      	eors	r3, r2
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	701a      	strb	r2, [r3, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 80064ba:	f086 0680 	eor.w	r6, r6, #128	@ 0x80
 80064be:	e00a      	b.n	80064d6 <arith_decode+0x13a>
    } else {
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 80064c0:	b273      	sxtb	r3, r6
 80064c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064c6:	b25a      	sxtb	r2, r3
 80064c8:	fa4f f388 	sxtb.w	r3, r8
 80064cc:	4053      	eors	r3, r2
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	701a      	strb	r2, [r3, #0]
    }
  }

  return sv >> 7;
 80064d6:	11f3      	asrs	r3, r6, #7
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064e2:	bf00      	nop
 80064e4:	08023b00 	.word	0x08023b00

080064e8 <process_restart>:
 * Check for a restart marker & resynchronize decoder.
 */

LOCAL(void)
process_restart (j_decompress_ptr cinfo)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80064f6:	613b      	str	r3, [r7, #16]
  int ci;
  jpeg_component_info * compptr;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d108      	bne.n	800651c <process_restart+0x34>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2219      	movs	r2, #25
 8006510:	615a      	str	r2, [r3, #20]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3

  /* Re-initialize statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e051      	b.n	80065c6 <process_restart+0xde>
    compptr = cinfo->cur_comp_info[ci];
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	3354      	adds	r3, #84	@ 0x54
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	60fb      	str	r3, [r7, #12]
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <process_restart+0x66>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11d      	bne.n	8006580 <process_restart+0x98>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d118      	bne.n	8006580 <process_restart+0x98>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	320e      	adds	r2, #14
 8006556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655a:	2240      	movs	r2, #64	@ 0x40
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f01b fcf6 	bl	8021f50 <memset>
      /* Reset DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	3304      	adds	r3, #4
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	2200      	movs	r2, #0
 8006570:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3308      	adds	r3, #8
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	2200      	movs	r2, #0
 800657e:	605a      	str	r2, [r3, #4]
    }
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d104      	bne.n	8006594 <process_restart+0xac>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <process_restart+0xc0>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800659a:	2b00      	cmp	r3, #0
 800659c:	d010      	beq.n	80065c0 <process_restart+0xd8>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <process_restart+0xd8>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	321e      	adds	r2, #30
 80065b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f01b fcc8 	bl	8021f50 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3301      	adds	r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	dba7      	blt.n	8006522 <process_restart+0x3a>
    }
  }

  /* Reset arithmetic decoding variables */
  entropy->c = 0;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2200      	movs	r2, #0
 80065d6:	609a      	str	r2, [r3, #8]
  entropy->a = 0;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2200      	movs	r2, #0
 80065dc:	60da      	str	r2, [r3, #12]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f06f 020f 	mvn.w	r2, #15
 80065e4:	611a      	str	r2, [r3, #16]

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80065f0:	bf00      	nop
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08c      	sub	sp, #48	@ 0x30
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8006608:	61fb      	str	r3, [r7, #28]
  unsigned char *st;
  int blkn, ci, tbl, sign;
  int v, m;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <decode_mcu_DC_first+0x34>
    if (entropy->restarts_to_go == 0)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <decode_mcu_DC_first+0x2a>
      process_restart(cinfo);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff63 	bl	80064e8 <process_restart>
    entropy->restarts_to_go--;
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d101      	bne.n	800663a <decode_mcu_DC_first+0x42>
 8006636:	2301      	movs	r3, #1
 8006638:	e0ec      	b.n	8006814 <decode_mcu_DC_first+0x21c>

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800663a:	2300      	movs	r3, #0
 800663c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663e:	e0e1      	b.n	8006804 <decode_mcu_DC_first+0x20c>
    block = MCU_data[blkn];
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	4413      	add	r3, r2
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	61bb      	str	r3, [r7, #24]
    ci = cinfo->MCU_membership[blkn];
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006650:	325c      	adds	r2, #92	@ 0x5c
 8006652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006656:	617b      	str	r3, [r7, #20]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	3354      	adds	r3, #84	@ 0x54
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	613b      	str	r3, [r7, #16]

    /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	320e      	adds	r2, #14
 800666e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006672:	69f9      	ldr	r1, [r7, #28]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	3308      	adds	r3, #8
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	4413      	add	r3, r2
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Figure F.19: Decode_DC_DIFF */
    if (arith_decode(cinfo, st) == 0)
 8006682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fe89 	bl	800639c <arith_decode>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d107      	bne.n	80066a0 <decode_mcu_DC_first+0xa8>
      entropy->dc_context[ci] = 0;
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	3308      	adds	r3, #8
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	e0a0      	b.n	80067e2 <decode_mcu_DC_first+0x1ea>
    else {
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, st + 1);
 80066a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a2:	3301      	adds	r3, #1
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fe78 	bl	800639c <arith_decode>
 80066ac:	60f8      	str	r0, [r7, #12]
      st += 2; st += sign;
 80066ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b0:	3302      	adds	r3, #2
 80066b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b8:	4413      	add	r3, r2
 80066ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 80066bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff fe6c 	bl	800639c <arith_decode>
 80066c4:	6238      	str	r0, [r7, #32]
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d029      	beq.n	8006720 <decode_mcu_DC_first+0x128>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	320e      	adds	r2, #14
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	3314      	adds	r3, #20
 80066d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (arith_decode(cinfo, st)) {
 80066da:	e01a      	b.n	8006712 <decode_mcu_DC_first+0x11a>
	  if ((m <<= 1) == 0x8000) {
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	623b      	str	r3, [r7, #32]
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e8:	d110      	bne.n	800670c <decode_mcu_DC_first+0x114>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2275      	movs	r2, #117	@ 0x75
 80066f0:	615a      	str	r2, [r3, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f04f 31ff 	mov.w	r1, #4294967295
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	611a      	str	r2, [r3, #16]
	    return TRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	e083      	b.n	8006814 <decode_mcu_DC_first+0x21c>
	  }
	  st += 1;
 800670c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670e:	3301      	adds	r3, #1
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (arith_decode(cinfo, st)) {
 8006712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fe41 	bl	800639c <arith_decode>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1dd      	bne.n	80066dc <decode_mcu_DC_first+0xe4>
	}
      }
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	33e8      	adds	r3, #232	@ 0xe8
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	2301      	movs	r3, #1
 800672e:	4093      	lsls	r3, r2
 8006730:	105b      	asrs	r3, r3, #1
 8006732:	6a3a      	ldr	r2, [r7, #32]
 8006734:	429a      	cmp	r2, r3
 8006736:	da07      	bge.n	8006748 <decode_mcu_DC_first+0x150>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	3308      	adds	r3, #8
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	2200      	movs	r2, #0
 8006744:	605a      	str	r2, [r3, #4]
 8006746:	e01e      	b.n	8006786 <decode_mcu_DC_first+0x18e>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4413      	add	r3, r2
 800674e:	33f8      	adds	r3, #248	@ 0xf8
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	2301      	movs	r3, #1
 8006756:	4093      	lsls	r3, r2
 8006758:	105b      	asrs	r3, r3, #1
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	429a      	cmp	r2, r3
 800675e:	dd09      	ble.n	8006774 <decode_mcu_DC_first+0x17c>
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3303      	adds	r3, #3
 8006764:	009a      	lsls	r2, r3, #2
 8006766:	69f9      	ldr	r1, [r7, #28]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	3308      	adds	r3, #8
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	e008      	b.n	8006786 <decode_mcu_DC_first+0x18e>
      else
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	009a      	lsls	r2, r3, #2
 800677a:	69f9      	ldr	r1, [r7, #28]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	3308      	adds	r3, #8
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	605a      	str	r2, [r3, #4]
      v = m;
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	330e      	adds	r3, #14
 800678e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      while (m >>= 1)
 8006790:	e00a      	b.n	80067a8 <decode_mcu_DC_first+0x1b0>
	if (arith_decode(cinfo, st)) v |= m;
 8006792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff fe01 	bl	800639c <arith_decode>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <decode_mcu_DC_first+0x1b0>
 80067a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
      while (m >>= 1)
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	105b      	asrs	r3, r3, #1
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ee      	bne.n	8006792 <decode_mcu_DC_first+0x19a>
      v += 1; if (sign) v = -v;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	3301      	adds	r3, #1
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <decode_mcu_DC_first+0x1ce>
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	425b      	negs	r3, r3
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
      entropy->last_dc_val[ci] += v;
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	3304      	adds	r3, #4
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	441a      	add	r2, r3
 80067d6:	69f9      	ldr	r1, [r7, #28]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3304      	adds	r3, #4
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	605a      	str	r2, [r3, #4]
    }

    /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3304      	adds	r3, #4
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	b21a      	sxth	r2, r3
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	3301      	adds	r3, #1
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800680a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800680c:	429a      	cmp	r2, r3
 800680e:	f6ff af17 	blt.w	8006640 <decode_mcu_DC_first+0x48>
  }

  return TRUE;
 8006812:	2301      	movs	r3, #1
}
 8006814:	4618      	mov	r0, r3
 8006816:	3730      	adds	r7, #48	@ 0x30
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <decode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08c      	sub	sp, #48	@ 0x30
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800682c:	61fb      	str	r3, [r7, #28]
  int tbl, sign, k;
  int v, m;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <decode_mcu_AC_first+0x34>
    if (entropy->restarts_to_go == 0)
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <decode_mcu_AC_first+0x2a>
      process_restart(cinfo);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fe51 	bl	80064e8 <process_restart>
    entropy->restarts_to_go--;
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684a:	1e5a      	subs	r2, r3, #1
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d101      	bne.n	800685e <decode_mcu_AC_first+0x42>
 800685a:	2301      	movs	r3, #1
 800685c:	e0da      	b.n	8006a14 <decode_mcu_AC_first+0x1f8>

  natural_order = cinfo->natural_order;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8006864:	61bb      	str	r3, [r7, #24]

  /* There is always only one block per MCU */
  block = MCU_data[0];
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	617b      	str	r3, [r7, #20]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	613b      	str	r3, [r7, #16]

  /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */

  /* Figure F.20: Decode_AC_coefficients */
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800687c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800687e:	e0bf      	b.n	8006a00 <decode_mcu_AC_first+0x1e4>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	321e      	adds	r2, #30
 8006886:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	1e5a      	subs	r2, r3, #1
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	440b      	add	r3, r1
 8006896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8006898:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fd7e 	bl	800639c <arith_decode>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 80b4 	bne.w	8006a10 <decode_mcu_AC_first+0x1f4>
    while (arith_decode(cinfo, st + 1) == 0) {
 80068a8:	e01c      	b.n	80068e4 <decode_mcu_AC_first+0xc8>
      st += 3; k++;
 80068aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ac:	3303      	adds	r3, #3
 80068ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	3301      	adds	r3, #1
 80068b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (k > cinfo->Se) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 80068bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068be:	429a      	cmp	r2, r3
 80068c0:	dd10      	ble.n	80068e4 <decode_mcu_AC_first+0xc8>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2275      	movs	r2, #117	@ 0x75
 80068c8:	615a      	str	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f04f 31ff 	mov.w	r1, #4294967295
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	611a      	str	r2, [r3, #16]
	return TRUE;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e097      	b.n	8006a14 <decode_mcu_AC_first+0x1f8>
    while (arith_decode(cinfo, st + 1) == 0) {
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	3301      	adds	r3, #1
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fd56 	bl	800639c <arith_decode>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0d9      	beq.n	80068aa <decode_mcu_AC_first+0x8e>
      }
    }
    /* Figure F.21: Decoding nonzero value v */
    /* Figure F.22: Decoding the sign of v */
    sign = arith_decode(cinfo, entropy->fixed_bin);
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	33b8      	adds	r3, #184	@ 0xb8
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fd4d 	bl	800639c <arith_decode>
 8006902:	60f8      	str	r0, [r7, #12]
    st += 2;
 8006904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006906:	3302      	adds	r3, #2
 8006908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Figure F.23: Decoding the magnitude category of v */
    if ((m = arith_decode(cinfo, st)) != 0) {
 800690a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff fd45 	bl	800639c <arith_decode>
 8006912:	6238      	str	r0, [r7, #32]
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d040      	beq.n	800699c <decode_mcu_AC_first+0x180>
      if (arith_decode(cinfo, st)) {
 800691a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff fd3d 	bl	800639c <arith_decode>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d039      	beq.n	800699c <decode_mcu_AC_first+0x180>
	m <<= 1;
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	623b      	str	r3, [r7, #32]
	st = entropy->ac_stats[tbl] +
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	321e      	adds	r2, #30
 8006934:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	440b      	add	r3, r1
 800693e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	4619      	mov	r1, r3
 8006946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006948:	428b      	cmp	r3, r1
 800694a:	dc01      	bgt.n	8006950 <decode_mcu_AC_first+0x134>
 800694c:	23bd      	movs	r3, #189	@ 0xbd
 800694e:	e000      	b.n	8006952 <decode_mcu_AC_first+0x136>
 8006950:	23d9      	movs	r3, #217	@ 0xd9
	st = entropy->ac_stats[tbl] +
 8006952:	4413      	add	r3, r2
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (arith_decode(cinfo, st)) {
 8006956:	e01a      	b.n	800698e <decode_mcu_AC_first+0x172>
	  if ((m <<= 1) == 0x8000) {
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006964:	d110      	bne.n	8006988 <decode_mcu_AC_first+0x16c>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2275      	movs	r2, #117	@ 0x75
 800696c:	615a      	str	r2, [r3, #20]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f04f 31ff 	mov.w	r1, #4294967295
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f04f 32ff 	mov.w	r2, #4294967295
 8006982:	611a      	str	r2, [r3, #16]
	    return TRUE;
 8006984:	2301      	movs	r3, #1
 8006986:	e045      	b.n	8006a14 <decode_mcu_AC_first+0x1f8>
	  }
	  st += 1;
 8006988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698a:	3301      	adds	r3, #1
 800698c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (arith_decode(cinfo, st)) {
 800698e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff fd03 	bl	800639c <arith_decode>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1dd      	bne.n	8006958 <decode_mcu_AC_first+0x13c>
	}
      }
    }
    v = m;
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Figure F.24: Decoding the magnitude bit pattern of v */
    st += 14;
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	330e      	adds	r3, #14
 80069a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (m >>= 1)
 80069a6:	e00a      	b.n	80069be <decode_mcu_AC_first+0x1a2>
      if (arith_decode(cinfo, st)) v |= m;
 80069a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fcf6 	bl	800639c <arith_decode>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <decode_mcu_AC_first+0x1a2>
 80069b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
    while (m >>= 1)
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	105b      	asrs	r3, r3, #1
 80069c2:	623b      	str	r3, [r7, #32]
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1ee      	bne.n	80069a8 <decode_mcu_AC_first+0x18c>
    v += 1; if (sign) v = -v;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	3301      	adds	r3, #1
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <decode_mcu_AC_first+0x1c0>
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	425b      	negs	r3, r3
 80069da:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Scale and output coefficient in natural (dezigzagged) order */
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80069e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e4:	fa02 f103 	lsl.w	r1, r2, r3
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	4413      	add	r3, r2
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	b209      	sxth	r1, r1
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 80069fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fc:	3301      	adds	r3, #1
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8006a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	f77f af39 	ble.w	8006880 <decode_mcu_AC_first+0x64>
 8006a0e:	e000      	b.n	8006a12 <decode_mcu_AC_first+0x1f6>
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8006a10:	bf00      	nop
  }

  return TRUE;
 8006a12:	2301      	movs	r3, #1
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3730      	adds	r7, #48	@ 0x30
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <decode_mcu_DC_refine>:
 * MCU decoding for DC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8006a2c:	613b      	str	r3, [r7, #16]
  unsigned char *st;
  int p1, blkn;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <decode_mcu_DC_refine+0x34>
    if (entropy->restarts_to_go == 0)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <decode_mcu_DC_refine+0x2a>
      process_restart(cinfo);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff fd51 	bl	80064e8 <process_restart>
    entropy->restarts_to_go--;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4a:	1e5a      	subs	r2, r3, #1
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  st = entropy->fixed_bin;	/* use fixed probability estimation */
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	33b8      	adds	r3, #184	@ 0xb8
 8006a54:	60fb      	str	r3, [r7, #12]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	60bb      	str	r3, [r7, #8]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e01a      	b.n	8006aa0 <decode_mcu_DC_refine+0x84>
    /* Encoded data is simply the next bit of the two's-complement DC value */
    if (arith_decode(cinfo, st))
 8006a6a:	68f9      	ldr	r1, [r7, #12]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fc95 	bl	800639c <arith_decode>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d010      	beq.n	8006a9a <decode_mcu_DC_refine+0x7e>
      MCU_data[blkn][0][0] |= p1;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	4413      	add	r3, r2
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	b21a      	sxth	r2, r3
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	6838      	ldr	r0, [r7, #0]
 8006a90:	4403      	add	r3, r0
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	b212      	sxth	r2, r2
 8006a98:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	dbde      	blt.n	8006a6a <decode_mcu_DC_refine+0x4e>
  }

  return TRUE;
 8006aac:	2301      	movs	r3, #1
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <decode_mcu_AC_refine>:
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b08c      	sub	sp, #48	@ 0x30
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8006ac6:	623b      	str	r3, [r7, #32]
  int tbl, k, kex;
  int p1, m1;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <decode_mcu_AC_refine+0x34>
    if (entropy->restarts_to_go == 0)
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <decode_mcu_AC_refine+0x2a>
      process_restart(cinfo);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fd04 	bl	80064e8 <process_restart>
    entropy->restarts_to_go--;
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae4:	1e5a      	subs	r2, r3, #1
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d101      	bne.n	8006af8 <decode_mcu_AC_refine+0x42>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0c8      	b.n	8006c8a <decode_mcu_AC_refine+0x1d4>

  natural_order = cinfo->natural_order;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8006afe:	61fb      	str	r3, [r7, #28]

  /* There is always only one block per MCU */
  block = MCU_data[0];
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	61bb      	str	r3, [r7, #24]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	617b      	str	r3, [r7, #20]

  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8006b16:	2201      	movs	r2, #1
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8006b24:	f04f 32ff 	mov.w	r2, #4294967295
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Establish EOBx (previous stage end-of-block) index */
  for (kex = cinfo->Se; kex > 0; kex--)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b36:	e00c      	b.n	8006b52 <decode_mcu_AC_refine+0x9c>
    if ((*block)[natural_order[kex]]) break;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <decode_mcu_AC_refine+0xa4>
  for (kex = cinfo->Se; kex > 0; kex--)
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dcef      	bgt.n	8006b38 <decode_mcu_AC_refine+0x82>
 8006b58:	e000      	b.n	8006b5c <decode_mcu_AC_refine+0xa6>
    if ((*block)[natural_order[kex]]) break;
 8006b5a:	bf00      	nop

  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8006b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b64:	e089      	b.n	8006c7a <decode_mcu_AC_refine+0x1c4>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	321e      	adds	r2, #30
 8006b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	1e5a      	subs	r2, r3, #1
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (k > kex)
 8006b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	429a      	cmp	r2, r3
 8006b84:	dc00      	bgt.n	8006b88 <decode_mcu_AC_refine+0xd2>
 8006b86:	e007      	b.n	8006b98 <decode_mcu_AC_refine+0xe2>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8006b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fc06 	bl	800639c <arith_decode>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d000      	beq.n	8006b98 <decode_mcu_AC_refine+0xe2>
 8006b96:	e077      	b.n	8006c88 <decode_mcu_AC_refine+0x1d2>
    for (;;) {
      thiscoef = *block + natural_order[k];
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	60bb      	str	r3, [r7, #8]
      if (*thiscoef) {				/* previously nonzero coef */
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d025      	beq.n	8006c00 <decode_mcu_AC_refine+0x14a>
	if (arith_decode(cinfo, st + 2)) {
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fbee 	bl	800639c <arith_decode>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d055      	beq.n	8006c72 <decode_mcu_AC_refine+0x1bc>
	  if (*thiscoef < 0)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da0b      	bge.n	8006be8 <decode_mcu_AC_refine+0x132>
	    *thiscoef += m1;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b21a      	sxth	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	801a      	strh	r2, [r3, #0]
	  else
	    *thiscoef += p1;
	}
	break;
 8006be6:	e044      	b.n	8006c72 <decode_mcu_AC_refine+0x1bc>
	    *thiscoef += p1;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	b21a      	sxth	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	801a      	strh	r2, [r3, #0]
	break;
 8006bfe:	e038      	b.n	8006c72 <decode_mcu_AC_refine+0x1bc>
      }
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 8006c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c02:	3301      	adds	r3, #1
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fbc8 	bl	800639c <arith_decode>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d012      	beq.n	8006c38 <decode_mcu_AC_refine+0x182>
	if (arith_decode(cinfo, entropy->fixed_bin))
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	33b8      	adds	r3, #184	@ 0xb8
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff fbbf 	bl	800639c <arith_decode>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <decode_mcu_AC_refine+0x178>
	  *thiscoef = m1;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	b21a      	sxth	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	801a      	strh	r2, [r3, #0]
	else
	  *thiscoef = p1;
	break;
 8006c2c:	e022      	b.n	8006c74 <decode_mcu_AC_refine+0x1be>
	  *thiscoef = p1;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	b21a      	sxth	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	801a      	strh	r2, [r3, #0]
	break;
 8006c36:	e01d      	b.n	8006c74 <decode_mcu_AC_refine+0x1be>
      }
      st += 3; k++;
 8006c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3a:	3303      	adds	r3, #3
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	3301      	adds	r3, #1
 8006c42:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (k > cinfo->Se) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8006c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	dda3      	ble.n	8006b98 <decode_mcu_AC_refine+0xe2>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2275      	movs	r2, #117	@ 0x75
 8006c56:	615a      	str	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6c:	611a      	str	r2, [r3, #16]
	return TRUE;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e00b      	b.n	8006c8a <decode_mcu_AC_refine+0x1d4>
	break;
 8006c72:	bf00      	nop
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8006c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c76:	3301      	adds	r3, #1
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8006c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c82:	429a      	cmp	r2, r3
 8006c84:	f77f af6f 	ble.w	8006b66 <decode_mcu_AC_refine+0xb0>
      }
    }
  }

  return TRUE;
 8006c88:	2301      	movs	r3, #1
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3730      	adds	r7, #48	@ 0x30
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <decode_mcu>:
 * Decode one MCU's worth of arithmetic-compressed coefficients.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b08e      	sub	sp, #56	@ 0x38
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8006ca2:	623b      	str	r3, [r7, #32]
  int blkn, ci, tbl, sign, k;
  int v, m;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <decode_mcu+0x34>
    if (entropy->restarts_to_go == 0)
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d102      	bne.n	8006cbc <decode_mcu+0x2a>
      process_restart(cinfo);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fc16 	bl	80064e8 <process_restart>
    entropy->restarts_to_go--;
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc0:	1e5a      	subs	r2, r3, #1
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d101      	bne.n	8006cd4 <decode_mcu+0x42>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e1ba      	b.n	800704a <decode_mcu+0x3b8>

  natural_order = cinfo->natural_order;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 8006cda:	61fb      	str	r3, [r7, #28]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8006cdc:	2300      	movs	r3, #0
 8006cde:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ce0:	e1ab      	b.n	800703a <decode_mcu+0x3a8>
    block = MCU_data[blkn];
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4413      	add	r3, r2
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	61bb      	str	r3, [r7, #24]
    ci = cinfo->MCU_membership[blkn];
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf2:	325c      	adds	r2, #92	@ 0x5c
 8006cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf8:	617b      	str	r3, [r7, #20]
    compptr = cinfo->cur_comp_info[ci];
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	3354      	adds	r3, #84	@ 0x54
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	613b      	str	r3, [r7, #16]

    /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */

    tbl = compptr->dc_tbl_no;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	60fb      	str	r3, [r7, #12]

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	320e      	adds	r2, #14
 8006d14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d18:	6a39      	ldr	r1, [r7, #32]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	440b      	add	r3, r1
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Figure F.19: Decode_DC_DIFF */
    if (arith_decode(cinfo, st) == 0)
 8006d28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fb36 	bl	800639c <arith_decode>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d107      	bne.n	8006d46 <decode_mcu+0xb4>
      entropy->dc_context[ci] = 0;
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	2200      	movs	r2, #0
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	e0a0      	b.n	8006e88 <decode_mcu+0x1f6>
    else {
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, st + 1);
 8006d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d48:	3301      	adds	r3, #1
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fb25 	bl	800639c <arith_decode>
 8006d52:	60b8      	str	r0, [r7, #8]
      st += 2; st += sign;
 8006d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d56:	3302      	adds	r3, #2
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d5e:	4413      	add	r3, r2
 8006d60:	637b      	str	r3, [r7, #52]	@ 0x34
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 8006d62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fb19 	bl	800639c <arith_decode>
 8006d6a:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d029      	beq.n	8006dc6 <decode_mcu+0x134>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	320e      	adds	r2, #14
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	637b      	str	r3, [r7, #52]	@ 0x34
	while (arith_decode(cinfo, st)) {
 8006d80:	e01a      	b.n	8006db8 <decode_mcu+0x126>
	  if ((m <<= 1) == 0x8000) {
 8006d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d8e:	d110      	bne.n	8006db2 <decode_mcu+0x120>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2275      	movs	r2, #117	@ 0x75
 8006d96:	615a      	str	r2, [r3, #20]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dac:	611a      	str	r2, [r3, #16]
	    return TRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e14b      	b.n	800704a <decode_mcu+0x3b8>
	  }
	  st += 1;
 8006db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db4:	3301      	adds	r3, #1
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
	while (arith_decode(cinfo, st)) {
 8006db8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff faee 	bl	800639c <arith_decode>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1dd      	bne.n	8006d82 <decode_mcu+0xf0>
	}
      }
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	33e8      	adds	r3, #232	@ 0xe8
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4093      	lsls	r3, r2
 8006dd6:	105b      	asrs	r3, r3, #1
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	da07      	bge.n	8006dee <decode_mcu+0x15c>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8006dde:	6a3a      	ldr	r2, [r7, #32]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	3308      	adds	r3, #8
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	2200      	movs	r2, #0
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	e01e      	b.n	8006e2c <decode_mcu+0x19a>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	33f8      	adds	r3, #248	@ 0xf8
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4093      	lsls	r3, r2
 8006dfe:	105b      	asrs	r3, r3, #1
 8006e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e02:	429a      	cmp	r2, r3
 8006e04:	dd09      	ble.n	8006e1a <decode_mcu+0x188>
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	3303      	adds	r3, #3
 8006e0a:	009a      	lsls	r2, r3, #2
 8006e0c:	6a39      	ldr	r1, [r7, #32]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	3308      	adds	r3, #8
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	e008      	b.n	8006e2c <decode_mcu+0x19a>
      else
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	009a      	lsls	r2, r3, #2
 8006e20:	6a39      	ldr	r1, [r7, #32]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	3308      	adds	r3, #8
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	605a      	str	r2, [r3, #4]
      v = m;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 8006e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e32:	330e      	adds	r3, #14
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
      while (m >>= 1)
 8006e36:	e00a      	b.n	8006e4e <decode_mcu+0x1bc>
	if (arith_decode(cinfo, st)) v |= m;
 8006e38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff faae 	bl	800639c <arith_decode>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <decode_mcu+0x1bc>
 8006e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (m >>= 1)
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	105b      	asrs	r3, r3, #1
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1ee      	bne.n	8006e38 <decode_mcu+0x1a6>
      v += 1; if (sign) v = -v;
 8006e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <decode_mcu+0x1da>
 8006e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e68:	425b      	negs	r3, r3
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      entropy->last_dc_val[ci] += v;
 8006e6c:	6a3a      	ldr	r2, [r7, #32]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	3304      	adds	r3, #4
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	441a      	add	r2, r3
 8006e7c:	6a39      	ldr	r1, [r7, #32]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	3304      	adds	r3, #4
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	605a      	str	r2, [r3, #4]
    }

    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8006e88:	6a3a      	ldr	r2, [r7, #32]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	b21a      	sxth	r2, r3
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	801a      	strh	r2, [r3, #0]

    /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */

    if (cinfo->lim_Se == 0) continue;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80c4 	beq.w	800702e <decode_mcu+0x39c>
    tbl = compptr->ac_tbl_no;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	60fb      	str	r3, [r7, #12]
    k = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Figure F.20: Decode_AC_coefficients */
    do {
      st = entropy->ac_stats[tbl] + 3 * k;
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	321e      	adds	r2, #30
 8006eb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8006ec6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7ff fa67 	bl	800639c <arith_decode>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f040 80ae 	bne.w	8007032 <decode_mcu+0x3a0>
      for (;;) {
	k++;
 8006ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed8:	3301      	adds	r3, #1
 8006eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (arith_decode(cinfo, st + 1)) break;
 8006edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ede:	3301      	adds	r3, #1
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fa5a 	bl	800639c <arith_decode>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d119      	bne.n	8006f22 <decode_mcu+0x290>
	st += 3;
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	3303      	adds	r3, #3
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (k >= cinfo->lim_Se) {
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8006efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006efc:	429a      	cmp	r2, r3
 8006efe:	dbea      	blt.n	8006ed6 <decode_mcu+0x244>
	  WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2275      	movs	r2, #117	@ 0x75
 8006f06:	615a      	str	r2, [r3, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
	  entropy->ct = -1;			/* spectral overflow */
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1c:	611a      	str	r2, [r3, #16]
	  return TRUE;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e093      	b.n	800704a <decode_mcu+0x3b8>
	if (arith_decode(cinfo, st + 1)) break;
 8006f22:	bf00      	nop
	}
      }
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	33b8      	adds	r3, #184	@ 0xb8
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fa36 	bl	800639c <arith_decode>
 8006f30:	60b8      	str	r0, [r7, #8]
      st += 2;
 8006f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f34:	3302      	adds	r3, #2
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 8006f38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fa2e 	bl	800639c <arith_decode>
 8006f40:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d040      	beq.n	8006fca <decode_mcu+0x338>
	if (arith_decode(cinfo, st)) {
 8006f48:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff fa26 	bl	800639c <arith_decode>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d039      	beq.n	8006fca <decode_mcu+0x338>
	  m <<= 1;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
	  st = entropy->ac_stats[tbl] +
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	321e      	adds	r2, #30
 8006f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	440b      	add	r3, r1
 8006f6c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f76:	428b      	cmp	r3, r1
 8006f78:	dc01      	bgt.n	8006f7e <decode_mcu+0x2ec>
 8006f7a:	23bd      	movs	r3, #189	@ 0xbd
 8006f7c:	e000      	b.n	8006f80 <decode_mcu+0x2ee>
 8006f7e:	23d9      	movs	r3, #217	@ 0xd9
	  st = entropy->ac_stats[tbl] +
 8006f80:	4413      	add	r3, r2
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
	  while (arith_decode(cinfo, st)) {
 8006f84:	e01a      	b.n	8006fbc <decode_mcu+0x32a>
	    if ((m <<= 1) == 0x8000) {
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f92:	d110      	bne.n	8006fb6 <decode_mcu+0x324>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2275      	movs	r2, #117	@ 0x75
 8006f9a:	615a      	str	r2, [r3, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb0:	611a      	str	r2, [r3, #16]
	      return TRUE;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e049      	b.n	800704a <decode_mcu+0x3b8>
	    }
	    st += 1;
 8006fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb8:	3301      	adds	r3, #1
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
	  while (arith_decode(cinfo, st)) {
 8006fbc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff f9ec 	bl	800639c <arith_decode>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1dd      	bne.n	8006f86 <decode_mcu+0x2f4>
	  }
	}
      }
      v = m;
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 8006fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd0:	330e      	adds	r3, #14
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34
      while (m >>= 1)
 8006fd4:	e00a      	b.n	8006fec <decode_mcu+0x35a>
	if (arith_decode(cinfo, st)) v |= m;
 8006fd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff f9df 	bl	800639c <arith_decode>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <decode_mcu+0x35a>
 8006fe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (m >>= 1)
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	105b      	asrs	r3, r3, #1
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1ee      	bne.n	8006fd6 <decode_mcu+0x344>
      v += 1; if (sign) v = -v;
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <decode_mcu+0x378>
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	425b      	negs	r3, r3
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
      (*block)[natural_order[k]] = (JCOEF) v;
 800700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007016:	b219      	sxth	r1, r3
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    } while (k < cinfo->lim_Se);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8007024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007026:	429a      	cmp	r2, r3
 8007028:	f6ff af42 	blt.w	8006eb0 <decode_mcu+0x21e>
 800702c:	e002      	b.n	8007034 <decode_mcu+0x3a2>
    if (cinfo->lim_Se == 0) continue;
 800702e:	bf00      	nop
 8007030:	e000      	b.n	8007034 <decode_mcu+0x3a2>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8007032:	bf00      	nop
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	3301      	adds	r3, #1
 8007038:	633b      	str	r3, [r7, #48]	@ 0x30
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8007040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007042:	429a      	cmp	r2, r3
 8007044:	f6ff ae4d 	blt.w	8006ce2 <decode_mcu+0x50>
  }

  return TRUE;
 8007048:	2301      	movs	r3, #1
}
 800704a:	4618      	mov	r0, r3
 800704c:	3738      	adds	r7, #56	@ 0x38
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	@ 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8007062:	61fb      	str	r3, [r7, #28]
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80e7 	beq.w	800723e <start_pass+0x1ea>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <start_pass+0x32>
      if (cinfo->Se != 0)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d015      	beq.n	80070b0 <start_pass+0x5c>
	goto bad;
 8007084:	e02d      	b.n	80070e2 <start_pass+0x8e>
    } else {
      /* need not check Ss/Se < 0 since they came from unsigned bytes */
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007092:	429a      	cmp	r2, r3
 8007094:	db20      	blt.n	80070d8 <start_pass+0x84>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80070a2:	429a      	cmp	r2, r3
 80070a4:	dc18      	bgt.n	80070d8 <start_pass+0x84>
	goto bad;
      /* AC scans may have only one component */
      if (cinfo->comps_in_scan != 1)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d115      	bne.n	80070dc <start_pass+0x88>
	goto bad;
    }
    if (cinfo->Ah != 0) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d008      	beq.n	80070cc <start_pass+0x78>
      /* Successive approximation refinement scan: must have Al = Ah-1. */
      if (cinfo->Ah-1 != cinfo->Al)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80070c0:	1e5a      	subs	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d109      	bne.n	80070e0 <start_pass+0x8c>
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80070d2:	2b0d      	cmp	r3, #13
 80070d4:	dd26      	ble.n	8007124 <start_pass+0xd0>
      bad:
 80070d6:	e004      	b.n	80070e2 <start_pass+0x8e>
	goto bad;
 80070d8:	bf00      	nop
 80070da:	e002      	b.n	80070e2 <start_pass+0x8e>
	goto bad;
 80070dc:	bf00      	nop
 80070de:	e000      	b.n	80070e2 <start_pass+0x8e>
	goto bad;
 80070e0:	bf00      	nop
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2211      	movs	r2, #17
 80070e8:	615a      	str	r2, [r3, #20]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	f8d2 2198 	ldr.w	r2, [r2, #408]	@ 0x198
 80070f4:	619a      	str	r2, [r3, #24]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	f8d2 219c 	ldr.w	r2, [r2, #412]	@ 0x19c
 8007100:	61da      	str	r2, [r3, #28]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	f8d2 21a0 	ldr.w	r2, [r2, #416]	@ 0x1a0
 800710c:	621a      	str	r2, [r3, #32]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	f8d2 21a4 	ldr.w	r2, [r2, #420]	@ 0x1a4
 8007118:	625a      	str	r2, [r3, #36]	@ 0x24
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007124:	2300      	movs	r3, #0
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
 8007128:	e064      	b.n	80071f4 <start_pass+0x1a0>
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	3354      	adds	r3, #84	@ 0x54
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	61bb      	str	r3, [r7, #24]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	4413      	add	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800714e:	2b00      	cmp	r3, #0
 8007150:	d016      	beq.n	8007180 <start_pass+0x12c>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	da12      	bge.n	8007180 <start_pass+0x12c>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2276      	movs	r2, #118	@ 0x76
 8007160:	615a      	str	r2, [r3, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	619a      	str	r2, [r3, #24]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	61da      	str	r2, [r3, #28]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f04f 31ff 	mov.w	r1, #4294967295
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007186:	623b      	str	r3, [r7, #32]
 8007188:	e02b      	b.n	80071e2 <start_pass+0x18e>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007198:	613b      	str	r3, [r7, #16]
	if (cinfo->Ah != expected)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d012      	beq.n	80071cc <start_pass+0x178>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2276      	movs	r2, #118	@ 0x76
 80071ac:	615a      	str	r2, [r3, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	619a      	str	r2, [r3, #24]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a3a      	ldr	r2, [r7, #32]
 80071bc:	61da      	str	r2, [r3, #28]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f04f 31ff 	mov.w	r1, #4294967295
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4413      	add	r3, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	f8d2 21a4 	ldr.w	r2, [r2, #420]	@ 0x1a4
 80071da:	601a      	str	r2, [r3, #0]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	3301      	adds	r3, #1
 80071e0:	623b      	str	r3, [r7, #32]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 80071e8:	6a3a      	ldr	r2, [r7, #32]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	ddcd      	ble.n	800718a <start_pass+0x136>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	3301      	adds	r3, #1
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80071fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fc:	429a      	cmp	r2, r3
 80071fe:	db94      	blt.n	800712a <start_pass+0xd6>
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10c      	bne.n	8007224 <start_pass+0x1d0>
      if (cinfo->Ss == 0)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <start_pass+0x1c8>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	4a80      	ldr	r2, [pc, #512]	@ (8007418 <start_pass+0x3c4>)
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	e03a      	b.n	8007292 <start_pass+0x23e>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4a7f      	ldr	r2, [pc, #508]	@ (800741c <start_pass+0x3c8>)
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	e036      	b.n	8007292 <start_pass+0x23e>
    } else {
      if (cinfo->Ss == 0)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <start_pass+0x1e2>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4a7b      	ldr	r2, [pc, #492]	@ (8007420 <start_pass+0x3cc>)
 8007232:	605a      	str	r2, [r3, #4]
 8007234:	e02d      	b.n	8007292 <start_pass+0x23e>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4a7a      	ldr	r2, [pc, #488]	@ (8007424 <start_pass+0x3d0>)
 800723a:	605a      	str	r2, [r3, #4]
 800723c:	e029      	b.n	8007292 <start_pass+0x23e>
    }
  } else {
    /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
     * This ought to be an error condition, but we make it a warning.
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <start_pass+0x222>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d111      	bne.n	8007276 <start_pass+0x222>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10c      	bne.n	8007276 <start_pass+0x222>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8007262:	2b3f      	cmp	r3, #63	@ 0x3f
 8007264:	dc12      	bgt.n	800728c <start_pass+0x238>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8007272:	429a      	cmp	r2, r3
 8007274:	d00a      	beq.n	800728c <start_pass+0x238>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	227d      	movs	r2, #125	@ 0x7d
 800727c:	615a      	str	r2, [r3, #20]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f04f 31ff 	mov.w	r1, #4294967295
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
    /* Select MCU decoding routine */
    entropy->pub.decode_mcu = decode_mcu;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4a66      	ldr	r2, [pc, #408]	@ (8007428 <start_pass+0x3d4>)
 8007290:	605a      	str	r2, [r3, #4]
  }

  /* Allocate & initialize requested statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007292:	2300      	movs	r3, #0
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
 8007296:	e0a4      	b.n	80073e2 <start_pass+0x38e>
    compptr = cinfo->cur_comp_info[ci];
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	3354      	adds	r3, #84	@ 0x54
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	60fb      	str	r3, [r7, #12]
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <start_pass+0x270>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d146      	bne.n	8007348 <start_pass+0x2f4>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d141      	bne.n	8007348 <start_pass+0x2f4>
      tbl = compptr->dc_tbl_no;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	db02      	blt.n	80072d6 <start_pass+0x282>
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2b0f      	cmp	r3, #15
 80072d4:	dd0c      	ble.n	80072f0 <start_pass+0x29c>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2232      	movs	r2, #50	@ 0x32
 80072dc:	615a      	str	r2, [r3, #20]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	619a      	str	r2, [r3, #24]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	320e      	adds	r2, #14
 80072f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10c      	bne.n	8007318 <start_pass+0x2c4>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2240      	movs	r2, #64	@ 0x40
 8007306:	2101      	movs	r1, #1
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	4798      	blx	r3
 800730c:	4601      	mov	r1, r0
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	320e      	adds	r2, #14
 8007314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	320e      	adds	r2, #14
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	2240      	movs	r2, #64	@ 0x40
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f01a fe12 	bl	8021f50 <memset>
      /* Initialize DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 800732c:	69fa      	ldr	r2, [r7, #28]
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	3304      	adds	r3, #4
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	3308      	adds	r3, #8
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	2200      	movs	r2, #0
 8007346:	605a      	str	r2, [r3, #4]
    }
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <start_pass+0x308>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d109      	bne.n	8007370 <start_pass+0x31c>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8007362:	2b00      	cmp	r3, #0
 8007364:	d03a      	beq.n	80073dc <start_pass+0x388>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800736c:	2b00      	cmp	r3, #0
 800736e:	d035      	beq.n	80073dc <start_pass+0x388>
      tbl = compptr->ac_tbl_no;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	db02      	blt.n	8007382 <start_pass+0x32e>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b0f      	cmp	r3, #15
 8007380:	dd0c      	ble.n	800739c <start_pass+0x348>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2232      	movs	r2, #50	@ 0x32
 8007388:	615a      	str	r2, [r3, #20]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	619a      	str	r2, [r3, #24]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
      if (entropy->ac_stats[tbl] == NULL)
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	321e      	adds	r2, #30
 80073a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10d      	bne.n	80073c6 <start_pass+0x372>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073b4:	2101      	movs	r1, #1
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
 80073ba:	4601      	mov	r1, r0
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	321e      	adds	r2, #30
 80073c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	321e      	adds	r2, #30
 80073cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f01a fdba 	bl	8021f50 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	3301      	adds	r3, #1
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80073e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ea:	429a      	cmp	r2, r3
 80073ec:	f6ff af54 	blt.w	8007298 <start_pass+0x244>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2200      	movs	r2, #0
 80073f4:	609a      	str	r2, [r3, #8]
  entropy->a = 0;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	2200      	movs	r2, #0
 80073fa:	60da      	str	r2, [r3, #12]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f06f 020f 	mvn.w	r2, #15
 8007402:	611a      	str	r2, [r3, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800740e:	bf00      	nop
 8007410:	3728      	adds	r7, #40	@ 0x28
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	080065f9 	.word	0x080065f9
 800741c:	0800681d 	.word	0x0800681d
 8007420:	08006a1d 	.word	0x08006a1d
 8007424:	08006ab7 	.word	0x08006ab7
 8007428:	08006c93 	.word	0x08006c93

0800742c <jinit_arith_decoder>:
 * Module initialization routine for arithmetic entropy decoding.
 */

GLOBAL(void)
jinit_arith_decoder (j_decompress_ptr cinfo)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	22bc      	movs	r2, #188	@ 0xbc
 800743c:	2101      	movs	r1, #1
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
 8007442:	60b8      	str	r0, [r7, #8]
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
  entropy->pub.start_pass = start_pass;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4a27      	ldr	r2, [pc, #156]	@ (80074ec <jinit_arith_decoder+0xc0>)
 8007450:	601a      	str	r2, [r3, #0]

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	e00e      	b.n	8007476 <jinit_arith_decoder+0x4a>
    entropy->dc_stats[i] = NULL;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	320e      	adds	r2, #14
 800745e:	2100      	movs	r1, #0
 8007460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    entropy->ac_stats[i] = NULL;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	321e      	adds	r2, #30
 800746a:	2100      	movs	r1, #0
 800746c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	3301      	adds	r3, #1
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b0f      	cmp	r3, #15
 800747a:	dded      	ble.n	8007458 <jinit_arith_decoder+0x2c>
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2271      	movs	r2, #113	@ 0x71
 8007480:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

  if (cinfo->progressive_mode) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d02a      	beq.n	80074e4 <jinit_arith_decoder+0xb8>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6a52      	ldr	r2, [r2, #36]	@ 0x24
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007498:	0212      	lsls	r2, r2, #8
 800749a:	2101      	movs	r1, #1
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
 80074a0:	4602      	mov	r2, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    coef_bit_ptr = & cinfo->coef_bits[0][0];
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074ae:	613b      	str	r3, [r7, #16]
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e011      	b.n	80074da <jinit_arith_decoder+0xae>
      for (i = 0; i < DCTSIZE2; i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	e008      	b.n	80074ce <jinit_arith_decoder+0xa2>
	*coef_bit_ptr++ = -1;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	613a      	str	r2, [r7, #16]
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295
 80074c6:	601a      	str	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++)
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3301      	adds	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80074d2:	ddf3      	ble.n	80074bc <jinit_arith_decoder+0x90>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	dbe8      	blt.n	80074b6 <jinit_arith_decoder+0x8a>
  }
}
 80074e4:	bf00      	nop
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	08007055 	.word	0x08007055

080074f0 <init_source>:
 * before any data is actually read.
 */
#ifdef JFILE 
METHODDEF(void)
init_source (j_decompress_ptr cinfo)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  my_src_ptr src = (my_src_ptr) cinfo->src;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	60fb      	str	r3, [r7, #12]

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <fill_input_buffer>:
 * the front of the buffer rather than discarding it.
 */
#ifdef JFILE 
METHODDEF(boolean)
fill_input_buffer (j_decompress_ptr cinfo)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  my_src_ptr src = (my_src_ptr) cinfo->src;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	60bb      	str	r3, [r7, #8]
  size_t nbytes;

  nbytes = JFREAD(src->infile, src->buffer, INPUT_BUF_SIZE);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	69d8      	ldr	r0, [r3, #28]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800752a:	4619      	mov	r1, r3
 800752c:	f7fc f908 	bl	8003740 <read_file>
 8007530:	60f8      	str	r0, [r7, #12]
  
  if (nbytes <= 0) {
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d122      	bne.n	800757e <fill_input_buffer+0x6e>
    if (src->start_of_file)	/* Treat empty input file as fatal error */
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	d008      	beq.n	8007552 <fill_input_buffer+0x42>
      ERREXIT(cinfo, JERR_INPUT_EMPTY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	222b      	movs	r2, #43	@ 0x2b
 8007546:	615a      	str	r2, [r3, #20]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
    WARNMS(cinfo, JWRN_JPEG_EOF);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	227b      	movs	r2, #123	@ 0x7b
 8007558:	615a      	str	r2, [r3, #20]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f04f 31ff 	mov.w	r1, #4294967295
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
    /* Insert a fake EOI marker */
    src->buffer[0] = (JOCTET) 0xFF;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	22ff      	movs	r2, #255	@ 0xff
 800756e:	701a      	strb	r2, [r3, #0]
    src->buffer[1] = (JOCTET) JPEG_EOI;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	3301      	adds	r3, #1
 8007576:	22d9      	movs	r2, #217	@ 0xd9
 8007578:	701a      	strb	r2, [r3, #0]
    nbytes = 2;
 800757a:	2302      	movs	r3, #2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  src->pub.next_input_byte = src->buffer;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6a1a      	ldr	r2, [r3, #32]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	601a      	str	r2, [r3, #0]
  src->pub.bytes_in_buffer = nbytes;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	605a      	str	r2, [r3, #4]
  src->start_of_file = FALSE;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2200      	movs	r2, #0
 8007590:	625a      	str	r2, [r3, #36]	@ 0x24

  return TRUE;
 8007592:	2301      	movs	r3, #1
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  struct jpeg_source_mgr * src = cinfo->src;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	dd1c      	ble.n	80075ec <skip_input_data+0x50>
    while (num_bytes > (long) src->bytes_in_buffer) {
 80075b2:	e009      	b.n	80075c8 <skip_input_data+0x2c>
      num_bytes -= (long) src->bytes_in_buffer;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	461a      	mov	r2, r3
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	603b      	str	r3, [r7, #0]
      (void) (*src->fill_input_buffer) (cinfo);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
    while (num_bytes > (long) src->bytes_in_buffer) {
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	461a      	mov	r2, r3
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	4293      	cmp	r3, r2
 80075d2:	dcef      	bgt.n	80075b4 <skip_input_data+0x18>
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	441a      	add	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	601a      	str	r2, [r3, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	1ad2      	subs	r2, r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	605a      	str	r2, [r3, #4]
  }
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <term_source>:
 * for error exit.
 */

METHODDEF(void)
term_source (j_decompress_ptr cinfo)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* no work necessary here */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <jpeg_stdio_src>:
 * for closing it after finishing decompression.
 */
#ifdef JFILE
GLOBAL(void)
jpeg_stdio_src (j_decompress_ptr cinfo, JFILE * infile)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d117      	bne.n	800764a <jpeg_stdio_src+0x42>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2228      	movs	r2, #40	@ 0x28
 8007622:	2100      	movs	r1, #0
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
 8007628:	4602      	mov	r2, r0
    cinfo->src = (struct jpeg_source_mgr *)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	619a      	str	r2, [r3, #24]
				  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	60fb      	str	r3, [r7, #12]
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800763e:	2100      	movs	r1, #0
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
 8007644:	4602      	mov	r2, r0
    src->buffer = (JOCTET *)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	621a      	str	r2, [r3, #32]
				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	60fb      	str	r3, [r7, #12]
  src->pub.init_source = init_source;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a0d      	ldr	r2, [pc, #52]	@ (8007688 <jpeg_stdio_src+0x80>)
 8007654:	609a      	str	r2, [r3, #8]
  src->pub.fill_input_buffer = fill_input_buffer;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a0c      	ldr	r2, [pc, #48]	@ (800768c <jpeg_stdio_src+0x84>)
 800765a:	60da      	str	r2, [r3, #12]
  src->pub.skip_input_data = skip_input_data;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a0c      	ldr	r2, [pc, #48]	@ (8007690 <jpeg_stdio_src+0x88>)
 8007660:	611a      	str	r2, [r3, #16]
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4a0b      	ldr	r2, [pc, #44]	@ (8007694 <jpeg_stdio_src+0x8c>)
 8007666:	615a      	str	r2, [r3, #20]
  src->pub.term_source = term_source;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a0b      	ldr	r2, [pc, #44]	@ (8007698 <jpeg_stdio_src+0x90>)
 800766c:	619a      	str	r2, [r3, #24]
  src->infile = infile;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	61da      	str	r2, [r3, #28]
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	605a      	str	r2, [r3, #4]
  src->pub.next_input_byte = NULL; /* until buffer loaded */
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
}
 8007680:	bf00      	nop
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	080074f1 	.word	0x080074f1
 800768c:	08007511 	.word	0x08007511
 8007690:	0800759d 	.word	0x0800759d
 8007694:	0800f6e1 	.word	0x0800f6e1
 8007698:	080075f5 	.word	0x080075f5

0800769c <start_iMCU_row>:


LOCAL(void)
start_iMCU_row (j_decompress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row (input side) */
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 80076aa:	60fb      	str	r3, [r7, #12]

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	dd03      	ble.n	80076be <start_iMCU_row+0x22>
    coef->MCU_rows_per_iMCU_row = 1;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	61da      	str	r2, [r3, #28]
 80076bc:	e015      	b.n	80076ea <start_iMCU_row+0x4e>
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80076ca:	3b01      	subs	r3, #1
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d206      	bcs.n	80076de <start_iMCU_row+0x42>
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	61da      	str	r2, [r3, #28]
 80076dc:	e005      	b.n	80076ea <start_iMCU_row+0x4e>
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80076e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	615a      	str	r2, [r3, #20]
  coef->MCU_vert_offset = 0;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	619a      	str	r2, [r3, #24]
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <start_input_pass>:
 * Initialize for an input processing pass.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  cinfo->input_iMCU_row = 0;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  start_iMCU_row(cinfo);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ffc2 	bl	800769c <start_iMCU_row>
}
 8007718:	bf00      	nop
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <start_output_pass>:
 * Initialize for an output processing pass.
 */

METHODDEF(void)
start_output_pass (j_decompress_ptr cinfo)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
#ifdef BLOCK_SMOOTHING_SUPPORTED
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800772e:	60fb      	str	r3, [r7, #12]

  /* If multipass, check to see whether to use block smoothing on this pass */
  if (coef->pub.coef_arrays != NULL) {
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d010      	beq.n	800775a <start_output_pass+0x3a>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <start_output_pass+0x34>
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fad0 	bl	8007ce6 <smoothing_ok>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <start_output_pass+0x34>
      coef->pub.decompress_data = decompress_smooth_data;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4a07      	ldr	r2, [pc, #28]	@ (800776c <start_output_pass+0x4c>)
 8007750:	60da      	str	r2, [r3, #12]
 8007752:	e002      	b.n	800775a <start_output_pass+0x3a>
    else
      coef->pub.decompress_data = decompress_data;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a06      	ldr	r2, [pc, #24]	@ (8007770 <start_output_pass+0x50>)
 8007758:	60da      	str	r2, [r3, #12]
  }
#endif
  cinfo->output_iMCU_row = 0;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	08007e0d 	.word	0x08007e0d
 8007770:	08007b3d 	.word	0x08007b3d

08007774 <decompress_onepass>:
 * which we index according to the component's SOF position.
 */

METHODDEF(int)
decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8007774:	b590      	push	{r4, r7, lr}
 8007776:	b095      	sub	sp, #84	@ 0x54
 8007778:	af02      	add	r7, sp, #8
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800778c:	3b01      	subs	r3, #1
 800778e:	623b      	str	r3, [r7, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007796:	3b01      	subs	r3, #1
 8007798:	61fb      	str	r3, [r7, #28]
  JDIMENSION start_col, output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Loop to process as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	633b      	str	r3, [r7, #48]	@ 0x30
 80077a0:	e0bf      	b.n	8007922 <decompress_onepass+0x1ae>
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80077a8:	e0b0      	b.n	800790c <decompress_onepass+0x198>
	 MCU_col_num++) {
      /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <decompress_onepass+0x54>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	6a18      	ldr	r0, [r3, #32]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	461a      	mov	r2, r3
 80077c2:	2100      	movs	r1, #0
 80077c4:	f01a fbc4 	bl	8021f50 <memset>
		 (size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d2:	3220      	adds	r2, #32
 80077d4:	4611      	mov	r1, r2
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d107      	bne.n	80077f0 <decompress_onepass+0x7c>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e4:	619a      	str	r2, [r3, #24]
	coef->MCU_ctr = MCU_col_num;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ea:	615a      	str	r2, [r3, #20]
	return JPEG_SUSPENDED;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e0c0      	b.n	8007972 <decompress_onepass+0x1fe>
      /* Determine where data should go in output_buf and do the IDCT thing.
       * We skip dummy blocks at the right and bottom edges (but blkn gets
       * incremented past them!).  Note the inner loop relies on having
       * allocated the MCU_buffer[] blocks sequentially.
       */
      blkn = 0;			/* index of current DCT block within MCU */
 80077f0:	2300      	movs	r3, #0
 80077f2:	643b      	str	r3, [r7, #64]	@ 0x40
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80077f4:	2300      	movs	r3, #0
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077f8:	e07e      	b.n	80078f8 <decompress_onepass+0x184>
	compptr = cinfo->cur_comp_info[ci];
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077fe:	3354      	adds	r3, #84	@ 0x54
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	61bb      	str	r3, [r7, #24]
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed) {
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780c:	2b00      	cmp	r3, #0
 800780e:	d105      	bne.n	800781c <decompress_onepass+0xa8>
	  blkn += compptr->MCU_blocks;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007816:	4413      	add	r3, r2
 8007818:	643b      	str	r3, [r7, #64]	@ 0x40
	  continue;
 800781a:	e06a      	b.n	80078f2 <decompress_onepass+0x17e>
	}
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	617b      	str	r3, [r7, #20]
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						    : compptr->last_col_width;
 800782e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	429a      	cmp	r2, r3
 8007834:	d202      	bcs.n	800783c <decompress_onepass+0xc8>
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783a:	e001      	b.n	8007840 <decompress_onepass+0xcc>
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 8007840:	613b      	str	r3, [r7, #16]
	output_ptr = output_buf[compptr->component_index] +
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	4413      	add	r3, r2
 800784c:	681a      	ldr	r2, [r3, #0]
	  yoffset * compptr->DCT_v_scaled_size;
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007852:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007854:	fb01 f303 	mul.w	r3, r1, r3
	output_ptr = output_buf[compptr->component_index] +
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007862:	461a      	mov	r2, r3
 8007864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007866:	fb02 f303 	mul.w	r3, r2, r3
 800786a:	60fb      	str	r3, [r7, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800786c:	2300      	movs	r3, #0
 800786e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007870:	e03a      	b.n	80078e8 <decompress_onepass+0x174>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	429a      	cmp	r2, r3
 800787c:	d806      	bhi.n	800788c <decompress_onepass+0x118>
	      yoffset+yindex < compptr->last_row_height) {
 800787e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007882:	441a      	add	r2, r3
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 8007888:	429a      	cmp	r2, r3
 800788a:	da1f      	bge.n	80078cc <decompress_onepass+0x158>
	    output_col = start_col;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	62bb      	str	r3, [r7, #40]	@ 0x28
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8007890:	2300      	movs	r3, #0
 8007892:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007894:	e016      	b.n	80078c4 <decompress_onepass+0x150>
	      (*inverse_DCT) (cinfo, compptr,
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 8007896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789a:	441a      	add	r2, r3
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	3208      	adds	r2, #8
 80078a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	      (*inverse_DCT) (cinfo, compptr,
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	697c      	ldr	r4, [r7, #20]
 80078aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	47a0      	blx	r4
			      output_ptr, output_col);
	      output_col += compptr->DCT_h_scaled_size;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b6:	461a      	mov	r2, r3
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	4413      	add	r3, r2
 80078bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	    for (xindex = 0; xindex < useful_width; xindex++) {
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	3301      	adds	r3, #1
 80078c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	dbe4      	blt.n	8007896 <decompress_onepass+0x122>
	    }
	  }
	  blkn += compptr->MCU_width;
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078d2:	4413      	add	r3, r2
 80078d4:	643b      	str	r3, [r7, #64]	@ 0x40
	  output_ptr += compptr->DCT_v_scaled_size;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078de:	4413      	add	r3, r2
 80078e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80078e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e4:	3301      	adds	r3, #1
 80078e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078ee:	429a      	cmp	r2, r3
 80078f0:	dbbf      	blt.n	8007872 <decompress_onepass+0xfe>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80078f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f4:	3301      	adds	r3, #1
 80078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80078fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007900:	429a      	cmp	r2, r3
 8007902:	f6ff af7a 	blt.w	80077fa <decompress_onepass+0x86>
	 MCU_col_num++) {
 8007906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007908:	3301      	adds	r3, #1
 800790a:	647b      	str	r3, [r7, #68]	@ 0x44
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800790c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	429a      	cmp	r2, r3
 8007912:	f67f af4a 	bls.w	80077aa <decompress_onepass+0x36>
	}
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	2200      	movs	r2, #0
 800791a:	615a      	str	r2, [r3, #20]
       yoffset++) {
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	3301      	adds	r3, #1
 8007920:	633b      	str	r3, [r7, #48]	@ 0x30
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007928:	429a      	cmp	r2, r3
 800792a:	f6ff af3a 	blt.w	80077a2 <decompress_onepass+0x2e>
  }
  /* Completed the iMCU row, advance counters for next one */
  cinfo->output_iMCU_row++;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007956:	429a      	cmp	r2, r3
 8007958:	d204      	bcs.n	8007964 <decompress_onepass+0x1f0>
    start_iMCU_row(cinfo);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fe9e 	bl	800769c <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 8007960:	2303      	movs	r3, #3
 8007962:	e006      	b.n	8007972 <decompress_onepass+0x1fe>
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 8007970:	2304      	movs	r3, #4
}
 8007972:	4618      	mov	r0, r3
 8007974:	374c      	adds	r7, #76	@ 0x4c
 8007976:	46bd      	mov	sp, r7
 8007978:	bd90      	pop	{r4, r7, pc}

0800797a <dummy_consume_data>:
 * Dummy consume-input routine for single-pass operation.
 */

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 8007990:	b590      	push	{r4, r7, lr}
 8007992:	b093      	sub	sp, #76	@ 0x4c
 8007994:	af02      	add	r7, sp, #8
 8007996:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800799e:	623b      	str	r3, [r7, #32]
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80079a0:	2300      	movs	r3, #0
 80079a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a4:	e028      	b.n	80079f8 <consume_data+0x68>
    compptr = cinfo->cur_comp_info[ci];
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079aa:	3354      	adds	r3, #84	@ 0x54
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	61fb      	str	r3, [r7, #28]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	6a1c      	ldr	r4, [r3, #32]
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	685a      	ldr	r2, [r3, #4]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	3212      	adds	r2, #18
 80079c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	68d2      	ldr	r2, [r2, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 80079d0:	fb03 f202 	mul.w	r2, r3, r2
       (JDIMENSION) compptr->v_samp_factor, TRUE);
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	68db      	ldr	r3, [r3, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 80079d8:	4618      	mov	r0, r3
 80079da:	2301      	movs	r3, #1
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4603      	mov	r3, r0
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	47a0      	blx	r4
 80079e4:	4602      	mov	r2, r0
 80079e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	3340      	adds	r3, #64	@ 0x40
 80079ec:	443b      	add	r3, r7
 80079ee:	f843 2c38 	str.w	r2, [r3, #-56]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80079f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f4:	3301      	adds	r3, #1
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80079fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a00:	429a      	cmp	r2, r3
 8007a02:	dbd0      	blt.n	80079a6 <consume_data+0x16>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a0a:	e073      	b.n	8007af4 <consume_data+0x164>
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a12:	e063      	b.n	8007adc <consume_data+0x14c>
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
 8007a14:	2300      	movs	r3, #0
 8007a16:	63bb      	str	r3, [r7, #56]	@ 0x38
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007a18:	2300      	movs	r3, #0
 8007a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1c:	e041      	b.n	8007aa2 <consume_data+0x112>
	compptr = cinfo->cur_comp_info[ci];
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a22:	3354      	adds	r3, #84	@ 0x54
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	61fb      	str	r3, [r7, #28]
	start_col = MCU_col_num * compptr->MCU_width;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a30:	461a      	mov	r2, r3
 8007a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a34:	fb02 f303 	mul.w	r3, r2, r3
 8007a38:	61bb      	str	r3, [r7, #24]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a3e:	e028      	b.n	8007a92 <consume_data+0x102>
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 8007a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	3340      	adds	r3, #64	@ 0x40
 8007a46:	443b      	add	r3, r7
 8007a48:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8007a4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	440b      	add	r3, r1
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	01db      	lsls	r3, r3, #7
 8007a5c:	4413      	add	r3, r2
 8007a5e:	627b      	str	r3, [r7, #36]	@ 0x24
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8007a60:	2300      	movs	r3, #0
 8007a62:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a64:	e00d      	b.n	8007a82 <consume_data+0xf2>
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a68:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8007a6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a70:	1c51      	adds	r1, r2, #1
 8007a72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a74:	6a39      	ldr	r1, [r7, #32]
 8007a76:	3208      	adds	r2, #8
 8007a78:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	3301      	adds	r3, #1
 8007a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	dbec      	blt.n	8007a66 <consume_data+0xd6>
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8007a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8e:	3301      	adds	r3, #1
 8007a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	dbd1      	blt.n	8007a40 <consume_data+0xb0>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8007aa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	dbb7      	blt.n	8007a1e <consume_data+0x8e>
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	3220      	adds	r2, #32
 8007aba:	4611      	mov	r1, r2
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d107      	bne.n	8007ad6 <consume_data+0x146>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007aca:	619a      	str	r2, [r3, #24]
	coef->MCU_ctr = MCU_col_num;
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ad0:	615a      	str	r2, [r3, #20]
	return JPEG_SUSPENDED;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e02e      	b.n	8007b34 <consume_data+0x1a4>
	 MCU_col_num++) {
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad8:	3301      	adds	r3, #1
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8007ae2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d395      	bcc.n	8007a14 <consume_data+0x84>
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	2200      	movs	r2, #0
 8007aec:	615a      	str	r2, [r3, #20]
       yoffset++) {
 8007aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af0:	3301      	adds	r3, #1
 8007af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007afa:	429a      	cmp	r2, r3
 8007afc:	db86      	blt.n	8007a0c <consume_data+0x7c>
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d204      	bcs.n	8007b26 <consume_data+0x196>
    start_iMCU_row(cinfo);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff fdbd 	bl	800769c <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e006      	b.n	8007b34 <consume_data+0x1a4>
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 8007b32:	2304      	movs	r3, #4
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3744      	adds	r7, #68	@ 0x44
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd90      	pop	{r4, r7, pc}

08007b3c <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8007b3c:	b590      	push	{r4, r7, lr}
 8007b3e:	b091      	sub	sp, #68	@ 0x44
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8007b4c:	617b      	str	r3, [r7, #20]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007b54:	3b01      	subs	r3, #1
 8007b56:	613b      	str	r3, [r7, #16]
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8007b58:	e00a      	b.n	8007b70 <decompress_data+0x34>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <decompress_data+0x34>
      return JPEG_SUSPENDED;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	e0b6      	b.n	8007cde <decompress_data+0x1a2>
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	dbec      	blt.n	8007b5a <decompress_data+0x1e>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d107      	bne.n	8007ba0 <decompress_data+0x64>
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d9dc      	bls.n	8007b5a <decompress_data+0x1e>
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007baa:	61bb      	str	r3, [r7, #24]
 8007bac:	e07f      	b.n	8007cae <decompress_data+0x172>
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d074      	beq.n	8007ca0 <decompress_data+0x164>
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	6a1c      	ldr	r4, [r3, #32]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc0:	3212      	adds	r2, #18
 8007bc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	68d2      	ldr	r2, [r2, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 8007bd0:	fb03 f202 	mul.w	r2, r3, r2
       (JDIMENSION) compptr->v_samp_factor, FALSE);
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	68db      	ldr	r3, [r3, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 8007bd8:	4618      	mov	r0, r3
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4603      	mov	r3, r0
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	47a0      	blx	r4
 8007be4:	60f8      	str	r0, [r7, #12]
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d903      	bls.n	8007bfa <decompress_data+0xbe>
      block_rows = compptr->v_samp_factor;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007bf8:	e00f      	b.n	8007c1a <decompress_data+0xde>
    else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	68d2      	ldr	r2, [r2, #12]
 8007c02:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c06:	fb01 f202 	mul.w	r2, r1, r2
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8007c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <decompress_data+0xde>
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	60bb      	str	r3, [r7, #8]
    output_ptr = output_buf[ci];
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	4413      	add	r3, r2
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	623b      	str	r3, [r7, #32]
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
 8007c36:	2300      	movs	r3, #0
 8007c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c3a:	e02c      	b.n	8007c96 <decompress_data+0x15a>
      buffer_ptr = buffer[block_row];
 8007c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	627b      	str	r3, [r7, #36]	@ 0x24
      output_col = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c50:	e013      	b.n	8007c7a <decompress_data+0x13e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	68bc      	ldr	r4, [r7, #8]
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c5c:	69b9      	ldr	r1, [r7, #24]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	47a0      	blx	r4
			output_ptr, output_col);
	buffer_ptr++;
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	3380      	adds	r3, #128	@ 0x80
 8007c66:	627b      	str	r3, [r7, #36]	@ 0x24
	output_col += compptr->DCT_h_scaled_size;
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	61fb      	str	r3, [r7, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 8007c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c76:	3301      	adds	r3, #1
 8007c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d3e6      	bcc.n	8007c52 <decompress_data+0x116>
      }
      output_ptr += compptr->DCT_v_scaled_size;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	6a3a      	ldr	r2, [r7, #32]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	623b      	str	r3, [r7, #32]
    for (block_row = 0; block_row < block_rows; block_row++) {
 8007c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c92:	3301      	adds	r3, #1
 8007c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	dbce      	blt.n	8007c3c <decompress_data+0x100>
 8007c9e:	e000      	b.n	8007ca2 <decompress_data+0x166>
      continue;
 8007ca0:	bf00      	nop
       ci++, compptr++) {
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	3358      	adds	r3, #88	@ 0x58
 8007cac:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	f6ff af7a 	blt.w	8007bae <decompress_data+0x72>
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d201      	bcs.n	8007cdc <decompress_data+0x1a0>
    return JPEG_ROW_COMPLETED;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e000      	b.n	8007cde <decompress_data+0x1a2>
  return JPEG_SCAN_COMPLETED;
 8007cdc:	2304      	movs	r3, #4
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	373c      	adds	r7, #60	@ 0x3c
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd90      	pop	{r4, r7, pc}

08007ce6 <smoothing_ok>:
 * more accurately than they really are.
 */

LOCAL(boolean)
smoothing_ok (j_decompress_ptr cinfo)
{
 8007ce6:	b590      	push	{r4, r7, lr}
 8007ce8:	b08b      	sub	sp, #44	@ 0x2c
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8007cf4:	613b      	str	r3, [r7, #16]
  boolean smoothing_useful = FALSE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <smoothing_ok+0x28>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <smoothing_ok+0x2c>
    return FALSE;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e078      	b.n	8007e04 <smoothing_ok+0x11e>

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d110      	bne.n	8007d3c <smoothing_ok+0x56>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	681c      	ldr	r4, [r3, #0]
				  cinfo->num_components *
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d24:	461a      	mov	r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007d26:	4613      	mov	r3, r2
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	4413      	add	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2101      	movs	r1, #1
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	47a0      	blx	r4
 8007d36:	4602      	mov	r2, r0
    coef->coef_bits_latch = (int *)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	671a      	str	r2, [r3, #112]	@ 0x70
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d40:	617b      	str	r3, [r7, #20]

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8007d42:	2300      	movs	r3, #0
 8007d44:	623b      	str	r3, [r7, #32]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	e053      	b.n	8007df8 <smoothing_ok+0x112>
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <smoothing_ok+0x7a>
      return FALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e051      	b.n	8007e04 <smoothing_ok+0x11e>
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d013      	beq.n	8007d90 <smoothing_ok+0xaa>
	qtable->quantval[Q01_POS] == 0 ||
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	885b      	ldrh	r3, [r3, #2]
    if (qtable->quantval[0] == 0 ||
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00f      	beq.n	8007d90 <smoothing_ok+0xaa>
	qtable->quantval[Q10_POS] == 0 ||
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8a1b      	ldrh	r3, [r3, #16]
	qtable->quantval[Q01_POS] == 0 ||
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00b      	beq.n	8007d90 <smoothing_ok+0xaa>
	qtable->quantval[Q20_POS] == 0 ||
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8c1b      	ldrh	r3, [r3, #32]
	qtable->quantval[Q10_POS] == 0 ||
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <smoothing_ok+0xaa>
	qtable->quantval[Q11_POS] == 0 ||
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8a5b      	ldrh	r3, [r3, #18]
	qtable->quantval[Q20_POS] == 0 ||
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d003      	beq.n	8007d90 <smoothing_ok+0xaa>
	qtable->quantval[Q02_POS] == 0)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	889b      	ldrh	r3, [r3, #4]
	qtable->quantval[Q11_POS] == 0 ||
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <smoothing_ok+0xae>
      return FALSE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e037      	b.n	8007e04 <smoothing_ok+0x11e>
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	4413      	add	r3, r2
 8007da0:	60bb      	str	r3, [r7, #8]
    if (coef_bits[0] < 0)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da01      	bge.n	8007dae <smoothing_ok+0xc8>
      return FALSE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	e02a      	b.n	8007e04 <smoothing_ok+0x11e>
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 8007dae:	2301      	movs	r3, #1
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	e015      	b.n	8007de0 <smoothing_ok+0xfa>
      coef_bits_latch[coefi] = coef_bits[coefi];
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	441a      	add	r2, r3
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	6979      	ldr	r1, [r7, #20]
 8007dc2:	440b      	add	r3, r1
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	601a      	str	r2, [r3, #0]
      if (coef_bits[coefi] != 0)
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4413      	add	r3, r2
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <smoothing_ok+0xf4>
	smoothing_useful = TRUE;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    for (coefi = 1; coefi <= 5; coefi++) {
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	2b05      	cmp	r3, #5
 8007de4:	dde6      	ble.n	8007db4 <smoothing_ok+0xce>
    }
    coef_bits_latch += SAVED_COEFS;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	3318      	adds	r3, #24
 8007dea:	617b      	str	r3, [r7, #20]
       ci++, compptr++) {
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	3301      	adds	r3, #1
 8007df0:	623b      	str	r3, [r7, #32]
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	3358      	adds	r3, #88	@ 0x58
 8007df6:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfc:	6a3a      	ldr	r2, [r7, #32]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	dba6      	blt.n	8007d50 <smoothing_ok+0x6a>
  }

  return smoothing_useful;
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	372c      	adds	r7, #44	@ 0x2c
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd90      	pop	{r4, r7, pc}

08007e0c <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8007e0c:	b5b0      	push	{r4, r5, r7, lr}
 8007e0e:	b0cc      	sub	sp, #304	@ 0x130
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e16:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e1a:	6018      	str	r0, [r3, #0]
 8007e1c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e20:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007e24:	6019      	str	r1, [r3, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8007e26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e2a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8007e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8007e38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007e46:	3b01      	subs	r3, #1
 8007e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 8007e4c:	e044      	b.n	8007ed8 <decompress_smooth_data+0xcc>
	 ! cinfo->inputctl->eoi_reached) {
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 8007e4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e52:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007e5c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d120      	bne.n	8007eb0 <decompress_smooth_data+0xa4>
      /* If input is working on current scan, we ordinarily want it to
       * have completed the current row.  But if input scan is DC,
       * we want it to keep one row ahead so that next block row's DC
       * values are up to date.
       */
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 8007e6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 8007e8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e8e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007e98:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007e9c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8007ea6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007eaa:	440b      	add	r3, r1
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d82e      	bhi.n	8007f0e <decompress_smooth_data+0x102>
	break;
    }
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 8007eb0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007eb4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8007ec4:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8007ec8:	6810      	ldr	r0, [r2, #0]
 8007eca:	4798      	blx	r3
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <decompress_smooth_data+0xcc>
      return JPEG_SUSPENDED;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f000 bca0 	b.w	8008818 <decompress_smooth_data+0xa0c>
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 8007ed8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007edc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007ee6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007eea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	dc0b      	bgt.n	8007f10 <decompress_smooth_data+0x104>
	 ! cinfo->inputctl->eoi_reached) {
 8007ef8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007efc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8007f06:	695b      	ldr	r3, [r3, #20]
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0a0      	beq.n	8007e4e <decompress_smooth_data+0x42>
 8007f0c:	e000      	b.n	8007f10 <decompress_smooth_data+0x104>
	break;
 8007f0e:	bf00      	nop
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007f16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f1a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f28:	f000 bc49 	b.w	80087be <decompress_smooth_data+0x9b2>
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
 8007f2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8438 	beq.w	80087a8 <decompress_smooth_data+0x99c>
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 8007f38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f46:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d90d      	bls.n	8007f6a <decompress_smooth_data+0x15e>
      block_rows = compptr->v_samp_factor;
 8007f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
      access_rows = block_rows * 2; /* this and next iMCU row */
 8007f58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
      last_row = FALSE;
 8007f62:	2300      	movs	r3, #0
 8007f64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f68:	e01c      	b.n	8007fa4 <decompress_smooth_data+0x198>
    } else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8007f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8007f74:	68d2      	ldr	r2, [r2, #12]
 8007f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f7a:	fb01 f202 	mul.w	r2, r1, r2
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8007f84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d104      	bne.n	8007f96 <decompress_smooth_data+0x18a>
 8007f8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
      access_rows = block_rows; /* this iMCU row only */
 8007f96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f9a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
      last_row = TRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    }
    /* Align the virtual buffer for this component. */
    if (cinfo->output_iMCU_row > 0) {
 8007fa4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007fa8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d03b      	beq.n	800802e <decompress_smooth_data+0x222>
      access_rows += compptr->v_samp_factor; /* prior iMCU row too */
 8007fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
      buffer = (*cinfo->mem->access_virt_barray)
 8007fc6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007fca:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	6a1c      	ldr	r4, [r3, #32]
 8007fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007fd8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8007fdc:	3212      	adds	r2, #18
 8007fde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 8007fe2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007fe6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8007ff6:	68d2      	ldr	r2, [r2, #12]
      buffer = (*cinfo->mem->access_virt_barray)
 8007ff8:	fb03 f202 	mul.w	r2, r3, r2
 8007ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008000:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8008004:	f5a0 7092 	sub.w	r0, r0, #292	@ 0x124
 8008008:	2500      	movs	r5, #0
 800800a:	9500      	str	r5, [sp, #0]
 800800c:	6800      	ldr	r0, [r0, #0]
 800800e:	47a0      	blx	r4
 8008010:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	 (JDIMENSION) access_rows, FALSE);
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 8008014:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8008020:	4413      	add	r3, r2
 8008022:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
      first_row = FALSE;
 8008026:	2300      	movs	r3, #0
 8008028:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800802c:	e01d      	b.n	800806a <decompress_smooth_data+0x25e>
    } else {
      buffer = (*cinfo->mem->access_virt_barray)
 800802e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008032:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	6a1c      	ldr	r4, [r3, #32]
 800803c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008040:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8008044:	3212      	adds	r2, #18
 8008046:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8008052:	f5a2 7092 	sub.w	r0, r2, #292	@ 0x124
 8008056:	2200      	movs	r2, #0
 8008058:	9200      	str	r2, [sp, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	6800      	ldr	r0, [r0, #0]
 800805e:	47a0      	blx	r4
 8008060:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
      first_row = TRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    }
    /* Fetch component-dependent info */
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800806a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800806e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008070:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8008074:	4613      	mov	r3, r2
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	4413      	add	r3, r2
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	440b      	add	r3, r1
 800807e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    quanttbl = compptr->quant_table;
 8008082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    Q00 = quanttbl->quantval[0];
 800808c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    Q01 = quanttbl->quantval[Q01_POS];
 8008096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800809a:	885b      	ldrh	r3, [r3, #2]
 800809c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    Q10 = quanttbl->quantval[Q10_POS];
 80080a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080a4:	8a1b      	ldrh	r3, [r3, #16]
 80080a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    Q20 = quanttbl->quantval[Q20_POS];
 80080aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080ae:	8c1b      	ldrh	r3, [r3, #32]
 80080b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    Q11 = quanttbl->quantval[Q11_POS];
 80080b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080b8:	8a5b      	ldrh	r3, [r3, #18]
 80080ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    Q02 = quanttbl->quantval[Q02_POS];
 80080be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080c2:	889b      	ldrh	r3, [r3, #4]
 80080c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 80080c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80080cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f8d3 21d4 	ldr.w	r2, [r3, #468]	@ 0x1d4
 80080d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    output_ptr = output_buf[ci];
 80080e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80080ee:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
 80080fc:	2300      	movs	r3, #0
 80080fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008102:	e349      	b.n	8008798 <decompress_smooth_data+0x98c>
      buffer_ptr = buffer[block_row];
 8008104:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800810e:	4413      	add	r3, r2
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
      if (first_row && block_row == 0)
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d008      	beq.n	8008130 <decompress_smooth_data+0x324>
 800811e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d104      	bne.n	8008130 <decompress_smooth_data+0x324>
	prev_block_row = buffer_ptr;
 8008126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800812e:	e00b      	b.n	8008148 <decompress_smooth_data+0x33c>
      else
	prev_block_row = buffer[block_row-1];
 8008130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008138:	3b01      	subs	r3, #1
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8008140:	4413      	add	r3, r2
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
      if (last_row && block_row == block_rows-1)
 8008148:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <decompress_smooth_data+0x35c>
 8008150:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008154:	3b01      	subs	r3, #1
 8008156:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800815a:	429a      	cmp	r2, r3
 800815c:	d104      	bne.n	8008168 <decompress_smooth_data+0x35c>
	next_block_row = buffer_ptr;
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008166:	e009      	b.n	800817c <decompress_smooth_data+0x370>
      else
	next_block_row = buffer[block_row+1];
 8008168:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800816c:	3301      	adds	r3, #1
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8008174:	4413      	add	r3, r2
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
      /* We fetch the surrounding DC values using a sliding-register approach.
       * Initialize all nine here so as to do the right thing on narrow pics.
       */
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800817c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008184:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800818c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008190:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008194:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 8008198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800819c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 80081b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80081cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      output_col = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
      last_block_column = compptr->width_in_blocks - 1;
 80081d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	3b01      	subs	r3, #1
 80081de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 80081e2:	2300      	movs	r3, #0
 80081e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80081e8:	e2c1      	b.n	800876e <decompress_smooth_data+0x962>
	/* Fetch current DCT block into workspace so we can modify it. */
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 80081ea:	f107 030c 	add.w	r3, r7, #12
 80081ee:	2201      	movs	r2, #1
 80081f0:	4619      	mov	r1, r3
 80081f2:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80081f6:	f019 fdbb 	bl	8021d70 <jcopy_block_row>
	/* Update DC values */
	if (block_num < last_block_column) {
 80081fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80081fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008202:	429a      	cmp	r2, r3
 8008204:	d214      	bcs.n	8008230 <decompress_smooth_data+0x424>
	  DC3 = (int) prev_block_row[1][0];
 8008206:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800820a:	3380      	adds	r3, #128	@ 0x80
 800820c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008210:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	  DC6 = (int) buffer_ptr[1][0];
 8008214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008218:	3380      	adds	r3, #128	@ 0x80
 800821a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800821e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	  DC9 = (int) next_block_row[1][0];
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008226:	3380      	adds	r3, #128	@ 0x80
 8008228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800822c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	/* Compute coefficient estimates per K.8.
	 * An estimate is applied only if coefficient is still zero,
	 * and is not known to be fully accurate.
	 */
	/* AC01 */
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 8008230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800823a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800823e:	2b00      	cmp	r3, #0
 8008240:	d06c      	beq.n	800831c <decompress_smooth_data+0x510>
 8008242:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008246:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800824a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d164      	bne.n	800831c <decompress_smooth_data+0x510>
	  num = 36 * Q00 * (DC4 - DC6);
 8008252:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008260:	fb03 f202 	mul.w	r2, r3, r2
 8008264:	4613      	mov	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  if (num >= 0) {
 8008270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008274:	2b00      	cmp	r3, #0
 8008276:	db22      	blt.n	80082be <decompress_smooth_data+0x4b2>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 8008278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800827c:	01da      	lsls	r2, r3, #7
 800827e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008282:	441a      	add	r2, r3
 8008284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	fb92 f3f3 	sdiv	r3, r2, r3
 800828e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8008292:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008296:	2b00      	cmp	r3, #0
 8008298:	dd38      	ble.n	800830c <decompress_smooth_data+0x500>
 800829a:	2201      	movs	r2, #1
 800829c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082a0:	fa02 f303 	lsl.w	r3, r2, r3
 80082a4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80082a8:	429a      	cmp	r2, r3
 80082aa:	db2f      	blt.n	800830c <decompress_smooth_data+0x500>
	      pred = (1<<Al)-1;
 80082ac:	2201      	movs	r2, #1
 80082ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082bc:	e026      	b.n	800830c <decompress_smooth_data+0x500>
	  } else {
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 80082be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082c2:	01da      	lsls	r2, r3, #7
 80082c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082c8:	1ad2      	subs	r2, r2, r3
 80082ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80082d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 80082d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dd10      	ble.n	8008302 <decompress_smooth_data+0x4f6>
 80082e0:	2201      	movs	r2, #1
 80082e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80082ee:	429a      	cmp	r2, r3
 80082f0:	db07      	blt.n	8008302 <decompress_smooth_data+0x4f6>
	      pred = (1<<Al)-1;
 80082f2:	2201      	movs	r2, #1
 80082f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082f8:	fa02 f303 	lsl.w	r3, r2, r3
 80082fc:	3b01      	subs	r3, #1
 80082fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    pred = -pred;
 8008302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008306:	425b      	negs	r3, r3
 8008308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  }
	  workspace[1] = (JCOEF) pred;
 800830c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008310:	b21a      	sxth	r2, r3
 8008312:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008316:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800831a:	805a      	strh	r2, [r3, #2]
	}
	/* AC10 */
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800831c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008326:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800832a:	2b00      	cmp	r3, #0
 800832c:	d06c      	beq.n	8008408 <decompress_smooth_data+0x5fc>
 800832e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008332:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008336:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d164      	bne.n	8008408 <decompress_smooth_data+0x5fc>
	  num = 36 * Q00 * (DC2 - DC8);
 800833e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8008342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800834c:	fb03 f202 	mul.w	r2, r3, r2
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  if (num >= 0) {
 800835c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008360:	2b00      	cmp	r3, #0
 8008362:	db22      	blt.n	80083aa <decompress_smooth_data+0x59e>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 8008364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008368:	01da      	lsls	r2, r3, #7
 800836a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800836e:	441a      	add	r2, r3
 8008370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	fb92 f3f3 	sdiv	r3, r2, r3
 800837a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800837e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008382:	2b00      	cmp	r3, #0
 8008384:	dd38      	ble.n	80083f8 <decompress_smooth_data+0x5ec>
 8008386:	2201      	movs	r2, #1
 8008388:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008394:	429a      	cmp	r2, r3
 8008396:	db2f      	blt.n	80083f8 <decompress_smooth_data+0x5ec>
	      pred = (1<<Al)-1;
 8008398:	2201      	movs	r2, #1
 800839a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083a8:	e026      	b.n	80083f8 <decompress_smooth_data+0x5ec>
	  } else {
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 80083aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ae:	01da      	lsls	r2, r3, #7
 80083b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80083c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 80083c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dd10      	ble.n	80083ee <decompress_smooth_data+0x5e2>
 80083cc:	2201      	movs	r2, #1
 80083ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80083da:	429a      	cmp	r2, r3
 80083dc:	db07      	blt.n	80083ee <decompress_smooth_data+0x5e2>
	      pred = (1<<Al)-1;
 80083de:	2201      	movs	r2, #1
 80083e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	3b01      	subs	r3, #1
 80083ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    pred = -pred;
 80083ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083f2:	425b      	negs	r3, r3
 80083f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  }
	  workspace[8] = (JCOEF) pred;
 80083f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083fc:	b21a      	sxth	r2, r3
 80083fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008402:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008406:	821a      	strh	r2, [r3, #16]
	}
	/* AC20 */
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 8008408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008412:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008416:	2b00      	cmp	r3, #0
 8008418:	d06f      	beq.n	80084fa <decompress_smooth_data+0x6ee>
 800841a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800841e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008422:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d167      	bne.n	80084fa <decompress_smooth_data+0x6ee>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800842a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800842e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008432:	441a      	add	r2, r3
 8008434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008440:	fb03 f202 	mul.w	r2, r3, r2
 8008444:	4613      	mov	r3, r2
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	4413      	add	r3, r2
 800844a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  if (num >= 0) {
 800844e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008452:	2b00      	cmp	r3, #0
 8008454:	db22      	blt.n	800849c <decompress_smooth_data+0x690>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 8008456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800845a:	01da      	lsls	r2, r3, #7
 800845c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008460:	441a      	add	r2, r3
 8008462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	fb92 f3f3 	sdiv	r3, r2, r3
 800846c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8008470:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008474:	2b00      	cmp	r3, #0
 8008476:	dd38      	ble.n	80084ea <decompress_smooth_data+0x6de>
 8008478:	2201      	movs	r2, #1
 800847a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008486:	429a      	cmp	r2, r3
 8008488:	db2f      	blt.n	80084ea <decompress_smooth_data+0x6de>
	      pred = (1<<Al)-1;
 800848a:	2201      	movs	r2, #1
 800848c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800849a:	e026      	b.n	80084ea <decompress_smooth_data+0x6de>
	  } else {
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800849c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084a0:	01da      	lsls	r2, r3, #7
 80084a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084ac:	021b      	lsls	r3, r3, #8
 80084ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80084b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 80084b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dd10      	ble.n	80084e0 <decompress_smooth_data+0x6d4>
 80084be:	2201      	movs	r2, #1
 80084c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80084cc:	429a      	cmp	r2, r3
 80084ce:	db07      	blt.n	80084e0 <decompress_smooth_data+0x6d4>
	      pred = (1<<Al)-1;
 80084d0:	2201      	movs	r2, #1
 80084d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    pred = -pred;
 80084e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084e4:	425b      	negs	r3, r3
 80084e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  }
	  workspace[16] = (JCOEF) pred;
 80084ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80084ee:	b21a      	sxth	r2, r3
 80084f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80084f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80084f8:	841a      	strh	r2, [r3, #32]
	}
	/* AC11 */
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 80084fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008508:	2b00      	cmp	r3, #0
 800850a:	d071      	beq.n	80085f0 <decompress_smooth_data+0x7e4>
 800850c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008510:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8008514:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d169      	bne.n	80085f0 <decompress_smooth_data+0x7e4>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800851c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8008520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008524:	1ad2      	subs	r2, r2, r3
 8008526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008530:	4413      	add	r3, r2
 8008532:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008536:	fb03 f202 	mul.w	r2, r3, r2
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  if (num >= 0) {
 8008544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008548:	2b00      	cmp	r3, #0
 800854a:	db22      	blt.n	8008592 <decompress_smooth_data+0x786>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800854c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008550:	01da      	lsls	r2, r3, #7
 8008552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008556:	441a      	add	r2, r3
 8008558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	fb92 f3f3 	sdiv	r3, r2, r3
 8008562:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8008566:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800856a:	2b00      	cmp	r3, #0
 800856c:	dd38      	ble.n	80085e0 <decompress_smooth_data+0x7d4>
 800856e:	2201      	movs	r2, #1
 8008570:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800857c:	429a      	cmp	r2, r3
 800857e:	db2f      	blt.n	80085e0 <decompress_smooth_data+0x7d4>
	      pred = (1<<Al)-1;
 8008580:	2201      	movs	r2, #1
 8008582:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008586:	fa02 f303 	lsl.w	r3, r2, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008590:	e026      	b.n	80085e0 <decompress_smooth_data+0x7d4>
	  } else {
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 8008592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008596:	01da      	lsls	r2, r3, #7
 8008598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80085a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 80085ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dd10      	ble.n	80085d6 <decompress_smooth_data+0x7ca>
 80085b4:	2201      	movs	r2, #1
 80085b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085ba:	fa02 f303 	lsl.w	r3, r2, r3
 80085be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80085c2:	429a      	cmp	r2, r3
 80085c4:	db07      	blt.n	80085d6 <decompress_smooth_data+0x7ca>
	      pred = (1<<Al)-1;
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    pred = -pred;
 80085d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085da:	425b      	negs	r3, r3
 80085dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  }
	  workspace[9] = (JCOEF) pred;
 80085e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085e4:	b21a      	sxth	r2, r3
 80085e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80085ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80085ee:	825a      	strh	r2, [r3, #18]
	}
	/* AC02 */
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 80085f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d06f      	beq.n	80086e2 <decompress_smooth_data+0x8d6>
 8008602:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008606:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800860a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d167      	bne.n	80086e2 <decompress_smooth_data+0x8d6>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 8008612:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800861a:	441a      	add	r2, r3
 800861c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008628:	fb03 f202 	mul.w	r2, r3, r2
 800862c:	4613      	mov	r3, r2
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	4413      	add	r3, r2
 8008632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  if (num >= 0) {
 8008636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800863a:	2b00      	cmp	r3, #0
 800863c:	db22      	blt.n	8008684 <decompress_smooth_data+0x878>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800863e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008642:	01da      	lsls	r2, r3, #7
 8008644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008648:	441a      	add	r2, r3
 800864a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	fb92 f3f3 	sdiv	r3, r2, r3
 8008654:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8008658:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800865c:	2b00      	cmp	r3, #0
 800865e:	dd38      	ble.n	80086d2 <decompress_smooth_data+0x8c6>
 8008660:	2201      	movs	r2, #1
 8008662:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008666:	fa02 f303 	lsl.w	r3, r2, r3
 800866a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800866e:	429a      	cmp	r2, r3
 8008670:	db2f      	blt.n	80086d2 <decompress_smooth_data+0x8c6>
	      pred = (1<<Al)-1;
 8008672:	2201      	movs	r2, #1
 8008674:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008682:	e026      	b.n	80086d2 <decompress_smooth_data+0x8c6>
	  } else {
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 8008684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008688:	01da      	lsls	r2, r3, #7
 800868a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	fb92 f3f3 	sdiv	r3, r2, r3
 800869a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800869e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	dd10      	ble.n	80086c8 <decompress_smooth_data+0x8bc>
 80086a6:	2201      	movs	r2, #1
 80086a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80086b4:	429a      	cmp	r2, r3
 80086b6:	db07      	blt.n	80086c8 <decompress_smooth_data+0x8bc>
	      pred = (1<<Al)-1;
 80086b8:	2201      	movs	r2, #1
 80086ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    pred = -pred;
 80086c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086cc:	425b      	negs	r3, r3
 80086ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	  }
	  workspace[2] = (JCOEF) pred;
 80086d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086d6:	b21a      	sxth	r2, r3
 80086d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80086dc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80086e0:	809a      	strh	r2, [r3, #4]
	}
	/* OK, do the IDCT */
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 80086e2:	f107 020c 	add.w	r2, r7, #12
 80086e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80086ea:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 80086ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	f8d7 4098 	ldr.w	r4, [r7, #152]	@ 0x98
 80086f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80086fc:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8008700:	6800      	ldr	r0, [r0, #0]
 8008702:	47a0      	blx	r4
			output_ptr, output_col);
	/* Advance for next column */
	DC1 = DC2; DC2 = DC3;
 8008704:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008708:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800870c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008710:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
	DC4 = DC5; DC5 = DC6;
 8008714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800871c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008720:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	DC7 = DC8; DC8 = DC9;
 8008724:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800872c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	buffer_ptr++, prev_block_row++, next_block_row++;
 8008734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008738:	3380      	adds	r3, #128	@ 0x80
 800873a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800873e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008742:	3380      	adds	r3, #128	@ 0x80
 8008744:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874c:	3380      	adds	r3, #128	@ 0x80
 800874e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	output_col += compptr->DCT_h_scaled_size;
 8008752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	461a      	mov	r2, r3
 800875a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800875e:	4413      	add	r3, r2
 8008760:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 8008764:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008768:	3301      	adds	r3, #1
 800876a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800876e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8008772:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008776:	429a      	cmp	r2, r3
 8008778:	f67f ad37 	bls.w	80081ea <decompress_smooth_data+0x3de>
      }
      output_ptr += compptr->DCT_v_scaled_size;
 800877c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8008788:	4413      	add	r3, r2
 800878a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    for (block_row = 0; block_row < block_rows; block_row++) {
 800878e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008792:	3301      	adds	r3, #1
 8008794:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008798:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800879c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80087a0:	429a      	cmp	r2, r3
 80087a2:	f6ff acaf 	blt.w	8008104 <decompress_smooth_data+0x2f8>
 80087a6:	e000      	b.n	80087aa <decompress_smooth_data+0x99e>
      continue;
 80087a8:	bf00      	nop
       ci++, compptr++) {
 80087aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80087ae:	3301      	adds	r3, #1
 80087b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80087b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087b8:	3358      	adds	r3, #88	@ 0x58
 80087ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80087be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80087c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ca:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80087ce:	429a      	cmp	r2, r3
 80087d0:	f6ff abac 	blt.w	8007f2c <decompress_smooth_data+0x120>
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 80087d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80087d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80087e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80087f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80087f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008800:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008804:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800880e:	429a      	cmp	r2, r3
 8008810:	d201      	bcs.n	8008816 <decompress_smooth_data+0xa0a>
    return JPEG_ROW_COMPLETED;
 8008812:	2303      	movs	r3, #3
 8008814:	e000      	b.n	8008818 <decompress_smooth_data+0xa0c>
  return JPEG_SCAN_COMPLETED;
 8008816:	2304      	movs	r3, #4
}
 8008818:	4618      	mov	r0, r3
 800881a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800881e:	46bd      	mov	sp, r7
 8008820:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008824 <jinit_d_coef_controller>:
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 8008824:	b5b0      	push	{r4, r5, r7, lr}
 8008826:	b08a      	sub	sp, #40	@ 0x28
 8008828:	af02      	add	r7, sp, #8
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2274      	movs	r2, #116	@ 0x74
 8008836:	2101      	movs	r1, #1
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
 800883c:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
  coef->pub.start_input_pass = start_input_pass;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4a47      	ldr	r2, [pc, #284]	@ (8008968 <jinit_d_coef_controller+0x144>)
 800884a:	601a      	str	r2, [r3, #0]
  coef->pub.start_output_pass = start_output_pass;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a47      	ldr	r2, [pc, #284]	@ (800896c <jinit_d_coef_controller+0x148>)
 8008850:	609a      	str	r2, [r3, #8]
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	671a      	str	r2, [r3, #112]	@ 0x70
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d051      	beq.n	8008902 <jinit_d_coef_controller+0xde>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008868:	617b      	str	r3, [r7, #20]
 800886a:	e039      	b.n	80088e0 <jinit_d_coef_controller+0xbc>
	 ci++, compptr++) {
      access_rows = compptr->v_samp_factor;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	61bb      	str	r3, [r7, #24]
#ifdef BLOCK_SMOOTHING_SUPPORTED
      /* If block smoothing could be used, need a bigger window */
      if (cinfo->progressive_mode)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <jinit_d_coef_controller+0x62>
	access_rows *= 3;
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	4613      	mov	r3, r2
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	61bb      	str	r3, [r7, #24]
#endif
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	695c      	ldr	r4, [r3, #20]
	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	461a      	mov	r2, r3
				(long) compptr->h_samp_factor),
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	689b      	ldr	r3, [r3, #8]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f019 fa27 	bl	8021cec <jround_up>
 800889e:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 80088a0:	461d      	mov	r5, r3
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	461a      	mov	r2, r3
				(long) compptr->v_samp_factor),
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	68db      	ldr	r3, [r3, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	f019 fa1c 	bl	8021cec <jround_up>
 80088b4:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 80088b6:	461a      	mov	r2, r3
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	9200      	str	r2, [sp, #0]
 80088be:	462b      	mov	r3, r5
 80088c0:	2201      	movs	r2, #1
 80088c2:	2101      	movs	r1, #1
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	47a0      	blx	r4
 80088c8:	4601      	mov	r1, r0
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	3212      	adds	r2, #18
 80088d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 ci++, compptr++) {
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61fb      	str	r3, [r7, #28]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	3358      	adds	r3, #88	@ 0x58
 80088de:	617b      	str	r3, [r7, #20]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e4:	69fa      	ldr	r2, [r7, #28]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	dbc0      	blt.n	800886c <jinit_d_coef_controller+0x48>
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4a20      	ldr	r2, [pc, #128]	@ (8008970 <jinit_d_coef_controller+0x14c>)
 80088ee:	605a      	str	r2, [r3, #4]
    coef->pub.decompress_data = decompress_data;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4a20      	ldr	r2, [pc, #128]	@ (8008974 <jinit_d_coef_controller+0x150>)
 80088f4:	60da      	str	r2, [r3, #12]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	611a      	str	r2, [r3, #16]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 8008900:	e02e      	b.n	8008960 <jinit_d_coef_controller+0x13c>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800890c:	2101      	movs	r1, #1
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	4798      	blx	r3
 8008912:	60b8      	str	r0, [r7, #8]
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	e00b      	b.n	8008932 <jinit_d_coef_controller+0x10e>
      coef->MCU_buffer[i] = buffer + i;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	01db      	lsls	r3, r3, #7
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	18d1      	adds	r1, r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	3208      	adds	r2, #8
 8008928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	3301      	adds	r3, #1
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b09      	cmp	r3, #9
 8008936:	ddf0      	ble.n	800891a <jinit_d_coef_controller+0xf6>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d105      	bne.n	800894e <jinit_d_coef_controller+0x12a>
      FMEMZERO((void FAR *) buffer,
 8008942:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8008946:	2100      	movs	r1, #0
 8008948:	68b8      	ldr	r0, [r7, #8]
 800894a:	f019 fb01 	bl	8021f50 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a09      	ldr	r2, [pc, #36]	@ (8008978 <jinit_d_coef_controller+0x154>)
 8008952:	605a      	str	r2, [r3, #4]
    coef->pub.decompress_data = decompress_onepass;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4a09      	ldr	r2, [pc, #36]	@ (800897c <jinit_d_coef_controller+0x158>)
 8008958:	60da      	str	r2, [r3, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	611a      	str	r2, [r3, #16]
}
 8008960:	bf00      	nop
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bdb0      	pop	{r4, r5, r7, pc}
 8008968:	08007703 	.word	0x08007703
 800896c:	08007721 	.word	0x08007721
 8008970:	08007991 	.word	0x08007991
 8008974:	08007b3d 	.word	0x08007b3d
 8008978:	0800797b 	.word	0x0800797b
 800897c:	08007775 	.word	0x08007775

08008980 <build_ycc_rgb_table>:
 * Initialize tables for YCC->RGB colorspace conversion.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 800898e:	60fb      	str	r3, [r7, #12]
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800899a:	2101      	movs	r1, #1
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
 80089a0:	4602      	mov	r2, r0
  cconvert->Cr_r_tab = (int *)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	609a      	str	r2, [r3, #8]
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089b0:	2101      	movs	r1, #1
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
 80089b6:	4602      	mov	r2, r0
  cconvert->Cb_b_tab = (int *)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	60da      	str	r2, [r3, #12]
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089c6:	2101      	movs	r1, #1
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	4798      	blx	r3
 80089cc:	4602      	mov	r2, r0
  cconvert->Cr_g_tab = (INT32 *)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	611a      	str	r2, [r3, #16]
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089dc:	2101      	movs	r1, #1
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
 80089e2:	4602      	mov	r2, r0
  cconvert->Cb_g_tab = (INT32 *)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	615a      	str	r2, [r3, #20]
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 80089e8:	2300      	movs	r3, #0
 80089ea:	617b      	str	r3, [r7, #20]
 80089ec:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	e035      	b.n	8008a60 <build_ycc_rgb_table+0xe0>
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a70 <build_ycc_rgb_table+0xf0>)
 80089f8:	fb02 f303 	mul.w	r3, r2, r3
 80089fc:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    cconvert->Cr_r_tab[i] = (int)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6899      	ldr	r1, [r3, #8]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8008a0a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 8008a0c:	601a      	str	r2, [r3, #0]
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	4a18      	ldr	r2, [pc, #96]	@ (8008a74 <build_ycc_rgb_table+0xf4>)
 8008a12:	fb02 f303 	mul.w	r3, r2, r3
 8008a16:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    cconvert->Cb_b_tab[i] = (int)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	68d9      	ldr	r1, [r3, #12]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8008a24:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 8008a26:	601a      	str	r2, [r3, #0]
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	4910      	ldr	r1, [pc, #64]	@ (8008a78 <build_ycc_rgb_table+0xf8>)
 8008a36:	fb01 f202 	mul.w	r2, r1, r2
 8008a3a:	601a      	str	r2, [r3, #0]
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8008a7c <build_ycc_rgb_table+0xfc>)
 8008a40:	fb03 f202 	mul.w	r2, r3, r2
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6959      	ldr	r1, [r3, #20]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8008a52:	601a      	str	r2, [r3, #0]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	3301      	adds	r3, #1
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2bff      	cmp	r3, #255	@ 0xff
 8008a64:	ddc6      	ble.n	80089f4 <build_ycc_rgb_table+0x74>
  }
}
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	000166e9 	.word	0x000166e9
 8008a74:	0001c5a2 	.word	0x0001c5a2
 8008a78:	ffff492e 	.word	0xffff492e
 8008a7c:	ffffa7e6 	.word	0xffffa7e6

08008a80 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 8008a80:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8008a84:	b08d      	sub	sp, #52	@ 0x34
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a8a:	6239      	str	r1, [r7, #32]
 8008a8c:	61fa      	str	r2, [r7, #28]
 8008a8e:	61bb      	str	r3, [r7, #24]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8008a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	f8d3 614c 	ldr.w	r6, [r3, #332]	@ 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
 8008aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4618      	mov	r0, r3
  register int * Cbbtab = cconvert->Cb_b_tab;
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	617b      	str	r3, [r7, #20]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	4619      	mov	r1, r3
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8008ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	613b      	str	r3, [r7, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8008abc:	e053      	b.n	8008b66 <ycc_rgb_convert+0xe6>
    inptr0 = input_buf[0][input_row];
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60fb      	str	r3, [r7, #12]
    inptr1 = input_buf[1][input_row];
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60bb      	str	r3, [r7, #8]
    inptr2 = input_buf[2][input_row];
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	607b      	str	r3, [r7, #4]
    input_row++;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	3301      	adds	r3, #1
 8008af0:	61fb      	str	r3, [r7, #28]
    outptr = *output_buf++;
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	1d1a      	adds	r2, r3, #4
 8008af6:	61ba      	str	r2, [r7, #24]
 8008af8:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8008afa:	2400      	movs	r4, #0
 8008afc:	e030      	b.n	8008b60 <ycc_rgb_convert+0xe0>
      y  = GETJSAMPLE(inptr0[col]);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	4423      	add	r3, r4
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	4698      	mov	r8, r3
      cb = GETJSAMPLE(inptr1[col]);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	4423      	add	r3, r4
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	469a      	mov	sl, r3
      cr = GETJSAMPLE(inptr2[col]);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4423      	add	r3, r4
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	4699      	mov	r9, r3
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 8008b16:	464b      	mov	r3, r9
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4413      	add	r3, r2
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4443      	add	r3, r8
 8008b22:	4433      	add	r3, r6
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	702b      	strb	r3, [r5, #0]
      outptr[RGB_GREEN] = range_limit[y +
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8008b28:	4653      	mov	r3, sl
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4413      	add	r3, r2
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	464b      	mov	r3, r9
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	141b      	asrs	r3, r3, #16
      outptr[RGB_GREEN] = range_limit[y +
 8008b3e:	4443      	add	r3, r8
 8008b40:	4433      	add	r3, r6
 8008b42:	1c6a      	adds	r2, r5, #1
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	7013      	strb	r3, [r2, #0]
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 8008b48:	4653      	mov	r3, sl
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4413      	add	r3, r2
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4443      	add	r3, r8
 8008b54:	18f2      	adds	r2, r6, r3
 8008b56:	1cab      	adds	r3, r5, #2
 8008b58:	7812      	ldrb	r2, [r2, #0]
 8008b5a:	701a      	strb	r2, [r3, #0]
      outptr += RGB_PIXELSIZE;
 8008b5c:	3503      	adds	r5, #3
    for (col = 0; col < num_cols; col++) {
 8008b5e:	3401      	adds	r4, #1
 8008b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b62:	429c      	cmp	r4, r3
 8008b64:	d3cb      	bcc.n	8008afe <ycc_rgb_convert+0x7e>
  while (--num_rows >= 0) {
 8008b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	daa5      	bge.n	8008abe <ycc_rgb_convert+0x3e>
    }
  }
}
 8008b72:	bf00      	nop
 8008b74:	bf00      	nop
 8008b76:	3734      	adds	r7, #52	@ 0x34
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8008b7e:	4770      	bx	lr

08008b80 <build_rgb_y_table>:
 * Initialize for RGB->grayscale colorspace conversion.
 */

LOCAL(void)
build_rgb_y_table (j_decompress_ptr cinfo)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8008b8e:	613b      	str	r3, [r7, #16]
  INT32 * rgb_y_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	4798      	blx	r3
 8008ba0:	60f8      	str	r0, [r7, #12]
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	619a      	str	r2, [r3, #24]
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	e026      	b.n	8008bfc <build_rgb_y_table+0x7c>
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	f644 418b 	movw	r1, #19595	@ 0x4c8b
 8008bbc:	fb01 f202 	mul.w	r2, r1, r2
 8008bc0:	601a      	str	r2, [r3, #0]
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	f249 6146 	movw	r1, #38470	@ 0x9646
 8008bd4:	fb01 f202 	mul.w	r2, r1, r2
 8008bd8:	601a      	str	r2, [r3, #0]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f641 522f 	movw	r2, #7471	@ 0x1d2f
 8008be0:	fb03 f202 	mul.w	r2, r3, r2
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	68f9      	ldr	r1, [r7, #12]
 8008bee:	440b      	add	r3, r1
 8008bf0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8008bf4:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= MAXJSAMPLE; i++) {
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2bff      	cmp	r3, #255	@ 0xff
 8008c00:	ddd5      	ble.n	8008bae <build_rgb_y_table+0x2e>
  }
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 8008c0c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8008c10:	b089      	sub	sp, #36	@ 0x24
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6178      	str	r0, [r7, #20]
 8008c16:	6139      	str	r1, [r7, #16]
 8008c18:	60fa      	str	r2, [r7, #12]
 8008c1a:	60bb      	str	r3, [r7, #8]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8008c22:	61fb      	str	r3, [r7, #28]
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	699d      	ldr	r5, [r3, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c2c:	61bb      	str	r3, [r7, #24]

  while (--num_rows >= 0) {
 8008c2e:	e045      	b.n	8008cbc <rgb_gray_convert+0xb0>
    inptr0 = input_buf[0][input_row];
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	681e      	ldr	r6, [r3, #0]
    inptr1 = input_buf[1][input_row];
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4619      	mov	r1, r3
    inptr2 = input_buf[2][input_row];
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
    input_row++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]
    outptr = *output_buf++;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	1d1a      	adds	r2, r3, #4
 8008c66:	60ba      	str	r2, [r7, #8]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	607b      	str	r3, [r7, #4]
    for (col = 0; col < num_cols; col++) {
 8008c6c:	2400      	movs	r4, #0
 8008c6e:	e022      	b.n	8008cb6 <rgb_gray_convert+0xaa>
      r = GETJSAMPLE(inptr0[col]);
 8008c70:	1933      	adds	r3, r6, r4
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	469a      	mov	sl, r3
      g = GETJSAMPLE(inptr1[col]);
 8008c76:	460b      	mov	r3, r1
 8008c78:	4423      	add	r3, r4
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	4699      	mov	r9, r3
      b = GETJSAMPLE(inptr2[col]);
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4423      	add	r3, r4
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	4698      	mov	r8, r3
      /* Y */
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8008c86:	4653      	mov	r3, sl
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	442b      	add	r3, r5
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	464b      	mov	r3, r9
 8008c90:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	442b      	add	r3, r5
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	441a      	add	r2, r3
 8008c9c:	4643      	mov	r3, r8
 8008c9e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	442b      	add	r3, r5
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4413      	add	r3, r2
		 >> SCALEBITS);
 8008caa:	141a      	asrs	r2, r3, #16
      outptr[col] = (JSAMPLE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4423      	add	r3, r4
 8008cb0:	b2d2      	uxtb	r2, r2
 8008cb2:	701a      	strb	r2, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8008cb4:	3401      	adds	r4, #1
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	429c      	cmp	r4, r3
 8008cba:	d3d9      	bcc.n	8008c70 <rgb_gray_convert+0x64>
  while (--num_rows >= 0) {
 8008cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dab3      	bge.n	8008c30 <rgb_gray_convert+0x24>
    }
  }
}
 8008cc8:	bf00      	nop
 8008cca:	bf00      	nop
 8008ccc:	3724      	adds	r7, #36	@ 0x24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8008cd4:	4770      	bx	lr

08008cd6 <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 8008cd6:	b4f0      	push	{r4, r5, r6, r7}
 8008cd8:	b086      	sub	sp, #24
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	603b      	str	r3, [r7, #0]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce8:	617b      	str	r3, [r7, #20]

  while (--num_rows >= 0) {
 8008cea:	e030      	b.n	8008d4e <rgb_convert+0x78>
    inptr0 = input_buf[0][input_row];
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	681e      	ldr	r6, [r3, #0]
    inptr1 = input_buf[1][input_row];
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4619      	mov	r1, r3
    inptr2 = input_buf[2][input_row];
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4618      	mov	r0, r3
    input_row++;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	607b      	str	r3, [r7, #4]
    outptr = *output_buf++;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	603a      	str	r2, [r7, #0]
 8008d24:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8008d26:	2400      	movs	r4, #0
 8008d28:	e00e      	b.n	8008d48 <rgb_convert+0x72>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED]   = inptr0[col];
 8008d2a:	1933      	adds	r3, r6, r4
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	702b      	strb	r3, [r5, #0]
      outptr[RGB_GREEN] = inptr1[col];
 8008d30:	460b      	mov	r3, r1
 8008d32:	191a      	adds	r2, r3, r4
 8008d34:	1c6b      	adds	r3, r5, #1
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	701a      	strb	r2, [r3, #0]
      outptr[RGB_BLUE]  = inptr2[col];
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	191a      	adds	r2, r3, r4
 8008d3e:	1cab      	adds	r3, r5, #2
 8008d40:	7812      	ldrb	r2, [r2, #0]
 8008d42:	701a      	strb	r2, [r3, #0]
      outptr += RGB_PIXELSIZE;
 8008d44:	3503      	adds	r5, #3
    for (col = 0; col < num_cols; col++) {
 8008d46:	3401      	adds	r4, #1
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	429c      	cmp	r4, r3
 8008d4c:	d3ed      	bcc.n	8008d2a <rgb_convert+0x54>
  while (--num_rows >= 0) {
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	3b01      	subs	r3, #1
 8008d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dac8      	bge.n	8008cec <rgb_convert+0x16>
    }
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bcf0      	pop	{r4, r5, r6, r7}
 8008d64:	4770      	bx	lr

08008d66 <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 8008d66:	b4f0      	push	{r4, r5, r6, r7}
 8008d68:	b086      	sub	sp, #24
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
  JDIMENSION num_cols = cinfo->output_width;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d7c:	613b      	str	r3, [r7, #16]
  int ci;

  while (--num_rows >= 0) {
 8008d7e:	e028      	b.n	8008dd2 <null_convert+0x6c>
    for (ci = 0; ci < num_components; ci++) {
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e01c      	b.n	8008dc0 <null_convert+0x5a>
      inptr = input_buf[ci][input_row];
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4619      	mov	r1, r3
      outptr = output_buf[0] + ci;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	18d5      	adds	r5, r2, r3
      for (count = num_cols; count > 0; count--) {
 8008da2:	693c      	ldr	r4, [r7, #16]
 8008da4:	e007      	b.n	8008db6 <null_convert+0x50>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 8008da6:	460b      	mov	r3, r1
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	4611      	mov	r1, r2
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	702b      	strb	r3, [r5, #0]
	outptr += num_components;
 8008db0:	4633      	mov	r3, r6
 8008db2:	441d      	add	r5, r3
      for (count = num_cols; count > 0; count--) {
 8008db4:	3c01      	subs	r4, #1
 8008db6:	2c00      	cmp	r4, #0
 8008db8:	d1f5      	bne.n	8008da6 <null_convert+0x40>
    for (ci = 0; ci < num_components; ci++) {
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	42b3      	cmp	r3, r6
 8008dc4:	dbdf      	blt.n	8008d86 <null_convert+0x20>
      }
    }
    input_row++;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	607b      	str	r3, [r7, #4]
    output_buf++;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	603b      	str	r3, [r7, #0]
  while (--num_rows >= 0) {
 8008dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dad0      	bge.n	8008d80 <null_convert+0x1a>
  }
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	3718      	adds	r7, #24
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bcf0      	pop	{r4, r5, r6, r7}
 8008de8:	4770      	bx	lr

08008dea <grayscale_convert>:

METHODDEF(void)
grayscale_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af02      	add	r7, sp, #8
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607a      	str	r2, [r7, #4]
 8008df6:	603b      	str	r3, [r7, #0]
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	f018 ff88 	bl	8021d20 <jcopy_sample_rows>
		    num_rows, cinfo->output_width);
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 8008e18:	b4f0      	push	{r4, r5, r6, r7}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2a:	617b      	str	r3, [r7, #20]

  while (--num_rows >= 0) {
 8008e2c:	e01b      	b.n	8008e66 <gray_rgb_convert+0x4e>
    inptr = input_buf[0][input_row++];
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	1c59      	adds	r1, r3, #1
 8008e36:	6079      	str	r1, [r7, #4]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	681e      	ldr	r6, [r3, #0]
    outptr = *output_buf++;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	1d1a      	adds	r2, r3, #4
 8008e42:	603a      	str	r2, [r7, #0]
 8008e44:	681c      	ldr	r4, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8008e46:	2500      	movs	r5, #0
 8008e48:	e00a      	b.n	8008e60 <gray_rgb_convert+0x48>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 8008e4a:	1973      	adds	r3, r6, r5
 8008e4c:	1ca2      	adds	r2, r4, #2
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	7013      	strb	r3, [r2, #0]
 8008e52:	1c63      	adds	r3, r4, #1
 8008e54:	7812      	ldrb	r2, [r2, #0]
 8008e56:	701a      	strb	r2, [r3, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	7023      	strb	r3, [r4, #0]
      outptr += RGB_PIXELSIZE;
 8008e5c:	3403      	adds	r4, #3
    for (col = 0; col < num_cols; col++) {
 8008e5e:	3501      	adds	r5, #1
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	429d      	cmp	r5, r3
 8008e64:	d3f1      	bcc.n	8008e4a <gray_rgb_convert+0x32>
  while (--num_rows >= 0) {
 8008e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dadd      	bge.n	8008e2e <gray_rgb_convert+0x16>
    }
  }
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bcf0      	pop	{r4, r5, r6, r7}
 8008e7c:	4770      	bx	lr

08008e7e <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 8008e7e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8008e82:	b08d      	sub	sp, #52	@ 0x34
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e88:	6239      	str	r1, [r7, #32]
 8008e8a:	61fa      	str	r2, [r7, #28]
 8008e8c:	61bb      	str	r3, [r7, #24]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8008e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9e:	f8d3 614c 	ldr.w	r6, [r3, #332]	@ 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	4618      	mov	r0, r3
  register int * Cbbtab = cconvert->Cb_b_tab;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	617b      	str	r3, [r7, #20]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8008eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	4619      	mov	r1, r3
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	613b      	str	r3, [r7, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8008eba:	e066      	b.n	8008f8a <ycck_cmyk_convert+0x10c>
    inptr0 = input_buf[0][input_row];
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
    inptr1 = input_buf[1][input_row];
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
    inptr2 = input_buf[2][input_row];
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	3308      	adds	r3, #8
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	607b      	str	r3, [r7, #4]
    inptr3 = input_buf[3][input_row];
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	330c      	adds	r3, #12
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	603b      	str	r3, [r7, #0]
    input_row++;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	3301      	adds	r3, #1
 8008efe:	61fb      	str	r3, [r7, #28]
    outptr = *output_buf++;
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	61ba      	str	r2, [r7, #24]
 8008f06:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8008f08:	2400      	movs	r4, #0
 8008f0a:	e03b      	b.n	8008f84 <ycck_cmyk_convert+0x106>
      y  = GETJSAMPLE(inptr0[col]);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4423      	add	r3, r4
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	4698      	mov	r8, r3
      cb = GETJSAMPLE(inptr1[col]);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4423      	add	r3, r4
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	469a      	mov	sl, r3
      cr = GETJSAMPLE(inptr2[col]);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4423      	add	r3, r4
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	4699      	mov	r9, r3
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 8008f24:	464b      	mov	r3, r9
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4413      	add	r3, r2
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4443      	add	r3, r8
 8008f30:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8008f34:	4433      	add	r3, r6
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	702b      	strb	r3, [r5, #0]
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8008f3a:	4653      	mov	r3, sl
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	4413      	add	r3, r2
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	464b      	mov	r3, r9
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	440b      	add	r3, r1
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	141b      	asrs	r3, r3, #16
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 8008f50:	4443      	add	r3, r8
 8008f52:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8008f56:	4433      	add	r3, r6
 8008f58:	1c6a      	adds	r2, r5, #1
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	7013      	strb	r3, [r2, #0]
						 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 8008f5e:	4653      	mov	r3, sl
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	4413      	add	r3, r2
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4443      	add	r3, r8
 8008f6a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8008f6e:	18f2      	adds	r2, r6, r3
 8008f70:	1cab      	adds	r3, r5, #2
 8008f72:	7812      	ldrb	r2, [r2, #0]
 8008f74:	701a      	strb	r2, [r3, #0]
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	191a      	adds	r2, r3, r4
 8008f7a:	1ceb      	adds	r3, r5, #3
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	701a      	strb	r2, [r3, #0]
      outptr += 4;
 8008f80:	3504      	adds	r5, #4
    for (col = 0; col < num_cols; col++) {
 8008f82:	3401      	adds	r4, #1
 8008f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f86:	429c      	cmp	r4, r3
 8008f88:	d3c0      	bcc.n	8008f0c <ycck_cmyk_convert+0x8e>
  while (--num_rows >= 0) {
 8008f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da92      	bge.n	8008ebc <ycck_cmyk_convert+0x3e>
    }
  }
}
 8008f96:	bf00      	nop
 8008f98:	bf00      	nop
 8008f9a:	3734      	adds	r7, #52	@ 0x34
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8008fa2:	4770      	bx	lr

08008fa4 <start_pass_dcolor>:
 * Empty method for start_pass.
 */

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* no work needed */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <jinit_color_deconverter>:
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL(void)
jinit_color_deconverter (j_decompress_ptr cinfo)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	221c      	movs	r2, #28
 8008fc8:	2101      	movs	r1, #1
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
 8008fce:	60b8      	str	r0, [r7, #8]
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4a88      	ldr	r2, [pc, #544]	@ (80091fc <jinit_color_deconverter+0x244>)
 8008fdc:	601a      	str	r2, [r3, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe4:	2b05      	cmp	r3, #5
 8008fe6:	dc33      	bgt.n	8009050 <jinit_color_deconverter+0x98>
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	da23      	bge.n	8009034 <jinit_color_deconverter+0x7c>
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d005      	beq.n	8008ffc <jinit_color_deconverter+0x44>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	dd2d      	ble.n	8009050 <jinit_color_deconverter+0x98>
 8008ff4:	3b02      	subs	r3, #2
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d82a      	bhi.n	8009050 <jinit_color_deconverter+0x98>
 8008ffa:	e00d      	b.n	8009018 <jinit_color_deconverter+0x60>
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009000:	2b01      	cmp	r3, #1
 8009002:	d033      	beq.n	800906c <jinit_color_deconverter+0xb4>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	220b      	movs	r2, #11
 800900a:	615a      	str	r2, [r3, #20]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	4798      	blx	r3
    break;
 8009016:	e029      	b.n	800906c <jinit_color_deconverter+0xb4>

  case JCS_RGB:
  case JCS_YCbCr:
    if (cinfo->num_components != 3)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	2b03      	cmp	r3, #3
 800901e:	d027      	beq.n	8009070 <jinit_color_deconverter+0xb8>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	220b      	movs	r2, #11
 8009026:	615a      	str	r2, [r3, #20]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
    break;
 8009032:	e01d      	b.n	8009070 <jinit_color_deconverter+0xb8>

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->num_components != 4)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009038:	2b04      	cmp	r3, #4
 800903a:	d01b      	beq.n	8009074 <jinit_color_deconverter+0xbc>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	220b      	movs	r2, #11
 8009042:	615a      	str	r2, [r3, #20]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	4798      	blx	r3
    break;
 800904e:	e011      	b.n	8009074 <jinit_color_deconverter+0xbc>

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	dc0f      	bgt.n	8009078 <jinit_color_deconverter+0xc0>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	220b      	movs	r2, #11
 800905e:	615a      	str	r2, [r3, #20]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4798      	blx	r3
    break;
 800906a:	e005      	b.n	8009078 <jinit_color_deconverter+0xc0>
    break;
 800906c:	bf00      	nop
 800906e:	e004      	b.n	800907a <jinit_color_deconverter+0xc2>
    break;
 8009070:	bf00      	nop
 8009072:	e002      	b.n	800907a <jinit_color_deconverter+0xc2>
    break;
 8009074:	bf00      	nop
 8009076:	e000      	b.n	800907a <jinit_color_deconverter+0xc2>
    break;
 8009078:	bf00      	nop
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8009080:	2b04      	cmp	r3, #4
 8009082:	d06f      	beq.n	8009164 <jinit_color_deconverter+0x1ac>
 8009084:	2b04      	cmp	r3, #4
 8009086:	f300 808f 	bgt.w	80091a8 <jinit_color_deconverter+0x1f0>
 800908a:	2b01      	cmp	r3, #1
 800908c:	d002      	beq.n	8009094 <jinit_color_deconverter+0xdc>
 800908e:	2b02      	cmp	r3, #2
 8009090:	d03d      	beq.n	800910e <jinit_color_deconverter+0x156>
 8009092:	e089      	b.n	80091a8 <jinit_color_deconverter+0x1f0>
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	679a      	str	r2, [r3, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d004      	beq.n	80090ae <jinit_color_deconverter+0xf6>
	cinfo->jpeg_color_space == JCS_YCbCr) {
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d118      	bne.n	80090e0 <jinit_color_deconverter+0x128>
      cconvert->pub.color_convert = grayscale_convert;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4a53      	ldr	r2, [pc, #332]	@ (8009200 <jinit_color_deconverter+0x248>)
 80090b2:	605a      	str	r2, [r3, #4]
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
 80090b4:	2301      	movs	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e00c      	b.n	80090d4 <jinit_color_deconverter+0x11c>
	cinfo->comp_info[ci].component_needed = FALSE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2158      	movs	r1, #88	@ 0x58
 80090c4:	fb01 f303 	mul.w	r3, r1, r3
 80090c8:	4413      	add	r3, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	635a      	str	r2, [r3, #52]	@ 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3301      	adds	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	429a      	cmp	r2, r3
 80090dc:	dbed      	blt.n	80090ba <jinit_color_deconverter+0x102>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 80090de:	e015      	b.n	800910c <jinit_color_deconverter+0x154>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d106      	bne.n	80090f8 <jinit_color_deconverter+0x140>
      cconvert->pub.color_convert = rgb_gray_convert;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4a45      	ldr	r2, [pc, #276]	@ (8009204 <jinit_color_deconverter+0x24c>)
 80090ee:	605a      	str	r2, [r3, #4]
      build_rgb_y_table(cinfo);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff fd45 	bl	8008b80 <build_rgb_y_table>
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 80090f6:	e071      	b.n	80091dc <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	221c      	movs	r2, #28
 80090fe:	615a      	str	r2, [r3, #20]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	4798      	blx	r3
    break;
 800910a:	e067      	b.n	80091dc <jinit_color_deconverter+0x224>
 800910c:	e066      	b.n	80091dc <jinit_color_deconverter+0x224>

  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2203      	movs	r2, #3
 8009112:	679a      	str	r2, [r3, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800911a:	2b03      	cmp	r3, #3
 800911c:	d106      	bne.n	800912c <jinit_color_deconverter+0x174>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4a39      	ldr	r2, [pc, #228]	@ (8009208 <jinit_color_deconverter+0x250>)
 8009122:	605a      	str	r2, [r3, #4]
      build_ycc_rgb_table(cinfo);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7ff fc2b 	bl	8008980 <build_ycc_rgb_table>
      cconvert->pub.color_convert = gray_rgb_convert;
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
      cconvert->pub.color_convert = rgb_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 800912a:	e057      	b.n	80091dc <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009132:	2b01      	cmp	r3, #1
 8009134:	d103      	bne.n	800913e <jinit_color_deconverter+0x186>
      cconvert->pub.color_convert = gray_rgb_convert;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	4a34      	ldr	r2, [pc, #208]	@ (800920c <jinit_color_deconverter+0x254>)
 800913a:	605a      	str	r2, [r3, #4]
    break;
 800913c:	e04e      	b.n	80091dc <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009144:	2b02      	cmp	r3, #2
 8009146:	d103      	bne.n	8009150 <jinit_color_deconverter+0x198>
      cconvert->pub.color_convert = rgb_convert;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	4a31      	ldr	r2, [pc, #196]	@ (8009210 <jinit_color_deconverter+0x258>)
 800914c:	605a      	str	r2, [r3, #4]
    break;
 800914e:	e045      	b.n	80091dc <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	221c      	movs	r2, #28
 8009156:	615a      	str	r2, [r3, #20]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
    break;
 8009162:	e03b      	b.n	80091dc <jinit_color_deconverter+0x224>

  case JCS_CMYK:
    cinfo->out_color_components = 4;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2204      	movs	r2, #4
 8009168:	679a      	str	r2, [r3, #120]	@ 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009170:	2b05      	cmp	r3, #5
 8009172:	d106      	bne.n	8009182 <jinit_color_deconverter+0x1ca>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4a27      	ldr	r2, [pc, #156]	@ (8009214 <jinit_color_deconverter+0x25c>)
 8009178:	605a      	str	r2, [r3, #4]
      build_ycc_rgb_table(cinfo);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fc00 	bl	8008980 <build_ycc_rgb_table>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8009180:	e02c      	b.n	80091dc <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009188:	2b04      	cmp	r3, #4
 800918a:	d103      	bne.n	8009194 <jinit_color_deconverter+0x1dc>
      cconvert->pub.color_convert = null_convert;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	4a22      	ldr	r2, [pc, #136]	@ (8009218 <jinit_color_deconverter+0x260>)
 8009190:	605a      	str	r2, [r3, #4]
    break;
 8009192:	e023      	b.n	80091dc <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	221c      	movs	r2, #28
 800919a:	615a      	str	r2, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	4798      	blx	r3
    break;
 80091a6:	e019      	b.n	80091dc <jinit_color_deconverter+0x224>

  default:
    /* Permit null conversion to same output space */
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d107      	bne.n	80091c8 <jinit_color_deconverter+0x210>
      cinfo->out_color_components = cinfo->num_components;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	679a      	str	r2, [r3, #120]	@ 0x78
      cconvert->pub.color_convert = null_convert;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4a15      	ldr	r2, [pc, #84]	@ (8009218 <jinit_color_deconverter+0x260>)
 80091c4:	605a      	str	r2, [r3, #4]
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 80091c6:	e008      	b.n	80091da <jinit_color_deconverter+0x222>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	221c      	movs	r2, #28
 80091ce:	615a      	str	r2, [r3, #20]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	4798      	blx	r3
    break;
 80091da:	bf00      	nop
  }

  if (cinfo->quantize_colors)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <jinit_color_deconverter+0x234>
    cinfo->output_components = 1; /* single colormapped output component */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  else
    cinfo->output_components = cinfo->out_color_components;
}
 80091ea:	e003      	b.n	80091f4 <jinit_color_deconverter+0x23c>
    cinfo->output_components = cinfo->out_color_components;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80091f4:	bf00      	nop
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	08008fa5 	.word	0x08008fa5
 8009200:	08008deb 	.word	0x08008deb
 8009204:	08008c0d 	.word	0x08008c0d
 8009208:	08008a81 	.word	0x08008a81
 800920c:	08008e19 	.word	0x08008e19
 8009210:	08008cd7 	.word	0x08008cd7
 8009214:	08008e7f 	.word	0x08008e7f
 8009218:	08008d67 	.word	0x08008d67

0800921c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b08f      	sub	sp, #60	@ 0x3c
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 800922a:	61bb      	str	r3, [r7, #24]
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	62bb      	str	r3, [r7, #40]	@ 0x28
  inverse_DCT_method_ptr method_ptr = NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009234:	2300      	movs	r3, #0
 8009236:	637b      	str	r3, [r7, #52]	@ 0x34
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800923e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009240:	e30d      	b.n	800985e <start_pass+0x642>
       ci++, compptr++) {
    /* Select the proper IDCT routine for this component's scaling */
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8009242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009246:	021a      	lsls	r2, r3, #8
 8009248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924c:	4413      	add	r3, r2
 800924e:	f241 0210 	movw	r2, #4112	@ 0x1010
 8009252:	4293      	cmp	r3, r2
 8009254:	f000 8168 	beq.w	8009528 <start_pass+0x30c>
 8009258:	f241 0210 	movw	r2, #4112	@ 0x1010
 800925c:	4293      	cmp	r3, r2
 800925e:	f300 81de 	bgt.w	800961e <start_pass+0x402>
 8009262:	f241 0208 	movw	r2, #4104	@ 0x1008
 8009266:	4293      	cmp	r3, r2
 8009268:	f000 8163 	beq.w	8009532 <start_pass+0x316>
 800926c:	f241 0208 	movw	r2, #4104	@ 0x1008
 8009270:	4293      	cmp	r3, r2
 8009272:	f300 81d4 	bgt.w	800961e <start_pass+0x402>
 8009276:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800927a:	4293      	cmp	r3, r2
 800927c:	f000 814f 	beq.w	800951e <start_pass+0x302>
 8009280:	f5b3 6f71 	cmp.w	r3, #3856	@ 0xf10
 8009284:	f280 81cb 	bge.w	800961e <start_pass+0x402>
 8009288:	f640 620e 	movw	r2, #3598	@ 0xe0e
 800928c:	4293      	cmp	r3, r2
 800928e:	f000 8141 	beq.w	8009514 <start_pass+0x2f8>
 8009292:	f640 620e 	movw	r2, #3598	@ 0xe0e
 8009296:	4293      	cmp	r3, r2
 8009298:	f300 81c1 	bgt.w	800961e <start_pass+0x402>
 800929c:	f640 6207 	movw	r2, #3591	@ 0xe07
 80092a0:	4293      	cmp	r3, r2
 80092a2:	f000 814b 	beq.w	800953c <start_pass+0x320>
 80092a6:	f640 6207 	movw	r2, #3591	@ 0xe07
 80092aa:	4293      	cmp	r3, r2
 80092ac:	f300 81b7 	bgt.w	800961e <start_pass+0x402>
 80092b0:	f640 520d 	movw	r2, #3341	@ 0xd0d
 80092b4:	4293      	cmp	r3, r2
 80092b6:	f000 8128 	beq.w	800950a <start_pass+0x2ee>
 80092ba:	f640 520d 	movw	r2, #3341	@ 0xd0d
 80092be:	4293      	cmp	r3, r2
 80092c0:	f300 81ad 	bgt.w	800961e <start_pass+0x402>
 80092c4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80092c8:	4293      	cmp	r3, r2
 80092ca:	f000 8119 	beq.w	8009500 <start_pass+0x2e4>
 80092ce:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80092d2:	4293      	cmp	r3, r2
 80092d4:	f300 81a3 	bgt.w	800961e <start_pass+0x402>
 80092d8:	f640 4206 	movw	r2, #3078	@ 0xc06
 80092dc:	4293      	cmp	r3, r2
 80092de:	f000 8132 	beq.w	8009546 <start_pass+0x32a>
 80092e2:	f640 4206 	movw	r2, #3078	@ 0xc06
 80092e6:	4293      	cmp	r3, r2
 80092e8:	f300 8199 	bgt.w	800961e <start_pass+0x402>
 80092ec:	f640 320b 	movw	r2, #2827	@ 0xb0b
 80092f0:	4293      	cmp	r3, r2
 80092f2:	f000 8100 	beq.w	80094f6 <start_pass+0x2da>
 80092f6:	f640 320b 	movw	r2, #2827	@ 0xb0b
 80092fa:	4293      	cmp	r3, r2
 80092fc:	f300 818f 	bgt.w	800961e <start_pass+0x402>
 8009300:	f640 220a 	movw	r2, #2570	@ 0xa0a
 8009304:	4293      	cmp	r3, r2
 8009306:	f000 80f1 	beq.w	80094ec <start_pass+0x2d0>
 800930a:	f640 220a 	movw	r2, #2570	@ 0xa0a
 800930e:	4293      	cmp	r3, r2
 8009310:	f300 8185 	bgt.w	800961e <start_pass+0x402>
 8009314:	f640 2205 	movw	r2, #2565	@ 0xa05
 8009318:	4293      	cmp	r3, r2
 800931a:	f000 8119 	beq.w	8009550 <start_pass+0x334>
 800931e:	f640 2205 	movw	r2, #2565	@ 0xa05
 8009322:	4293      	cmp	r3, r2
 8009324:	f300 817b 	bgt.w	800961e <start_pass+0x402>
 8009328:	f640 1209 	movw	r2, #2313	@ 0x909
 800932c:	4293      	cmp	r3, r2
 800932e:	f000 80d8 	beq.w	80094e2 <start_pass+0x2c6>
 8009332:	f640 1209 	movw	r2, #2313	@ 0x909
 8009336:	4293      	cmp	r3, r2
 8009338:	f300 8171 	bgt.w	800961e <start_pass+0x402>
 800933c:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8009340:	f000 811f 	beq.w	8009582 <start_pass+0x366>
 8009344:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 8009348:	f300 8169 	bgt.w	800961e <start_pass+0x402>
 800934c:	f640 0208 	movw	r2, #2056	@ 0x808
 8009350:	4293      	cmp	r3, r2
 8009352:	f000 813e 	beq.w	80095d2 <start_pass+0x3b6>
 8009356:	f640 0208 	movw	r2, #2056	@ 0x808
 800935a:	4293      	cmp	r3, r2
 800935c:	f300 815f 	bgt.w	800961e <start_pass+0x402>
 8009360:	f640 0204 	movw	r2, #2052	@ 0x804
 8009364:	4293      	cmp	r3, r2
 8009366:	f000 80f8 	beq.w	800955a <start_pass+0x33e>
 800936a:	f640 0204 	movw	r2, #2052	@ 0x804
 800936e:	4293      	cmp	r3, r2
 8009370:	f300 8155 	bgt.w	800961e <start_pass+0x402>
 8009374:	f240 720e 	movw	r2, #1806	@ 0x70e
 8009378:	4293      	cmp	r3, r2
 800937a:	f000 8107 	beq.w	800958c <start_pass+0x370>
 800937e:	f240 720e 	movw	r2, #1806	@ 0x70e
 8009382:	4293      	cmp	r3, r2
 8009384:	f300 814b 	bgt.w	800961e <start_pass+0x402>
 8009388:	f240 7207 	movw	r2, #1799	@ 0x707
 800938c:	4293      	cmp	r3, r2
 800938e:	f000 80a3 	beq.w	80094d8 <start_pass+0x2bc>
 8009392:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8009396:	f280 8142 	bge.w	800961e <start_pass+0x402>
 800939a:	f240 620c 	movw	r2, #1548	@ 0x60c
 800939e:	4293      	cmp	r3, r2
 80093a0:	f000 80f9 	beq.w	8009596 <start_pass+0x37a>
 80093a4:	f240 620c 	movw	r2, #1548	@ 0x60c
 80093a8:	4293      	cmp	r3, r2
 80093aa:	f300 8138 	bgt.w	800961e <start_pass+0x402>
 80093ae:	f240 6206 	movw	r2, #1542	@ 0x606
 80093b2:	4293      	cmp	r3, r2
 80093b4:	f000 808b 	beq.w	80094ce <start_pass+0x2b2>
 80093b8:	f240 6206 	movw	r2, #1542	@ 0x606
 80093bc:	4293      	cmp	r3, r2
 80093be:	f300 812e 	bgt.w	800961e <start_pass+0x402>
 80093c2:	f240 6203 	movw	r2, #1539	@ 0x603
 80093c6:	4293      	cmp	r3, r2
 80093c8:	f000 80cc 	beq.w	8009564 <start_pass+0x348>
 80093cc:	f240 6203 	movw	r2, #1539	@ 0x603
 80093d0:	4293      	cmp	r3, r2
 80093d2:	f300 8124 	bgt.w	800961e <start_pass+0x402>
 80093d6:	f240 520a 	movw	r2, #1290	@ 0x50a
 80093da:	4293      	cmp	r3, r2
 80093dc:	f000 80e0 	beq.w	80095a0 <start_pass+0x384>
 80093e0:	f240 520a 	movw	r2, #1290	@ 0x50a
 80093e4:	4293      	cmp	r3, r2
 80093e6:	f300 811a 	bgt.w	800961e <start_pass+0x402>
 80093ea:	f240 5205 	movw	r2, #1285	@ 0x505
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d068      	beq.n	80094c4 <start_pass+0x2a8>
 80093f2:	f240 5205 	movw	r2, #1285	@ 0x505
 80093f6:	4293      	cmp	r3, r2
 80093f8:	f300 8111 	bgt.w	800961e <start_pass+0x402>
 80093fc:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 8009400:	f000 80d3 	beq.w	80095aa <start_pass+0x38e>
 8009404:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 8009408:	f300 8109 	bgt.w	800961e <start_pass+0x402>
 800940c:	f240 4204 	movw	r2, #1028	@ 0x404
 8009410:	4293      	cmp	r3, r2
 8009412:	d052      	beq.n	80094ba <start_pass+0x29e>
 8009414:	f240 4204 	movw	r2, #1028	@ 0x404
 8009418:	4293      	cmp	r3, r2
 800941a:	f300 8100 	bgt.w	800961e <start_pass+0x402>
 800941e:	f240 4202 	movw	r2, #1026	@ 0x402
 8009422:	4293      	cmp	r3, r2
 8009424:	f000 80a3 	beq.w	800956e <start_pass+0x352>
 8009428:	f240 4202 	movw	r2, #1026	@ 0x402
 800942c:	4293      	cmp	r3, r2
 800942e:	f300 80f6 	bgt.w	800961e <start_pass+0x402>
 8009432:	f240 3206 	movw	r2, #774	@ 0x306
 8009436:	4293      	cmp	r3, r2
 8009438:	f000 80bc 	beq.w	80095b4 <start_pass+0x398>
 800943c:	f240 3206 	movw	r2, #774	@ 0x306
 8009440:	4293      	cmp	r3, r2
 8009442:	f300 80ec 	bgt.w	800961e <start_pass+0x402>
 8009446:	f240 3203 	movw	r2, #771	@ 0x303
 800944a:	4293      	cmp	r3, r2
 800944c:	d030      	beq.n	80094b0 <start_pass+0x294>
 800944e:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 8009452:	f280 80e4 	bge.w	800961e <start_pass+0x402>
 8009456:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800945a:	f000 80b0 	beq.w	80095be <start_pass+0x3a2>
 800945e:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8009462:	f300 80dc 	bgt.w	800961e <start_pass+0x402>
 8009466:	f240 2202 	movw	r2, #514	@ 0x202
 800946a:	4293      	cmp	r3, r2
 800946c:	d01b      	beq.n	80094a6 <start_pass+0x28a>
 800946e:	f240 2202 	movw	r2, #514	@ 0x202
 8009472:	4293      	cmp	r3, r2
 8009474:	f300 80d3 	bgt.w	800961e <start_pass+0x402>
 8009478:	f240 2201 	movw	r2, #513	@ 0x201
 800947c:	4293      	cmp	r3, r2
 800947e:	d07b      	beq.n	8009578 <start_pass+0x35c>
 8009480:	f240 2201 	movw	r2, #513	@ 0x201
 8009484:	4293      	cmp	r3, r2
 8009486:	f300 80ca 	bgt.w	800961e <start_pass+0x402>
 800948a:	f240 1201 	movw	r2, #257	@ 0x101
 800948e:	4293      	cmp	r3, r2
 8009490:	d004      	beq.n	800949c <start_pass+0x280>
 8009492:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8009496:	f000 8097 	beq.w	80095c8 <start_pass+0x3ac>
 800949a:	e0c0      	b.n	800961e <start_pass+0x402>
#ifdef IDCT_SCALING_SUPPORTED
    case ((1 << 8) + 1):
      method_ptr = jpeg_idct_1x1;
 800949c:	4b8e      	ldr	r3, [pc, #568]	@ (80096d8 <start_pass+0x4bc>)
 800949e:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094a0:	2300      	movs	r3, #0
 80094a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094a4:	e0cf      	b.n	8009646 <start_pass+0x42a>
    case ((2 << 8) + 2):
      method_ptr = jpeg_idct_2x2;
 80094a6:	4b8d      	ldr	r3, [pc, #564]	@ (80096dc <start_pass+0x4c0>)
 80094a8:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094aa:	2300      	movs	r3, #0
 80094ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094ae:	e0ca      	b.n	8009646 <start_pass+0x42a>
    case ((3 << 8) + 3):
      method_ptr = jpeg_idct_3x3;
 80094b0:	4b8b      	ldr	r3, [pc, #556]	@ (80096e0 <start_pass+0x4c4>)
 80094b2:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094b4:	2300      	movs	r3, #0
 80094b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094b8:	e0c5      	b.n	8009646 <start_pass+0x42a>
    case ((4 << 8) + 4):
      method_ptr = jpeg_idct_4x4;
 80094ba:	4b8a      	ldr	r3, [pc, #552]	@ (80096e4 <start_pass+0x4c8>)
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094be:	2300      	movs	r3, #0
 80094c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094c2:	e0c0      	b.n	8009646 <start_pass+0x42a>
    case ((5 << 8) + 5):
      method_ptr = jpeg_idct_5x5;
 80094c4:	4b88      	ldr	r3, [pc, #544]	@ (80096e8 <start_pass+0x4cc>)
 80094c6:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094c8:	2300      	movs	r3, #0
 80094ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094cc:	e0bb      	b.n	8009646 <start_pass+0x42a>
    case ((6 << 8) + 6):
      method_ptr = jpeg_idct_6x6;
 80094ce:	4b87      	ldr	r3, [pc, #540]	@ (80096ec <start_pass+0x4d0>)
 80094d0:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094d2:	2300      	movs	r3, #0
 80094d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094d6:	e0b6      	b.n	8009646 <start_pass+0x42a>
    case ((7 << 8) + 7):
      method_ptr = jpeg_idct_7x7;
 80094d8:	4b85      	ldr	r3, [pc, #532]	@ (80096f0 <start_pass+0x4d4>)
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094dc:	2300      	movs	r3, #0
 80094de:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094e0:	e0b1      	b.n	8009646 <start_pass+0x42a>
    case ((9 << 8) + 9):
      method_ptr = jpeg_idct_9x9;
 80094e2:	4b84      	ldr	r3, [pc, #528]	@ (80096f4 <start_pass+0x4d8>)
 80094e4:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094e6:	2300      	movs	r3, #0
 80094e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094ea:	e0ac      	b.n	8009646 <start_pass+0x42a>
    case ((10 << 8) + 10):
      method_ptr = jpeg_idct_10x10;
 80094ec:	4b82      	ldr	r3, [pc, #520]	@ (80096f8 <start_pass+0x4dc>)
 80094ee:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094f0:	2300      	movs	r3, #0
 80094f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094f4:	e0a7      	b.n	8009646 <start_pass+0x42a>
    case ((11 << 8) + 11):
      method_ptr = jpeg_idct_11x11;
 80094f6:	4b81      	ldr	r3, [pc, #516]	@ (80096fc <start_pass+0x4e0>)
 80094f8:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80094fa:	2300      	movs	r3, #0
 80094fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80094fe:	e0a2      	b.n	8009646 <start_pass+0x42a>
    case ((12 << 8) + 12):
      method_ptr = jpeg_idct_12x12;
 8009500:	4b7f      	ldr	r3, [pc, #508]	@ (8009700 <start_pass+0x4e4>)
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009504:	2300      	movs	r3, #0
 8009506:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009508:	e09d      	b.n	8009646 <start_pass+0x42a>
    case ((13 << 8) + 13):
      method_ptr = jpeg_idct_13x13;
 800950a:	4b7e      	ldr	r3, [pc, #504]	@ (8009704 <start_pass+0x4e8>)
 800950c:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800950e:	2300      	movs	r3, #0
 8009510:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009512:	e098      	b.n	8009646 <start_pass+0x42a>
    case ((14 << 8) + 14):
      method_ptr = jpeg_idct_14x14;
 8009514:	4b7c      	ldr	r3, [pc, #496]	@ (8009708 <start_pass+0x4ec>)
 8009516:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009518:	2300      	movs	r3, #0
 800951a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800951c:	e093      	b.n	8009646 <start_pass+0x42a>
    case ((15 << 8) + 15):
      method_ptr = jpeg_idct_15x15;
 800951e:	4b7b      	ldr	r3, [pc, #492]	@ (800970c <start_pass+0x4f0>)
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009522:	2300      	movs	r3, #0
 8009524:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009526:	e08e      	b.n	8009646 <start_pass+0x42a>
    case ((16 << 8) + 16):
      method_ptr = jpeg_idct_16x16;
 8009528:	4b79      	ldr	r3, [pc, #484]	@ (8009710 <start_pass+0x4f4>)
 800952a:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800952c:	2300      	movs	r3, #0
 800952e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009530:	e089      	b.n	8009646 <start_pass+0x42a>
    case ((16 << 8) + 8):
      method_ptr = jpeg_idct_16x8;
 8009532:	4b78      	ldr	r3, [pc, #480]	@ (8009714 <start_pass+0x4f8>)
 8009534:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009536:	2300      	movs	r3, #0
 8009538:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800953a:	e084      	b.n	8009646 <start_pass+0x42a>
    case ((14 << 8) + 7):
      method_ptr = jpeg_idct_14x7;
 800953c:	4b76      	ldr	r3, [pc, #472]	@ (8009718 <start_pass+0x4fc>)
 800953e:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009540:	2300      	movs	r3, #0
 8009542:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009544:	e07f      	b.n	8009646 <start_pass+0x42a>
    case ((12 << 8) + 6):
      method_ptr = jpeg_idct_12x6;
 8009546:	4b75      	ldr	r3, [pc, #468]	@ (800971c <start_pass+0x500>)
 8009548:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800954a:	2300      	movs	r3, #0
 800954c:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800954e:	e07a      	b.n	8009646 <start_pass+0x42a>
    case ((10 << 8) + 5):
      method_ptr = jpeg_idct_10x5;
 8009550:	4b73      	ldr	r3, [pc, #460]	@ (8009720 <start_pass+0x504>)
 8009552:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009554:	2300      	movs	r3, #0
 8009556:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009558:	e075      	b.n	8009646 <start_pass+0x42a>
    case ((8 << 8) + 4):
      method_ptr = jpeg_idct_8x4;
 800955a:	4b72      	ldr	r3, [pc, #456]	@ (8009724 <start_pass+0x508>)
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800955e:	2300      	movs	r3, #0
 8009560:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009562:	e070      	b.n	8009646 <start_pass+0x42a>
    case ((6 << 8) + 3):
      method_ptr = jpeg_idct_6x3;
 8009564:	4b70      	ldr	r3, [pc, #448]	@ (8009728 <start_pass+0x50c>)
 8009566:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009568:	2300      	movs	r3, #0
 800956a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800956c:	e06b      	b.n	8009646 <start_pass+0x42a>
    case ((4 << 8) + 2):
      method_ptr = jpeg_idct_4x2;
 800956e:	4b6f      	ldr	r3, [pc, #444]	@ (800972c <start_pass+0x510>)
 8009570:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009572:	2300      	movs	r3, #0
 8009574:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009576:	e066      	b.n	8009646 <start_pass+0x42a>
    case ((2 << 8) + 1):
      method_ptr = jpeg_idct_2x1;
 8009578:	4b6d      	ldr	r3, [pc, #436]	@ (8009730 <start_pass+0x514>)
 800957a:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800957c:	2300      	movs	r3, #0
 800957e:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009580:	e061      	b.n	8009646 <start_pass+0x42a>
    case ((8 << 8) + 16):
      method_ptr = jpeg_idct_8x16;
 8009582:	4b6c      	ldr	r3, [pc, #432]	@ (8009734 <start_pass+0x518>)
 8009584:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009586:	2300      	movs	r3, #0
 8009588:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800958a:	e05c      	b.n	8009646 <start_pass+0x42a>
    case ((7 << 8) + 14):
      method_ptr = jpeg_idct_7x14;
 800958c:	4b6a      	ldr	r3, [pc, #424]	@ (8009738 <start_pass+0x51c>)
 800958e:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8009590:	2300      	movs	r3, #0
 8009592:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 8009594:	e057      	b.n	8009646 <start_pass+0x42a>
    case ((6 << 8) + 12):
      method_ptr = jpeg_idct_6x12;
 8009596:	4b69      	ldr	r3, [pc, #420]	@ (800973c <start_pass+0x520>)
 8009598:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800959a:	2300      	movs	r3, #0
 800959c:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800959e:	e052      	b.n	8009646 <start_pass+0x42a>
    case ((5 << 8) + 10):
      method_ptr = jpeg_idct_5x10;
 80095a0:	4b67      	ldr	r3, [pc, #412]	@ (8009740 <start_pass+0x524>)
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80095a4:	2300      	movs	r3, #0
 80095a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80095a8:	e04d      	b.n	8009646 <start_pass+0x42a>
    case ((4 << 8) + 8):
      method_ptr = jpeg_idct_4x8;
 80095aa:	4b66      	ldr	r3, [pc, #408]	@ (8009744 <start_pass+0x528>)
 80095ac:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80095ae:	2300      	movs	r3, #0
 80095b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80095b2:	e048      	b.n	8009646 <start_pass+0x42a>
    case ((3 << 8) + 6):
      method_ptr = jpeg_idct_3x6;
 80095b4:	4b64      	ldr	r3, [pc, #400]	@ (8009748 <start_pass+0x52c>)
 80095b6:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80095b8:	2300      	movs	r3, #0
 80095ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80095bc:	e043      	b.n	8009646 <start_pass+0x42a>
    case ((2 << 8) + 4):
      method_ptr = jpeg_idct_2x4;
 80095be:	4b63      	ldr	r3, [pc, #396]	@ (800974c <start_pass+0x530>)
 80095c0:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80095c2:	2300      	movs	r3, #0
 80095c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80095c6:	e03e      	b.n	8009646 <start_pass+0x42a>
    case ((1 << 8) + 2):
      method_ptr = jpeg_idct_1x2;
 80095c8:	4b61      	ldr	r3, [pc, #388]	@ (8009750 <start_pass+0x534>)
 80095ca:	627b      	str	r3, [r7, #36]	@ 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80095cc:	2300      	movs	r3, #0
 80095ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80095d0:	e039      	b.n	8009646 <start_pass+0x42a>
#endif
    case ((DCTSIZE << 8) + DCTSIZE):
      switch (cinfo->dct_method) {
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d010      	beq.n	80095fe <start_pass+0x3e2>
 80095dc:	2b02      	cmp	r3, #2
 80095de:	dc13      	bgt.n	8009608 <start_pass+0x3ec>
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <start_pass+0x3ce>
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d005      	beq.n	80095f4 <start_pass+0x3d8>
 80095e8:	e00e      	b.n	8009608 <start_pass+0x3ec>
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	method_ptr = jpeg_idct_islow;
 80095ea:	4b5a      	ldr	r3, [pc, #360]	@ (8009754 <start_pass+0x538>)
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
	method = JDCT_ISLOW;
 80095ee:	2300      	movs	r3, #0
 80095f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	break;
 80095f2:	e013      	b.n	800961c <start_pass+0x400>
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	method_ptr = jpeg_idct_ifast;
 80095f4:	4b58      	ldr	r3, [pc, #352]	@ (8009758 <start_pass+0x53c>)
 80095f6:	627b      	str	r3, [r7, #36]	@ 0x24
	method = JDCT_IFAST;
 80095f8:	2301      	movs	r3, #1
 80095fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	break;
 80095fc:	e00e      	b.n	800961c <start_pass+0x400>
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	method_ptr = jpeg_idct_float;
 80095fe:	4b57      	ldr	r3, [pc, #348]	@ (800975c <start_pass+0x540>)
 8009600:	627b      	str	r3, [r7, #36]	@ 0x24
	method = JDCT_FLOAT;
 8009602:	2302      	movs	r3, #2
 8009604:	62bb      	str	r3, [r7, #40]	@ 0x28
	break;
 8009606:	e009      	b.n	800961c <start_pass+0x400>
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2231      	movs	r2, #49	@ 0x31
 800960e:	615a      	str	r2, [r3, #20]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	4798      	blx	r3
	break;
 800961a:	bf00      	nop
      }
      break;
 800961c:	e013      	b.n	8009646 <start_pass+0x42a>
    default:
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2207      	movs	r2, #7
 8009624:	615a      	str	r2, [r3, #20]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800962c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800962e:	619a      	str	r2, [r3, #24]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009636:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009638:	61da      	str	r2, [r3, #28]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	4798      	blx	r3
	       compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
      break;
 8009644:	bf00      	nop
    }
    idct->pub.inverse_DCT[ci] = method_ptr;
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009650:	605a      	str	r2, [r3, #4]
     * or if we already built the table.  Also, if no quant table
     * has yet been saved for the component, we leave the
     * multiplier table all-zero; we'll be reading zeroes from the
     * coefficient controller's buffer anyway.
     */
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 8009652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 80f8 	beq.w	800984c <start_pass+0x630>
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009660:	330a      	adds	r3, #10
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800966a:	429a      	cmp	r2, r3
 800966c:	f000 80ee 	beq.w	800984c <start_pass+0x630>
      continue;
    qtbl = compptr->quant_table;
 8009670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009674:	617b      	str	r3, [r7, #20]
    if (qtbl == NULL)		/* happens if no data yet for component */
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 80e9 	beq.w	8009850 <start_pass+0x634>
      continue;
    idct->cur_method[ci] = method;
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009682:	330a      	adds	r3, #10
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800968a:	605a      	str	r2, [r3, #4]
    switch (method) {
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	2b02      	cmp	r3, #2
 8009690:	f000 8086 	beq.w	80097a0 <start_pass+0x584>
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	2b02      	cmp	r3, #2
 8009698:	f300 80ce 	bgt.w	8009838 <start_pass+0x61c>
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <start_pass+0x48e>
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d05b      	beq.n	8009760 <start_pass+0x544>
 80096a8:	e0c6      	b.n	8009838 <start_pass+0x61c>
    case JDCT_ISLOW:
      {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored as ints to ensure access efficiency.
	 */
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80096aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ae:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < DCTSIZE2; i++) {
 80096b0:	2300      	movs	r3, #0
 80096b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096b4:	e00c      	b.n	80096d0 <start_pass+0x4b4>
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ba:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80096be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	4413      	add	r3, r2
 80096c6:	460a      	mov	r2, r1
 80096c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DCTSIZE2; i++) {
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	3301      	adds	r3, #1
 80096ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80096d4:	ddef      	ble.n	80096b6 <start_pass+0x49a>
	}
      }
      break;
 80096d6:	e0bc      	b.n	8009852 <start_pass+0x636>
 80096d8:	08014173 	.word	0x08014173
 80096dc:	0801405d 	.word	0x0801405d
 80096e0:	08013ead 	.word	0x08013ead
 80096e4:	08013c71 	.word	0x08013c71
 80096e8:	080138a5 	.word	0x080138a5
 80096ec:	0801343d 	.word	0x0801343d
 80096f0:	08012db1 	.word	0x08012db1
 80096f4:	080141cd 	.word	0x080141cd
 80096f8:	080148fd 	.word	0x080148fd
 80096fc:	080150f9 	.word	0x080150f9
 8009700:	08015aa9 	.word	0x08015aa9
 8009704:	080163e9 	.word	0x080163e9
 8009708:	08016f0d 	.word	0x08016f0d
 800970c:	080179ad 	.word	0x080179ad
 8009710:	080184d9 	.word	0x080184d9
 8009714:	080191dd 	.word	0x080191dd
 8009718:	08019d4d 	.word	0x08019d4d
 800971c:	0801a5fd 	.word	0x0801a5fd
 8009720:	0801ad01 	.word	0x0801ad01
 8009724:	0801b2ed 	.word	0x0801b2ed
 8009728:	0801b7fd 	.word	0x0801b7fd
 800972c:	0801bac5 	.word	0x0801bac5
 8009730:	0801bc49 	.word	0x0801bc49
 8009734:	0801bcd9 	.word	0x0801bcd9
 8009738:	0801c6f1 	.word	0x0801c6f1
 800973c:	0801cf69 	.word	0x0801cf69
 8009740:	0801d649 	.word	0x0801d649
 8009744:	0801dc55 	.word	0x0801dc55
 8009748:	0801e281 	.word	0x0801e281
 800974c:	0801e551 	.word	0x0801e551
 8009750:	0801e6e1 	.word	0x0801e6e1
 8009754:	08012451 	.word	0x08012451
 8009758:	08011c41 	.word	0x08011c41
 800975c:	080113e1 	.word	0x080113e1
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.
	 */
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 8009760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009764:	60fb      	str	r3, [r7, #12]
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	for (i = 0; i < DCTSIZE2; i++) {
 8009766:	2300      	movs	r3, #0
 8009768:	633b      	str	r3, [r7, #48]	@ 0x30
 800976a:	e015      	b.n	8009798 <start_pass+0x57c>
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009770:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009774:	4619      	mov	r1, r3
 8009776:	4a3f      	ldr	r2, [pc, #252]	@ (8009874 <start_pass+0x658>)
 8009778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 8009786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	440b      	add	r3, r1
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800978e:	1312      	asrs	r2, r2, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 8009790:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DCTSIZE2; i++) {
 8009792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009794:	3301      	adds	r3, #1
 8009796:	633b      	str	r3, [r7, #48]	@ 0x30
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	2b3f      	cmp	r3, #63	@ 0x3f
 800979c:	dde6      	ble.n	800976c <start_pass+0x550>
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
      }
      break;
 800979e:	e058      	b.n	8009852 <start_pass+0x636>
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 1/8.
	 */
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a4:	613b      	str	r3, [r7, #16]
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	i = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	633b      	str	r3, [r7, #48]	@ 0x30
	for (row = 0; row < DCTSIZE; row++) {
 80097aa:	2300      	movs	r3, #0
 80097ac:	623b      	str	r3, [r7, #32]
 80097ae:	e03f      	b.n	8009830 <start_pass+0x614>
	  for (col = 0; col < DCTSIZE; col++) {
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e036      	b.n	8009824 <start_pass+0x608>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[i] *
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f6 fea0 	bl	8000504 <__aeabi_ui2d>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 80097c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009878 <start_pass+0x65c>)
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	4413      	add	r3, r2
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
	      ((double) qtbl->quantval[i] *
 80097d0:	f7f6 ff12 	bl	80005f8 <__aeabi_dmul>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4610      	mov	r0, r2
 80097da:	4619      	mov	r1, r3
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 80097dc:	4a26      	ldr	r2, [pc, #152]	@ (8009878 <start_pass+0x65c>)
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	4413      	add	r3, r2
 80097e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e8:	f7f6 ff06 	bl	80005f8 <__aeabi_dmul>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	4610      	mov	r0, r2
 80097f2:	4619      	mov	r1, r3
 80097f4:	f04f 0200 	mov.w	r2, #0
 80097f8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80097fc:	f7f6 fefc 	bl	80005f8 <__aeabi_dmul>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4610      	mov	r0, r2
 8009806:	4619      	mov	r1, r3
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	18d4      	adds	r4, r2, r3
 8009810:	f7f7 f904 	bl	8000a1c <__aeabi_d2f>
 8009814:	4603      	mov	r3, r0
 8009816:	6023      	str	r3, [r4, #0]
	    i++;
 8009818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981a:	3301      	adds	r3, #1
 800981c:	633b      	str	r3, [r7, #48]	@ 0x30
	  for (col = 0; col < DCTSIZE; col++) {
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	3301      	adds	r3, #1
 8009822:	61fb      	str	r3, [r7, #28]
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2b07      	cmp	r3, #7
 8009828:	ddc5      	ble.n	80097b6 <start_pass+0x59a>
	for (row = 0; row < DCTSIZE; row++) {
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	3301      	adds	r3, #1
 800982e:	623b      	str	r3, [r7, #32]
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	2b07      	cmp	r3, #7
 8009834:	ddbc      	ble.n	80097b0 <start_pass+0x594>
	  }
	}
      }
      break;
 8009836:	e00c      	b.n	8009852 <start_pass+0x636>
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2231      	movs	r2, #49	@ 0x31
 800983e:	615a      	str	r2, [r3, #20]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	4798      	blx	r3
      break;
 800984a:	e002      	b.n	8009852 <start_pass+0x636>
      continue;
 800984c:	bf00      	nop
 800984e:	e000      	b.n	8009852 <start_pass+0x636>
      continue;
 8009850:	bf00      	nop
       ci++, compptr++) {
 8009852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009854:	3301      	adds	r3, #1
 8009856:	637b      	str	r3, [r7, #52]	@ 0x34
 8009858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985a:	3358      	adds	r3, #88	@ 0x58
 800985c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009864:	429a      	cmp	r2, r3
 8009866:	f6ff acec 	blt.w	8009242 <start_pass+0x26>
    }
  }
}
 800986a:	bf00      	nop
 800986c:	bf00      	nop
 800986e:	373c      	adds	r7, #60	@ 0x3c
 8009870:	46bd      	mov	sp, r7
 8009872:	bd90      	pop	{r4, r7, pc}
 8009874:	08023cc8 	.word	0x08023cc8
 8009878:	08023d48 	.word	0x08023d48

0800987c <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2254      	movs	r2, #84	@ 0x54
 800988c:	2101      	movs	r1, #1
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	4798      	blx	r3
 8009892:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
  idct->pub.start_pass = start_pass;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4a1a      	ldr	r2, [pc, #104]	@ (8009908 <jinit_inverse_dct+0x8c>)
 80098a0:	601a      	str	r2, [r3, #0]

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	e020      	b.n	80098f2 <jinit_inverse_dct+0x76>
       ci++, compptr++) {
    /* Allocate and pre-zero a multiplier table for each component */
    compptr->dct_table =
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098ba:	2101      	movs	r1, #1
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	4798      	blx	r3
 80098c0:	4602      	mov	r2, r0
    compptr->dct_table =
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	655a      	str	r2, [r3, #84]	@ 0x54
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098ce:	2100      	movs	r1, #0
 80098d0:	4618      	mov	r0, r3
 80098d2:	f018 fb3d 	bl	8021f50 <memset>
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	330a      	adds	r3, #10
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295
 80098e4:	605a      	str	r2, [r3, #4]
       ci++, compptr++) {
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	3301      	adds	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	3358      	adds	r3, #88	@ 0x58
 80098f0:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	dbd9      	blt.n	80098b0 <jinit_inverse_dct+0x34>
  }
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	0800921d 	.word	0x0800921d

0800990c <jpeg_make_d_derived_tbl>:
 */

LOCAL(void)
jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
			 d_derived_tbl ** pdtbl)
{
 800990c:	b590      	push	{r4, r7, lr}
 800990e:	f2ad 5d4c 	subw	sp, sp, #1356	@ 0x54c
 8009912:	af00      	add	r7, sp, #0
 8009914:	f507 64a9 	add.w	r4, r7, #1352	@ 0x548
 8009918:	f2a4 543c 	subw	r4, r4, #1340	@ 0x53c
 800991c:	6020      	str	r0, [r4, #0]
 800991e:	f507 60a9 	add.w	r0, r7, #1352	@ 0x548
 8009922:	f5a0 60a8 	sub.w	r0, r0, #1344	@ 0x540
 8009926:	6001      	str	r1, [r0, #0]
 8009928:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 800992c:	f2a1 5144 	subw	r1, r1, #1348	@ 0x544
 8009930:	600a      	str	r2, [r1, #0]
 8009932:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009936:	f5a2 62a9 	sub.w	r2, r2, #1352	@ 0x548
 800993a:	6013      	str	r3, [r2, #0]
  /* Note that huffsize[] and huffcode[] are filled in code-length order,
   * paralleling the order of the symbols themselves in htbl->huffval[].
   */

  /* Find the input Huffman table */
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800993c:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009940:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	db06      	blt.n	8009958 <jpeg_make_d_derived_tbl+0x4c>
 800994a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800994e:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b03      	cmp	r3, #3
 8009956:	dd20      	ble.n	800999a <jpeg_make_d_derived_tbl+0x8e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 8009958:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800995c:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2234      	movs	r2, #52	@ 0x34
 8009966:	615a      	str	r2, [r3, #20]
 8009968:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800996c:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009978:	f2a2 5244 	subw	r2, r2, #1348	@ 0x544
 800997c:	6812      	ldr	r2, [r2, #0]
 800997e:	619a      	str	r2, [r3, #24]
 8009980:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009984:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009992:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8009996:	6810      	ldr	r0, [r2, #0]
 8009998:	4798      	blx	r3
  htbl =
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800999a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800999e:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00e      	beq.n	80099c6 <jpeg_make_d_derived_tbl+0xba>
 80099a8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80099ac:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80099b6:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	332c      	adds	r3, #44	@ 0x2c
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	e00d      	b.n	80099e2 <jpeg_make_d_derived_tbl+0xd6>
 80099c6:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80099ca:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80099d4:	f2a3 5344 	subw	r3, r3, #1348	@ 0x544
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3330      	adds	r3, #48	@ 0x30
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	685b      	ldr	r3, [r3, #4]
  htbl =
 80099e2:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
  if (htbl == NULL)
 80099e6:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d120      	bne.n	8009a30 <jpeg_make_d_derived_tbl+0x124>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 80099ee:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80099f2:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2234      	movs	r2, #52	@ 0x34
 80099fc:	615a      	str	r2, [r3, #20]
 80099fe:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009a02:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009a0e:	f2a2 5244 	subw	r2, r2, #1348	@ 0x544
 8009a12:	6812      	ldr	r2, [r2, #0]
 8009a14:	619a      	str	r2, [r3, #24]
 8009a16:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009a1a:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009a28:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8009a2c:	6810      	ldr	r0, [r2, #0]
 8009a2e:	4798      	blx	r3

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
 8009a30:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009a34:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d116      	bne.n	8009a6e <jpeg_make_d_derived_tbl+0x162>
    *pdtbl = (d_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009a40:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009a44:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009a52:	f2a2 503c 	subw	r0, r2, #1340	@ 0x53c
 8009a56:	f44f 62b2 	mov.w	r2, #1424	@ 0x590
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	6800      	ldr	r0, [r0, #0]
 8009a5e:	4798      	blx	r3
 8009a60:	4602      	mov	r2, r0
    *pdtbl = (d_derived_tbl *)
 8009a62:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009a66:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	601a      	str	r2, [r3, #0]
				  SIZEOF(d_derived_tbl));
  dtbl = *pdtbl;
 8009a6e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009a72:	f5a3 63a9 	sub.w	r3, r3, #1352	@ 0x548
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  dtbl->pub = htbl;		/* fill in back link */
 8009a7e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a82:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8009a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  
  /* Figure C.1: make table of Huffman code length for each symbol */

  p = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
  for (l = 1; l <= 16; l++) {
 8009a90:	2301      	movs	r3, #1
 8009a92:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8009a96:	e042      	b.n	8009b1e <jpeg_make_d_derived_tbl+0x212>
    i = (int) htbl->bits[l];
 8009a98:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8009a9c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009aa0:	4413      	add	r3, r2
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 8009aa8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	db07      	blt.n	8009ac0 <jpeg_make_d_derived_tbl+0x1b4>
 8009ab0:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 8009ab4:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8009ab8:	4413      	add	r3, r2
 8009aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009abe:	dd22      	ble.n	8009b06 <jpeg_make_d_derived_tbl+0x1fa>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8009ac0:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009ac4:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2209      	movs	r2, #9
 8009ace:	615a      	str	r2, [r3, #20]
 8009ad0:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009ad4:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009ae2:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8009ae6:	6810      	ldr	r0, [r2, #0]
 8009ae8:	4798      	blx	r3
    while (i--)
 8009aea:	e00c      	b.n	8009b06 <jpeg_make_d_derived_tbl+0x1fa>
      huffsize[p++] = (char) l;
 8009aec:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	f8c7 2544 	str.w	r2, [r7, #1348]	@ 0x544
 8009af6:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 8009afa:	b2d1      	uxtb	r1, r2
 8009afc:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009b00:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009b04:	54d1      	strb	r1, [r2, r3]
    while (i--)
 8009b06:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8009b0a:	1e5a      	subs	r2, r3, #1
 8009b0c:	f8c7 2540 	str.w	r2, [r7, #1344]	@ 0x540
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1eb      	bne.n	8009aec <jpeg_make_d_derived_tbl+0x1e0>
  for (l = 1; l <= 16; l++) {
 8009b14:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009b18:	3301      	adds	r3, #1
 8009b1a:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8009b1e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009b22:	2b10      	cmp	r3, #16
 8009b24:	ddb8      	ble.n	8009a98 <jpeg_make_d_derived_tbl+0x18c>
  }
  huffsize[p] = 0;
 8009b26:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009b2a:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8009b2e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009b32:	4413      	add	r3, r2
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
  numsymbols = p;
 8009b38:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009b3c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
  
  /* Figure C.2: generate the codes themselves */
  /* We also validate that the counts represent a legal Huffman code tree. */
  
  code = 0;
 8009b40:	2300      	movs	r3, #0
 8009b42:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
  si = huffsize[0];
 8009b46:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009b4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
  p = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
  while (huffsize[p]) {
 8009b5a:	e045      	b.n	8009be8 <jpeg_make_d_derived_tbl+0x2dc>
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
 8009b5c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	f8c7 2544 	str.w	r2, [r7, #1348]	@ 0x544
 8009b66:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009b6a:	f2a2 5234 	subw	r2, r2, #1332	@ 0x534
 8009b6e:	f8d7 152c 	ldr.w	r1, [r7, #1324]	@ 0x52c
 8009b72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      code++;
 8009b76:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
    while (((int) huffsize[p]) == si) {
 8009b80:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009b84:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8009b88:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009b8c:	4413      	add	r3, r2
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d0e0      	beq.n	8009b5c <jpeg_make_d_derived_tbl+0x250>
    }
    /* code is now 1 more than the last code used for codelength si; but
     * it must still fit in si bits, since no code is allowed to be all ones.
     */
    if (((INT32) code) >= (((INT32) 1) << si))
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8009ba0:	409a      	lsls	r2, r3
 8009ba2:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	dc14      	bgt.n	8009bd4 <jpeg_make_d_derived_tbl+0x2c8>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8009baa:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009bae:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2209      	movs	r2, #9
 8009bb8:	615a      	str	r2, [r3, #20]
 8009bba:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009bbe:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009bcc:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8009bd0:	6810      	ldr	r0, [r2, #0]
 8009bd2:	4798      	blx	r3
    code <<= 1;
 8009bd4:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
    si++;
 8009bde:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8009be2:	3301      	adds	r3, #1
 8009be4:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
  while (huffsize[p]) {
 8009be8:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009bec:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 8009bf0:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009bf4:	4413      	add	r3, r2
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1c1      	bne.n	8009b80 <jpeg_make_d_derived_tbl+0x274>
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
  for (l = 1; l <= 16; l++) {
 8009c02:	2301      	movs	r3, #1
 8009c04:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8009c08:	e044      	b.n	8009c94 <jpeg_make_d_derived_tbl+0x388>
    if (htbl->bits[l]) {
 8009c0a:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8009c0e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009c12:	4413      	add	r3, r2
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d02f      	beq.n	8009c7a <jpeg_make_d_derived_tbl+0x36e>
      /* valoffset[l] = huffval[] index of 1st symbol of code length l,
       * minus the minimum code of length l
       */
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 8009c1a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009c1e:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8009c22:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 8009c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009c30:	1a99      	subs	r1, r3, r2
 8009c32:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009c36:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 8009c3a:	3212      	adds	r2, #18
 8009c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      p += htbl->bits[l];
 8009c40:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8009c44:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009c48:	4413      	add	r3, r2
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009c52:	4413      	add	r3, r2
 8009c54:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 8009c58:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009c5c:	1e5a      	subs	r2, r3, #1
 8009c5e:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009c62:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8009c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009c70:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 8009c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009c78:	e007      	b.n	8009c8a <jpeg_make_d_derived_tbl+0x37e>
    } else {
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 8009c7a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009c7e:	f8d7 253c 	ldr.w	r2, [r7, #1340]	@ 0x53c
 8009c82:	f04f 31ff 	mov.w	r1, #4294967295
 8009c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l = 1; l <= 16; l++) {
 8009c8a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009c8e:	3301      	adds	r3, #1
 8009c90:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8009c94:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	ddb6      	ble.n	8009c0a <jpeg_make_d_derived_tbl+0x2fe>
    }
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 8009c9c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8009e0c <jpeg_make_d_derived_tbl+0x500>)
 8009ca2:	645a      	str	r2, [r3, #68]	@ 0x44
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 8009ca4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009ca8:	3390      	adds	r3, #144	@ 0x90
 8009caa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f018 f94d 	bl	8021f50 <memset>

  p = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8009cc2:	e05e      	b.n	8009d82 <jpeg_make_d_derived_tbl+0x476>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8009cca:	e04a      	b.n	8009d62 <jpeg_make_d_derived_tbl+0x456>
      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
      /* Generate left-justified code followed by all possible bit sequences */
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 8009ccc:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009cd0:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 8009cd4:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 8009cd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cdc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009ce0:	f1c3 0308 	rsb	r3, r3, #8
 8009ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce8:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 8009cec:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009cf0:	f1c3 0308 	rsb	r3, r3, #8
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfa:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 8009cfe:	e022      	b.n	8009d46 <jpeg_make_d_derived_tbl+0x43a>
	dtbl->look_nbits[lookbits] = l;
 8009d00:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009d04:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 8009d08:	3224      	adds	r2, #36	@ 0x24
 8009d0a:	f8d7 153c 	ldr.w	r1, [r7, #1340]	@ 0x53c
 8009d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 8009d12:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8009d16:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009d1a:	4413      	add	r3, r2
 8009d1c:	3311      	adds	r3, #17
 8009d1e:	7819      	ldrb	r1, [r3, #0]
 8009d20:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009d24:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6392 	add.w	r3, r3, #1168	@ 0x490
 8009d2e:	460a      	mov	r2, r1
 8009d30:	701a      	strb	r2, [r3, #0]
	lookbits++;
 8009d32:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 8009d36:	3301      	adds	r3, #1
 8009d38:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 8009d3c:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8009d40:	3b01      	subs	r3, #1
 8009d42:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 8009d46:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dcd8      	bgt.n	8009d00 <jpeg_make_d_derived_tbl+0x3f4>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 8009d4e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8009d52:	3301      	adds	r3, #1
 8009d54:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8009d58:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8009d62:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8009d66:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009d6a:	4413      	add	r3, r2
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8009d74:	4293      	cmp	r3, r2
 8009d76:	dda9      	ble.n	8009ccc <jpeg_make_d_derived_tbl+0x3c0>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 8009d78:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8009d82:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8009d86:	2b08      	cmp	r3, #8
 8009d88:	dd9c      	ble.n	8009cc4 <jpeg_make_d_derived_tbl+0x3b8>
   * For AC tables, we make no check, but accept all byte values 0..255.
   * For DC tables, we require the symbols to be in range 0..15.
   * (Tighter bounds could be applied depending on the data depth and mode,
   * but this is sufficient to ensure safe decoding.)
   */
  if (isDC) {
 8009d8a:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009d8e:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d034      	beq.n	8009e02 <jpeg_make_d_derived_tbl+0x4f6>
    for (i = 0; i < numsymbols; i++) {
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8009d9e:	e02a      	b.n	8009df6 <jpeg_make_d_derived_tbl+0x4ea>
      int sym = htbl->huffval[i];
 8009da0:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8009da4:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8009da8:	4413      	add	r3, r2
 8009daa:	3311      	adds	r3, #17
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
      if (sym < 0 || sym > 15)
 8009db2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	db03      	blt.n	8009dc2 <jpeg_make_d_derived_tbl+0x4b6>
 8009dba:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009dbe:	2b0f      	cmp	r3, #15
 8009dc0:	dd14      	ble.n	8009dec <jpeg_make_d_derived_tbl+0x4e0>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8009dc2:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009dc6:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2209      	movs	r2, #9
 8009dd0:	615a      	str	r2, [r3, #20]
 8009dd2:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8009dd6:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8009de4:	f2a2 523c 	subw	r2, r2, #1340	@ 0x53c
 8009de8:	6810      	ldr	r0, [r2, #0]
 8009dea:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 8009dec:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 8009df0:	3301      	adds	r3, #1
 8009df2:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8009df6:	f8d7 2540 	ldr.w	r2, [r7, #1344]	@ 0x540
 8009dfa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	dbce      	blt.n	8009da0 <jpeg_make_d_derived_tbl+0x494>
    }
  }
}
 8009e02:	bf00      	nop
 8009e04:	f207 574c 	addw	r7, r7, #1356	@ 0x54c
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd90      	pop	{r4, r7, pc}
 8009e0c:	000fffff 	.word	0x000fffff

08009e10 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	6079      	str	r1, [r7, #4]
 8009e1a:	4615      	mov	r5, r2
 8009e1c:	60bb      	str	r3, [r7, #8]
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681e      	ldr	r6, [r3, #0]
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	685c      	ldr	r4, [r3, #4]
  j_decompress_ptr cinfo = state->cinfo;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	617b      	str	r3, [r7, #20]

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d143      	bne.n	8009ebe <jpeg_fill_bit_buffer+0xae>
    while (bits_left < MIN_GET_BITS) {
 8009e36:	e03f      	b.n	8009eb8 <jpeg_fill_bit_buffer+0xa8>
      register int c;

      /* Attempt to read a byte */
      if (bytes_in_buffer == 0) {
 8009e38:	2c00      	cmp	r4, #0
 8009e3a:	d10f      	bne.n	8009e5c <jpeg_fill_bit_buffer+0x4c>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	6978      	ldr	r0, [r7, #20]
 8009e44:	4798      	blx	r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <jpeg_fill_bit_buffer+0x40>
	  return FALSE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e060      	b.n	8009f12 <jpeg_fill_bit_buffer+0x102>
	next_input_byte = cinfo->src->next_input_byte;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	681e      	ldr	r6, [r3, #0]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	685c      	ldr	r4, [r3, #4]
      }
      bytes_in_buffer--;
 8009e5c:	3c01      	subs	r4, #1
      c = GETJOCTET(*next_input_byte++);
 8009e5e:	4633      	mov	r3, r6
 8009e60:	1c5e      	adds	r6, r3, #1
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	461a      	mov	r2, r3

      /* If it's 0xFF, check and discard stuffed zero byte */
      if (c == 0xFF) {
 8009e66:	2bff      	cmp	r3, #255	@ 0xff
 8009e68:	d121      	bne.n	8009eae <jpeg_fill_bit_buffer+0x9e>
	 * so that we can save a valid unread_marker value.  NOTE: we will
	 * accept multiple FF's followed by a 0 as meaning a single FF data
	 * byte.  This data pattern is not valid according to the standard.
	 */
	do {
	  if (bytes_in_buffer == 0) {
 8009e6a:	2c00      	cmp	r4, #0
 8009e6c:	d10f      	bne.n	8009e8e <jpeg_fill_bit_buffer+0x7e>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	6978      	ldr	r0, [r7, #20]
 8009e76:	4798      	blx	r3
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <jpeg_fill_bit_buffer+0x72>
	      return FALSE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e047      	b.n	8009f12 <jpeg_fill_bit_buffer+0x102>
	    next_input_byte = cinfo->src->next_input_byte;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	681e      	ldr	r6, [r3, #0]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	685c      	ldr	r4, [r3, #4]
	  }
	  bytes_in_buffer--;
 8009e8e:	3c01      	subs	r4, #1
	  c = GETJOCTET(*next_input_byte++);
 8009e90:	4633      	mov	r3, r6
 8009e92:	1c5e      	adds	r6, r3, #1
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
	} while (c == 0xFF);
 8009e98:	2bff      	cmp	r3, #255	@ 0xff
 8009e9a:	d0e6      	beq.n	8009e6a <jpeg_fill_bit_buffer+0x5a>

	if (c == 0) {
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <jpeg_fill_bit_buffer+0x96>
	  /* Found FF/00, which represents an FF data byte */
	  c = 0xFF;
 8009ea0:	23ff      	movs	r3, #255	@ 0xff
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	e003      	b.n	8009eae <jpeg_fill_bit_buffer+0x9e>
	   * bitread working state, not straight into permanent state.  But
	   * once we have hit a marker, we cannot need to suspend within the
	   * current MCU, because we will read no more bytes from the data
	   * source.  So it is OK to update permanent state right away.
	   */
	  cinfo->unread_marker = c;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
	  /* See if we need to insert some fake zero bits. */
	  goto no_more_bytes;
 8009eac:	e008      	b.n	8009ec0 <jpeg_fill_bit_buffer+0xb0>
	}
      }

      /* OK, load c into get_buffer */
      get_buffer = (get_buffer << 8) | c;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	607a      	str	r2, [r7, #4]
      bits_left += 8;
 8009eb6:	3508      	adds	r5, #8
    while (bits_left < MIN_GET_BITS) {
 8009eb8:	2d18      	cmp	r5, #24
 8009eba:	ddbd      	ble.n	8009e38 <jpeg_fill_bit_buffer+0x28>
 8009ebc:	e01f      	b.n	8009efe <jpeg_fill_bit_buffer+0xee>
    } /* end while */
  } else {
  no_more_bytes:
 8009ebe:	bf00      	nop
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	42ab      	cmp	r3, r5
 8009ec4:	dd1b      	ble.n	8009efe <jpeg_fill_bit_buffer+0xee>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8009ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10f      	bne.n	8009ef2 <jpeg_fill_bit_buffer+0xe2>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2278      	movs	r2, #120	@ 0x78
 8009ed8:	615a      	str	r2, [r3, #20]
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ee4:	6978      	ldr	r0, [r7, #20]
 8009ee6:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8009eee:	2201      	movs	r2, #1
 8009ef0:	625a      	str	r2, [r3, #36]	@ 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 8009ef2:	f1c5 0319 	rsb	r3, r5, #25
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	409a      	lsls	r2, r3
 8009efa:	607a      	str	r2, [r7, #4]
      bits_left = MIN_GET_BITS;
 8009efc:	2519      	movs	r5, #25
    }
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	601e      	str	r6, [r3, #0]
  state->bytes_in_buffer = bytes_in_buffer;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	605c      	str	r4, [r3, #4]
  state->get_buffer = get_buffer;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	609a      	str	r2, [r3, #8]
  state->bits_left = bits_left;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	60dd      	str	r5, [r3, #12]

  return TRUE;
 8009f10:	2301      	movs	r3, #1
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009f1c <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 8009f1c:	b5b0      	push	{r4, r5, r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	603b      	str	r3, [r7, #0]
  register int l = min_bits;
 8009f26:	69bc      	ldr	r4, [r7, #24]
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 8009f28:	42a2      	cmp	r2, r4
 8009f2a:	da0d      	bge.n	8009f48 <jpeg_huff_decode+0x2c>
 8009f2c:	4623      	mov	r3, r4
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7ff ff6e 	bl	8009e10 <jpeg_fill_bit_buffer>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <jpeg_huff_decode+0x24>
 8009f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3e:	e04b      	b.n	8009fd8 <jpeg_huff_decode+0xbc>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6899      	ldr	r1, [r3, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	68da      	ldr	r2, [r3, #12]
  code = GET_BITS(l);
 8009f48:	1b12      	subs	r2, r2, r4
 8009f4a:	fa41 f002 	asr.w	r0, r1, r2
 8009f4e:	4b24      	ldr	r3, [pc, #144]	@ (8009fe0 <jpeg_huff_decode+0xc4>)
 8009f50:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009f54:	ea00 0503 	and.w	r5, r0, r3

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
 8009f58:	e017      	b.n	8009f8a <jpeg_huff_decode+0x6e>
    code <<= 1;
 8009f5a:	006d      	lsls	r5, r5, #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 8009f5c:	2a00      	cmp	r2, #0
 8009f5e:	dc0d      	bgt.n	8009f7c <jpeg_huff_decode+0x60>
 8009f60:	2301      	movs	r3, #1
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff ff54 	bl	8009e10 <jpeg_fill_bit_buffer>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d102      	bne.n	8009f74 <jpeg_huff_decode+0x58>
 8009f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f72:	e031      	b.n	8009fd8 <jpeg_huff_decode+0xbc>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6899      	ldr	r1, [r3, #8]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68da      	ldr	r2, [r3, #12]
    code |= GET_BITS(1);
 8009f7c:	3a01      	subs	r2, #1
 8009f7e:	fa41 f302 	asr.w	r3, r1, r2
 8009f82:	2001      	movs	r0, #1
 8009f84:	4003      	ands	r3, r0
 8009f86:	431d      	orrs	r5, r3
    l++;
 8009f88:	3401      	adds	r4, #1
  while (code > htbl->maxcode[l]) {
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009f90:	429d      	cmp	r5, r3
 8009f92:	dce2      	bgt.n	8009f5a <jpeg_huff_decode+0x3e>
  }

  /* Unload the local registers */
  state->get_buffer = get_buffer;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6099      	str	r1, [r3, #8]
  state->bits_left = bits_left;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	60da      	str	r2, [r3, #12]

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
 8009f9c:	2c10      	cmp	r4, #16
 8009f9e:	dd10      	ble.n	8009fc2 <jpeg_huff_decode+0xa6>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2279      	movs	r2, #121	@ 0x79
 8009fa8:	615a      	str	r2, [r3, #20]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6912      	ldr	r2, [r2, #16]
 8009fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8009fba:	4610      	mov	r0, r2
 8009fbc:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e00a      	b.n	8009fd8 <jpeg_huff_decode+0xbc>
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	f104 0112 	add.w	r1, r4, #18
 8009fce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fd2:	442b      	add	r3, r5
 8009fd4:	4413      	add	r3, r2
 8009fd6:	7c5b      	ldrb	r3, [r3, #17]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bdb0      	pop	{r4, r5, r7, pc}
 8009fe0:	080240b4 	.word	0x080240b4

08009fe4 <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8009ff2:	60bb      	str	r3, [r7, #8]
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8009ffa:	699a      	ldr	r2, [r3, #24]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	da00      	bge.n	800a006 <process_restart+0x22>
 800a004:	3307      	adds	r3, #7
 800a006:	10db      	asrs	r3, r3, #3
 800a008:	4619      	mov	r1, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800a010:	440a      	add	r2, r1
 800a012:	619a      	str	r2, [r3, #24]
  entropy->bitstate.bits_left = 0;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	60da      	str	r2, [r3, #12]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <process_restart+0x4c>
    return FALSE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	e023      	b.n	800a078 <process_restart+0x94>

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800a030:	2300      	movs	r3, #0
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	e009      	b.n	800a04a <process_restart+0x66>
    entropy->saved.last_dc_val[ci] = 0;
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3304      	adds	r3, #4
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	2200      	movs	r2, #0
 800a042:	605a      	str	r2, [r3, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3301      	adds	r3, #1
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	429a      	cmp	r2, r3
 800a054:	dbef      	blt.n	800a036 <process_restart+0x52>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2200      	movs	r2, #0
 800a05a:	611a      	str	r2, [r3, #16]

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d102      	bne.n	800a076 <process_restart+0x92>
    entropy->insufficient_data = FALSE;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2200      	movs	r2, #0
 800a074:	625a      	str	r2, [r3, #36]	@ 0x24

  return TRUE;
 800a076:	2301      	movs	r3, #1
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800a080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a084:	b096      	sub	sp, #88	@ 0x58
 800a086:	af02      	add	r7, sp, #8
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800a092:	64bb      	str	r3, [r7, #72]	@ 0x48
  int Al = cinfo->Al;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a09a:	647b      	str	r3, [r7, #68]	@ 0x44
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <decode_mcu_DC_first+0x3e>
    if (entropy->restarts_to_go == 0)
 800a0a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d107      	bne.n	800a0be <decode_mcu_DC_first+0x3e>
      if (! process_restart(cinfo))
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff ff98 	bl	8009fe4 <process_restart>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <decode_mcu_DC_first+0x3e>
	return FALSE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e0d4      	b.n	800a268 <decode_mcu_DC_first+0x1e8>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800a0be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f040 80ca 	bne.w	800a25c <decode_mcu_DC_first+0x1dc>

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	623b      	str	r3, [r7, #32]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0de:	689e      	ldr	r6, [r3, #8]
 800a0e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0e2:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 800a0e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0e6:	f107 050c 	add.w	r5, r7, #12
 800a0ea:	f103 0c10 	add.w	ip, r3, #16
 800a0ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a0f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0f4:	f8dc 3000 	ldr.w	r3, [ip]
 800a0f8:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0fe:	e091      	b.n	800a224 <decode_mcu_DC_first+0x1a4>
      block = MCU_data[blkn];
 800a100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	4413      	add	r3, r2
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	643b      	str	r3, [r7, #64]	@ 0x40
      ci = cinfo->MCU_membership[blkn];
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a110:	325c      	adds	r2, #92	@ 0x5c
 800a112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
      compptr = cinfo->cur_comp_info[ci];
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a11c:	3354      	adds	r3, #84	@ 0x54
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	63bb      	str	r3, [r7, #56]	@ 0x38
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800a126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a12c:	330a      	adds	r3, #10
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800a136:	2c07      	cmp	r4, #7
 800a138:	dc11      	bgt.n	800a15e <decode_mcu_DC_first+0xde>
 800a13a:	f107 0020 	add.w	r0, r7, #32
 800a13e:	2300      	movs	r3, #0
 800a140:	4622      	mov	r2, r4
 800a142:	4631      	mov	r1, r6
 800a144:	f7ff fe64 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <decode_mcu_DC_first+0xd2>
 800a14e:	2300      	movs	r3, #0
 800a150:	e08a      	b.n	800a268 <decode_mcu_DC_first+0x1e8>
 800a152:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 800a154:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800a156:	2c07      	cmp	r4, #7
 800a158:	dc01      	bgt.n	800a15e <decode_mcu_DC_first+0xde>
 800a15a:	2501      	movs	r5, #1
 800a15c:	e015      	b.n	800a18a <decode_mcu_DC_first+0x10a>
 800a15e:	f1a4 0308 	sub.w	r3, r4, #8
 800a162:	fa46 f303 	asr.w	r3, r6, r3
 800a166:	22ff      	movs	r2, #255	@ 0xff
 800a168:	ea03 0802 	and.w	r8, r3, r2
 800a16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16e:	f108 0224 	add.w	r2, r8, #36	@ 0x24
 800a172:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a176:	2d00      	cmp	r5, #0
 800a178:	d006      	beq.n	800a188 <decode_mcu_DC_first+0x108>
 800a17a:	1b64      	subs	r4, r4, r5
 800a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17e:	4443      	add	r3, r8
 800a180:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a184:	461d      	mov	r5, r3
 800a186:	e00f      	b.n	800a1a8 <decode_mcu_DC_first+0x128>
 800a188:	2509      	movs	r5, #9
 800a18a:	f107 0020 	add.w	r0, r7, #32
 800a18e:	9500      	str	r5, [sp, #0]
 800a190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a192:	4622      	mov	r2, r4
 800a194:	4631      	mov	r1, r6
 800a196:	f7ff fec1 	bl	8009f1c <jpeg_huff_decode>
 800a19a:	4605      	mov	r5, r0
 800a19c:	2d00      	cmp	r5, #0
 800a19e:	da01      	bge.n	800a1a4 <decode_mcu_DC_first+0x124>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	e061      	b.n	800a268 <decode_mcu_DC_first+0x1e8>
 800a1a4:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 800a1a6:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
      if (s) {
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d025      	beq.n	800a1f8 <decode_mcu_DC_first+0x178>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800a1ac:	42ac      	cmp	r4, r5
 800a1ae:	da0d      	bge.n	800a1cc <decode_mcu_DC_first+0x14c>
 800a1b0:	f107 0020 	add.w	r0, r7, #32
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	f7ff fe29 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <decode_mcu_DC_first+0x148>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e04f      	b.n	800a268 <decode_mcu_DC_first+0x1e8>
 800a1c8:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 800a1ca:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
	r = GET_BITS(s);
 800a1cc:	1b64      	subs	r4, r4, r5
 800a1ce:	fa46 f204 	asr.w	r2, r6, r4
 800a1d2:	4b28      	ldr	r3, [pc, #160]	@ (800a274 <decode_mcu_DC_first+0x1f4>)
 800a1d4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a1d8:	ea02 0803 	and.w	r8, r2, r3
	s = HUFF_EXTEND(r, s);
 800a1dc:	1e6b      	subs	r3, r5, #1
 800a1de:	4a25      	ldr	r2, [pc, #148]	@ (800a274 <decode_mcu_DC_first+0x1f4>)
 800a1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1e4:	4598      	cmp	r8, r3
 800a1e6:	dc05      	bgt.n	800a1f4 <decode_mcu_DC_first+0x174>
 800a1e8:	4b22      	ldr	r3, [pc, #136]	@ (800a274 <decode_mcu_DC_first+0x1f4>)
 800a1ea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a1ee:	eba8 0303 	sub.w	r3, r8, r3
 800a1f2:	e000      	b.n	800a1f6 <decode_mcu_DC_first+0x176>
 800a1f4:	4643      	mov	r3, r8
 800a1f6:	461d      	mov	r5, r3
      }

      /* Convert DC difference to actual value, update last_dc_val */
      s += state.last_dc_val[ci];
 800a1f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	3350      	adds	r3, #80	@ 0x50
 800a1fe:	443b      	add	r3, r7
 800a200:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800a204:	441d      	add	r5, r3
      state.last_dc_val[ci] = s;
 800a206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	3350      	adds	r3, #80	@ 0x50
 800a20c:	443b      	add	r3, r7
 800a20e:	f843 5c40 	str.w	r5, [r3, #-64]
      /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
      (*block)[0] = (JCOEF) (s << Al);
 800a212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a214:	fa05 f303 	lsl.w	r3, r5, r3
 800a218:	b21a      	sxth	r2, r3
 800a21a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a21c:	801a      	strh	r2, [r3, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a220:	3301      	adds	r3, #1
 800a222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800a22a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a22c:	429a      	cmp	r2, r3
 800a22e:	f6ff af67 	blt.w	800a100 <decode_mcu_DC_first+0x80>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	6a3a      	ldr	r2, [r7, #32]
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a240:	605a      	str	r2, [r3, #4]
 800a242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a244:	609e      	str	r6, [r3, #8]
 800a246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a248:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 800a24a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a24c:	f103 0410 	add.w	r4, r3, #16
 800a250:	f107 050c 	add.w	r5, r7, #12
 800a254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800a25c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a260:	1e5a      	subs	r2, r3, #1
 800a262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a264:	629a      	str	r2, [r3, #40]	@ 0x28

  return TRUE;
 800a266:	2301      	movs	r3, #1
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3750      	adds	r7, #80	@ 0x50
 800a26c:	46bd      	mov	sp, r7
 800a26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a272:	bf00      	nop
 800a274:	080240b4 	.word	0x080240b4

0800a278 <decode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800a278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a27a:	b093      	sub	sp, #76	@ 0x4c
 800a27c:	af02      	add	r7, sp, #8
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800a288:	63bb      	str	r3, [r7, #56]	@ 0x38
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00b      	beq.n	800a2ac <decode_mcu_AC_first+0x34>
    if (entropy->restarts_to_go == 0)
 800a294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d107      	bne.n	800a2ac <decode_mcu_AC_first+0x34>
      if (! process_restart(cinfo))
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fea1 	bl	8009fe4 <process_restart>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <decode_mcu_AC_first+0x34>
	return FALSE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	e0f7      	b.n	800a49c <decode_mcu_AC_first+0x224>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f040 80ed 	bne.w	800a490 <decode_mcu_AC_first+0x218>

    Se = cinfo->Se;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800a2bc:	637b      	str	r3, [r7, #52]	@ 0x34
    Al = cinfo->Al;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a2c4:	633b      	str	r3, [r7, #48]	@ 0x30
    natural_order = cinfo->natural_order;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800a2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Load up working state.
     * We can avoid loading/saving bitread state if in an EOB run.
     */
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* There is always only one block per MCU */

    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800a2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <decode_mcu_AC_first+0x6a>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800a2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2e0:	e0d3      	b.n	800a48a <decode_mcu_AC_first+0x212>
    else {
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	623b      	str	r3, [r7, #32]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	613b      	str	r3, [r7, #16]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	607b      	str	r3, [r7, #4]
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	68dc      	ldr	r4, [r3, #12]
      block = MCU_data[0];
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	62bb      	str	r3, [r7, #40]	@ 0x28
      tbl = entropy->ac_derived_tbl;
 800a306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30a:	627b      	str	r3, [r7, #36]	@ 0x24

      for (k = cinfo->Ss; k <= Se; k++) {
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	e0a7      	b.n	800a466 <decode_mcu_AC_first+0x1ee>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800a316:	2c07      	cmp	r4, #7
 800a318:	dc12      	bgt.n	800a340 <decode_mcu_AC_first+0xc8>
 800a31a:	f107 0010 	add.w	r0, r7, #16
 800a31e:	2300      	movs	r3, #0
 800a320:	4622      	mov	r2, r4
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	f7ff fd74 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <decode_mcu_AC_first+0xba>
 800a32e:	2300      	movs	r3, #0
 800a330:	e0b4      	b.n	800a49c <decode_mcu_AC_first+0x224>
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	69fc      	ldr	r4, [r7, #28]
 800a338:	2c07      	cmp	r4, #7
 800a33a:	dc01      	bgt.n	800a340 <decode_mcu_AC_first+0xc8>
 800a33c:	2501      	movs	r5, #1
 800a33e:	e016      	b.n	800a36e <decode_mcu_AC_first+0xf6>
 800a340:	f1a4 0308 	sub.w	r3, r4, #8
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	fa42 f303 	asr.w	r3, r2, r3
 800a34a:	22ff      	movs	r2, #255	@ 0xff
 800a34c:	ea03 0602 	and.w	r6, r3, r2
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 800a356:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a35a:	2d00      	cmp	r5, #0
 800a35c:	d006      	beq.n	800a36c <decode_mcu_AC_first+0xf4>
 800a35e:	1b64      	subs	r4, r4, r5
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	4433      	add	r3, r6
 800a364:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a368:	461e      	mov	r6, r3
 800a36a:	e010      	b.n	800a38e <decode_mcu_AC_first+0x116>
 800a36c:	2509      	movs	r5, #9
 800a36e:	f107 0010 	add.w	r0, r7, #16
 800a372:	9500      	str	r5, [sp, #0]
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	4622      	mov	r2, r4
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	f7ff fdcf 	bl	8009f1c <jpeg_huff_decode>
 800a37e:	4606      	mov	r6, r0
 800a380:	2e00      	cmp	r6, #0
 800a382:	da01      	bge.n	800a388 <decode_mcu_AC_first+0x110>
 800a384:	2300      	movs	r3, #0
 800a386:	e089      	b.n	800a49c <decode_mcu_AC_first+0x224>
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	607b      	str	r3, [r7, #4]
 800a38c:	69fc      	ldr	r4, [r7, #28]
	r = s >> 4;
 800a38e:	1135      	asrs	r5, r6, #4
	s &= 15;
 800a390:	f006 060f 	and.w	r6, r6, #15
	if (s) {
 800a394:	2e00      	cmp	r6, #0
 800a396:	d036      	beq.n	800a406 <decode_mcu_AC_first+0x18e>
	  k += r;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	442b      	add	r3, r5
 800a39c:	603b      	str	r3, [r7, #0]
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800a39e:	42b4      	cmp	r4, r6
 800a3a0:	da0e      	bge.n	800a3c0 <decode_mcu_AC_first+0x148>
 800a3a2:	f107 0010 	add.w	r0, r7, #16
 800a3a6:	4633      	mov	r3, r6
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	f7ff fd30 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <decode_mcu_AC_first+0x142>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e070      	b.n	800a49c <decode_mcu_AC_first+0x224>
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	607b      	str	r3, [r7, #4]
 800a3be:	69fc      	ldr	r4, [r7, #28]
	  r = GET_BITS(s);
 800a3c0:	1ba4      	subs	r4, r4, r6
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	fa43 f204 	asr.w	r2, r3, r4
 800a3c8:	4b36      	ldr	r3, [pc, #216]	@ (800a4a4 <decode_mcu_AC_first+0x22c>)
 800a3ca:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a3ce:	ea02 0503 	and.w	r5, r2, r3
	  s = HUFF_EXTEND(r, s);
 800a3d2:	1e73      	subs	r3, r6, #1
 800a3d4:	4a33      	ldr	r2, [pc, #204]	@ (800a4a4 <decode_mcu_AC_first+0x22c>)
 800a3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3da:	429d      	cmp	r5, r3
 800a3dc:	dc04      	bgt.n	800a3e8 <decode_mcu_AC_first+0x170>
 800a3de:	4b31      	ldr	r3, [pc, #196]	@ (800a4a4 <decode_mcu_AC_first+0x22c>)
 800a3e0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a3e4:	1aeb      	subs	r3, r5, r3
 800a3e6:	e000      	b.n	800a3ea <decode_mcu_AC_first+0x172>
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	461e      	mov	r6, r3
	  /* Scale and output coefficient in natural (dezigzagged) order */
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	fa06 f103 	lsl.w	r1, r6, r3
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f8:	4413      	add	r3, r2
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	b209      	sxth	r1, r1
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800a404:	e02c      	b.n	800a460 <decode_mcu_AC_first+0x1e8>
	} else {
	  if (r == 15) {	/* ZRL */
 800a406:	2d0f      	cmp	r5, #15
 800a408:	d103      	bne.n	800a412 <decode_mcu_AC_first+0x19a>
	    k += 15;		/* skip 15 zeroes in band */
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	330f      	adds	r3, #15
 800a40e:	603b      	str	r3, [r7, #0]
 800a410:	e026      	b.n	800a460 <decode_mcu_AC_first+0x1e8>
	  } else {		/* EOBr, run length is 2^r + appended bits */
	    EOBRUN = 1 << r;
 800a412:	2301      	movs	r3, #1
 800a414:	40ab      	lsls	r3, r5
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    if (r) {		/* EOBr, r > 0 */
 800a418:	2d00      	cmp	r5, #0
 800a41a:	d01d      	beq.n	800a458 <decode_mcu_AC_first+0x1e0>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800a41c:	42ac      	cmp	r4, r5
 800a41e:	da0e      	bge.n	800a43e <decode_mcu_AC_first+0x1c6>
 800a420:	f107 0010 	add.w	r0, r7, #16
 800a424:	462b      	mov	r3, r5
 800a426:	4622      	mov	r2, r4
 800a428:	6879      	ldr	r1, [r7, #4]
 800a42a:	f7ff fcf1 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <decode_mcu_AC_first+0x1c0>
 800a434:	2300      	movs	r3, #0
 800a436:	e031      	b.n	800a49c <decode_mcu_AC_first+0x224>
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	607b      	str	r3, [r7, #4]
 800a43c:	69fc      	ldr	r4, [r7, #28]
	      r = GET_BITS(r);
 800a43e:	1b64      	subs	r4, r4, r5
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	fa43 f204 	asr.w	r2, r3, r4
 800a446:	4b17      	ldr	r3, [pc, #92]	@ (800a4a4 <decode_mcu_AC_first+0x22c>)
 800a448:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a44c:	ea02 0503 	and.w	r5, r2, r3
	      EOBRUN += r;
 800a450:	462a      	mov	r2, r5
 800a452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a454:	4413      	add	r3, r2
 800a456:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    }
	    EOBRUN--;		/* this band is processed at this moment */
 800a458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a45a:	3b01      	subs	r3, #1
 800a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    break;		/* force end-of-band */
 800a45e:	e007      	b.n	800a470 <decode_mcu_AC_first+0x1f8>
      for (k = cinfo->Ss; k <= Se; k++) {
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	3301      	adds	r3, #1
 800a464:	603b      	str	r3, [r7, #0]
 800a466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	f77f af53 	ble.w	800a316 <decode_mcu_AC_first+0x9e>
	  }
	}
      }

      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	601a      	str	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	605a      	str	r2, [r3, #4]
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	609a      	str	r2, [r3, #8]
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	60dc      	str	r4, [r3, #12]
    }

    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800a48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a48e:	611a      	str	r2, [r3, #16]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800a490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a494:	1e5a      	subs	r2, r3, #1
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	629a      	str	r2, [r3, #40]	@ 0x28

  return TRUE;
 800a49a:	2301      	movs	r3, #1
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3744      	adds	r7, #68	@ 0x44
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4a4:	080240b4 	.word	0x080240b4

0800a4a8 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800a4a8:	b5b0      	push	{r4, r5, r7, lr}
 800a4aa:	b08c      	sub	sp, #48	@ 0x30
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800a4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c6:	627b      	str	r3, [r7, #36]	@ 0x24
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00b      	beq.n	800a4ea <decode_mcu_DC_refine+0x42>
    if (entropy->restarts_to_go == 0)
 800a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d107      	bne.n	800a4ea <decode_mcu_DC_refine+0x42>
      if (! process_restart(cinfo))
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fd82 	bl	8009fe4 <process_restart>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <decode_mcu_DC_refine+0x42>
	return FALSE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e051      	b.n	800a58e <decode_mcu_DC_refine+0xe6>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	61fb      	str	r3, [r7, #28]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60fb      	str	r3, [r7, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	689d      	ldr	r5, [r3, #8]
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	68dc      	ldr	r4, [r3, #12]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a506:	2300      	movs	r3, #0
 800a508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a50a:	e028      	b.n	800a55e <decode_mcu_DC_refine+0xb6>
    block = MCU_data[blkn];
 800a50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	4413      	add	r3, r2
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	623b      	str	r3, [r7, #32]

    /* Encoded data is simply the next bit of the two's-complement DC value */
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800a518:	2c00      	cmp	r4, #0
 800a51a:	dc0d      	bgt.n	800a538 <decode_mcu_DC_refine+0x90>
 800a51c:	f107 000c 	add.w	r0, r7, #12
 800a520:	2301      	movs	r3, #1
 800a522:	4622      	mov	r2, r4
 800a524:	4629      	mov	r1, r5
 800a526:	f7ff fc73 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <decode_mcu_DC_refine+0x8c>
 800a530:	2300      	movs	r3, #0
 800a532:	e02c      	b.n	800a58e <decode_mcu_DC_refine+0xe6>
 800a534:	697d      	ldr	r5, [r7, #20]
 800a536:	69bc      	ldr	r4, [r7, #24]
    if (GET_BITS(1))
 800a538:	3c01      	subs	r4, #1
 800a53a:	fa45 f304 	asr.w	r3, r5, r4
 800a53e:	2201      	movs	r2, #1
 800a540:	4013      	ands	r3, r2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d008      	beq.n	800a558 <decode_mcu_DC_refine+0xb0>
      (*block)[0] |= p1;
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	b21b      	sxth	r3, r3
 800a550:	4313      	orrs	r3, r2
 800a552:	b21a      	sxth	r2, r3
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55a:	3301      	adds	r3, #1
 800a55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800a564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a566:	429a      	cmp	r2, r3
 800a568:	dbd0      	blt.n	800a50c <decode_mcu_DC_refine+0x64>
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	605a      	str	r2, [r3, #4]
 800a57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57c:	609d      	str	r5, [r3, #8]
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	60dc      	str	r4, [r3, #12]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800a582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58a:	629a      	str	r2, [r3, #40]	@ 0x28

  return TRUE;
 800a58c:	2301      	movs	r3, #1
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3730      	adds	r7, #48	@ 0x30
 800a592:	46bd      	mov	sp, r7
 800a594:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a598 <decode_mcu_AC_refine>:
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59c:	b0d6      	sub	sp, #344	@ 0x158
 800a59e:	af02      	add	r7, sp, #8
 800a5a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a5a8:	6018      	str	r0, [r3, #0]
 800a5aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a5b2:	6019      	str	r1, [r3, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800a5b4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800a5c2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800a5c6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d010      	beq.n	800a5fa <decode_mcu_AC_refine+0x62>
    if (entropy->restarts_to_go == 0)
 800a5d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10b      	bne.n	800a5fa <decode_mcu_AC_refine+0x62>
      if (! process_restart(cinfo))
 800a5e2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a5e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a5ea:	6818      	ldr	r0, [r3, #0]
 800a5ec:	f7ff fcfa 	bl	8009fe4 <process_restart>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <decode_mcu_AC_refine+0x62>
	return FALSE;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e24f      	b.n	800aa9a <decode_mcu_AC_refine+0x502>
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800a5fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	f040 8229 	bne.w	800aa58 <decode_mcu_AC_refine+0x4c0>

    Se = cinfo->Se;
 800a606:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a60a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800a614:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800a618:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a61c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a626:	2201      	movs	r2, #1
 800a628:	fa02 f303 	lsl.w	r3, r2, r3
 800a62c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a630:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a634:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800a63e:	f04f 32ff 	mov.w	r2, #4294967295
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    natural_order = cinfo->natural_order;
 800a64a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a64e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800a658:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800a65c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a660:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800a66a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a66e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a67c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a680:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800a68e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a692:	689d      	ldr	r5, [r3, #8]
 800a694:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a698:	68dc      	ldr	r4, [r3, #12]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800a69a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

    /* There is always only one block per MCU */
    block = MCU_data[0];
 800a6a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a6a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tbl = entropy->ac_derived_tbl;
 800a6b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
     * nonzero coefficients in the block, because otherwise we'd get confused
     * next time about which coefficients were already nonzero.
     * But we need not undo addition of bits to already-nonzero coefficients;
     * instead, we can test the current bit to see if we already did it.
     */
    num_newnz = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

    /* initialize coefficient loop counter to start of band */
    k = cinfo->Ss;
 800a6c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a6c8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800a6d2:	607b      	str	r3, [r7, #4]

    if (EOBRUN == 0) {
 800a6d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 8138 	bne.w	800a94e <decode_mcu_AC_refine+0x3b6>
      for (; k <= Se; k++) {
 800a6de:	e12e      	b.n	800a93e <decode_mcu_AC_refine+0x3a6>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800a6e0:	2c07      	cmp	r4, #7
 800a6e2:	dc12      	bgt.n	800a70a <decode_mcu_AC_refine+0x172>
 800a6e4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	f7ff fb8f 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 81b8 	beq.w	800aa6a <decode_mcu_AC_refine+0x4d2>
 800a6fa:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 800a6fe:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
 800a702:	2c07      	cmp	r4, #7
 800a704:	dc01      	bgt.n	800a70a <decode_mcu_AC_refine+0x172>
 800a706:	2601      	movs	r6, #1
 800a708:	e017      	b.n	800a73a <decode_mcu_AC_refine+0x1a2>
 800a70a:	f1a4 0308 	sub.w	r3, r4, #8
 800a70e:	fa45 f303 	asr.w	r3, r5, r3
 800a712:	22ff      	movs	r2, #255	@ 0xff
 800a714:	ea03 0802 	and.w	r8, r3, r2
 800a718:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a71c:	f108 0224 	add.w	r2, r8, #36	@ 0x24
 800a720:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a724:	2e00      	cmp	r6, #0
 800a726:	d007      	beq.n	800a738 <decode_mcu_AC_refine+0x1a0>
 800a728:	1ba4      	subs	r4, r4, r6
 800a72a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a72e:	4443      	add	r3, r8
 800a730:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800a734:	603b      	str	r3, [r7, #0]
 800a736:	e012      	b.n	800a75e <decode_mcu_AC_refine+0x1c6>
 800a738:	2609      	movs	r6, #9
 800a73a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a73e:	9600      	str	r6, [sp, #0]
 800a740:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a744:	4622      	mov	r2, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7ff fbe8 	bl	8009f1c <jpeg_huff_decode>
 800a74c:	4603      	mov	r3, r0
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f2c0 818a 	blt.w	800aa6a <decode_mcu_AC_refine+0x4d2>
 800a756:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 800a75a:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
	r = s >> 4;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	111e      	asrs	r6, r3, #4
	s &= 15;
 800a762:	f003 030f 	and.w	r3, r3, #15
 800a766:	603b      	str	r3, [r7, #0]
	if (s) {
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d038      	beq.n	800a7de <decode_mcu_AC_refine+0x246>
	  if (s != 1)		/* size of new coef should always be 1 */
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d016      	beq.n	800a79e <decode_mcu_AC_refine+0x206>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800a770:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a774:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2279      	movs	r2, #121	@ 0x79
 800a77e:	615a      	str	r2, [r3, #20]
 800a780:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a784:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800a792:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800a796:	f04f 31ff 	mov.w	r1, #4294967295
 800a79a:	6810      	ldr	r0, [r2, #0]
 800a79c:	4798      	blx	r3
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800a79e:	2c00      	cmp	r4, #0
 800a7a0:	dc0e      	bgt.n	800a7c0 <decode_mcu_AC_refine+0x228>
 800a7a2:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	f7ff fb30 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 8159 	beq.w	800aa6a <decode_mcu_AC_refine+0x4d2>
 800a7b8:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 800a7bc:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
	  if (GET_BITS(1))
 800a7c0:	3c01      	subs	r4, #1
 800a7c2:	fa45 f304 	asr.w	r3, r5, r4
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <decode_mcu_AC_refine+0x23e>
	    s = p1;		/* newly nonzero coef is positive */
 800a7ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	e02c      	b.n	800a830 <decode_mcu_AC_refine+0x298>
	  else
	    s = m1;		/* newly nonzero coef is negative */
 800a7d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	e028      	b.n	800a830 <decode_mcu_AC_refine+0x298>
	} else {
	  if (r != 15) {
 800a7de:	2e0f      	cmp	r6, #15
 800a7e0:	d026      	beq.n	800a830 <decode_mcu_AC_refine+0x298>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	40b3      	lsls	r3, r6
 800a7e6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	    if (r) {
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	f000 80ae 	beq.w	800a94c <decode_mcu_AC_refine+0x3b4>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800a7f0:	42b4      	cmp	r4, r6
 800a7f2:	da0e      	bge.n	800a812 <decode_mcu_AC_refine+0x27a>
 800a7f4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a7f8:	4633      	mov	r3, r6
 800a7fa:	4622      	mov	r2, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7ff fb07 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8130 	beq.w	800aa6a <decode_mcu_AC_refine+0x4d2>
 800a80a:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 800a80e:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
	      r = GET_BITS(r);
 800a812:	1ba4      	subs	r4, r4, r6
 800a814:	fa45 f204 	asr.w	r2, r5, r4
 800a818:	4ba3      	ldr	r3, [pc, #652]	@ (800aaa8 <decode_mcu_AC_refine+0x510>)
 800a81a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a81e:	ea02 0603 	and.w	r6, r2, r3
	      EOBRUN += r;
 800a822:	4632      	mov	r2, r6
 800a824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a828:	4413      	add	r3, r2
 800a82a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	    }
	    break;		/* rest of block is handled by EOB logic */
 800a82e:	e08d      	b.n	800a94c <decode_mcu_AC_refine+0x3b4>
	/* Advance over already-nonzero coefs and r still-zero coefs,
	 * appending correction bits to the nonzeroes.  A correction bit is 1
	 * if the absolute value of the coefficient must be increased.
	 */
	do {
	  thiscoef = *block + natural_order[k];
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800a838:	4413      	add	r3, r2
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a842:	4413      	add	r3, r2
 800a844:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	  if (*thiscoef != 0) {
 800a848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a84c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d045      	beq.n	800a8e0 <decode_mcu_AC_refine+0x348>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800a854:	2c00      	cmp	r4, #0
 800a856:	dc0e      	bgt.n	800a876 <decode_mcu_AC_refine+0x2de>
 800a858:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a85c:	2301      	movs	r3, #1
 800a85e:	4622      	mov	r2, r4
 800a860:	4629      	mov	r1, r5
 800a862:	f7ff fad5 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 80fe 	beq.w	800aa6a <decode_mcu_AC_refine+0x4d2>
 800a86e:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 800a872:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
	    if (GET_BITS(1)) {
 800a876:	3c01      	subs	r4, #1
 800a878:	fa45 f304 	asr.w	r3, r5, r4
 800a87c:	2201      	movs	r2, #1
 800a87e:	4013      	ands	r3, r2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d030      	beq.n	800a8e6 <decode_mcu_AC_refine+0x34e>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800a884:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a88c:	461a      	mov	r2, r3
 800a88e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a892:	4013      	ands	r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d126      	bne.n	800a8e6 <decode_mcu_AC_refine+0x34e>
		if (*thiscoef >= 0)
 800a898:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a89c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	db0e      	blt.n	800a8c2 <decode_mcu_AC_refine+0x32a>
		  *thiscoef += p1;
 800a8a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	b21a      	sxth	r2, r3
 800a8ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8be:	801a      	strh	r2, [r3, #0]
 800a8c0:	e011      	b.n	800a8e6 <decode_mcu_AC_refine+0x34e>
		else
		  *thiscoef += m1;
 800a8c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	b21a      	sxth	r2, r3
 800a8d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8dc:	801a      	strh	r2, [r3, #0]
 800a8de:	e002      	b.n	800a8e6 <decode_mcu_AC_refine+0x34e>
	      }
	    }
	  } else {
	    if (--r < 0)
 800a8e0:	3e01      	subs	r6, #1
 800a8e2:	2e00      	cmp	r6, #0
 800a8e4:	db08      	blt.n	800a8f8 <decode_mcu_AC_refine+0x360>
	      break;		/* reached target zero coefficient */
	  }
	  k++;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	607a      	str	r2, [r7, #4]
	} while (k <= Se);
 800a8ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	dd9c      	ble.n	800a830 <decode_mcu_AC_refine+0x298>
 800a8f6:	e000      	b.n	800a8fa <decode_mcu_AC_refine+0x362>
	      break;		/* reached target zero coefficient */
 800a8f8:	bf00      	nop
	if (s) {
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	2900      	cmp	r1, #0
 800a8fe:	d01b      	beq.n	800a938 <decode_mcu_AC_refine+0x3a0>
	  int pos = natural_order[k];
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800a908:	4413      	add	r3, r2
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	  /* Output newly nonzero coefficient */
	  (*block)[pos] = (JCOEF) s;
 800a910:	b209      	sxth	r1, r1
 800a912:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a916:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a91a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  /* Remember its position in case we have to suspend */
	  newnz_pos[num_newnz++] = pos;
 800a91e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a922:	1c5a      	adds	r2, r3, #1
 800a924:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800a928:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800a92c:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 800a930:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800a934:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (; k <= Se; k++) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3301      	adds	r3, #1
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	429a      	cmp	r2, r3
 800a946:	f77f aecb 	ble.w	800a6e0 <decode_mcu_AC_refine+0x148>
 800a94a:	e000      	b.n	800a94e <decode_mcu_AC_refine+0x3b6>
	    break;		/* rest of block is handled by EOB logic */
 800a94c:	bf00      	nop
	}
      }
    }

    if (EOBRUN > 0) {
 800a94e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d063      	beq.n	800aa1e <decode_mcu_AC_refine+0x486>
      /* Scan any remaining coefficient positions after the end-of-band
       * (the last newly nonzero coefficient, if any).  Append a correction
       * bit to each already-nonzero coefficient.  A correction bit is 1
       * if the absolute value of the coefficient must be increased.
       */
      for (; k <= Se; k++) {
 800a956:	e058      	b.n	800aa0a <decode_mcu_AC_refine+0x472>
	thiscoef = *block + natural_order[k];
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800a960:	4413      	add	r3, r2
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a96a:	4413      	add	r3, r2
 800a96c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	if (*thiscoef != 0) {
 800a970:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a974:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d043      	beq.n	800aa04 <decode_mcu_AC_refine+0x46c>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800a97c:	2c00      	cmp	r4, #0
 800a97e:	dc0d      	bgt.n	800a99c <decode_mcu_AC_refine+0x404>
 800a980:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800a984:	2301      	movs	r3, #1
 800a986:	4622      	mov	r2, r4
 800a988:	4629      	mov	r1, r5
 800a98a:	f7ff fa41 	bl	8009e10 <jpeg_fill_bit_buffer>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d06a      	beq.n	800aa6a <decode_mcu_AC_refine+0x4d2>
 800a994:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 800a998:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
	  if (GET_BITS(1)) {
 800a99c:	3c01      	subs	r4, #1
 800a99e:	fa45 f304 	asr.w	r3, r5, r4
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d02c      	beq.n	800aa04 <decode_mcu_AC_refine+0x46c>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800a9aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d122      	bne.n	800aa04 <decode_mcu_AC_refine+0x46c>
	      if (*thiscoef >= 0)
 800a9be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	db0e      	blt.n	800a9e8 <decode_mcu_AC_refine+0x450>
		*thiscoef += p1;
 800a9ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4413      	add	r3, r2
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	b21a      	sxth	r2, r3
 800a9e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9e4:	801a      	strh	r2, [r3, #0]
 800a9e6:	e00d      	b.n	800aa04 <decode_mcu_AC_refine+0x46c>
	      else
		*thiscoef += m1;
 800a9e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	b21a      	sxth	r2, r3
 800a9fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa02:	801a      	strh	r2, [r3, #0]
      for (; k <= Se; k++) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3301      	adds	r3, #1
 800aa08:	607b      	str	r3, [r7, #4]
 800aa0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	dda1      	ble.n	800a958 <decode_mcu_AC_refine+0x3c0>
	    }
	  }
	}
      }
      /* Count one block completed in EOB run */
      EOBRUN--;
 800aa14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800aa1e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa22:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa34:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800aa40:	605a      	str	r2, [r3, #4]
 800aa42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800aa46:	609d      	str	r5, [r3, #8]
 800aa48:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800aa4c:	60dc      	str	r4, [r3, #12]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800aa4e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800aa52:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800aa56:	611a      	str	r2, [r3, #16]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800aa58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5e:	1e5a      	subs	r2, r3, #1
 800aa60:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800aa64:	629a      	str	r2, [r3, #40]	@ 0x28

  return TRUE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e017      	b.n	800aa9a <decode_mcu_AC_refine+0x502>

undoit:
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
 800aa6a:	e011      	b.n	800aa90 <decode_mcu_AC_refine+0x4f8>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800aa6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800aa70:	3b01      	subs	r3, #1
 800aa72:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800aa76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa7a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800aa7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800aa82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  while (num_newnz > 0)
 800aa90:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dce9      	bgt.n	800aa6c <decode_mcu_AC_refine+0x4d4>

  return FALSE;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa6:	bf00      	nop
 800aaa8:	080240b4 	.word	0x080240b4

0800aaac <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800aaac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aab0:	b097      	sub	sp, #92	@ 0x5c
 800aab2:	af02      	add	r7, sp, #8
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800aabe:	64bb      	str	r3, [r7, #72]	@ 0x48
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00b      	beq.n	800aae2 <decode_mcu_sub+0x36>
    if (entropy->restarts_to_go == 0)
 800aaca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d107      	bne.n	800aae2 <decode_mcu_sub+0x36>
      if (! process_restart(cinfo))
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7ff fa86 	bl	8009fe4 <process_restart>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <decode_mcu_sub+0x36>
	return FALSE;
 800aade:	2300      	movs	r3, #0
 800aae0:	e1d2      	b.n	800ae88 <decode_mcu_sub+0x3dc>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800aae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f040 81c8 	bne.w	800ae7c <decode_mcu_sub+0x3d0>

    natural_order = cinfo->natural_order;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800aaf2:	647b      	str	r3, [r7, #68]	@ 0x44
    Se = cinfo->lim_Se;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800aafa:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	623b      	str	r3, [r7, #32]
 800ab10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab12:	689e      	ldr	r6, [r3, #8]
 800ab14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab16:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 800ab18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab1a:	f107 0508 	add.w	r5, r7, #8
 800ab1e:	f103 0c10 	add.w	ip, r3, #16
 800ab22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ab26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab28:	f8dc 3000 	ldr.w	r3, [ip]
 800ab2c:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ab2e:	2300      	movs	r3, #0
 800ab30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab32:	e187      	b.n	800ae44 <decode_mcu_sub+0x398>
      JBLOCKROW block = MCU_data[blkn];
 800ab34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      int coef_limit, ci;

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      htbl = entropy->dc_cur_tbls[blkn];
 800ab40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab44:	3218      	adds	r2, #24
 800ab46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ab4c:	2c07      	cmp	r4, #7
 800ab4e:	dc11      	bgt.n	800ab74 <decode_mcu_sub+0xc8>
 800ab50:	f107 001c 	add.w	r0, r7, #28
 800ab54:	2300      	movs	r3, #0
 800ab56:	4622      	mov	r2, r4
 800ab58:	4631      	mov	r1, r6
 800ab5a:	f7ff f959 	bl	8009e10 <jpeg_fill_bit_buffer>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <decode_mcu_sub+0xbc>
 800ab64:	2300      	movs	r3, #0
 800ab66:	e18f      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800ab68:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800ab6a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800ab6c:	2c07      	cmp	r4, #7
 800ab6e:	dc01      	bgt.n	800ab74 <decode_mcu_sub+0xc8>
 800ab70:	2501      	movs	r5, #1
 800ab72:	e015      	b.n	800aba0 <decode_mcu_sub+0xf4>
 800ab74:	f1a4 0308 	sub.w	r3, r4, #8
 800ab78:	fa46 f303 	asr.w	r3, r6, r3
 800ab7c:	22ff      	movs	r2, #255	@ 0xff
 800ab7e:	ea03 0802 	and.w	r8, r3, r2
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	f108 0224 	add.w	r2, r8, #36	@ 0x24
 800ab88:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ab8c:	2d00      	cmp	r5, #0
 800ab8e:	d006      	beq.n	800ab9e <decode_mcu_sub+0xf2>
 800ab90:	1b64      	subs	r4, r4, r5
 800ab92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab94:	4443      	add	r3, r8
 800ab96:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800ab9a:	461d      	mov	r5, r3
 800ab9c:	e00f      	b.n	800abbe <decode_mcu_sub+0x112>
 800ab9e:	2509      	movs	r5, #9
 800aba0:	f107 001c 	add.w	r0, r7, #28
 800aba4:	9500      	str	r5, [sp, #0]
 800aba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba8:	4622      	mov	r2, r4
 800abaa:	4631      	mov	r1, r6
 800abac:	f7ff f9b6 	bl	8009f1c <jpeg_huff_decode>
 800abb0:	4605      	mov	r5, r0
 800abb2:	2d00      	cmp	r5, #0
 800abb4:	da01      	bge.n	800abba <decode_mcu_sub+0x10e>
 800abb6:	2300      	movs	r3, #0
 800abb8:	e166      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800abba:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800abbc:	6abc      	ldr	r4, [r7, #40]	@ 0x28

      htbl = entropy->ac_cur_tbls[blkn];
 800abbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800abc2:	3222      	adds	r2, #34	@ 0x22
 800abc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      k = 1;
 800abca:	f04f 0801 	mov.w	r8, #1
      coef_limit = entropy->coef_limit[blkn];
 800abce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800abd2:	322c      	adds	r2, #44	@ 0x2c
 800abd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (coef_limit) {
 800abda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 80ba 	beq.w	800ad56 <decode_mcu_sub+0x2aa>
	/* Convert DC difference to actual value, update last_dc_val */
	if (s) {
 800abe2:	2d00      	cmp	r5, #0
 800abe4:	d025      	beq.n	800ac32 <decode_mcu_sub+0x186>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800abe6:	42ac      	cmp	r4, r5
 800abe8:	da0d      	bge.n	800ac06 <decode_mcu_sub+0x15a>
 800abea:	f107 001c 	add.w	r0, r7, #28
 800abee:	462b      	mov	r3, r5
 800abf0:	4622      	mov	r2, r4
 800abf2:	4631      	mov	r1, r6
 800abf4:	f7ff f90c 	bl	8009e10 <jpeg_fill_bit_buffer>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <decode_mcu_sub+0x156>
 800abfe:	2300      	movs	r3, #0
 800ac00:	e142      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800ac02:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800ac04:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	  r = GET_BITS(s);
 800ac06:	1b64      	subs	r4, r4, r5
 800ac08:	fa46 f204 	asr.w	r2, r6, r4
 800ac0c:	4ba1      	ldr	r3, [pc, #644]	@ (800ae94 <decode_mcu_sub+0x3e8>)
 800ac0e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ac12:	ea02 0903 	and.w	r9, r2, r3
	  s = HUFF_EXTEND(r, s);
 800ac16:	1e6b      	subs	r3, r5, #1
 800ac18:	4a9e      	ldr	r2, [pc, #632]	@ (800ae94 <decode_mcu_sub+0x3e8>)
 800ac1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1e:	4599      	cmp	r9, r3
 800ac20:	dc05      	bgt.n	800ac2e <decode_mcu_sub+0x182>
 800ac22:	4b9c      	ldr	r3, [pc, #624]	@ (800ae94 <decode_mcu_sub+0x3e8>)
 800ac24:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ac28:	eba9 0303 	sub.w	r3, r9, r3
 800ac2c:	e000      	b.n	800ac30 <decode_mcu_sub+0x184>
 800ac2e:	464b      	mov	r3, r9
 800ac30:	461d      	mov	r5, r3
	}
	ci = cinfo->MCU_membership[blkn];
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac36:	325c      	adds	r2, #92	@ 0x5c
 800ac38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3c:	633b      	str	r3, [r7, #48]	@ 0x30
	s += state.last_dc_val[ci];
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	3350      	adds	r3, #80	@ 0x50
 800ac44:	443b      	add	r3, r7
 800ac46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ac4a:	441d      	add	r5, r3
	state.last_dc_val[ci] = s;
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	3350      	adds	r3, #80	@ 0x50
 800ac52:	443b      	add	r3, r7
 800ac54:	f843 5c44 	str.w	r5, [r3, #-68]
	/* Output the DC coefficient */
	(*block)[0] = (JCOEF) s;
 800ac58:	b22a      	sxth	r2, r5
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac5c:	801a      	strh	r2, [r3, #0]

	/* Section F.2.2.2: decode the AC coefficients */
	/* Since zeroes are skipped, output area must be cleared beforehand */
	for (; k < coef_limit; k++) {
 800ac5e:	e076      	b.n	800ad4e <decode_mcu_sub+0x2a2>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800ac60:	2c07      	cmp	r4, #7
 800ac62:	dc11      	bgt.n	800ac88 <decode_mcu_sub+0x1dc>
 800ac64:	f107 001c 	add.w	r0, r7, #28
 800ac68:	2300      	movs	r3, #0
 800ac6a:	4622      	mov	r2, r4
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	f7ff f8cf 	bl	8009e10 <jpeg_fill_bit_buffer>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <decode_mcu_sub+0x1d0>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e105      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800ac7c:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800ac7e:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800ac80:	2c07      	cmp	r4, #7
 800ac82:	dc01      	bgt.n	800ac88 <decode_mcu_sub+0x1dc>
 800ac84:	2501      	movs	r5, #1
 800ac86:	e015      	b.n	800acb4 <decode_mcu_sub+0x208>
 800ac88:	f1a4 0308 	sub.w	r3, r4, #8
 800ac8c:	fa46 f303 	asr.w	r3, r6, r3
 800ac90:	22ff      	movs	r2, #255	@ 0xff
 800ac92:	ea03 0902 	and.w	r9, r3, r2
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	f109 0224 	add.w	r2, r9, #36	@ 0x24
 800ac9c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800aca0:	2d00      	cmp	r5, #0
 800aca2:	d006      	beq.n	800acb2 <decode_mcu_sub+0x206>
 800aca4:	1b64      	subs	r4, r4, r5
 800aca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca8:	444b      	add	r3, r9
 800acaa:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800acae:	461d      	mov	r5, r3
 800acb0:	e00f      	b.n	800acd2 <decode_mcu_sub+0x226>
 800acb2:	2509      	movs	r5, #9
 800acb4:	f107 001c 	add.w	r0, r7, #28
 800acb8:	9500      	str	r5, [sp, #0]
 800acba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbc:	4622      	mov	r2, r4
 800acbe:	4631      	mov	r1, r6
 800acc0:	f7ff f92c 	bl	8009f1c <jpeg_huff_decode>
 800acc4:	4605      	mov	r5, r0
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	da01      	bge.n	800acce <decode_mcu_sub+0x222>
 800acca:	2300      	movs	r3, #0
 800accc:	e0dc      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800acce:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800acd0:	6abc      	ldr	r4, [r7, #40]	@ 0x28

	  r = s >> 4;
 800acd2:	ea4f 1925 	mov.w	r9, r5, asr #4
	  s &= 15;
 800acd6:	f005 050f 	and.w	r5, r5, #15

	  if (s) {
 800acda:	2d00      	cmp	r5, #0
 800acdc:	d030      	beq.n	800ad40 <decode_mcu_sub+0x294>
	    k += r;
 800acde:	44c8      	add	r8, r9
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ace0:	42ac      	cmp	r4, r5
 800ace2:	da0d      	bge.n	800ad00 <decode_mcu_sub+0x254>
 800ace4:	f107 001c 	add.w	r0, r7, #28
 800ace8:	462b      	mov	r3, r5
 800acea:	4622      	mov	r2, r4
 800acec:	4631      	mov	r1, r6
 800acee:	f7ff f88f 	bl	8009e10 <jpeg_fill_bit_buffer>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <decode_mcu_sub+0x250>
 800acf8:	2300      	movs	r3, #0
 800acfa:	e0c5      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800acfc:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800acfe:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	    r = GET_BITS(s);
 800ad00:	1b64      	subs	r4, r4, r5
 800ad02:	fa46 f204 	asr.w	r2, r6, r4
 800ad06:	4b63      	ldr	r3, [pc, #396]	@ (800ae94 <decode_mcu_sub+0x3e8>)
 800ad08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ad0c:	ea02 0903 	and.w	r9, r2, r3
	    s = HUFF_EXTEND(r, s);
 800ad10:	1e6b      	subs	r3, r5, #1
 800ad12:	4a60      	ldr	r2, [pc, #384]	@ (800ae94 <decode_mcu_sub+0x3e8>)
 800ad14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad18:	4599      	cmp	r9, r3
 800ad1a:	dc05      	bgt.n	800ad28 <decode_mcu_sub+0x27c>
 800ad1c:	4b5d      	ldr	r3, [pc, #372]	@ (800ae94 <decode_mcu_sub+0x3e8>)
 800ad1e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ad22:	eba9 0303 	sub.w	r3, r9, r3
 800ad26:	e000      	b.n	800ad2a <decode_mcu_sub+0x27e>
 800ad28:	464b      	mov	r3, r9
 800ad2a:	461d      	mov	r5, r3
	    /* Output coefficient in natural (dezigzagged) order.
	     * Note: the extra entries in natural_order[] will save us
	     * if k > Se, which could happen if the data is corrupted.
	     */
	    (*block)[natural_order[k]] = (JCOEF) s;
 800ad2c:	4643      	mov	r3, r8
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad32:	4413      	add	r3, r2
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	b229      	sxth	r1, r5
 800ad38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad3a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800ad3e:	e004      	b.n	800ad4a <decode_mcu_sub+0x29e>
	  } else {
	    if (r != 15)
 800ad40:	f1b9 0f0f 	cmp.w	r9, #15
 800ad44:	d178      	bne.n	800ae38 <decode_mcu_sub+0x38c>
	      goto EndOfBlock;
	    k += 15;
 800ad46:	f108 080f 	add.w	r8, r8, #15
	for (; k < coef_limit; k++) {
 800ad4a:	f108 0801 	add.w	r8, r8, #1
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad50:	4598      	cmp	r8, r3
 800ad52:	db85      	blt.n	800ac60 <decode_mcu_sub+0x1b4>
 800ad54:	e06c      	b.n	800ae30 <decode_mcu_sub+0x384>
	  }
	}
      } else {
	if (s) {
 800ad56:	2d00      	cmp	r5, #0
 800ad58:	d06a      	beq.n	800ae30 <decode_mcu_sub+0x384>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ad5a:	42ac      	cmp	r4, r5
 800ad5c:	da0d      	bge.n	800ad7a <decode_mcu_sub+0x2ce>
 800ad5e:	f107 001c 	add.w	r0, r7, #28
 800ad62:	462b      	mov	r3, r5
 800ad64:	4622      	mov	r2, r4
 800ad66:	4631      	mov	r1, r6
 800ad68:	f7ff f852 	bl	8009e10 <jpeg_fill_bit_buffer>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d101      	bne.n	800ad76 <decode_mcu_sub+0x2ca>
 800ad72:	2300      	movs	r3, #0
 800ad74:	e088      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800ad76:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800ad78:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	  DROP_BITS(s);
 800ad7a:	1b64      	subs	r4, r4, r5
	}
      }

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (; k <= Se; k++) {
 800ad7c:	e058      	b.n	800ae30 <decode_mcu_sub+0x384>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800ad7e:	2c07      	cmp	r4, #7
 800ad80:	dc11      	bgt.n	800ada6 <decode_mcu_sub+0x2fa>
 800ad82:	f107 001c 	add.w	r0, r7, #28
 800ad86:	2300      	movs	r3, #0
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	f7ff f840 	bl	8009e10 <jpeg_fill_bit_buffer>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <decode_mcu_sub+0x2ee>
 800ad96:	2300      	movs	r3, #0
 800ad98:	e076      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800ad9a:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800ad9c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800ad9e:	2c07      	cmp	r4, #7
 800ada0:	dc01      	bgt.n	800ada6 <decode_mcu_sub+0x2fa>
 800ada2:	2501      	movs	r5, #1
 800ada4:	e015      	b.n	800add2 <decode_mcu_sub+0x326>
 800ada6:	f1a4 0308 	sub.w	r3, r4, #8
 800adaa:	fa46 f303 	asr.w	r3, r6, r3
 800adae:	22ff      	movs	r2, #255	@ 0xff
 800adb0:	ea03 0902 	and.w	r9, r3, r2
 800adb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb6:	f109 0224 	add.w	r2, r9, #36	@ 0x24
 800adba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800adbe:	2d00      	cmp	r5, #0
 800adc0:	d006      	beq.n	800add0 <decode_mcu_sub+0x324>
 800adc2:	1b64      	subs	r4, r4, r5
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	444b      	add	r3, r9
 800adc8:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800adcc:	461d      	mov	r5, r3
 800adce:	e00f      	b.n	800adf0 <decode_mcu_sub+0x344>
 800add0:	2509      	movs	r5, #9
 800add2:	f107 001c 	add.w	r0, r7, #28
 800add6:	9500      	str	r5, [sp, #0]
 800add8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adda:	4622      	mov	r2, r4
 800addc:	4631      	mov	r1, r6
 800adde:	f7ff f89d 	bl	8009f1c <jpeg_huff_decode>
 800ade2:	4605      	mov	r5, r0
 800ade4:	2d00      	cmp	r5, #0
 800ade6:	da01      	bge.n	800adec <decode_mcu_sub+0x340>
 800ade8:	2300      	movs	r3, #0
 800adea:	e04d      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800adec:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800adee:	6abc      	ldr	r4, [r7, #40]	@ 0x28

	r = s >> 4;
 800adf0:	ea4f 1925 	mov.w	r9, r5, asr #4
	s &= 15;
 800adf4:	f005 050f 	and.w	r5, r5, #15

	if (s) {
 800adf8:	2d00      	cmp	r5, #0
 800adfa:	d012      	beq.n	800ae22 <decode_mcu_sub+0x376>
	  k += r;
 800adfc:	44c8      	add	r8, r9
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800adfe:	42ac      	cmp	r4, r5
 800ae00:	da0d      	bge.n	800ae1e <decode_mcu_sub+0x372>
 800ae02:	f107 001c 	add.w	r0, r7, #28
 800ae06:	462b      	mov	r3, r5
 800ae08:	4622      	mov	r2, r4
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	f7ff f800 	bl	8009e10 <jpeg_fill_bit_buffer>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <decode_mcu_sub+0x36e>
 800ae16:	2300      	movs	r3, #0
 800ae18:	e036      	b.n	800ae88 <decode_mcu_sub+0x3dc>
 800ae1a:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800ae1c:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	  DROP_BITS(s);
 800ae1e:	1b64      	subs	r4, r4, r5
 800ae20:	e004      	b.n	800ae2c <decode_mcu_sub+0x380>
	} else {
	  if (r != 15)
 800ae22:	f1b9 0f0f 	cmp.w	r9, #15
 800ae26:	d109      	bne.n	800ae3c <decode_mcu_sub+0x390>
	    break;
	  k += 15;
 800ae28:	f108 080f 	add.w	r8, r8, #15
      for (; k <= Se; k++) {
 800ae2c:	f108 0801 	add.w	r8, r8, #1
 800ae30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae32:	4598      	cmp	r8, r3
 800ae34:	dda3      	ble.n	800ad7e <decode_mcu_sub+0x2d2>
	}
      }

      EndOfBlock: ;
 800ae36:	e002      	b.n	800ae3e <decode_mcu_sub+0x392>
	      goto EndOfBlock;
 800ae38:	bf00      	nop
 800ae3a:	e000      	b.n	800ae3e <decode_mcu_sub+0x392>
	    break;
 800ae3c:	bf00      	nop
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ae3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae40:	3301      	adds	r3, #1
 800ae42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800ae4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	f6ff ae71 	blt.w	800ab34 <decode_mcu_sub+0x88>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	69fa      	ldr	r2, [r7, #28]
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	699b      	ldr	r3, [r3, #24]
 800ae5e:	6a3a      	ldr	r2, [r7, #32]
 800ae60:	605a      	str	r2, [r3, #4]
 800ae62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae64:	609e      	str	r6, [r3, #8]
 800ae66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae68:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 800ae6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae6c:	f103 0410 	add.w	r4, r3, #16
 800ae70:	f107 0508 	add.w	r5, r7, #8
 800ae74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae78:	682b      	ldr	r3, [r5, #0]
 800ae7a:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800ae7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae80:	1e5a      	subs	r2, r3, #1
 800ae82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae84:	629a      	str	r2, [r3, #40]	@ 0x28

  return TRUE;
 800ae86:	2301      	movs	r3, #1
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3754      	adds	r7, #84	@ 0x54
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae92:	bf00      	nop
 800ae94:	080240b4 	.word	0x080240b4

0800ae98 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800ae98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae9c:	b095      	sub	sp, #84	@ 0x54
 800ae9e:	af02      	add	r7, sp, #8
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800aeaa:	643b      	str	r3, [r7, #64]	@ 0x40
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <decode_mcu+0x36>
    if (entropy->restarts_to_go == 0)
 800aeb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d107      	bne.n	800aece <decode_mcu+0x36>
      if (! process_restart(cinfo))
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff f890 	bl	8009fe4 <process_restart>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <decode_mcu+0x36>
	return FALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e1c8      	b.n	800b260 <decode_mcu+0x3c8>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800aece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f040 81be 	bne.w	800b254 <decode_mcu+0x3bc>

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	699b      	ldr	r3, [r3, #24]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	61fb      	str	r3, [r7, #28]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	623b      	str	r3, [r7, #32]
 800aeec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeee:	689e      	ldr	r6, [r3, #8]
 800aef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef2:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 800aef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef6:	f107 0508 	add.w	r5, r7, #8
 800aefa:	f103 0c10 	add.w	ip, r3, #16
 800aefe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800af02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af04:	f8dc 3000 	ldr.w	r3, [ip]
 800af08:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800af0a:	2300      	movs	r3, #0
 800af0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af0e:	e185      	b.n	800b21c <decode_mcu+0x384>
      JBLOCKROW block = MCU_data[blkn];
 800af10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	4413      	add	r3, r2
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      int coef_limit, ci;

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      htbl = entropy->dc_cur_tbls[blkn];
 800af1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af20:	3218      	adds	r2, #24
 800af22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af26:	63bb      	str	r3, [r7, #56]	@ 0x38
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800af28:	2c07      	cmp	r4, #7
 800af2a:	dc11      	bgt.n	800af50 <decode_mcu+0xb8>
 800af2c:	f107 001c 	add.w	r0, r7, #28
 800af30:	2300      	movs	r3, #0
 800af32:	4622      	mov	r2, r4
 800af34:	4631      	mov	r1, r6
 800af36:	f7fe ff6b 	bl	8009e10 <jpeg_fill_bit_buffer>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <decode_mcu+0xac>
 800af40:	2300      	movs	r3, #0
 800af42:	e18d      	b.n	800b260 <decode_mcu+0x3c8>
 800af44:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800af46:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800af48:	2c07      	cmp	r4, #7
 800af4a:	dc01      	bgt.n	800af50 <decode_mcu+0xb8>
 800af4c:	2501      	movs	r5, #1
 800af4e:	e015      	b.n	800af7c <decode_mcu+0xe4>
 800af50:	f1a4 0308 	sub.w	r3, r4, #8
 800af54:	fa46 f303 	asr.w	r3, r6, r3
 800af58:	22ff      	movs	r2, #255	@ 0xff
 800af5a:	ea03 0802 	and.w	r8, r3, r2
 800af5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af60:	f108 0224 	add.w	r2, r8, #36	@ 0x24
 800af64:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800af68:	2d00      	cmp	r5, #0
 800af6a:	d006      	beq.n	800af7a <decode_mcu+0xe2>
 800af6c:	1b64      	subs	r4, r4, r5
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	4443      	add	r3, r8
 800af72:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800af76:	461d      	mov	r5, r3
 800af78:	e00f      	b.n	800af9a <decode_mcu+0x102>
 800af7a:	2509      	movs	r5, #9
 800af7c:	f107 001c 	add.w	r0, r7, #28
 800af80:	9500      	str	r5, [sp, #0]
 800af82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af84:	4622      	mov	r2, r4
 800af86:	4631      	mov	r1, r6
 800af88:	f7fe ffc8 	bl	8009f1c <jpeg_huff_decode>
 800af8c:	4605      	mov	r5, r0
 800af8e:	2d00      	cmp	r5, #0
 800af90:	da01      	bge.n	800af96 <decode_mcu+0xfe>
 800af92:	2300      	movs	r3, #0
 800af94:	e164      	b.n	800b260 <decode_mcu+0x3c8>
 800af96:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800af98:	6abc      	ldr	r4, [r7, #40]	@ 0x28

      htbl = entropy->ac_cur_tbls[blkn];
 800af9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af9e:	3222      	adds	r2, #34	@ 0x22
 800afa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa4:	63bb      	str	r3, [r7, #56]	@ 0x38
      k = 1;
 800afa6:	f04f 0801 	mov.w	r8, #1
      coef_limit = entropy->coef_limit[blkn];
 800afaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afae:	322c      	adds	r2, #44	@ 0x2c
 800afb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (coef_limit) {
 800afb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 80b8 	beq.w	800b12e <decode_mcu+0x296>
	/* Convert DC difference to actual value, update last_dc_val */
	if (s) {
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	d025      	beq.n	800b00e <decode_mcu+0x176>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800afc2:	42ac      	cmp	r4, r5
 800afc4:	da0d      	bge.n	800afe2 <decode_mcu+0x14a>
 800afc6:	f107 001c 	add.w	r0, r7, #28
 800afca:	462b      	mov	r3, r5
 800afcc:	4622      	mov	r2, r4
 800afce:	4631      	mov	r1, r6
 800afd0:	f7fe ff1e 	bl	8009e10 <jpeg_fill_bit_buffer>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <decode_mcu+0x146>
 800afda:	2300      	movs	r3, #0
 800afdc:	e140      	b.n	800b260 <decode_mcu+0x3c8>
 800afde:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800afe0:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	  r = GET_BITS(s);
 800afe2:	1b64      	subs	r4, r4, r5
 800afe4:	fa46 f204 	asr.w	r2, r6, r4
 800afe8:	4ba0      	ldr	r3, [pc, #640]	@ (800b26c <decode_mcu+0x3d4>)
 800afea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800afee:	ea02 0903 	and.w	r9, r2, r3
	  s = HUFF_EXTEND(r, s);
 800aff2:	1e6b      	subs	r3, r5, #1
 800aff4:	4a9d      	ldr	r2, [pc, #628]	@ (800b26c <decode_mcu+0x3d4>)
 800aff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800affa:	4599      	cmp	r9, r3
 800affc:	dc05      	bgt.n	800b00a <decode_mcu+0x172>
 800affe:	4b9b      	ldr	r3, [pc, #620]	@ (800b26c <decode_mcu+0x3d4>)
 800b000:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b004:	eba9 0303 	sub.w	r3, r9, r3
 800b008:	e000      	b.n	800b00c <decode_mcu+0x174>
 800b00a:	464b      	mov	r3, r9
 800b00c:	461d      	mov	r5, r3
	}
	ci = cinfo->MCU_membership[blkn];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b012:	325c      	adds	r2, #92	@ 0x5c
 800b014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b018:	633b      	str	r3, [r7, #48]	@ 0x30
	s += state.last_dc_val[ci];
 800b01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	3348      	adds	r3, #72	@ 0x48
 800b020:	443b      	add	r3, r7
 800b022:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b026:	441d      	add	r5, r3
	state.last_dc_val[ci] = s;
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	3348      	adds	r3, #72	@ 0x48
 800b02e:	443b      	add	r3, r7
 800b030:	f843 5c3c 	str.w	r5, [r3, #-60]
	/* Output the DC coefficient */
	(*block)[0] = (JCOEF) s;
 800b034:	b22a      	sxth	r2, r5
 800b036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b038:	801a      	strh	r2, [r3, #0]

	/* Section F.2.2.2: decode the AC coefficients */
	/* Since zeroes are skipped, output area must be cleared beforehand */
	for (; k < coef_limit; k++) {
 800b03a:	e074      	b.n	800b126 <decode_mcu+0x28e>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800b03c:	2c07      	cmp	r4, #7
 800b03e:	dc11      	bgt.n	800b064 <decode_mcu+0x1cc>
 800b040:	f107 001c 	add.w	r0, r7, #28
 800b044:	2300      	movs	r3, #0
 800b046:	4622      	mov	r2, r4
 800b048:	4631      	mov	r1, r6
 800b04a:	f7fe fee1 	bl	8009e10 <jpeg_fill_bit_buffer>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <decode_mcu+0x1c0>
 800b054:	2300      	movs	r3, #0
 800b056:	e103      	b.n	800b260 <decode_mcu+0x3c8>
 800b058:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800b05a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800b05c:	2c07      	cmp	r4, #7
 800b05e:	dc01      	bgt.n	800b064 <decode_mcu+0x1cc>
 800b060:	2501      	movs	r5, #1
 800b062:	e015      	b.n	800b090 <decode_mcu+0x1f8>
 800b064:	f1a4 0308 	sub.w	r3, r4, #8
 800b068:	fa46 f303 	asr.w	r3, r6, r3
 800b06c:	22ff      	movs	r2, #255	@ 0xff
 800b06e:	ea03 0902 	and.w	r9, r3, r2
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	f109 0224 	add.w	r2, r9, #36	@ 0x24
 800b078:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800b07c:	2d00      	cmp	r5, #0
 800b07e:	d006      	beq.n	800b08e <decode_mcu+0x1f6>
 800b080:	1b64      	subs	r4, r4, r5
 800b082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b084:	444b      	add	r3, r9
 800b086:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800b08a:	461d      	mov	r5, r3
 800b08c:	e00f      	b.n	800b0ae <decode_mcu+0x216>
 800b08e:	2509      	movs	r5, #9
 800b090:	f107 001c 	add.w	r0, r7, #28
 800b094:	9500      	str	r5, [sp, #0]
 800b096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b098:	4622      	mov	r2, r4
 800b09a:	4631      	mov	r1, r6
 800b09c:	f7fe ff3e 	bl	8009f1c <jpeg_huff_decode>
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	2d00      	cmp	r5, #0
 800b0a4:	da01      	bge.n	800b0aa <decode_mcu+0x212>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e0da      	b.n	800b260 <decode_mcu+0x3c8>
 800b0aa:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800b0ac:	6abc      	ldr	r4, [r7, #40]	@ 0x28

	  r = s >> 4;
 800b0ae:	ea4f 1925 	mov.w	r9, r5, asr #4
	  s &= 15;
 800b0b2:	f005 050f 	and.w	r5, r5, #15

	  if (s) {
 800b0b6:	2d00      	cmp	r5, #0
 800b0b8:	d02e      	beq.n	800b118 <decode_mcu+0x280>
	    k += r;
 800b0ba:	44c8      	add	r8, r9
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b0bc:	42ac      	cmp	r4, r5
 800b0be:	da0d      	bge.n	800b0dc <decode_mcu+0x244>
 800b0c0:	f107 001c 	add.w	r0, r7, #28
 800b0c4:	462b      	mov	r3, r5
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	f7fe fea1 	bl	8009e10 <jpeg_fill_bit_buffer>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <decode_mcu+0x240>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e0c3      	b.n	800b260 <decode_mcu+0x3c8>
 800b0d8:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800b0da:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	    r = GET_BITS(s);
 800b0dc:	1b64      	subs	r4, r4, r5
 800b0de:	fa46 f204 	asr.w	r2, r6, r4
 800b0e2:	4b62      	ldr	r3, [pc, #392]	@ (800b26c <decode_mcu+0x3d4>)
 800b0e4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b0e8:	ea02 0903 	and.w	r9, r2, r3
	    s = HUFF_EXTEND(r, s);
 800b0ec:	1e6b      	subs	r3, r5, #1
 800b0ee:	4a5f      	ldr	r2, [pc, #380]	@ (800b26c <decode_mcu+0x3d4>)
 800b0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0f4:	4599      	cmp	r9, r3
 800b0f6:	dc05      	bgt.n	800b104 <decode_mcu+0x26c>
 800b0f8:	4b5c      	ldr	r3, [pc, #368]	@ (800b26c <decode_mcu+0x3d4>)
 800b0fa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b0fe:	eba9 0303 	sub.w	r3, r9, r3
 800b102:	e000      	b.n	800b106 <decode_mcu+0x26e>
 800b104:	464b      	mov	r3, r9
 800b106:	461d      	mov	r5, r3
	    /* Output coefficient in natural (dezigzagged) order.
	     * Note: the extra entries in jpeg_natural_order[] will save us
	     * if k >= DCTSIZE2, which could happen if the data is corrupted.
	     */
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800b108:	4b59      	ldr	r3, [pc, #356]	@ (800b270 <decode_mcu+0x3d8>)
 800b10a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800b10e:	b229      	sxth	r1, r5
 800b110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b112:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b116:	e004      	b.n	800b122 <decode_mcu+0x28a>
	  } else {
	    if (r != 15)
 800b118:	f1b9 0f0f 	cmp.w	r9, #15
 800b11c:	d178      	bne.n	800b210 <decode_mcu+0x378>
	      goto EndOfBlock;
	    k += 15;
 800b11e:	f108 080f 	add.w	r8, r8, #15
	for (; k < coef_limit; k++) {
 800b122:	f108 0801 	add.w	r8, r8, #1
 800b126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b128:	4598      	cmp	r8, r3
 800b12a:	db87      	blt.n	800b03c <decode_mcu+0x1a4>
 800b12c:	e06c      	b.n	800b208 <decode_mcu+0x370>
	  }
	}
      } else {
	if (s) {
 800b12e:	2d00      	cmp	r5, #0
 800b130:	d06a      	beq.n	800b208 <decode_mcu+0x370>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b132:	42ac      	cmp	r4, r5
 800b134:	da0d      	bge.n	800b152 <decode_mcu+0x2ba>
 800b136:	f107 001c 	add.w	r0, r7, #28
 800b13a:	462b      	mov	r3, r5
 800b13c:	4622      	mov	r2, r4
 800b13e:	4631      	mov	r1, r6
 800b140:	f7fe fe66 	bl	8009e10 <jpeg_fill_bit_buffer>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d101      	bne.n	800b14e <decode_mcu+0x2b6>
 800b14a:	2300      	movs	r3, #0
 800b14c:	e088      	b.n	800b260 <decode_mcu+0x3c8>
 800b14e:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800b150:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	  DROP_BITS(s);
 800b152:	1b64      	subs	r4, r4, r5
	}
      }

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (; k < DCTSIZE2; k++) {
 800b154:	e058      	b.n	800b208 <decode_mcu+0x370>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800b156:	2c07      	cmp	r4, #7
 800b158:	dc11      	bgt.n	800b17e <decode_mcu+0x2e6>
 800b15a:	f107 001c 	add.w	r0, r7, #28
 800b15e:	2300      	movs	r3, #0
 800b160:	4622      	mov	r2, r4
 800b162:	4631      	mov	r1, r6
 800b164:	f7fe fe54 	bl	8009e10 <jpeg_fill_bit_buffer>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <decode_mcu+0x2da>
 800b16e:	2300      	movs	r3, #0
 800b170:	e076      	b.n	800b260 <decode_mcu+0x3c8>
 800b172:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800b174:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 800b176:	2c07      	cmp	r4, #7
 800b178:	dc01      	bgt.n	800b17e <decode_mcu+0x2e6>
 800b17a:	2501      	movs	r5, #1
 800b17c:	e015      	b.n	800b1aa <decode_mcu+0x312>
 800b17e:	f1a4 0308 	sub.w	r3, r4, #8
 800b182:	fa46 f303 	asr.w	r3, r6, r3
 800b186:	22ff      	movs	r2, #255	@ 0xff
 800b188:	ea03 0902 	and.w	r9, r3, r2
 800b18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18e:	f109 0224 	add.w	r2, r9, #36	@ 0x24
 800b192:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800b196:	2d00      	cmp	r5, #0
 800b198:	d006      	beq.n	800b1a8 <decode_mcu+0x310>
 800b19a:	1b64      	subs	r4, r4, r5
 800b19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19e:	444b      	add	r3, r9
 800b1a0:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800b1a4:	461d      	mov	r5, r3
 800b1a6:	e00f      	b.n	800b1c8 <decode_mcu+0x330>
 800b1a8:	2509      	movs	r5, #9
 800b1aa:	f107 001c 	add.w	r0, r7, #28
 800b1ae:	9500      	str	r5, [sp, #0]
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	f7fe feb1 	bl	8009f1c <jpeg_huff_decode>
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	da01      	bge.n	800b1c4 <decode_mcu+0x32c>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e04d      	b.n	800b260 <decode_mcu+0x3c8>
 800b1c4:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800b1c6:	6abc      	ldr	r4, [r7, #40]	@ 0x28

	r = s >> 4;
 800b1c8:	ea4f 1925 	mov.w	r9, r5, asr #4
	s &= 15;
 800b1cc:	f005 050f 	and.w	r5, r5, #15

	if (s) {
 800b1d0:	2d00      	cmp	r5, #0
 800b1d2:	d012      	beq.n	800b1fa <decode_mcu+0x362>
	  k += r;
 800b1d4:	44c8      	add	r8, r9
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b1d6:	42ac      	cmp	r4, r5
 800b1d8:	da0d      	bge.n	800b1f6 <decode_mcu+0x35e>
 800b1da:	f107 001c 	add.w	r0, r7, #28
 800b1de:	462b      	mov	r3, r5
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4631      	mov	r1, r6
 800b1e4:	f7fe fe14 	bl	8009e10 <jpeg_fill_bit_buffer>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <decode_mcu+0x35a>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e036      	b.n	800b260 <decode_mcu+0x3c8>
 800b1f2:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 800b1f4:	6abc      	ldr	r4, [r7, #40]	@ 0x28
	  DROP_BITS(s);
 800b1f6:	1b64      	subs	r4, r4, r5
 800b1f8:	e004      	b.n	800b204 <decode_mcu+0x36c>
	} else {
	  if (r != 15)
 800b1fa:	f1b9 0f0f 	cmp.w	r9, #15
 800b1fe:	d109      	bne.n	800b214 <decode_mcu+0x37c>
	    break;
	  k += 15;
 800b200:	f108 080f 	add.w	r8, r8, #15
      for (; k < DCTSIZE2; k++) {
 800b204:	f108 0801 	add.w	r8, r8, #1
 800b208:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
 800b20c:	dda3      	ble.n	800b156 <decode_mcu+0x2be>
	}
      }

      EndOfBlock: ;
 800b20e:	e002      	b.n	800b216 <decode_mcu+0x37e>
	      goto EndOfBlock;
 800b210:	bf00      	nop
 800b212:	e000      	b.n	800b216 <decode_mcu+0x37e>
	    break;
 800b214:	bf00      	nop
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b218:	3301      	adds	r3, #1
 800b21a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800b222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b224:	429a      	cmp	r2, r3
 800b226:	f6ff ae73 	blt.w	800af10 <decode_mcu+0x78>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	69fa      	ldr	r2, [r7, #28]
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	6a3a      	ldr	r2, [r7, #32]
 800b238:	605a      	str	r2, [r3, #4]
 800b23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b23c:	609e      	str	r6, [r3, #8]
 800b23e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b240:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 800b242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b244:	f103 0410 	add.w	r4, r3, #16
 800b248:	f107 0508 	add.w	r5, r7, #8
 800b24c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b24e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b258:	1e5a      	subs	r2, r3, #1
 800b25a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b25c:	629a      	str	r2, [r3, #40]	@ 0x28

  return TRUE;
 800b25e:	2301      	movs	r3, #1
}
 800b260:	4618      	mov	r0, r3
 800b262:	374c      	adds	r7, #76	@ 0x4c
 800b264:	46bd      	mov	sp, r7
 800b266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b26a:	bf00      	nop
 800b26c:	080240b4 	.word	0x080240b4
 800b270:	08024410 	.word	0x08024410

0800b274 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08c      	sub	sp, #48	@ 0x30
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800b282:	61fb      	str	r3, [r7, #28]
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 8133 	beq.w	800b4f6 <start_pass_huff_decoder+0x282>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b296:	2b00      	cmp	r3, #0
 800b298:	d105      	bne.n	800b2a6 <start_pass_huff_decoder+0x32>
      if (cinfo->Se != 0)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d015      	beq.n	800b2d0 <start_pass_huff_decoder+0x5c>
	goto bad;
 800b2a4:	e02d      	b.n	800b302 <start_pass_huff_decoder+0x8e>
    } else {
      /* need not check Ss/Se < 0 since they came from unsigned bytes */
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	db20      	blt.n	800b2f8 <start_pass_huff_decoder+0x84>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	dc18      	bgt.n	800b2f8 <start_pass_huff_decoder+0x84>
	goto bad;
      /* AC scans may have only one component */
      if (cinfo->comps_in_scan != 1)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d115      	bne.n	800b2fc <start_pass_huff_decoder+0x88>
	goto bad;
    }
    if (cinfo->Ah != 0) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d008      	beq.n	800b2ec <start_pass_huff_decoder+0x78>
      /* Successive approximation refinement scan: must have Al = Ah-1. */
      if (cinfo->Ah-1 != cinfo->Al)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800b2e0:	1e5a      	subs	r2, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d109      	bne.n	800b300 <start_pass_huff_decoder+0x8c>
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800b2f2:	2b0d      	cmp	r3, #13
 800b2f4:	dd26      	ble.n	800b344 <start_pass_huff_decoder+0xd0>
       * but the spec doesn't say so, and we try to be liberal about what we
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
 800b2f6:	e004      	b.n	800b302 <start_pass_huff_decoder+0x8e>
	goto bad;
 800b2f8:	bf00      	nop
 800b2fa:	e002      	b.n	800b302 <start_pass_huff_decoder+0x8e>
	goto bad;
 800b2fc:	bf00      	nop
 800b2fe:	e000      	b.n	800b302 <start_pass_huff_decoder+0x8e>
	goto bad;
 800b300:	bf00      	nop
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2211      	movs	r2, #17
 800b308:	615a      	str	r2, [r3, #20]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	f8d2 2198 	ldr.w	r2, [r2, #408]	@ 0x198
 800b314:	619a      	str	r2, [r3, #24]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	f8d2 219c 	ldr.w	r2, [r2, #412]	@ 0x19c
 800b320:	61da      	str	r2, [r3, #28]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	f8d2 21a0 	ldr.w	r2, [r2, #416]	@ 0x1a0
 800b32c:	621a      	str	r2, [r3, #32]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	f8d2 21a4 	ldr.w	r2, [r2, #420]	@ 0x1a4
 800b338:	625a      	str	r2, [r3, #36]	@ 0x24
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	4798      	blx	r3
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b344:	2300      	movs	r3, #0
 800b346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b348:	e064      	b.n	800b414 <start_pass_huff_decoder+0x1a0>
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34e:	3354      	adds	r3, #84	@ 0x54
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	613b      	str	r3, [r7, #16]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	021b      	lsls	r3, r3, #8
 800b364:	4413      	add	r3, r2
 800b366:	60fb      	str	r3, [r7, #12]
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d016      	beq.n	800b3a0 <start_pass_huff_decoder+0x12c>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	da12      	bge.n	800b3a0 <start_pass_huff_decoder+0x12c>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2276      	movs	r2, #118	@ 0x76
 800b380:	615a      	str	r2, [r3, #20]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	619a      	str	r2, [r3, #24]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2200      	movs	r2, #0
 800b390:	61da      	str	r2, [r3, #28]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	f04f 31ff 	mov.w	r1, #4294967295
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b3a6:	623b      	str	r3, [r7, #32]
 800b3a8:	e02b      	b.n	800b402 <start_pass_huff_decoder+0x18e>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3b8:	60bb      	str	r3, [r7, #8]
	if (cinfo->Ah != expected)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d012      	beq.n	800b3ec <start_pass_huff_decoder+0x178>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2276      	movs	r2, #118	@ 0x76
 800b3cc:	615a      	str	r2, [r3, #20]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	619a      	str	r2, [r3, #24]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6a3a      	ldr	r2, [r7, #32]
 800b3dc:	61da      	str	r2, [r3, #28]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f04f 31ff 	mov.w	r1, #4294967295
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	f8d2 21a4 	ldr.w	r2, [r2, #420]	@ 0x1a4
 800b3fa:	601a      	str	r2, [r3, #0]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	3301      	adds	r3, #1
 800b400:	623b      	str	r3, [r7, #32]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800b408:	6a3a      	ldr	r2, [r7, #32]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	ddcd      	ble.n	800b3aa <start_pass_huff_decoder+0x136>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b410:	3301      	adds	r3, #1
 800b412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800b41a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b41c:	429a      	cmp	r2, r3
 800b41e:	db94      	blt.n	800b34a <start_pass_huff_decoder+0xd6>
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10c      	bne.n	800b444 <start_pass_huff_decoder+0x1d0>
      if (cinfo->Ss == 0)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b430:	2b00      	cmp	r3, #0
 800b432:	d103      	bne.n	800b43c <start_pass_huff_decoder+0x1c8>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4a6a      	ldr	r2, [pc, #424]	@ (800b5e0 <start_pass_huff_decoder+0x36c>)
 800b438:	605a      	str	r2, [r3, #4]
 800b43a:	e00f      	b.n	800b45c <start_pass_huff_decoder+0x1e8>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	4a69      	ldr	r2, [pc, #420]	@ (800b5e4 <start_pass_huff_decoder+0x370>)
 800b440:	605a      	str	r2, [r3, #4]
 800b442:	e00b      	b.n	800b45c <start_pass_huff_decoder+0x1e8>
    } else {
      if (cinfo->Ss == 0)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d103      	bne.n	800b456 <start_pass_huff_decoder+0x1e2>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	4a65      	ldr	r2, [pc, #404]	@ (800b5e8 <start_pass_huff_decoder+0x374>)
 800b452:	605a      	str	r2, [r3, #4]
 800b454:	e002      	b.n	800b45c <start_pass_huff_decoder+0x1e8>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	4a64      	ldr	r2, [pc, #400]	@ (800b5ec <start_pass_huff_decoder+0x378>)
 800b45a:	605a      	str	r2, [r3, #4]
    }

    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b45c:	2300      	movs	r3, #0
 800b45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b460:	e03f      	b.n	800b4e2 <start_pass_huff_decoder+0x26e>
      compptr = cinfo->cur_comp_info[ci];
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	3354      	adds	r3, #84	@ 0x54
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	61bb      	str	r3, [r7, #24]
      /* Make sure requested tables are present, and compute derived tables.
       * We may build same derived table more than once, but it's not expensive.
       */
      if (cinfo->Ss == 0) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b476:	2b00      	cmp	r3, #0
 800b478:	d113      	bne.n	800b4a2 <start_pass_huff_decoder+0x22e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d124      	bne.n	800b4ce <start_pass_huff_decoder+0x25a>
	  tbl = compptr->dc_tbl_no;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	617b      	str	r3, [r7, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	330a      	adds	r3, #10
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	69fa      	ldr	r2, [r7, #28]
 800b492:	4413      	add	r3, r2
 800b494:	3304      	adds	r3, #4
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	2101      	movs	r1, #1
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7fe fa36 	bl	800990c <jpeg_make_d_derived_tbl>
 800b4a0:	e015      	b.n	800b4ce <start_pass_huff_decoder+0x25a>
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	617b      	str	r3, [r7, #20]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	330a      	adds	r3, #10
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	69fa      	ldr	r2, [r7, #28]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7fe fa27 	bl	800990c <jpeg_make_d_derived_tbl>
				& entropy->derived_tbls[tbl]);
	/* remember the single active table */
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	330a      	adds	r3, #10
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
 800b4ce:	69fa      	ldr	r2, [r7, #28]
 800b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	2200      	movs	r2, #0
 800b4da:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4de:	3301      	adds	r3, #1
 800b4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800b4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	dbb9      	blt.n	800b462 <start_pass_huff_decoder+0x1ee>
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	611a      	str	r2, [r3, #16]
 800b4f4:	e21a      	b.n	800b92c <start_pass_huff_decoder+0x6b8>
  } else {
    /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
     * This ought to be an error condition, but we make it a warning because
     * there are some baseline files out there with all zeroes in these bytes.
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d11b      	bne.n	800b538 <start_pass_huff_decoder+0x2c4>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d116      	bne.n	800b538 <start_pass_huff_decoder+0x2c4>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800b510:	2b00      	cmp	r3, #0
 800b512:	d111      	bne.n	800b538 <start_pass_huff_decoder+0x2c4>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <start_pass_huff_decoder+0x2b4>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800b524:	2b3f      	cmp	r3, #63	@ 0x3f
 800b526:	dc12      	bgt.n	800b54e <start_pass_huff_decoder+0x2da>
	cinfo->Se != cinfo->lim_Se))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800b534:	429a      	cmp	r2, r3
 800b536:	d00a      	beq.n	800b54e <start_pass_huff_decoder+0x2da>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	227d      	movs	r2, #125	@ 0x7d
 800b53e:	615a      	str	r2, [r3, #20]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f04f 31ff 	mov.w	r1, #4294967295
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	4798      	blx	r3
     * This is not necessary, but it appears that this version is slightly
     * more performant in the given implementation.
     * With an improved implementation we would prefer a single optimized
     * function.
     */
    if (cinfo->lim_Se != DCTSIZE2-1)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800b554:	2b3f      	cmp	r3, #63	@ 0x3f
 800b556:	d003      	beq.n	800b560 <start_pass_huff_decoder+0x2ec>
      entropy->pub.decode_mcu = decode_mcu_sub;
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	4a25      	ldr	r2, [pc, #148]	@ (800b5f0 <start_pass_huff_decoder+0x37c>)
 800b55c:	605a      	str	r2, [r3, #4]
 800b55e:	e002      	b.n	800b566 <start_pass_huff_decoder+0x2f2>
    else
      entropy->pub.decode_mcu = decode_mcu;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	4a24      	ldr	r2, [pc, #144]	@ (800b5f4 <start_pass_huff_decoder+0x380>)
 800b564:	605a      	str	r2, [r3, #4]

    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b566:	2300      	movs	r3, #0
 800b568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b56a:	e02f      	b.n	800b5cc <start_pass_huff_decoder+0x358>
      compptr = cinfo->cur_comp_info[ci];
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b570:	3354      	adds	r3, #84	@ 0x54
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	61bb      	str	r3, [r7, #24]
      /* Compute derived values for Huffman tables */
      /* We may do this more than once for a table, but it's not expensive */
      tbl = compptr->dc_tbl_no;
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	617b      	str	r3, [r7, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	3310      	adds	r3, #16
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	69fa      	ldr	r2, [r7, #28]
 800b588:	4413      	add	r3, r2
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	2101      	movs	r1, #1
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7fe f9bc 	bl	800990c <jpeg_make_d_derived_tbl>
			      & entropy->dc_derived_tbls[tbl]);
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00c      	beq.n	800b5b8 <start_pass_huff_decoder+0x344>
	tbl = compptr->ac_tbl_no;
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	617b      	str	r3, [r7, #20]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	3314      	adds	r3, #20
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	69fa      	ldr	r2, [r7, #28]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7fe f9aa 	bl	800990c <jpeg_make_d_derived_tbl>
				& entropy->ac_derived_tbls[tbl]);
      }
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
 800b5b8:	69fa      	ldr	r2, [r7, #28]
 800b5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5bc:	3304      	adds	r3, #4
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800b5d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	dbc9      	blt.n	800b56c <start_pass_huff_decoder+0x2f8>
    }

    /* Precalculate decoding info for each block in an MCU of this scan */
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b5d8:	2300      	movs	r3, #0
 800b5da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5dc:	e19f      	b.n	800b91e <start_pass_huff_decoder+0x6aa>
 800b5de:	bf00      	nop
 800b5e0:	0800a081 	.word	0x0800a081
 800b5e4:	0800a279 	.word	0x0800a279
 800b5e8:	0800a4a9 	.word	0x0800a4a9
 800b5ec:	0800a599 	.word	0x0800a599
 800b5f0:	0800aaad 	.word	0x0800aaad
 800b5f4:	0800ae99 	.word	0x0800ae99
      ci = cinfo->MCU_membership[blkn];
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5fc:	325c      	adds	r2, #92	@ 0x5c
 800b5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      compptr = cinfo->cur_comp_info[ci];
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b608:	3354      	adds	r3, #84	@ 0x54
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	61bb      	str	r3, [r7, #24]
      /* Precalculate which table to use for each block */
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	695a      	ldr	r2, [r3, #20]
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	3210      	adds	r2, #16
 800b61a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b622:	3218      	adds	r2, #24
 800b624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	699a      	ldr	r2, [r3, #24]
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	3214      	adds	r2, #20
 800b630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b638:	3222      	adds	r2, #34	@ 0x22
 800b63a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Decide whether we really care about the coefficient values */
      if (compptr->component_needed) {
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 8162 	beq.w	800b90c <start_pass_huff_decoder+0x698>
	ci = compptr->DCT_v_scaled_size;
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	i = compptr->DCT_h_scaled_size;
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b652:	627b      	str	r3, [r7, #36]	@ 0x24
	switch (cinfo->lim_Se) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800b65a:	2b30      	cmp	r3, #48	@ 0x30
 800b65c:	f200 8136 	bhi.w	800b8cc <start_pass_huff_decoder+0x658>
 800b660:	a201      	add	r2, pc, #4	@ (adr r2, 800b668 <start_pass_huff_decoder+0x3f4>)
 800b662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b666:	bf00      	nop
 800b668:	0800b72d 	.word	0x0800b72d
 800b66c:	0800b8cd 	.word	0x0800b8cd
 800b670:	0800b8cd 	.word	0x0800b8cd
 800b674:	0800b73b 	.word	0x0800b73b
 800b678:	0800b8cd 	.word	0x0800b8cd
 800b67c:	0800b8cd 	.word	0x0800b8cd
 800b680:	0800b8cd 	.word	0x0800b8cd
 800b684:	0800b8cd 	.word	0x0800b8cd
 800b688:	0800b77b 	.word	0x0800b77b
 800b68c:	0800b8cd 	.word	0x0800b8cd
 800b690:	0800b8cd 	.word	0x0800b8cd
 800b694:	0800b8cd 	.word	0x0800b8cd
 800b698:	0800b8cd 	.word	0x0800b8cd
 800b69c:	0800b8cd 	.word	0x0800b8cd
 800b6a0:	0800b8cd 	.word	0x0800b8cd
 800b6a4:	0800b7bf 	.word	0x0800b7bf
 800b6a8:	0800b8cd 	.word	0x0800b8cd
 800b6ac:	0800b8cd 	.word	0x0800b8cd
 800b6b0:	0800b8cd 	.word	0x0800b8cd
 800b6b4:	0800b8cd 	.word	0x0800b8cd
 800b6b8:	0800b8cd 	.word	0x0800b8cd
 800b6bc:	0800b8cd 	.word	0x0800b8cd
 800b6c0:	0800b8cd 	.word	0x0800b8cd
 800b6c4:	0800b8cd 	.word	0x0800b8cd
 800b6c8:	0800b7ff 	.word	0x0800b7ff
 800b6cc:	0800b8cd 	.word	0x0800b8cd
 800b6d0:	0800b8cd 	.word	0x0800b8cd
 800b6d4:	0800b8cd 	.word	0x0800b8cd
 800b6d8:	0800b8cd 	.word	0x0800b8cd
 800b6dc:	0800b8cd 	.word	0x0800b8cd
 800b6e0:	0800b8cd 	.word	0x0800b8cd
 800b6e4:	0800b8cd 	.word	0x0800b8cd
 800b6e8:	0800b8cd 	.word	0x0800b8cd
 800b6ec:	0800b8cd 	.word	0x0800b8cd
 800b6f0:	0800b8cd 	.word	0x0800b8cd
 800b6f4:	0800b843 	.word	0x0800b843
 800b6f8:	0800b8cd 	.word	0x0800b8cd
 800b6fc:	0800b8cd 	.word	0x0800b8cd
 800b700:	0800b8cd 	.word	0x0800b8cd
 800b704:	0800b8cd 	.word	0x0800b8cd
 800b708:	0800b8cd 	.word	0x0800b8cd
 800b70c:	0800b8cd 	.word	0x0800b8cd
 800b710:	0800b8cd 	.word	0x0800b8cd
 800b714:	0800b8cd 	.word	0x0800b8cd
 800b718:	0800b8cd 	.word	0x0800b8cd
 800b71c:	0800b8cd 	.word	0x0800b8cd
 800b720:	0800b8cd 	.word	0x0800b8cd
 800b724:	0800b8cd 	.word	0x0800b8cd
 800b728:	0800b889 	.word	0x0800b889
	case (1*1-1):
	  entropy->coef_limit[blkn] = 1;
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b730:	322c      	adds	r2, #44	@ 0x2c
 800b732:	2101      	movs	r1, #1
 800b734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b738:	e0ee      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	case (2*2-1):
	  if (ci <= 0 || ci > 2) ci = 2;
 800b73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dd02      	ble.n	800b746 <start_pass_huff_decoder+0x4d2>
 800b740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b742:	2b02      	cmp	r3, #2
 800b744:	dd01      	ble.n	800b74a <start_pass_huff_decoder+0x4d6>
 800b746:	2302      	movs	r3, #2
 800b748:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (i <= 0 || i > 2) i = 2;
 800b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dd02      	ble.n	800b756 <start_pass_huff_decoder+0x4e2>
 800b750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b752:	2b02      	cmp	r3, #2
 800b754:	dd01      	ble.n	800b75a <start_pass_huff_decoder+0x4e6>
 800b756:	2302      	movs	r3, #2
 800b758:	627b      	str	r3, [r7, #36]	@ 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	1e5a      	subs	r2, r3, #1
 800b75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b760:	3b01      	subs	r3, #1
 800b762:	497b      	ldr	r1, [pc, #492]	@ (800b950 <start_pass_huff_decoder+0x6dc>)
 800b764:	0052      	lsls	r2, r2, #1
 800b766:	4413      	add	r3, r2
 800b768:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b76c:	1c59      	adds	r1, r3, #1
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b772:	322c      	adds	r2, #44	@ 0x2c
 800b774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b778:	e0ce      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	case (3*3-1):
	  if (ci <= 0 || ci > 3) ci = 3;
 800b77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	dd02      	ble.n	800b786 <start_pass_huff_decoder+0x512>
 800b780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b782:	2b03      	cmp	r3, #3
 800b784:	dd01      	ble.n	800b78a <start_pass_huff_decoder+0x516>
 800b786:	2303      	movs	r3, #3
 800b788:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (i <= 0 || i > 3) i = 3;
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	dd02      	ble.n	800b796 <start_pass_huff_decoder+0x522>
 800b790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b792:	2b03      	cmp	r3, #3
 800b794:	dd01      	ble.n	800b79a <start_pass_huff_decoder+0x526>
 800b796:	2303      	movs	r3, #3
 800b798:	627b      	str	r3, [r7, #36]	@ 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800b79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79c:	1e5a      	subs	r2, r3, #1
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	1e59      	subs	r1, r3, #1
 800b7a2:	486c      	ldr	r0, [pc, #432]	@ (800b954 <start_pass_huff_decoder+0x6e0>)
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	4413      	add	r3, r2
 800b7aa:	440b      	add	r3, r1
 800b7ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b7b0:	1c59      	adds	r1, r3, #1
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7b6:	322c      	adds	r2, #44	@ 0x2c
 800b7b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b7bc:	e0ac      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	case (4*4-1):
	  if (ci <= 0 || ci > 4) ci = 4;
 800b7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dd02      	ble.n	800b7ca <start_pass_huff_decoder+0x556>
 800b7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	dd01      	ble.n	800b7ce <start_pass_huff_decoder+0x55a>
 800b7ca:	2304      	movs	r3, #4
 800b7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (i <= 0 || i > 4) i = 4;
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	dd02      	ble.n	800b7da <start_pass_huff_decoder+0x566>
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	dd01      	ble.n	800b7de <start_pass_huff_decoder+0x56a>
 800b7da:	2304      	movs	r3, #4
 800b7dc:	627b      	str	r3, [r7, #36]	@ 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800b7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e0:	1e5a      	subs	r2, r3, #1
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	495c      	ldr	r1, [pc, #368]	@ (800b958 <start_pass_huff_decoder+0x6e4>)
 800b7e8:	0092      	lsls	r2, r2, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b7f0:	1c59      	adds	r1, r3, #1
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7f6:	322c      	adds	r2, #44	@ 0x2c
 800b7f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b7fc:	e08c      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	case (5*5-1):
	  if (ci <= 0 || ci > 5) ci = 5;
 800b7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b800:	2b00      	cmp	r3, #0
 800b802:	dd02      	ble.n	800b80a <start_pass_huff_decoder+0x596>
 800b804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b806:	2b05      	cmp	r3, #5
 800b808:	dd01      	ble.n	800b80e <start_pass_huff_decoder+0x59a>
 800b80a:	2305      	movs	r3, #5
 800b80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (i <= 0 || i > 5) i = 5;
 800b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b810:	2b00      	cmp	r3, #0
 800b812:	dd02      	ble.n	800b81a <start_pass_huff_decoder+0x5a6>
 800b814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b816:	2b05      	cmp	r3, #5
 800b818:	dd01      	ble.n	800b81e <start_pass_huff_decoder+0x5aa>
 800b81a:	2305      	movs	r3, #5
 800b81c:	627b      	str	r3, [r7, #36]	@ 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800b81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b820:	1e5a      	subs	r2, r3, #1
 800b822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b824:	1e59      	subs	r1, r3, #1
 800b826:	484d      	ldr	r0, [pc, #308]	@ (800b95c <start_pass_huff_decoder+0x6e8>)
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	440b      	add	r3, r1
 800b830:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b834:	1c59      	adds	r1, r3, #1
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b83a:	322c      	adds	r2, #44	@ 0x2c
 800b83c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b840:	e06a      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	case (6*6-1):
	  if (ci <= 0 || ci > 6) ci = 6;
 800b842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b844:	2b00      	cmp	r3, #0
 800b846:	dd02      	ble.n	800b84e <start_pass_huff_decoder+0x5da>
 800b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84a:	2b06      	cmp	r3, #6
 800b84c:	dd01      	ble.n	800b852 <start_pass_huff_decoder+0x5de>
 800b84e:	2306      	movs	r3, #6
 800b850:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (i <= 0 || i > 6) i = 6;
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	2b00      	cmp	r3, #0
 800b856:	dd02      	ble.n	800b85e <start_pass_huff_decoder+0x5ea>
 800b858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85a:	2b06      	cmp	r3, #6
 800b85c:	dd01      	ble.n	800b862 <start_pass_huff_decoder+0x5ee>
 800b85e:	2306      	movs	r3, #6
 800b860:	627b      	str	r3, [r7, #36]	@ 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800b862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b864:	1e5a      	subs	r2, r3, #1
 800b866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b868:	1e59      	subs	r1, r3, #1
 800b86a:	483d      	ldr	r0, [pc, #244]	@ (800b960 <start_pass_huff_decoder+0x6ec>)
 800b86c:	4613      	mov	r3, r2
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	4413      	add	r3, r2
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	440b      	add	r3, r1
 800b876:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b87a:	1c59      	adds	r1, r3, #1
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b880:	322c      	adds	r2, #44	@ 0x2c
 800b882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b886:	e047      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	case (7*7-1):
	  if (ci <= 0 || ci > 7) ci = 7;
 800b888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	dd02      	ble.n	800b894 <start_pass_huff_decoder+0x620>
 800b88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b890:	2b07      	cmp	r3, #7
 800b892:	dd01      	ble.n	800b898 <start_pass_huff_decoder+0x624>
 800b894:	2307      	movs	r3, #7
 800b896:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (i <= 0 || i > 7) i = 7;
 800b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dd02      	ble.n	800b8a4 <start_pass_huff_decoder+0x630>
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	2b07      	cmp	r3, #7
 800b8a2:	dd01      	ble.n	800b8a8 <start_pass_huff_decoder+0x634>
 800b8a4:	2307      	movs	r3, #7
 800b8a6:	627b      	str	r3, [r7, #36]	@ 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800b8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8aa:	1e5a      	subs	r2, r3, #1
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	1e59      	subs	r1, r3, #1
 800b8b0:	482c      	ldr	r0, [pc, #176]	@ (800b964 <start_pass_huff_decoder+0x6f0>)
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	1a9b      	subs	r3, r3, r2
 800b8b8:	440b      	add	r3, r1
 800b8ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b8be:	1c59      	adds	r1, r3, #1
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8c4:	322c      	adds	r2, #44	@ 0x2c
 800b8c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b8ca:	e025      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	default:
	  if (ci <= 0 || ci > 8) ci = 8;
 800b8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dd02      	ble.n	800b8d8 <start_pass_huff_decoder+0x664>
 800b8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	dd01      	ble.n	800b8dc <start_pass_huff_decoder+0x668>
 800b8d8:	2308      	movs	r3, #8
 800b8da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (i <= 0 || i > 8) i = 8;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	dd02      	ble.n	800b8e8 <start_pass_huff_decoder+0x674>
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	dd01      	ble.n	800b8ec <start_pass_huff_decoder+0x678>
 800b8e8:	2308      	movs	r3, #8
 800b8ea:	627b      	str	r3, [r7, #36]	@ 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800b8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ee:	1e5a      	subs	r2, r3, #1
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	491c      	ldr	r1, [pc, #112]	@ (800b968 <start_pass_huff_decoder+0x6f4>)
 800b8f6:	00d2      	lsls	r2, r2, #3
 800b8f8:	4413      	add	r3, r2
 800b8fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b8fe:	1c59      	adds	r1, r3, #1
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b904:	322c      	adds	r2, #44	@ 0x2c
 800b906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800b90a:	e005      	b.n	800b918 <start_pass_huff_decoder+0x6a4>
	}
      } else {
	entropy->coef_limit[blkn] = 0;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b910:	322c      	adds	r2, #44	@ 0x2c
 800b912:	2100      	movs	r1, #0
 800b914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	3301      	adds	r3, #1
 800b91c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800b924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b926:	429a      	cmp	r2, r3
 800b928:	f6ff ae66 	blt.w	800b5f8 <start_pass_huff_decoder+0x384>
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	2200      	movs	r2, #0
 800b930:	60da      	str	r2, [r3, #12]
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	2200      	movs	r2, #0
 800b936:	609a      	str	r2, [r3, #8]
  entropy->insufficient_data = FALSE;
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	2200      	movs	r2, #0
 800b93c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b948:	bf00      	nop
 800b94a:	3730      	adds	r7, #48	@ 0x30
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	080240a4 	.word	0x080240a4
 800b954:	08024080 	.word	0x08024080
 800b958:	08024040 	.word	0x08024040
 800b95c:	08023fdc 	.word	0x08023fdc
 800b960:	08023f4c 	.word	0x08023f4c
 800b964:	08023e88 	.word	0x08023e88
 800b968:	08023d88 	.word	0x08023d88

0800b96c <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	22d8      	movs	r2, #216	@ 0xd8
 800b97c:	2101      	movs	r1, #1
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	4798      	blx	r3
 800b982:	60b8      	str	r0, [r7, #8]
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	4a30      	ldr	r2, [pc, #192]	@ (800ba50 <jinit_huff_decoder+0xe4>)
 800b990:	601a      	str	r2, [r3, #0]

  if (cinfo->progressive_mode) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d03b      	beq.n	800ba14 <jinit_huff_decoder+0xa8>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b9a6:	0212      	lsls	r2, r2, #8
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	4798      	blx	r3
 800b9ae:	4602      	mov	r2, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    coef_bit_ptr = & cinfo->coef_bits[0][0];
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b9bc:	613b      	str	r3, [r7, #16]
    for (ci = 0; ci < cinfo->num_components; ci++)
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60fb      	str	r3, [r7, #12]
 800b9c2:	e011      	b.n	800b9e8 <jinit_huff_decoder+0x7c>
      for (i = 0; i < DCTSIZE2; i++)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e008      	b.n	800b9dc <jinit_huff_decoder+0x70>
	*coef_bit_ptr++ = -1;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	1d1a      	adds	r2, r3, #4
 800b9ce:	613a      	str	r2, [r7, #16]
 800b9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d4:	601a      	str	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++)
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	617b      	str	r3, [r7, #20]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	2b3f      	cmp	r3, #63	@ 0x3f
 800b9e0:	ddf3      	ble.n	800b9ca <jinit_huff_decoder+0x5e>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	dbe8      	blt.n	800b9c4 <jinit_huff_decoder+0x58>

    /* Mark derived tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e009      	b.n	800ba0c <jinit_huff_decoder+0xa0>
      entropy->derived_tbls[i] = NULL;
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	330a      	adds	r3, #10
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	4413      	add	r3, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	617b      	str	r3, [r7, #20]
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	ddf2      	ble.n	800b9f8 <jinit_huff_decoder+0x8c>
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
    }
  }
}
 800ba12:	e018      	b.n	800ba46 <jinit_huff_decoder+0xda>
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800ba14:	2300      	movs	r3, #0
 800ba16:	617b      	str	r3, [r7, #20]
 800ba18:	e012      	b.n	800ba40 <jinit_huff_decoder+0xd4>
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	3214      	adds	r2, #20
 800ba20:	2100      	movs	r1, #0
 800ba22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	3214      	adds	r2, #20
 800ba2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	3210      	adds	r2, #16
 800ba36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b03      	cmp	r3, #3
 800ba44:	dde9      	ble.n	800ba1a <jinit_huff_decoder+0xae>
}
 800ba46:	bf00      	nop
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	0800b275 	.word	0x0800b275

0800ba54 <jpeg_core_output_dimensions>:
GLOBAL(void)
jpeg_core_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase.
 * This function is used for transcoding and full decompression.
 */
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
#ifdef IDCT_SCALING_SUPPORTED
  int ci;
  jpeg_component_info *compptr;

  /* Compute actual output image dimensions and DCT scaling choices. */
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800ba66:	fb03 f202 	mul.w	r2, r3, r2
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d824      	bhi.n	800babc <jpeg_core_output_dimensions+0x68>
    /* Provide 1/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	461a      	mov	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800ba7e:	4619      	mov	r1, r3
 800ba80:	4610      	mov	r0, r2
 800ba82:	f016 f921 	bl	8021cc8 <jdiv_round_up>
 800ba86:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800ba88:	461a      	mov	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a1b      	ldr	r3, [r3, #32]
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	f016 f913 	bl	8021cc8 <jdiv_round_up>
 800baa2:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800baa4:	461a      	mov	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 1;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 1;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800baba:	e349      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bac6:	fb03 f202 	mul.w	r2, r3, r2
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d824      	bhi.n	800bb1e <jpeg_core_output_dimensions+0xca>
    /* Provide 2/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	69db      	ldr	r3, [r3, #28]
 800bad8:	005a      	lsls	r2, r3, #1
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f016 f8f0 	bl	8021cc8 <jdiv_round_up>
 800bae8:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800baea:	461a      	mov	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	005a      	lsls	r2, r3, #1
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bafc:	4619      	mov	r1, r3
 800bafe:	4610      	mov	r0, r2
 800bb00:	f016 f8e2 	bl	8021cc8 <jdiv_round_up>
 800bb04:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bb06:	461a      	mov	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 2;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2202      	movs	r2, #2
 800bb18:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bb1c:	e318      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bb28:	fb02 f103 	mul.w	r1, r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb30:	4613      	mov	r3, r2
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	4413      	add	r3, r2
 800bb36:	4299      	cmp	r1, r3
 800bb38:	d82a      	bhi.n	800bb90 <jpeg_core_output_dimensions+0x13c>
    /* Provide 3/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	4613      	mov	r3, r2
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	441a      	add	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f016 f8ba 	bl	8021cc8 <jdiv_round_up>
 800bb54:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bb56:	461a      	mov	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	461a      	mov	r2, r3
 800bb62:	4613      	mov	r3, r2
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	441a      	add	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f016 f8a9 	bl	8021cc8 <jdiv_round_up>
 800bb76:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bb78:	461a      	mov	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2203      	movs	r2, #3
 800bb82:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 3;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2203      	movs	r2, #3
 800bb8a:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bb8e:	e2df      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bb9a:	fb03 f202 	mul.w	r2, r3, r2
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d824      	bhi.n	800bbf2 <jpeg_core_output_dimensions+0x19e>
    /* Provide 4/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	69db      	ldr	r3, [r3, #28]
 800bbac:	009a      	lsls	r2, r3, #2
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f016 f886 	bl	8021cc8 <jdiv_round_up>
 800bbbc:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6a1b      	ldr	r3, [r3, #32]
 800bbc8:	009a      	lsls	r2, r3, #2
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	f016 f878 	bl	8021cc8 <jdiv_round_up>
 800bbd8:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bbda:	461a      	mov	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2204      	movs	r2, #4
 800bbe4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 4;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2204      	movs	r2, #4
 800bbec:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bbf0:	e2ae      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bbfc:	fb02 f103 	mul.w	r1, r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc04:	4613      	mov	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	d82a      	bhi.n	800bc64 <jpeg_core_output_dimensions+0x210>
    /* Provide 5/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	461a      	mov	r2, r3
 800bc14:	4613      	mov	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	441a      	add	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f016 f850 	bl	8021cc8 <jdiv_round_up>
 800bc28:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	461a      	mov	r2, r3
 800bc36:	4613      	mov	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	441a      	add	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bc42:	4619      	mov	r1, r3
 800bc44:	4610      	mov	r0, r2
 800bc46:	f016 f83f 	bl	8021cc8 <jdiv_round_up>
 800bc4a:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2205      	movs	r2, #5
 800bc56:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 5;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2205      	movs	r2, #5
 800bc5e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bc62:	e275      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bc6e:	fb02 f103 	mul.w	r1, r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc76:	4613      	mov	r3, r2
 800bc78:	005b      	lsls	r3, r3, #1
 800bc7a:	4413      	add	r3, r2
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	4299      	cmp	r1, r3
 800bc80:	d82e      	bhi.n	800bce0 <jpeg_core_output_dimensions+0x28c>
    /* Provide 6/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 6L, (long) cinfo->block_size);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	461a      	mov	r2, r3
 800bc88:	4613      	mov	r3, r2
 800bc8a:	005b      	lsls	r3, r3, #1
 800bc8c:	4413      	add	r3, r2
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	461a      	mov	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	f016 f814 	bl	8021cc8 <jdiv_round_up>
 800bca0:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bca2:	461a      	mov	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 6L, (long) cinfo->block_size);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	461a      	mov	r2, r3
 800bcae:	4613      	mov	r3, r2
 800bcb0:	005b      	lsls	r3, r3, #1
 800bcb2:	4413      	add	r3, r2
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f016 f801 	bl	8021cc8 <jdiv_round_up>
 800bcc6:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bcc8:	461a      	mov	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 6;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2206      	movs	r2, #6
 800bcd2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 6;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2206      	movs	r2, #6
 800bcda:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bcde:	e237      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bcea:	fb02 f103 	mul.w	r1, r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	4299      	cmp	r1, r3
 800bcfa:	d82a      	bhi.n	800bd52 <jpeg_core_output_dimensions+0x2fe>
    /* Provide 7/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	461a      	mov	r2, r3
 800bd02:	4613      	mov	r3, r2
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	1a9a      	subs	r2, r3, r2
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bd0e:	4619      	mov	r1, r3
 800bd10:	4610      	mov	r0, r2
 800bd12:	f015 ffd9 	bl	8021cc8 <jdiv_round_up>
 800bd16:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bd18:	461a      	mov	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	461a      	mov	r2, r3
 800bd24:	4613      	mov	r3, r2
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	1a9a      	subs	r2, r3, r2
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bd30:	4619      	mov	r1, r3
 800bd32:	4610      	mov	r0, r2
 800bd34:	f015 ffc8 	bl	8021cc8 <jdiv_round_up>
 800bd38:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2207      	movs	r2, #7
 800bd44:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 7;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2207      	movs	r2, #7
 800bd4c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bd50:	e1fe      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bd5c:	fb03 f202 	mul.w	r2, r3, r2
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd64:	00db      	lsls	r3, r3, #3
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d824      	bhi.n	800bdb4 <jpeg_core_output_dimensions+0x360>
    /* Provide 8/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	00da      	lsls	r2, r3, #3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bd76:	4619      	mov	r1, r3
 800bd78:	4610      	mov	r0, r2
 800bd7a:	f015 ffa5 	bl	8021cc8 <jdiv_round_up>
 800bd7e:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bd80:	461a      	mov	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	00da      	lsls	r2, r3, #3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bd92:	4619      	mov	r1, r3
 800bd94:	4610      	mov	r0, r2
 800bd96:	f015 ff97 	bl	8021cc8 <jdiv_round_up>
 800bd9a:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2208      	movs	r2, #8
 800bda6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 8;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2208      	movs	r2, #8
 800bdae:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bdb2:	e1cd      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bdbe:	fb02 f103 	mul.w	r1, r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	4413      	add	r3, r2
 800bdcc:	4299      	cmp	r1, r3
 800bdce:	d82a      	bhi.n	800be26 <jpeg_core_output_dimensions+0x3d2>
    /* Provide 9/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	441a      	add	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f015 ff6f 	bl	8021cc8 <jdiv_round_up>
 800bdea:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bdec:	461a      	mov	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	441a      	add	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800be04:	4619      	mov	r1, r3
 800be06:	4610      	mov	r0, r2
 800be08:	f015 ff5e 	bl	8021cc8 <jdiv_round_up>
 800be0c:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800be0e:	461a      	mov	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2209      	movs	r2, #9
 800be18:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 9;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2209      	movs	r2, #9
 800be20:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800be24:	e194      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800be30:	fb02 f103 	mul.w	r1, r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	4299      	cmp	r1, r3
 800be42:	d82e      	bhi.n	800bea2 <jpeg_core_output_dimensions+0x44e>
    /* Provide 10/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 10L, (long) cinfo->block_size);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	461a      	mov	r2, r3
 800be4a:	4613      	mov	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	461a      	mov	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800be5a:	4619      	mov	r1, r3
 800be5c:	4610      	mov	r0, r2
 800be5e:	f015 ff33 	bl	8021cc8 <jdiv_round_up>
 800be62:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800be64:	461a      	mov	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 10L, (long) cinfo->block_size);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	461a      	mov	r2, r3
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	461a      	mov	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800be80:	4619      	mov	r1, r3
 800be82:	4610      	mov	r0, r2
 800be84:	f015 ff20 	bl	8021cc8 <jdiv_round_up>
 800be88:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800be8a:	461a      	mov	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 10;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	220a      	movs	r2, #10
 800be94:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 10;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	220a      	movs	r2, #10
 800be9c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bea0:	e156      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800beac:	fb02 f103 	mul.w	r1, r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	4413      	add	r3, r2
 800bebe:	4299      	cmp	r1, r3
 800bec0:	d82e      	bhi.n	800bf20 <jpeg_core_output_dimensions+0x4cc>
    /* Provide 11/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 11L, (long) cinfo->block_size);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	69db      	ldr	r3, [r3, #28]
 800bec6:	461a      	mov	r2, r3
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	441a      	add	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f015 fef4 	bl	8021cc8 <jdiv_round_up>
 800bee0:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bee2:	461a      	mov	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 11L, (long) cinfo->block_size);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a1b      	ldr	r3, [r3, #32]
 800beec:	461a      	mov	r2, r3
 800beee:	4613      	mov	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	441a      	add	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800befe:	4619      	mov	r1, r3
 800bf00:	4610      	mov	r0, r2
 800bf02:	f015 fee1 	bl	8021cc8 <jdiv_round_up>
 800bf06:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bf08:	461a      	mov	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 11;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	220b      	movs	r2, #11
 800bf12:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 11;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	220b      	movs	r2, #11
 800bf1a:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bf1e:	e117      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bf2a:	fb02 f103 	mul.w	r1, r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf32:	4613      	mov	r3, r2
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	4413      	add	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4299      	cmp	r1, r3
 800bf3c:	d82e      	bhi.n	800bf9c <jpeg_core_output_dimensions+0x548>
    /* Provide 12/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 12L, (long) cinfo->block_size);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	69db      	ldr	r3, [r3, #28]
 800bf42:	461a      	mov	r2, r3
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f015 feb6 	bl	8021cc8 <jdiv_round_up>
 800bf5c:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bf5e:	461a      	mov	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 12L, (long) cinfo->block_size);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a1b      	ldr	r3, [r3, #32]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	461a      	mov	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f015 fea3 	bl	8021cc8 <jdiv_round_up>
 800bf82:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800bf84:	461a      	mov	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 12;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	220c      	movs	r2, #12
 800bf8e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 12;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	220c      	movs	r2, #12
 800bf96:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800bf9a:	e0d9      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800bfa6:	fb02 f103 	mul.w	r1, r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfae:	4613      	mov	r3, r2
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4413      	add	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	d82e      	bhi.n	800c01a <jpeg_core_output_dimensions+0x5c6>
    /* Provide 13/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 13L, (long) cinfo->block_size);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	005b      	lsls	r3, r3, #1
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	441a      	add	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	f015 fe77 	bl	8021cc8 <jdiv_round_up>
 800bfda:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800bfdc:	461a      	mov	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 13L, (long) cinfo->block_size);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	4613      	mov	r3, r2
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	441a      	add	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800bff8:	4619      	mov	r1, r3
 800bffa:	4610      	mov	r0, r2
 800bffc:	f015 fe64 	bl	8021cc8 <jdiv_round_up>
 800c000:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800c002:	461a      	mov	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 13;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	220d      	movs	r2, #13
 800c00c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 13;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	220d      	movs	r2, #13
 800c014:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800c018:	e09a      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800c024:	fb02 f103 	mul.w	r1, r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c02c:	4613      	mov	r3, r2
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	1a9b      	subs	r3, r3, r2
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	4299      	cmp	r1, r3
 800c036:	d82e      	bhi.n	800c096 <jpeg_core_output_dimensions+0x642>
    /* Provide 14/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	69db      	ldr	r3, [r3, #28]
 800c03c:	461a      	mov	r2, r3
 800c03e:	4613      	mov	r3, r2
 800c040:	00db      	lsls	r3, r3, #3
 800c042:	1a9b      	subs	r3, r3, r2
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	461a      	mov	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f015 fe39 	bl	8021cc8 <jdiv_round_up>
 800c056:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800c058:	461a      	mov	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	461a      	mov	r2, r3
 800c064:	4613      	mov	r3, r2
 800c066:	00db      	lsls	r3, r3, #3
 800c068:	1a9b      	subs	r3, r3, r2
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	461a      	mov	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f015 fe26 	bl	8021cc8 <jdiv_round_up>
 800c07c:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800c07e:	461a      	mov	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 14;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	220e      	movs	r2, #14
 800c088:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 14;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	220e      	movs	r2, #14
 800c090:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800c094:	e05c      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800c0a0:	fb02 f103 	mul.w	r1, r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	1a9b      	subs	r3, r3, r2
 800c0ae:	4299      	cmp	r1, r3
 800c0b0:	d82a      	bhi.n	800c108 <jpeg_core_output_dimensions+0x6b4>
    /* Provide 15/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	011b      	lsls	r3, r3, #4
 800c0bc:	1a9a      	subs	r2, r3, r2
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f015 fdfe 	bl	8021cc8 <jdiv_round_up>
 800c0cc:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6a1b      	ldr	r3, [r3, #32]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	4613      	mov	r3, r2
 800c0dc:	011b      	lsls	r3, r3, #4
 800c0de:	1a9a      	subs	r2, r3, r2
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	f015 fded 	bl	8021cc8 <jdiv_round_up>
 800c0ee:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	220f      	movs	r2, #15
 800c0fa:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 15;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	220f      	movs	r2, #15
 800c102:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 800c106:	e023      	b.n	800c150 <jpeg_core_output_dimensions+0x6fc>
  } else {
    /* Provide 16/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	69db      	ldr	r3, [r3, #28]
 800c10c:	011a      	lsls	r2, r3, #4
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c114:	4619      	mov	r1, r3
 800c116:	4610      	mov	r0, r2
 800c118:	f015 fdd6 	bl	8021cc8 <jdiv_round_up>
 800c11c:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800c11e:	461a      	mov	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	671a      	str	r2, [r3, #112]	@ 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	011a      	lsls	r2, r3, #4
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c130:	4619      	mov	r1, r3
 800c132:	4610      	mov	r0, r2
 800c134:	f015 fdc8 	bl	8021cc8 <jdiv_round_up>
 800c138:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800c13a:	461a      	mov	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	675a      	str	r2, [r3, #116]	@ 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2210      	movs	r2, #16
 800c144:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    cinfo->min_DCT_v_scaled_size = 16;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2210      	movs	r2, #16
 800c14c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
  }

  /* Recompute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c150:	2300      	movs	r3, #0
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c15a:	60bb      	str	r3, [r7, #8]
 800c15c:	e00f      	b.n	800c17e <jpeg_core_output_dimensions+0x72a>
       ci++, compptr++) {
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	625a      	str	r2, [r3, #36]	@ 0x24
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	629a      	str	r2, [r3, #40]	@ 0x28
       ci++, compptr++) {
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	3358      	adds	r3, #88	@ 0x58
 800c17c:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	429a      	cmp	r2, r3
 800c186:	dbea      	blt.n	800c15e <jpeg_core_output_dimensions+0x70a>
  /* jdinput.c has already initialized DCT_scaled_size,
   * and has computed unscaled downsampled_width and downsampled_height.
   */

#endif /* IDCT_SCALING_SUPPORTED */
}
 800c188:	bf00      	nop
 800c18a:	bf00      	nop
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <initial_setup>:


LOCAL(void)
initial_setup (j_decompress_ptr cinfo)
/* Called once, when first SOS marker is reached */
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  int ci;
  jpeg_component_info *compptr;

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	dc06      	bgt.n	800c1b8 <initial_setup+0x24>
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	461a      	mov	r2, r3
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800c1b0:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	dd0d      	ble.n	800c1d4 <initial_setup+0x40>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	222a      	movs	r2, #42	@ 0x2a
 800c1be:	615a      	str	r2, [r3, #20]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f64f 72dc 	movw	r2, #65500	@ 0xffdc
 800c1c8:	619a      	str	r2, [r3, #24]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	4798      	blx	r3

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800c1da:	2b08      	cmp	r3, #8
 800c1dc:	d00e      	beq.n	800c1fc <initial_setup+0x68>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2210      	movs	r2, #16
 800c1e4:	615a      	str	r2, [r3, #20]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	f8d2 20d4 	ldr.w	r2, [r2, #212]	@ 0xd4
 800c1f0:	619a      	str	r2, [r3, #24]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	4798      	blx	r3

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c200:	2b0a      	cmp	r3, #10
 800c202:	dd11      	ble.n	800c228 <initial_setup+0x94>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	221b      	movs	r2, #27
 800c20a:	615a      	str	r2, [r3, #20]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c214:	619a      	str	r2, [r3, #24]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	220a      	movs	r2, #10
 800c21c:	61da      	str	r2, [r3, #28]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	4798      	blx	r3
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
  cinfo->max_v_samp_factor = 1;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c238:	2300      	movs	r3, #0
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c242:	60bb      	str	r3, [r7, #8]
 800c244:	e034      	b.n	800c2b0 <initial_setup+0x11c>
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dd0b      	ble.n	800c266 <initial_setup+0xd2>
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	2b04      	cmp	r3, #4
 800c254:	dc07      	bgt.n	800c266 <initial_setup+0xd2>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	68db      	ldr	r3, [r3, #12]
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dd03      	ble.n	800c266 <initial_setup+0xd2>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	2b04      	cmp	r3, #4
 800c264:	dd08      	ble.n	800c278 <initial_setup+0xe4>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2213      	movs	r2, #19
 800c26c:	615a      	str	r2, [r3, #20]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	689a      	ldr	r2, [r3, #8]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c282:	429a      	cmp	r2, r3
 800c284:	bfb8      	it	lt
 800c286:	461a      	movlt	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c298:	429a      	cmp	r2, r3
 800c29a:	bfb8      	it	lt
 800c29c:	461a      	movlt	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
       ci++, compptr++) {
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	3358      	adds	r3, #88	@ 0x58
 800c2ae:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	dbc5      	blt.n	800c246 <initial_setup+0xb2>
				   compptr->v_samp_factor);
  }

  /* Derive block_size, natural_order, and lim_Se */
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d109      	bne.n	800c2d8 <initial_setup+0x144>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d011      	beq.n	800c2f2 <initial_setup+0x15e>
      cinfo->comps_in_scan)) { /* no pseudo SOS marker */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00c      	beq.n	800c2f2 <initial_setup+0x15e>
    cinfo->block_size = DCTSIZE;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2208      	movs	r2, #8
 800c2dc:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    cinfo->natural_order = jpeg_natural_order;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4ac4      	ldr	r2, [pc, #784]	@ (800c5f4 <initial_setup+0x460>)
 800c2e4:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    cinfo->lim_Se = DCTSIZE2-1;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	223f      	movs	r2, #63	@ 0x3f
 800c2ec:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
 800c2f0:	e1ca      	b.n	800c688 <initial_setup+0x4f4>
  } else
    switch (cinfo->Se) {
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800c2f8:	2bff      	cmp	r3, #255	@ 0xff
 800c2fa:	f000 8196 	beq.w	800c62a <initial_setup+0x496>
 800c2fe:	2bff      	cmp	r3, #255	@ 0xff
 800c300:	f300 81a0 	bgt.w	800c644 <initial_setup+0x4b0>
 800c304:	2be0      	cmp	r3, #224	@ 0xe0
 800c306:	f000 8183 	beq.w	800c610 <initial_setup+0x47c>
 800c30a:	2be0      	cmp	r3, #224	@ 0xe0
 800c30c:	f300 819a 	bgt.w	800c644 <initial_setup+0x4b0>
 800c310:	2bc3      	cmp	r3, #195	@ 0xc3
 800c312:	f000 8161 	beq.w	800c5d8 <initial_setup+0x444>
 800c316:	2bc3      	cmp	r3, #195	@ 0xc3
 800c318:	f300 8194 	bgt.w	800c644 <initial_setup+0x4b0>
 800c31c:	2ba8      	cmp	r3, #168	@ 0xa8
 800c31e:	f000 814e 	beq.w	800c5be <initial_setup+0x42a>
 800c322:	2ba8      	cmp	r3, #168	@ 0xa8
 800c324:	f300 818e 	bgt.w	800c644 <initial_setup+0x4b0>
 800c328:	2b8f      	cmp	r3, #143	@ 0x8f
 800c32a:	f000 813b 	beq.w	800c5a4 <initial_setup+0x410>
 800c32e:	2b8f      	cmp	r3, #143	@ 0x8f
 800c330:	f300 8188 	bgt.w	800c644 <initial_setup+0x4b0>
 800c334:	2b78      	cmp	r3, #120	@ 0x78
 800c336:	f000 8128 	beq.w	800c58a <initial_setup+0x3f6>
 800c33a:	2b78      	cmp	r3, #120	@ 0x78
 800c33c:	f300 8182 	bgt.w	800c644 <initial_setup+0x4b0>
 800c340:	2b63      	cmp	r3, #99	@ 0x63
 800c342:	f000 8115 	beq.w	800c570 <initial_setup+0x3dc>
 800c346:	2b63      	cmp	r3, #99	@ 0x63
 800c348:	f300 817c 	bgt.w	800c644 <initial_setup+0x4b0>
 800c34c:	2b3f      	cmp	r3, #63	@ 0x3f
 800c34e:	f300 8089 	bgt.w	800c464 <initial_setup+0x2d0>
 800c352:	2b00      	cmp	r3, #0
 800c354:	f2c0 8176 	blt.w	800c644 <initial_setup+0x4b0>
 800c358:	2b3f      	cmp	r3, #63	@ 0x3f
 800c35a:	f200 8173 	bhi.w	800c644 <initial_setup+0x4b0>
 800c35e:	a201      	add	r2, pc, #4	@ (adr r2, 800c364 <initial_setup+0x1d0>)
 800c360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c364:	0800c46b 	.word	0x0800c46b
 800c368:	0800c645 	.word	0x0800c645
 800c36c:	0800c645 	.word	0x0800c645
 800c370:	0800c489 	.word	0x0800c489
 800c374:	0800c645 	.word	0x0800c645
 800c378:	0800c645 	.word	0x0800c645
 800c37c:	0800c645 	.word	0x0800c645
 800c380:	0800c645 	.word	0x0800c645
 800c384:	0800c4a7 	.word	0x0800c4a7
 800c388:	0800c645 	.word	0x0800c645
 800c38c:	0800c645 	.word	0x0800c645
 800c390:	0800c645 	.word	0x0800c645
 800c394:	0800c645 	.word	0x0800c645
 800c398:	0800c645 	.word	0x0800c645
 800c39c:	0800c645 	.word	0x0800c645
 800c3a0:	0800c4c5 	.word	0x0800c4c5
 800c3a4:	0800c645 	.word	0x0800c645
 800c3a8:	0800c645 	.word	0x0800c645
 800c3ac:	0800c645 	.word	0x0800c645
 800c3b0:	0800c645 	.word	0x0800c645
 800c3b4:	0800c645 	.word	0x0800c645
 800c3b8:	0800c645 	.word	0x0800c645
 800c3bc:	0800c645 	.word	0x0800c645
 800c3c0:	0800c645 	.word	0x0800c645
 800c3c4:	0800c4e3 	.word	0x0800c4e3
 800c3c8:	0800c645 	.word	0x0800c645
 800c3cc:	0800c645 	.word	0x0800c645
 800c3d0:	0800c645 	.word	0x0800c645
 800c3d4:	0800c645 	.word	0x0800c645
 800c3d8:	0800c645 	.word	0x0800c645
 800c3dc:	0800c645 	.word	0x0800c645
 800c3e0:	0800c645 	.word	0x0800c645
 800c3e4:	0800c645 	.word	0x0800c645
 800c3e8:	0800c645 	.word	0x0800c645
 800c3ec:	0800c645 	.word	0x0800c645
 800c3f0:	0800c501 	.word	0x0800c501
 800c3f4:	0800c645 	.word	0x0800c645
 800c3f8:	0800c645 	.word	0x0800c645
 800c3fc:	0800c645 	.word	0x0800c645
 800c400:	0800c645 	.word	0x0800c645
 800c404:	0800c645 	.word	0x0800c645
 800c408:	0800c645 	.word	0x0800c645
 800c40c:	0800c645 	.word	0x0800c645
 800c410:	0800c645 	.word	0x0800c645
 800c414:	0800c645 	.word	0x0800c645
 800c418:	0800c645 	.word	0x0800c645
 800c41c:	0800c645 	.word	0x0800c645
 800c420:	0800c645 	.word	0x0800c645
 800c424:	0800c51f 	.word	0x0800c51f
 800c428:	0800c645 	.word	0x0800c645
 800c42c:	0800c645 	.word	0x0800c645
 800c430:	0800c645 	.word	0x0800c645
 800c434:	0800c645 	.word	0x0800c645
 800c438:	0800c645 	.word	0x0800c645
 800c43c:	0800c645 	.word	0x0800c645
 800c440:	0800c645 	.word	0x0800c645
 800c444:	0800c645 	.word	0x0800c645
 800c448:	0800c645 	.word	0x0800c645
 800c44c:	0800c645 	.word	0x0800c645
 800c450:	0800c645 	.word	0x0800c645
 800c454:	0800c645 	.word	0x0800c645
 800c458:	0800c645 	.word	0x0800c645
 800c45c:	0800c645 	.word	0x0800c645
 800c460:	0800c53d 	.word	0x0800c53d
 800c464:	2b50      	cmp	r3, #80	@ 0x50
 800c466:	d076      	beq.n	800c556 <initial_setup+0x3c2>
 800c468:	e0ec      	b.n	800c644 <initial_setup+0x4b0>
    case (1*1-1):
      cinfo->block_size = 1;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a5f      	ldr	r2, [pc, #380]	@ (800c5f4 <initial_setup+0x460>)
 800c476:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c486:	e0ff      	b.n	800c688 <initial_setup+0x4f4>
    case (2*2-1):
      cinfo->block_size = 2;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2202      	movs	r2, #2
 800c48c:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a59      	ldr	r2, [pc, #356]	@ (800c5f8 <initial_setup+0x464>)
 800c494:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c4a4:	e0f0      	b.n	800c688 <initial_setup+0x4f4>
    case (3*3-1):
      cinfo->block_size = 3;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a52      	ldr	r2, [pc, #328]	@ (800c5fc <initial_setup+0x468>)
 800c4b2:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c4c2:	e0e1      	b.n	800c688 <initial_setup+0x4f4>
    case (4*4-1):
      cinfo->block_size = 4;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2204      	movs	r2, #4
 800c4c8:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a4c      	ldr	r2, [pc, #304]	@ (800c600 <initial_setup+0x46c>)
 800c4d0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c4e0:	e0d2      	b.n	800c688 <initial_setup+0x4f4>
    case (5*5-1):
      cinfo->block_size = 5;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2205      	movs	r2, #5
 800c4e6:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a45      	ldr	r2, [pc, #276]	@ (800c604 <initial_setup+0x470>)
 800c4ee:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c4fe:	e0c3      	b.n	800c688 <initial_setup+0x4f4>
    case (6*6-1):
      cinfo->block_size = 6;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2206      	movs	r2, #6
 800c504:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a3f      	ldr	r2, [pc, #252]	@ (800c608 <initial_setup+0x474>)
 800c50c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c51c:	e0b4      	b.n	800c688 <initial_setup+0x4f4>
    case (7*7-1):
      cinfo->block_size = 7;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2207      	movs	r2, #7
 800c522:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a38      	ldr	r2, [pc, #224]	@ (800c60c <initial_setup+0x478>)
 800c52a:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c53a:	e0a5      	b.n	800c688 <initial_setup+0x4f4>
    case (8*8-1):
      cinfo->block_size = 8;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2208      	movs	r2, #8
 800c540:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a2b      	ldr	r2, [pc, #172]	@ (800c5f4 <initial_setup+0x460>)
 800c548:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	223f      	movs	r2, #63	@ 0x3f
 800c550:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c554:	e098      	b.n	800c688 <initial_setup+0x4f4>
    case (9*9-1):
      cinfo->block_size = 9;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2209      	movs	r2, #9
 800c55a:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a24      	ldr	r2, [pc, #144]	@ (800c5f4 <initial_setup+0x460>)
 800c562:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	223f      	movs	r2, #63	@ 0x3f
 800c56a:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c56e:	e08b      	b.n	800c688 <initial_setup+0x4f4>
    case (10*10-1):
      cinfo->block_size = 10;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	220a      	movs	r2, #10
 800c574:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a1e      	ldr	r2, [pc, #120]	@ (800c5f4 <initial_setup+0x460>)
 800c57c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	223f      	movs	r2, #63	@ 0x3f
 800c584:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c588:	e07e      	b.n	800c688 <initial_setup+0x4f4>
    case (11*11-1):
      cinfo->block_size = 11;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	220b      	movs	r2, #11
 800c58e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a17      	ldr	r2, [pc, #92]	@ (800c5f4 <initial_setup+0x460>)
 800c596:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	223f      	movs	r2, #63	@ 0x3f
 800c59e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c5a2:	e071      	b.n	800c688 <initial_setup+0x4f4>
    case (12*12-1):
      cinfo->block_size = 12;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	220c      	movs	r2, #12
 800c5a8:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a11      	ldr	r2, [pc, #68]	@ (800c5f4 <initial_setup+0x460>)
 800c5b0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	223f      	movs	r2, #63	@ 0x3f
 800c5b8:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c5bc:	e064      	b.n	800c688 <initial_setup+0x4f4>
    case (13*13-1):
      cinfo->block_size = 13;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	220d      	movs	r2, #13
 800c5c2:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a0a      	ldr	r2, [pc, #40]	@ (800c5f4 <initial_setup+0x460>)
 800c5ca:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	223f      	movs	r2, #63	@ 0x3f
 800c5d2:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c5d6:	e057      	b.n	800c688 <initial_setup+0x4f4>
    case (14*14-1):
      cinfo->block_size = 14;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	220e      	movs	r2, #14
 800c5dc:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a04      	ldr	r2, [pc, #16]	@ (800c5f4 <initial_setup+0x460>)
 800c5e4:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	223f      	movs	r2, #63	@ 0x3f
 800c5ec:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c5f0:	e04a      	b.n	800c688 <initial_setup+0x4f4>
 800c5f2:	bf00      	nop
 800c5f4:	08024410 	.word	0x08024410
 800c5f8:	080248ac 	.word	0x080248ac
 800c5fc:	08024848 	.word	0x08024848
 800c600:	080247c8 	.word	0x080247c8
 800c604:	08024724 	.word	0x08024724
 800c608:	08024654 	.word	0x08024654
 800c60c:	08024550 	.word	0x08024550
    case (15*15-1):
      cinfo->block_size = 15;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	220f      	movs	r2, #15
 800c614:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a72      	ldr	r2, [pc, #456]	@ (800c7e4 <initial_setup+0x650>)
 800c61c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	223f      	movs	r2, #63	@ 0x3f
 800c624:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c628:	e02e      	b.n	800c688 <initial_setup+0x4f4>
    case (16*16-1):
      cinfo->block_size = 16;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2210      	movs	r2, #16
 800c62e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a6b      	ldr	r2, [pc, #428]	@ (800c7e4 <initial_setup+0x650>)
 800c636:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	223f      	movs	r2, #63	@ 0x3f
 800c63e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
      break;
 800c642:	e021      	b.n	800c688 <initial_setup+0x4f4>
    default:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2211      	movs	r2, #17
 800c64a:	615a      	str	r2, [r3, #20]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	f8d2 2198 	ldr.w	r2, [r2, #408]	@ 0x198
 800c656:	619a      	str	r2, [r3, #24]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	f8d2 219c 	ldr.w	r2, [r2, #412]	@ 0x19c
 800c662:	61da      	str	r2, [r3, #28]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	f8d2 21a0 	ldr.w	r2, [r2, #416]	@ 0x1a0
 800c66e:	621a      	str	r2, [r3, #32]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	f8d2 21a4 	ldr.w	r2, [r2, #420]	@ 0x1a4
 800c67a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	4798      	blx	r3
	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
      break;
 800c686:	bf00      	nop
   * In the full decompressor,
   * this will be overridden by jpeg_calc_output_dimensions in jdmaster.c;
   * but in the transcoder,
   * jpeg_calc_output_dimensions is not used, so we must do it here.
   */
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800c6aa:	60bb      	str	r3, [r7, #8]
 800c6ac:	e065      	b.n	800c77a <initial_setup+0x5e6>
       ci++, compptr++) {
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	625a      	str	r2, [r3, #36]	@ 0x24
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800c6dc:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	f015 faf1 	bl	8021cc8 <jdiv_round_up>
 800c6e6:	4603      	mov	r3, r0
    compptr->width_in_blocks = (JDIMENSION)
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	61da      	str	r2, [r3, #28]
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a1b      	ldr	r3, [r3, #32]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800c708:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c70c:	4619      	mov	r1, r3
 800c70e:	f015 fadb 	bl	8021cc8 <jdiv_round_up>
 800c712:	4603      	mov	r3, r0
    compptr->height_in_blocks = (JDIMENSION)
 800c714:	461a      	mov	r2, r3
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	621a      	str	r2, [r3, #32]
     * jdmaster.c if we are doing full decompression.  The transcoder library
     * doesn't use these values, but the calling application might.
     */
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	461a      	mov	r2, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	fb03 f202 	mul.w	r2, r3, r2
		    (long) cinfo->max_h_samp_factor);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f015 fac9 	bl	8021cc8 <jdiv_round_up>
 800c736:	4603      	mov	r3, r0
    compptr->downsampled_width = (JDIMENSION)
 800c738:	461a      	mov	r2, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	62da      	str	r2, [r3, #44]	@ 0x2c
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	461a      	mov	r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	fb03 f202 	mul.w	r2, r3, r2
		    (long) cinfo->max_v_samp_factor);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f015 fab7 	bl	8021cc8 <jdiv_round_up>
 800c75a:	4603      	mov	r3, r0
    compptr->downsampled_height = (JDIMENSION)
 800c75c:	461a      	mov	r2, r3
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Mark component needed, until color conversion says otherwise */
    compptr->component_needed = TRUE;
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2201      	movs	r2, #1
 800c766:	635a      	str	r2, [r3, #52]	@ 0x34
    /* Mark no quantization table yet saved for component */
    compptr->quant_table = NULL;
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2200      	movs	r2, #0
 800c76c:	651a      	str	r2, [r3, #80]	@ 0x50
       ci++, compptr++) {
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3301      	adds	r3, #1
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	3358      	adds	r3, #88	@ 0x58
 800c778:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	429a      	cmp	r2, r3
 800c782:	db94      	blt.n	800c6ae <initial_setup+0x51a>
  }

  /* Compute number of fully interleaved MCU rows. */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6a1b      	ldr	r3, [r3, #32]
 800c788:	4618      	mov	r0, r3
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800c796:	fb02 f303 	mul.w	r3, r2, r3
    jdiv_round_up((long) cinfo->image_height,
 800c79a:	4619      	mov	r1, r3
 800c79c:	f015 fa94 	bl	8021cc8 <jdiv_round_up>
 800c7a0:	4603      	mov	r3, r0
  cinfo->total_iMCU_rows = (JDIMENSION)
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

  /* Decide whether file contains multiple scans */
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	db04      	blt.n	800c7c2 <initial_setup+0x62e>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d005      	beq.n	800c7ce <initial_setup+0x63a>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	611a      	str	r2, [r3, #16]
 800c7cc:	e005      	b.n	800c7da <initial_setup+0x646>
  else
    cinfo->inputctl->has_multiple_scans = FALSE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	611a      	str	r2, [r3, #16]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	08024410 	.word	0x08024410

0800c7e8 <per_scan_setup>:

LOCAL(void)
per_scan_setup (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d139      	bne.n	800c86e <per_scan_setup+0x86>
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800c800:	60bb      	str	r3, [r7, #8]
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	69da      	ldr	r2, [r3, #28]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	6a1a      	ldr	r2, [r3, #32]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2201      	movs	r2, #1
 800c81a:	639a      	str	r2, [r3, #56]	@ 0x38
    compptr->MCU_height = 1;
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2201      	movs	r2, #1
 800c820:	63da      	str	r2, [r3, #60]	@ 0x3c
    compptr->MCU_blocks = 1;
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2201      	movs	r2, #1
 800c826:	641a      	str	r2, [r3, #64]	@ 0x40
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	645a      	str	r2, [r3, #68]	@ 0x44
    compptr->last_col_width = 1;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	2201      	movs	r2, #1
 800c834:	649a      	str	r2, [r3, #72]	@ 0x48
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	68d2      	ldr	r2, [r2, #12]
 800c83e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c842:	fb01 f202 	mul.w	r2, r1, r2
 800c846:	1a9b      	subs	r3, r3, r2
 800c848:	60fb      	str	r3, [r7, #12]
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d102      	bne.n	800c856 <per_scan_setup+0x6e>
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	60fb      	str	r3, [r7, #12]
    compptr->last_row_height = tmp;
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	68fa      	ldr	r2, [r7, #12]
 800c85a:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    cinfo->MCU_membership[0] = 0;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }
}
 800c86c:	e0bc      	b.n	800c9e8 <per_scan_setup+0x200>
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800c874:	2b00      	cmp	r3, #0
 800c876:	dd04      	ble.n	800c882 <per_scan_setup+0x9a>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800c87e:	2b04      	cmp	r3, #4
 800c880:	dd12      	ble.n	800c8a8 <per_scan_setup+0xc0>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	221b      	movs	r2, #27
 800c888:	615a      	str	r2, [r3, #20]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	f8d2 2150 	ldr.w	r2, [r2, #336]	@ 0x150
 800c894:	619a      	str	r2, [r3, #24]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2204      	movs	r2, #4
 800c89c:	61da      	str	r2, [r3, #28]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	4798      	blx	r3
      jdiv_round_up((long) cinfo->image_width,
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	69db      	ldr	r3, [r3, #28]
 800c8ac:	4618      	mov	r0, r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800c8ba:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width,
 800c8be:	4619      	mov	r1, r3
 800c8c0:	f015 fa02 	bl	8021cc8 <jdiv_round_up>
 800c8c4:	4603      	mov	r3, r0
    cinfo->MCUs_per_row = (JDIMENSION)
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
      jdiv_round_up((long) cinfo->image_height,
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
 800c8d2:	4618      	mov	r0, r3
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800c8e0:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height,
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	f015 f9ef 	bl	8021cc8 <jdiv_round_up>
 800c8ea:	4603      	mov	r3, r0
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
    cinfo->blocks_in_MCU = 0;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	617b      	str	r3, [r7, #20]
 800c900:	e06c      	b.n	800c9dc <per_scan_setup+0x1f4>
      compptr = cinfo->cur_comp_info[ci];
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	3354      	adds	r3, #84	@ 0x54
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	60bb      	str	r3, [r7, #8]
      compptr->MCU_width = compptr->h_samp_factor;
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	689a      	ldr	r2, [r3, #8]
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	639a      	str	r2, [r3, #56]	@ 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	63da      	str	r2, [r3, #60]	@ 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c928:	fb03 f202 	mul.w	r2, r3, r2
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	641a      	str	r2, [r3, #64]	@ 0x40
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c938:	fb03 f202 	mul.w	r2, r3, r2
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	645a      	str	r2, [r3, #68]	@ 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	69db      	ldr	r3, [r3, #28]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c948:	fbb3 f1f2 	udiv	r1, r3, r2
 800c94c:	fb01 f202 	mul.w	r2, r1, r2
 800c950:	1a9b      	subs	r3, r3, r2
 800c952:	60fb      	str	r3, [r7, #12]
      if (tmp == 0) tmp = compptr->MCU_width;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d102      	bne.n	800c960 <per_scan_setup+0x178>
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c95e:	60fb      	str	r3, [r7, #12]
      compptr->last_col_width = tmp;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	649a      	str	r2, [r3, #72]	@ 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c96e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c972:	fb01 f202 	mul.w	r2, r1, r2
 800c976:	1a9b      	subs	r3, r3, r2
 800c978:	60fb      	str	r3, [r7, #12]
      if (tmp == 0) tmp = compptr->MCU_height;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d102      	bne.n	800c986 <per_scan_setup+0x19e>
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c984:	60fb      	str	r3, [r7, #12]
      compptr->last_row_height = tmp;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	64da      	str	r2, [r3, #76]	@ 0x4c
      mcublks = compptr->MCU_blocks;
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c990:	613b      	str	r3, [r7, #16]
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	4413      	add	r3, r2
 800c99c:	2b0a      	cmp	r3, #10
 800c99e:	dd15      	ble.n	800c9cc <per_scan_setup+0x1e4>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	220e      	movs	r2, #14
 800c9a6:	615a      	str	r2, [r3, #20]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	4798      	blx	r3
      while (mcublks-- > 0) {
 800c9b2:	e00b      	b.n	800c9cc <per_scan_setup+0x1e4>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800c9ba:	1c59      	adds	r1, r3, #1
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	f8c2 116c 	str.w	r1, [r2, #364]	@ 0x16c
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	335c      	adds	r3, #92	@ 0x5c
 800c9c6:	6979      	ldr	r1, [r7, #20]
 800c9c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      while (mcublks-- > 0) {
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	1e5a      	subs	r2, r3, #1
 800c9d0:	613a      	str	r2, [r7, #16]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dcee      	bgt.n	800c9b4 <per_scan_setup+0x1cc>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	617b      	str	r3, [r7, #20]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	db8c      	blt.n	800c902 <per_scan_setup+0x11a>
}
 800c9e8:	bf00      	nop
 800c9ea:	3718      	adds	r7, #24
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <latch_quant_tables>:
 * not at the current Q-table slots.
 */

LOCAL(void)
latch_quant_tables (j_decompress_ptr cinfo)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  int ci, qtblno;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	e043      	b.n	800ca86 <latch_quant_tables+0x96>
    compptr = cinfo->cur_comp_info[ci];
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	3354      	adds	r3, #84	@ 0x54
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	613b      	str	r3, [r7, #16]
    /* No work if we already saved Q-table for this component */
    if (compptr->quant_table != NULL)
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d134      	bne.n	800ca7e <latch_quant_tables+0x8e>
      continue;
    /* Make sure specified quantization table is present */
    qtblno = compptr->quant_tbl_no;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	60fb      	str	r3, [r7, #12]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	db0a      	blt.n	800ca36 <latch_quant_tables+0x46>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b03      	cmp	r3, #3
 800ca24:	dc07      	bgt.n	800ca36 <latch_quant_tables+0x46>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3328      	adds	r3, #40	@ 0x28
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	685b      	ldr	r3, [r3, #4]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10c      	bne.n	800ca50 <latch_quant_tables+0x60>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2236      	movs	r2, #54	@ 0x36
 800ca3c:	615a      	str	r2, [r3, #20]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	619a      	str	r2, [r3, #24]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	4798      	blx	r3
    /* OK, save away the quantization table */
    qtbl = (JQUANT_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2284      	movs	r2, #132	@ 0x84
 800ca58:	2101      	movs	r1, #1
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	4798      	blx	r3
 800ca5e:	60b8      	str	r0, [r7, #8]
				  SIZEOF(JQUANT_TBL));
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3328      	adds	r3, #40	@ 0x28
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4413      	add	r3, r2
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	2284      	movs	r2, #132	@ 0x84
 800ca6e:	4619      	mov	r1, r3
 800ca70:	68b8      	ldr	r0, [r7, #8]
 800ca72:	f015 fab1 	bl	8021fd8 <memcpy>
    compptr->quant_table = qtbl;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	68ba      	ldr	r2, [r7, #8]
 800ca7a:	651a      	str	r2, [r3, #80]	@ 0x50
 800ca7c:	e000      	b.n	800ca80 <latch_quant_tables+0x90>
      continue;
 800ca7e:	bf00      	nop
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	3301      	adds	r3, #1
 800ca84:	617b      	str	r3, [r7, #20]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	dbb5      	blt.n	800c9fe <latch_quant_tables+0xe>
  }
}
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	3718      	adds	r7, #24
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <start_input_pass>:
 * Subsequent calls come from consume_markers, below.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  per_scan_setup(cinfo);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff fe9f 	bl	800c7e8 <per_scan_setup>
  latch_quant_tables(cinfo);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff ffa0 	bl	800c9f0 <latch_quant_tables>
  (*cinfo->entropy->start_pass) (cinfo);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800cad4:	6852      	ldr	r2, [r2, #4]
 800cad6:	601a      	str	r2, [r3, #0]
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <finish_input_pass>:
 * the expected data of the scan.
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  cinfo->inputctl->consume_input = consume_markers;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800caee:	4a04      	ldr	r2, [pc, #16]	@ (800cb00 <finish_input_pass+0x20>)
 800caf0:	601a      	str	r2, [r3, #0]
}
 800caf2:	bf00      	nop
 800caf4:	370c      	adds	r7, #12
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	0800cb05 	.word	0x0800cb05

0800cb04 <consume_markers>:
 * read_markers is processed and then skipped for other markers.
 */

METHODDEF(int)
consume_markers (j_decompress_ptr cinfo)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800cb12:	60fb      	str	r3, [r7, #12]
  int val;

  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	695b      	ldr	r3, [r3, #20]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <consume_markers+0x1c>
    return JPEG_REACHED_EOI;
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	e06e      	b.n	800cbfe <consume_markers+0xfa>

  for (;;) {			/* Loop to pass pseudo SOS marker */
    val = (*cinfo->marker->read_markers) (cinfo);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
 800cb2c:	60b8      	str	r0, [r7, #8]

    switch (val) {
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d037      	beq.n	800cba4 <consume_markers+0xa0>
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	dc5d      	bgt.n	800cbf6 <consume_markers+0xf2>
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d058      	beq.n	800cbf2 <consume_markers+0xee>
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d157      	bne.n	800cbf6 <consume_markers+0xf2>
    case JPEG_REACHED_SOS:	/* Found SOS */
      if (inputctl->inheaders) { /* 1st SOS */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	699b      	ldr	r3, [r3, #24]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d013      	beq.n	800cb76 <consume_markers+0x72>
	if (inputctl->inheaders == 1)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	699b      	ldr	r3, [r3, #24]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d102      	bne.n	800cb5c <consume_markers+0x58>
	  initial_setup(cinfo);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7ff fb1c 	bl	800c194 <initial_setup>
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d103      	bne.n	800cb6e <consume_markers+0x6a>
	  inputctl->inheaders = 2;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2202      	movs	r2, #2
 800cb6a:	619a      	str	r2, [r3, #24]
	  break;
 800cb6c:	e046      	b.n	800cbfc <consume_markers+0xf8>
	}
	inputctl->inheaders = 0;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	619a      	str	r2, [r3, #24]
 800cb74:	e014      	b.n	800cba0 <consume_markers+0x9c>
	/* Note: start_input_pass must be called by jdmaster.c
	 * before any more input can be consumed.  jdapimin.c is
	 * responsible for enforcing this sequencing.
	 */
      } else {			/* 2nd or later SOS marker */
	if (! inputctl->pub.has_multiple_scans)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	691b      	ldr	r3, [r3, #16]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d108      	bne.n	800cb90 <consume_markers+0x8c>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2224      	movs	r2, #36	@ 0x24
 800cb84:	615a      	str	r2, [r3, #20]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d02f      	beq.n	800cbfa <consume_markers+0xf6>
	  break;
	start_input_pass(cinfo);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff ff7e 	bl	800ca9c <start_input_pass>
      }
      return val;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	e02c      	b.n	800cbfe <consume_markers+0xfa>
    case JPEG_REACHED_EOI:	/* Found EOI */
      inputctl->pub.eoi_reached = TRUE;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2201      	movs	r2, #1
 800cba8:	615a      	str	r2, [r3, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00f      	beq.n	800cbd2 <consume_markers+0xce>
	if (cinfo->marker->saw_SOF)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800cbb8:	691b      	ldr	r3, [r3, #16]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d017      	beq.n	800cbee <consume_markers+0xea>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	223d      	movs	r2, #61	@ 0x3d
 800cbc4:	615a      	str	r2, [r3, #20]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	4798      	blx	r3
 800cbd0:	e00d      	b.n	800cbee <consume_markers+0xea>
      } else {
	/* Prevent infinite loop in coef ctlr's decompress_data routine
	 * if user set output_scan_number larger than number of scans.
	 */
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	dd05      	ble.n	800cbee <consume_markers+0xea>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
      }
      return val;
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	e005      	b.n	800cbfe <consume_markers+0xfa>
    case JPEG_SUSPENDED:
      return val;
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	e003      	b.n	800cbfe <consume_markers+0xfa>
    default:
      return val;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	e001      	b.n	800cbfe <consume_markers+0xfa>
	  break;
 800cbfa:	bf00      	nop
    val = (*cinfo->marker->read_markers) (cinfo);
 800cbfc:	e790      	b.n	800cb20 <consume_markers+0x1c>
    }
  }
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
	...

0800cc08 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800cc16:	60fb      	str	r3, [r7, #12]

  inputctl->pub.consume_input = consume_markers;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	4a0f      	ldr	r2, [pc, #60]	@ (800cc58 <reset_input_controller+0x50>)
 800cc1c:	601a      	str	r2, [r3, #0]
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	611a      	str	r2, [r3, #16]
  inputctl->pub.eoi_reached = FALSE;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	615a      	str	r2, [r3, #20]
  inputctl->inheaders = 1;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	0800cb05 	.word	0x0800cb05

0800cc5c <jinit_input_controller>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_input_controller (j_decompress_ptr cinfo)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	221c      	movs	r2, #28
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
 800cc72:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4a0c      	ldr	r2, [pc, #48]	@ (800ccb0 <jinit_input_controller+0x54>)
 800cc80:	601a      	str	r2, [r3, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	4a0b      	ldr	r2, [pc, #44]	@ (800ccb4 <jinit_input_controller+0x58>)
 800cc86:	605a      	str	r2, [r3, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4a0b      	ldr	r2, [pc, #44]	@ (800ccb8 <jinit_input_controller+0x5c>)
 800cc8c:	609a      	str	r2, [r3, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4a0a      	ldr	r2, [pc, #40]	@ (800ccbc <jinit_input_controller+0x60>)
 800cc92:	60da      	str	r2, [r3, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	611a      	str	r2, [r3, #16]
  inputctl->pub.eoi_reached = FALSE;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	615a      	str	r2, [r3, #20]
  inputctl->inheaders = 1;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2201      	movs	r2, #1
 800cca4:	619a      	str	r2, [r3, #24]
}
 800cca6:	bf00      	nop
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	0800cb05 	.word	0x0800cb05
 800ccb4:	0800cc09 	.word	0x0800cc09
 800ccb8:	0800ca9d 	.word	0x0800ca9d
 800ccbc:	0800cae1 	.word	0x0800cae1

0800ccc0 <alloc_funny_pointers>:
LOCAL(void)
alloc_funny_pointers (j_decompress_ptr cinfo)
/* Allocate space for the funny pointer lists.
 * This is done only once, not once per pass.
 */
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b088      	sub	sp, #32
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800ccce:	617b      	str	r3, [r7, #20]
  int ci, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800ccd6:	613b      	str	r3, [r7, #16]

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main->xbuffer[0] = (JSAMPIMAGE)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cce2:	00d2      	lsls	r2, r2, #3
 800cce4:	2101      	movs	r1, #1
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	4798      	blx	r3
 800ccea:	4602      	mov	r2, r0
  main->xbuffer[0] = (JSAMPIMAGE)
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	639a      	str	r2, [r3, #56]	@ 0x38
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	441a      	add	r2, r3
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd00:	2300      	movs	r3, #0
 800cd02:	61fb      	str	r3, [r7, #28]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cd0a:	61bb      	str	r3, [r7, #24]
 800cd0c:	e03a      	b.n	800cd84 <alloc_funny_pointers+0xc4>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800cd16:	fb03 f202 	mul.w	r2, r3, r2
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cd20:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd24:	60fb      	str	r3, [r7, #12]
    /* Get space for pointer lists --- M+4 row groups in each list.
     * We alloc both pointer lists with one call to save a few cycles.
     */
    xbuf = (JSAMPARRAY)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	3204      	adds	r2, #4
 800cd30:	68f9      	ldr	r1, [r7, #12]
 800cd32:	fb01 f202 	mul.w	r2, r1, r2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cd36:	00d2      	lsls	r2, r2, #3
 800cd38:	2101      	movs	r1, #1
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	4798      	blx	r3
 800cd3e:	60b8      	str	r0, [r7, #8]
    xbuf += rgroup;		/* want one row group at negative offsets */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	4413      	add	r3, r2
 800cd48:	60bb      	str	r3, [r7, #8]
    main->xbuffer[0][ci] = xbuf;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	601a      	str	r2, [r3, #0]
    xbuf += rgroup * (M + 4);
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	fb02 f303 	mul.w	r3, r2, r3
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	4413      	add	r3, r2
 800cd68:	60bb      	str	r3, [r7, #8]
    main->xbuffer[1][ci] = xbuf;
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	601a      	str	r2, [r3, #0]
       ci++, compptr++) {
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	61fb      	str	r3, [r7, #28]
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	3358      	adds	r3, #88	@ 0x58
 800cd82:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd88:	69fa      	ldr	r2, [r7, #28]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	dbbf      	blt.n	800cd0e <alloc_funny_pointers+0x4e>
  }
}
 800cd8e:	bf00      	nop
 800cd90:	bf00      	nop
 800cd92:	3720      	adds	r7, #32
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <make_funny_pointers>:
 * The actual workspace is already allocated (in main->buffer),
 * and the space for the pointer lists is allocated too.
 * This routine just fills in the curiously ordered lists.
 * This will be repeated at the beginning of each pass.
 */
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b08d      	sub	sp, #52	@ 0x34
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800cda6:	623b      	str	r3, [r7, #32]
  int ci, i, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800cdae:	61fb      	str	r3, [r7, #28]
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cdba:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdbc:	e08b      	b.n	800ced6 <make_funny_pointers+0x13e>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800cdc6:	fb03 f202 	mul.w	r2, r3, r2
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cdd0:	fb92 f3f3 	sdiv	r3, r2, r3
 800cdd4:	61bb      	str	r3, [r7, #24]
    xbuf0 = main->xbuffer[0][ci];
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	617b      	str	r3, [r7, #20]
    xbuf1 = main->xbuffer[1][ci];
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	613b      	str	r3, [r7, #16]
    /* First copy the workspace pointers as-is */
    buf = main->buffer[ci];
 800cdf2:	6a3b      	ldr	r3, [r7, #32]
 800cdf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdf6:	3202      	adds	r2, #2
 800cdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdfc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800cdfe:	2300      	movs	r3, #0
 800ce00:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce02:	e012      	b.n	800ce2a <make_funny_pointers+0x92>
      xbuf0[i] = xbuf1[i] = buf[i];
 800ce04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	441a      	add	r2, r3
 800ce0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	6939      	ldr	r1, [r7, #16]
 800ce12:	440b      	add	r3, r1
 800ce14:	6812      	ldr	r2, [r2, #0]
 800ce16:	601a      	str	r2, [r3, #0]
 800ce18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce1a:	0092      	lsls	r2, r2, #2
 800ce1c:	6979      	ldr	r1, [r7, #20]
 800ce1e:	440a      	add	r2, r1
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	6013      	str	r3, [r2, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800ce24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce26:	3301      	adds	r3, #1
 800ce28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	3302      	adds	r3, #2
 800ce2e:	69ba      	ldr	r2, [r7, #24]
 800ce30:	fb02 f303 	mul.w	r3, r2, r3
 800ce34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce36:	429a      	cmp	r2, r3
 800ce38:	dbe4      	blt.n	800ce04 <make_funny_pointers+0x6c>
    }
    /* In the second list, put the last four row groups in swapped order */
    for (i = 0; i < rgroup * 2; i++) {
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce3e:	e02c      	b.n	800ce9a <make_funny_pointers+0x102>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	69fa      	ldr	r2, [r7, #28]
 800ce44:	fb03 f202 	mul.w	r2, r3, r2
 800ce48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4a:	4413      	add	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	441a      	add	r2, r3
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	3b02      	subs	r3, #2
 800ce56:	69b9      	ldr	r1, [r7, #24]
 800ce58:	fb03 f101 	mul.w	r1, r3, r1
 800ce5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5e:	440b      	add	r3, r1
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	6939      	ldr	r1, [r7, #16]
 800ce64:	440b      	add	r3, r1
 800ce66:	6812      	ldr	r2, [r2, #0]
 800ce68:	601a      	str	r2, [r3, #0]
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	3b02      	subs	r3, #2
 800ce6e:	69ba      	ldr	r2, [r7, #24]
 800ce70:	fb03 f202 	mul.w	r2, r3, r2
 800ce74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce76:	4413      	add	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	441a      	add	r2, r3
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	69f9      	ldr	r1, [r7, #28]
 800ce82:	fb03 f101 	mul.w	r1, r3, r1
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	440b      	add	r3, r1
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	6939      	ldr	r1, [r7, #16]
 800ce8e:	440b      	add	r3, r1
 800ce90:	6812      	ldr	r2, [r2, #0]
 800ce92:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup * 2; i++) {
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	3301      	adds	r3, #1
 800ce98:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	005b      	lsls	r3, r3, #1
 800ce9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cea0:	429a      	cmp	r2, r3
 800cea2:	dbcd      	blt.n	800ce40 <make_funny_pointers+0xa8>
    /* The wraparound pointers at top and bottom will be filled later
     * (see set_wraparound_pointers, below).  Initially we want the "above"
     * pointers to duplicate the first actual data line.  This only needs
     * to happen in xbuffer[0].
     */
    for (i = 0; i < rgroup; i++) {
 800cea4:	2300      	movs	r3, #0
 800cea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cea8:	e00b      	b.n	800cec2 <make_funny_pointers+0x12a>
      xbuf0[i - rgroup] = xbuf0[0];
 800ceaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	697a      	ldr	r2, [r7, #20]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup; i++) {
 800cebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cebe:	3301      	adds	r3, #1
 800cec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	dbef      	blt.n	800ceaa <make_funny_pointers+0x112>
       ci++, compptr++) {
 800ceca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cecc:	3301      	adds	r3, #1
 800cece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced2:	3358      	adds	r3, #88	@ 0x58
 800ced4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cedc:	429a      	cmp	r2, r3
 800cede:	f6ff af6e 	blt.w	800cdbe <make_funny_pointers+0x26>
    }
  }
}
 800cee2:	bf00      	nop
 800cee4:	bf00      	nop
 800cee6:	3734      	adds	r7, #52	@ 0x34
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <set_wraparound_pointers>:
LOCAL(void)
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
 800cef0:	b480      	push	{r7}
 800cef2:	b08b      	sub	sp, #44	@ 0x2c
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800cefe:	61bb      	str	r3, [r7, #24]
  int ci, i, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800cf06:	617b      	str	r3, [r7, #20]
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	e06d      	b.n	800cff2 <set_wraparound_pointers+0x102>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	69fa      	ldr	r2, [r7, #28]
 800cf1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800cf1e:	fb03 f202 	mul.w	r2, r3, r2
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800cf28:	fb92 f3f3 	sdiv	r3, r2, r3
 800cf2c:	613b      	str	r3, [r7, #16]
    xbuf0 = main->xbuffer[0][ci];
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	4413      	add	r3, r2
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	60fb      	str	r3, [r7, #12]
    xbuf1 = main->xbuffer[1][ci];
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < rgroup; i++) {
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	623b      	str	r3, [r7, #32]
 800cf4e:	e046      	b.n	800cfde <set_wraparound_pointers+0xee>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	3301      	adds	r3, #1
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	fb03 f202 	mul.w	r2, r3, r2
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	441a      	add	r2, r3
 800cf64:	6a39      	ldr	r1, [r7, #32]
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	1acb      	subs	r3, r1, r3
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	68f9      	ldr	r1, [r7, #12]
 800cf6e:	440b      	add	r3, r1
 800cf70:	6812      	ldr	r2, [r2, #0]
 800cf72:	601a      	str	r2, [r3, #0]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	3301      	adds	r3, #1
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	fb03 f202 	mul.w	r2, r3, r2
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	4413      	add	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	441a      	add	r2, r3
 800cf88:	6a39      	ldr	r1, [r7, #32]
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	1acb      	subs	r3, r1, r3
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	440b      	add	r3, r1
 800cf94:	6812      	ldr	r2, [r2, #0]
 800cf96:	601a      	str	r2, [r3, #0]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800cf98:	6a3b      	ldr	r3, [r7, #32]
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	441a      	add	r2, r3
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	3302      	adds	r3, #2
 800cfa4:	6939      	ldr	r1, [r7, #16]
 800cfa6:	fb03 f101 	mul.w	r1, r3, r1
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	440b      	add	r3, r1
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	68f9      	ldr	r1, [r7, #12]
 800cfb2:	440b      	add	r3, r1
 800cfb4:	6812      	ldr	r2, [r2, #0]
 800cfb6:	601a      	str	r2, [r3, #0]
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	441a      	add	r2, r3
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	3302      	adds	r3, #2
 800cfc4:	6939      	ldr	r1, [r7, #16]
 800cfc6:	fb03 f101 	mul.w	r1, r3, r1
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	440b      	add	r3, r1
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	68b9      	ldr	r1, [r7, #8]
 800cfd2:	440b      	add	r3, r1
 800cfd4:	6812      	ldr	r2, [r2, #0]
 800cfd6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup; i++) {
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	623b      	str	r3, [r7, #32]
 800cfde:	6a3a      	ldr	r2, [r7, #32]
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	dbb4      	blt.n	800cf50 <set_wraparound_pointers+0x60>
       ci++, compptr++) {
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	3301      	adds	r3, #1
 800cfea:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	3358      	adds	r3, #88	@ 0x58
 800cff0:	61fb      	str	r3, [r7, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff8:	429a      	cmp	r2, r3
 800cffa:	db8c      	blt.n	800cf16 <set_wraparound_pointers+0x26>
    }
  }
}
 800cffc:	bf00      	nop
 800cffe:	bf00      	nop
 800d000:	372c      	adds	r7, #44	@ 0x2c
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <set_bottom_pointers>:
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
 800d00a:	b480      	push	{r7}
 800d00c:	b08b      	sub	sp, #44	@ 0x2c
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800d018:	617b      	str	r3, [r7, #20]
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d01a:	2300      	movs	r3, #0
 800d01c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d024:	61bb      	str	r3, [r7, #24]
 800d026:	e052      	b.n	800d0ce <set_bottom_pointers+0xc4>
       ci++, compptr++) {
    /* Count sample rows in one iMCU row and in one row group */
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800d028:	69bb      	ldr	r3, [r7, #24]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	69ba      	ldr	r2, [r7, #24]
 800d02e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d030:	fb02 f303 	mul.w	r3, r2, r3
 800d034:	613b      	str	r3, [r7, #16]
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d03c:	693a      	ldr	r2, [r7, #16]
 800d03e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d042:	60fb      	str	r3, [r7, #12]
    /* Count nondummy sample rows remaining for this component */
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d04e:	fb01 f202 	mul.w	r2, r1, r2
 800d052:	1a9b      	subs	r3, r3, r2
 800d054:	61fb      	str	r3, [r7, #28]
    if (rows_left == 0) rows_left = iMCUheight;
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d101      	bne.n	800d060 <set_bottom_pointers+0x56>
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	61fb      	str	r3, [r7, #28]
    /* Count nondummy row groups.  Should get same answer for each component,
     * so we need only do it once.
     */
    if (ci == 0) {
 800d060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d062:	2b00      	cmp	r3, #0
 800d064:	d108      	bne.n	800d078 <set_bottom_pointers+0x6e>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	1e5a      	subs	r2, r3, #1
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	fb92 f3f3 	sdiv	r3, r2, r3
 800d070:	3301      	adds	r3, #1
 800d072:	461a      	mov	r2, r3
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Duplicate the last real sample row rgroup*2 times; this pads out the
     * last partial rowgroup and ensures at least one full rowgroup of context.
     */
    xbuf = main->xbuffer[main->whichptr][ci];
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	320e      	adds	r2, #14
 800d080:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < rgroup * 2; i++) {
 800d08e:	2300      	movs	r3, #0
 800d090:	623b      	str	r3, [r7, #32]
 800d092:	e011      	b.n	800d0b8 <set_bottom_pointers+0xae>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d09a:	3b01      	subs	r3, #1
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	441a      	add	r2, r3
 800d0a2:	69f9      	ldr	r1, [r7, #28]
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	440b      	add	r3, r1
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	440b      	add	r3, r1
 800d0ae:	6812      	ldr	r2, [r2, #0]
 800d0b0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup * 2; i++) {
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	623b      	str	r3, [r7, #32]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	005b      	lsls	r3, r3, #1
 800d0bc:	6a3a      	ldr	r2, [r7, #32]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	dbe8      	blt.n	800d094 <set_bottom_pointers+0x8a>
       ci++, compptr++) {
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0c8:	69bb      	ldr	r3, [r7, #24]
 800d0ca:	3358      	adds	r3, #88	@ 0x58
 800d0cc:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	dba7      	blt.n	800d028 <set_bottom_pointers+0x1e>
    }
  }
}
 800d0d8:	bf00      	nop
 800d0da:	bf00      	nop
 800d0dc:	372c      	adds	r7, #44	@ 0x2c
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
	...

0800d0e8 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800d0fa:	60fb      	str	r3, [r7, #12]

  switch (pass_mode) {
 800d0fc:	78fb      	ldrb	r3, [r7, #3]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d002      	beq.n	800d108 <start_pass_main+0x20>
 800d102:	2b02      	cmp	r3, #2
 800d104:	d020      	beq.n	800d148 <start_pass_main+0x60>
 800d106:	e023      	b.n	800d150 <start_pass_main+0x68>
  case JBUF_PASS_THRU:
    if (cinfo->upsample->need_context_rows) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00f      	beq.n	800d134 <start_pass_main+0x4c>
      main->pub.process_data = process_data_context_main;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	4a15      	ldr	r2, [pc, #84]	@ (800d16c <start_pass_main+0x84>)
 800d118:	605a      	str	r2, [r3, #4]
      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7ff fe3c 	bl	800cd98 <make_funny_pointers>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	641a      	str	r2, [r3, #64]	@ 0x40
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	645a      	str	r2, [r3, #68]	@ 0x44
      main->iMCU_row_ctr = 0;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d132:	e002      	b.n	800d13a <start_pass_main+0x52>
    } else {
      /* Simple case with no context needed */
      main->pub.process_data = process_data_simple_main;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	4a0e      	ldr	r2, [pc, #56]	@ (800d170 <start_pass_main+0x88>)
 800d138:	605a      	str	r2, [r3, #4]
    }
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	631a      	str	r2, [r3, #48]	@ 0x30
    main->rowgroup_ctr = 0;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	635a      	str	r2, [r3, #52]	@ 0x34
    break;
 800d146:	e00d      	b.n	800d164 <start_pass_main+0x7c>
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4a0a      	ldr	r2, [pc, #40]	@ (800d174 <start_pass_main+0x8c>)
 800d14c:	605a      	str	r2, [r3, #4]
    break;
 800d14e:	e009      	b.n	800d164 <start_pass_main+0x7c>
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2203      	movs	r2, #3
 800d156:	615a      	str	r2, [r3, #20]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	4798      	blx	r3
    break;
 800d162:	bf00      	nop
  }
}
 800d164:	bf00      	nop
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	0800d203 	.word	0x0800d203
 800d170:	0800d179 	.word	0x0800d179
 800d174:	0800d379 	.word	0x0800d379

0800d178 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d178:	b590      	push	{r4, r7, lr}
 800d17a:	b08b      	sub	sp, #44	@ 0x2c
 800d17c:	af04      	add	r7, sp, #16
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800d18c:	617b      	str	r3, [r7, #20]
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10e      	bne.n	800d1b4 <process_data_simple_main+0x3c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	697a      	ldr	r2, [r7, #20]
 800d1a0:	3208      	adds	r2, #8
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	4798      	blx	r3
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d025      	beq.n	800d1fa <process_data_simple_main+0x82>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d1ba:	613b      	str	r3, [r7, #16]
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800d1c2:	685c      	ldr	r4, [r3, #4]
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	f103 0108 	add.w	r1, r3, #8
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	9302      	str	r3, [sp, #8]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	9301      	str	r3, [sp, #4]
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	47a0      	blx	r4
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d807      	bhi.n	800d1fc <process_data_simple_main+0x84>
    main->buffer_full = FALSE;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	631a      	str	r2, [r3, #48]	@ 0x30
    main->rowgroup_ctr = 0;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	635a      	str	r2, [r3, #52]	@ 0x34
 800d1f8:	e000      	b.n	800d1fc <process_data_simple_main+0x84>
      return;			/* suspension forced, can do nothing more */
 800d1fa:	bf00      	nop
  }
}
 800d1fc:	371c      	adds	r7, #28
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd90      	pop	{r4, r7, pc}

0800d202 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d202:	b590      	push	{r4, r7, lr}
 800d204:	b08b      	sub	sp, #44	@ 0x2c
 800d206:	af04      	add	r7, sp, #16
 800d208:	60f8      	str	r0, [r7, #12]
 800d20a:	60b9      	str	r1, [r7, #8]
 800d20c:	607a      	str	r2, [r7, #4]
 800d20e:	603b      	str	r3, [r7, #0]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800d216:	617b      	str	r3, [r7, #20]

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d118      	bne.n	800d252 <process_data_context_main+0x50>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800d226:	68db      	ldr	r3, [r3, #12]
					   main->xbuffer[main->whichptr]))
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d22c:	697a      	ldr	r2, [r7, #20]
 800d22e:	310e      	adds	r1, #14
 800d230:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d234:	4611      	mov	r1, r2
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	4798      	blx	r3
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 8091 	beq.w	800d364 <process_data_context_main+0x162>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	2201      	movs	r2, #1
 800d246:	631a      	str	r2, [r3, #48]	@ 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d256:	2b02      	cmp	r3, #2
 800d258:	d007      	beq.n	800d26a <process_data_context_main+0x68>
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	f300 8089 	bgt.w	800d372 <process_data_context_main+0x170>
 800d260:	2b00      	cmp	r3, #0
 800d262:	d028      	beq.n	800d2b6 <process_data_context_main+0xb4>
 800d264:	2b01      	cmp	r3, #1
 800d266:	d03d      	beq.n	800d2e4 <process_data_context_main+0xe2>
 800d268:	e083      	b.n	800d372 <process_data_context_main+0x170>
  case CTX_POSTPONED_ROW:
    /* Call postprocessor using previously set pointers for postponed row */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800d270:	685c      	ldr	r4, [r3, #4]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	320e      	adds	r2, #14
 800d27a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	9302      	str	r3, [sp, #8]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	4603      	mov	r3, r0
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	47a0      	blx	r4
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d360      	bcc.n	800d368 <process_data_context_main+0x166>
      return;			/* Need to suspend */
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	645a      	str	r2, [r3, #68]	@ 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d95a      	bls.n	800d36c <process_data_context_main+0x16a>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	635a      	str	r2, [r3, #52]	@ 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d102      	bne.n	800d2de <process_data_context_main+0xdc>
      set_bottom_pointers(cinfo);
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f7ff fe96 	bl	800d00a <set_bottom_pointers>
    main->context_state = CTX_PROCESS_IMCU;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	645a      	str	r2, [r3, #68]	@ 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800d2ea:	685c      	ldr	r4, [r3, #4]
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	320e      	adds	r2, #14
 800d2f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	9302      	str	r3, [sp, #8]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	4603      	mov	r3, r0
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	47a0      	blx	r4
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d327      	bcc.n	800d370 <process_data_context_main+0x16e>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d324:	2b01      	cmp	r3, #1
 800d326:	d102      	bne.n	800d32e <process_data_context_main+0x12c>
      set_wraparound_pointers(cinfo);
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f7ff fde1 	bl	800cef0 <set_wraparound_pointers>
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d332:	f083 0201 	eor.w	r2, r3, #1
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	641a      	str	r2, [r3, #64]	@ 0x40
    main->buffer_full = FALSE;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2200      	movs	r2, #0
 800d33e:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d346:	3301      	adds	r3, #1
 800d348:	461a      	mov	r2, r3
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	635a      	str	r2, [r3, #52]	@ 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d354:	3302      	adds	r3, #2
 800d356:	461a      	mov	r2, r3
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	649a      	str	r2, [r3, #72]	@ 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2202      	movs	r2, #2
 800d360:	645a      	str	r2, [r3, #68]	@ 0x44
 800d362:	e006      	b.n	800d372 <process_data_context_main+0x170>
      return;			/* suspension forced, can do nothing more */
 800d364:	bf00      	nop
 800d366:	e004      	b.n	800d372 <process_data_context_main+0x170>
      return;			/* Need to suspend */
 800d368:	bf00      	nop
 800d36a:	e002      	b.n	800d372 <process_data_context_main+0x170>
      return;			/* Postprocessor exactly filled output buf */
 800d36c:	bf00      	nop
 800d36e:	e000      	b.n	800d372 <process_data_context_main+0x170>
      return;			/* Need to suspend */
 800d370:	bf00      	nop
  }
}
 800d372:	371c      	adds	r7, #28
 800d374:	46bd      	mov	sp, r7
 800d376:	bd90      	pop	{r4, r7, pc}

0800d378 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800d378:	b590      	push	{r4, r7, lr}
 800d37a:	b089      	sub	sp, #36	@ 0x24
 800d37c:	af04      	add	r7, sp, #16
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
 800d384:	603b      	str	r3, [r7, #0]
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800d38c:	685c      	ldr	r4, [r3, #4]
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	9302      	str	r3, [sp, #8]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	2300      	movs	r3, #0
 800d39c:	2200      	movs	r2, #0
 800d39e:	2100      	movs	r1, #0
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800d3a4:	bf00      	nop
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd90      	pop	{r4, r7, pc}

0800d3ac <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800d3ac:	b590      	push	{r4, r7, lr}
 800d3ae:	b089      	sub	sp, #36	@ 0x24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2250      	movs	r2, #80	@ 0x50
 800d3be:	2101      	movs	r1, #1
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	4798      	blx	r3
 800d3c4:	6138      	str	r0, [r7, #16]
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
  main->pub.start_pass = start_pass_main;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	4a34      	ldr	r2, [pc, #208]	@ (800d4a4 <jinit_d_main_controller+0xf8>)
 800d3d2:	601a      	str	r2, [r3, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d008      	beq.n	800d3ec <jinit_d_main_controller+0x40>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2203      	movs	r2, #3
 800d3e0:	615a      	str	r2, [r3, #20]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d016      	beq.n	800d426 <jinit_d_main_controller+0x7a>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	dc08      	bgt.n	800d414 <jinit_d_main_controller+0x68>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2230      	movs	r2, #48	@ 0x30
 800d408:	615a      	str	r2, [r3, #20]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	4798      	blx	r3
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7ff fc53 	bl	800ccc0 <alloc_funny_pointers>
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d420:	3302      	adds	r3, #2
 800d422:	61bb      	str	r3, [r7, #24]
 800d424:	e003      	b.n	800d42e <jinit_d_main_controller+0x82>
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800d42c:	61bb      	str	r3, [r7, #24]
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d42e:	2300      	movs	r3, #0
 800d430:	61fb      	str	r3, [r7, #28]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	e028      	b.n	800d48e <jinit_d_main_controller+0xe2>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	697a      	ldr	r2, [r7, #20]
 800d442:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d444:	fb03 f202 	mul.w	r2, r3, r2
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d44e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d452:	60fb      	str	r3, [r7, #12]
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	689c      	ldr	r4, [r3, #8]
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	69db      	ldr	r3, [r3, #28]
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d462:	fb02 f103 	mul.w	r1, r2, r3
			 (JDIMENSION) (rgroup * ngroups));
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	69ba      	ldr	r2, [r7, #24]
 800d46a:	fb02 f303 	mul.w	r3, r2, r3
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d46e:	460a      	mov	r2, r1
 800d470:	2101      	movs	r1, #1
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	47a0      	blx	r4
 800d476:	4601      	mov	r1, r0
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	69fa      	ldr	r2, [r7, #28]
 800d47c:	3202      	adds	r2, #2
 800d47e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       ci++, compptr++) {
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	3301      	adds	r3, #1
 800d486:	61fb      	str	r3, [r7, #28]
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	3358      	adds	r3, #88	@ 0x58
 800d48c:	617b      	str	r3, [r7, #20]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d492:	69fa      	ldr	r2, [r7, #28]
 800d494:	429a      	cmp	r2, r3
 800d496:	dbd1      	blt.n	800d43c <jinit_d_main_controller+0x90>
  }
}
 800d498:	bf00      	nop
 800d49a:	bf00      	nop
 800d49c:	3724      	adds	r7, #36	@ 0x24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd90      	pop	{r4, r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	0800d0e9 	.word	0x0800d0e9

0800d4a8 <get_soi>:


LOCAL(boolean)
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  int i;
  
  TRACEMS(cinfo, 1, JTRC_SOI);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2268      	movs	r2, #104	@ 0x68
 800d4b6:	615a      	str	r2, [r3, #20]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	2101      	movs	r1, #1
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	4798      	blx	r3

  if (cinfo->marker->saw_SOI)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d008      	beq.n	800d4e2 <get_soi+0x3a>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	223f      	movs	r2, #63	@ 0x3f
 800d4d6:	615a      	str	r2, [r3, #20]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	4798      	blx	r3

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60fb      	str	r3, [r7, #12]
 800d4e6:	e015      	b.n	800d514 <get_soi+0x6c>
    cinfo->arith_dc_L[i] = 0;
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	33e8      	adds	r3, #232	@ 0xe8
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	701a      	strb	r2, [r3, #0]
    cinfo->arith_dc_U[i] = 1;
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	33f8      	adds	r3, #248	@ 0xf8
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	701a      	strb	r2, [r3, #0]
    cinfo->arith_ac_K[i] = 5;
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	4413      	add	r3, r2
 800d506:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800d50a:	2205      	movs	r2, #5
 800d50c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3301      	adds	r3, #1
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2b0f      	cmp	r3, #15
 800d518:	dde6      	ble.n	800d4e8 <get_soi+0x40>
  }
  cinfo->restart_interval = 0;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

  cinfo->saw_JFIF_marker = FALSE;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2200      	movs	r2, #0
 800d536:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2201      	movs	r2, #1
 800d53e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
  cinfo->JFIF_minor_version = 1;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
  cinfo->density_unit = 0;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
  cinfo->X_density = 1;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2201      	movs	r2, #1
 800d556:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
  cinfo->Y_density = 1;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2201      	movs	r2, #1
 800d55e:	f8a3 2126 	strh.w	r2, [r3, #294]	@ 0x126
  cinfo->saw_Adobe_marker = FALSE;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
  cinfo->Adobe_transform = 0;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c

  cinfo->marker->saw_SOI = TRUE;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800d578:	2201      	movs	r2, #1
 800d57a:	60da      	str	r2, [r3, #12]

  return TRUE;
 800d57c:	2301      	movs	r3, #1
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b08e      	sub	sp, #56	@ 0x38
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60f8      	str	r0, [r7, #12]
 800d58e:	60b9      	str	r1, [r7, #8]
 800d590:	607a      	str	r2, [r7, #4]
 800d592:	603b      	str	r3, [r7, #0]
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	627b      	str	r3, [r7, #36]	@ 0x24
 800d59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  cinfo->is_baseline = is_baseline;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  cinfo->progressive_mode = is_prog;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  cinfo->arith_code = is_arith;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10e      	bne.n	800d5e2 <get_sof+0x5c>
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	4798      	blx	r3
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d101      	bne.n	800d5d6 <get_sof+0x50>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e1e7      	b.n	800d9a6 <get_sof+0x420>
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	623b      	str	r3, [r7, #32]
 800d5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10e      	bne.n	800d618 <get_sof+0x92>
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	4798      	blx	r3
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <get_sof+0x86>
 800d608:	2300      	movs	r3, #0
 800d60a:	e1cc      	b.n	800d9a6 <get_sof+0x420>
 800d60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61a:	3b01      	subs	r3, #1
 800d61c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	6a3b      	ldr	r3, [r7, #32]
 800d62a:	4413      	add	r3, r2
 800d62c:	623b      	str	r3, [r7, #32]

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10e      	bne.n	800d652 <get_sof+0xcc>
 800d634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	4798      	blx	r3
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d101      	bne.n	800d646 <get_sof+0xc0>
 800d642:	2300      	movs	r3, #0
 800d644:	e1af      	b.n	800d9a6 <get_sof+0x420>
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d654:	3b01      	subs	r3, #1
 800d656:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d10e      	bne.n	800d68c <get_sof+0x106>
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	4798      	blx	r3
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d101      	bne.n	800d680 <get_sof+0xfa>
 800d67c:	2300      	movs	r3, #0
 800d67e:	e192      	b.n	800d9a6 <get_sof+0x420>
 800d680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68e:	3b01      	subs	r3, #1
 800d690:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	021a      	lsls	r2, r3, #8
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	621a      	str	r2, [r3, #32]
 800d6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10e      	bne.n	800d6c4 <get_sof+0x13e>
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	4798      	blx	r3
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <get_sof+0x132>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	e176      	b.n	800d9a6 <get_sof+0x420>
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	1c5a      	adds	r2, r3, #1
 800d6ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d6d0:	781a      	ldrb	r2, [r3, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	441a      	add	r2, r3
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	621a      	str	r2, [r3, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10e      	bne.n	800d700 <get_sof+0x17a>
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	4798      	blx	r3
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <get_sof+0x16e>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e158      	b.n	800d9a6 <get_sof+0x420>
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d702:	3b01      	subs	r3, #1
 800d704:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d708:	1c5a      	adds	r2, r3, #1
 800d70a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	021a      	lsls	r2, r3, #8
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	61da      	str	r2, [r3, #28]
 800d714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10e      	bne.n	800d738 <get_sof+0x1b2>
 800d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	4798      	blx	r3
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <get_sof+0x1a6>
 800d728:	2300      	movs	r3, #0
 800d72a:	e13c      	b.n	800d9a6 <get_sof+0x420>
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73a:	3b01      	subs	r3, #1
 800d73c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d740:	1c5a      	adds	r2, r3, #1
 800d742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d744:	781a      	ldrb	r2, [r3, #0]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	441a      	add	r2, r3
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	61da      	str	r2, [r3, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10e      	bne.n	800d774 <get_sof+0x1ee>
 800d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	4798      	blx	r3
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d101      	bne.n	800d768 <get_sof+0x1e2>
 800d764:	2300      	movs	r3, #0
 800d766:	e11e      	b.n	800d9a6 <get_sof+0x420>
 800d768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d776:	3b01      	subs	r3, #1
 800d778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77c:	1c5a      	adds	r2, r3, #1
 800d77e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	461a      	mov	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	625a      	str	r2, [r3, #36]	@ 0x24

  length -= 8;
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	3b08      	subs	r3, #8
 800d78c:	623b      	str	r3, [r7, #32]

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	3318      	adds	r3, #24
 800d794:	61fb      	str	r3, [r7, #28]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	69da      	ldr	r2, [r3, #28]
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6a1a      	ldr	r2, [r3, #32]
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	3308      	adds	r3, #8
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	330c      	adds	r3, #12
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2266      	movs	r2, #102	@ 0x66
 800d7c4:	615a      	str	r2, [r3, #20]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	2101      	movs	r1, #1
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	4798      	blx	r3
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d008      	beq.n	800d7f0 <get_sof+0x26a>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	223c      	movs	r2, #60	@ 0x3c
 800d7e4:	615a      	str	r2, [r3, #20]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	4798      	blx	r3

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6a1b      	ldr	r3, [r3, #32]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d007      	beq.n	800d808 <get_sof+0x282>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	69db      	ldr	r3, [r3, #28]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d003      	beq.n	800d808 <get_sof+0x282>
      || cinfo->num_components <= 0)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d804:	2b00      	cmp	r3, #0
 800d806:	dc08      	bgt.n	800d81a <get_sof+0x294>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2221      	movs	r2, #33	@ 0x21
 800d80e:	615a      	str	r2, [r3, #20]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	4798      	blx	r3

  if (length != (cinfo->num_components * 3))
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d81e:	4613      	mov	r3, r2
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	4413      	add	r3, r2
 800d824:	6a3a      	ldr	r2, [r7, #32]
 800d826:	429a      	cmp	r2, r3
 800d828:	d008      	beq.n	800d83c <get_sof+0x2b6>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	220c      	movs	r2, #12
 800d830:	615a      	str	r2, [r3, #20]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	4798      	blx	r3

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10f      	bne.n	800d866 <get_sof+0x2e0>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d850:	4611      	mov	r1, r2
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800d852:	2258      	movs	r2, #88	@ 0x58
 800d854:	fb01 f202 	mul.w	r2, r1, r2
 800d858:	2101      	movs	r1, #1
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	4798      	blx	r3
 800d85e:	4602      	mov	r2, r0
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d866:	2300      	movs	r3, #0
 800d868:	637b      	str	r3, [r7, #52]	@ 0x34
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d870:	633b      	str	r3, [r7, #48]	@ 0x30
 800d872:	e086      	b.n	800d982 <get_sof+0x3fc>
       ci++, compptr++) {
    compptr->component_index = ci;
 800d874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d878:	605a      	str	r2, [r3, #4]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10e      	bne.n	800d89e <get_sof+0x318>
 800d880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	4798      	blx	r3
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d101      	bne.n	800d892 <get_sof+0x30c>
 800d88e:	2300      	movs	r3, #0
 800d890:	e089      	b.n	800d9a6 <get_sof+0x420>
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a6:	1c5a      	adds	r2, r3, #1
 800d8a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	601a      	str	r2, [r3, #0]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10e      	bne.n	800d8d6 <get_sof+0x350>
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	4798      	blx	r3
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d101      	bne.n	800d8ca <get_sof+0x344>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	e06d      	b.n	800d9a6 <get_sof+0x420>
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	1c5a      	adds	r2, r3, #1
 800d8e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	61bb      	str	r3, [r7, #24]
    compptr->h_samp_factor = (c >> 4) & 15;
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	111b      	asrs	r3, r3, #4
 800d8ea:	f003 020f 	and.w	r2, r3, #15
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f0:	609a      	str	r2, [r3, #8]
    compptr->v_samp_factor = (c     ) & 15;
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	f003 020f 	and.w	r2, r3, #15
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fa:	60da      	str	r2, [r3, #12]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10e      	bne.n	800d920 <get_sof+0x39a>
 800d902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	4798      	blx	r3
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d101      	bne.n	800d914 <get_sof+0x38e>
 800d910:	2300      	movs	r3, #0
 800d912:	e048      	b.n	800d9a6 <get_sof+0x420>
 800d914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d922:	3b01      	subs	r3, #1
 800d924:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d928:	1c5a      	adds	r2, r3, #1
 800d92a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	461a      	mov	r2, r3
 800d930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d932:	611a      	str	r2, [r3, #16]

    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3318      	adds	r3, #24
 800d93a:	617b      	str	r3, [r7, #20]
 800d93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	3304      	adds	r3, #4
 800d948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d94a:	6892      	ldr	r2, [r2, #8]
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	3308      	adds	r3, #8
 800d952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d954:	68d2      	ldr	r2, [r2, #12]
 800d956:	601a      	str	r2, [r3, #0]
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	330c      	adds	r3, #12
 800d95c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d95e:	6912      	ldr	r2, [r2, #16]
 800d960:	601a      	str	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2267      	movs	r2, #103	@ 0x67
 800d968:	615a      	str	r2, [r3, #20]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	2101      	movs	r1, #1
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	4798      	blx	r3
       ci++, compptr++) {
 800d976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d978:	3301      	adds	r3, #1
 800d97a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97e:	3358      	adds	r3, #88	@ 0x58
 800d980:	633b      	str	r3, [r7, #48]	@ 0x30
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d988:	429a      	cmp	r2, r3
 800d98a:	f6ff af73 	blt.w	800d874 <get_sof+0x2ee>
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800d994:	2201      	movs	r2, #1
 800d996:	611a      	str	r2, [r3, #16]

  INPUT_SYNC(cinfo);
 800d998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9a2:	605a      	str	r2, [r3, #4]
  return TRUE;
 800d9a4:	2301      	movs	r3, #1
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3738      	adds	r7, #56	@ 0x38
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <get_sos>:


LOCAL(boolean)
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b08e      	sub	sp, #56	@ 0x38
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
  INT32 length;
  int i, ci, n, c, cc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	623b      	str	r3, [r7, #32]
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (! cinfo->marker->saw_SOF)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d108      	bne.n	800d9e6 <get_sos+0x38>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2240      	movs	r2, #64	@ 0x40
 800d9da:	615a      	str	r2, [r3, #20]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	4798      	blx	r3

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10e      	bne.n	800da0a <get_sos+0x5c>
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	4798      	blx	r3
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d101      	bne.n	800d9fe <get_sos+0x50>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e1a1      	b.n	800dd42 <get_sos+0x394>
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	627b      	str	r3, [r7, #36]	@ 0x24
 800da0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0c:	3b01      	subs	r3, #1
 800da0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800da10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da12:	1c5a      	adds	r2, r3, #1
 800da14:	62ba      	str	r2, [r7, #40]	@ 0x28
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	021b      	lsls	r3, r3, #8
 800da1a:	61fb      	str	r3, [r7, #28]
 800da1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10e      	bne.n	800da40 <get_sos+0x92>
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	4798      	blx	r3
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <get_sos+0x86>
 800da30:	2300      	movs	r3, #0
 800da32:	e186      	b.n	800dd42 <get_sos+0x394>
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800da40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da42:	3b01      	subs	r3, #1
 800da44:	627b      	str	r3, [r7, #36]	@ 0x24
 800da46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da48:	1c5a      	adds	r2, r3, #1
 800da4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	4413      	add	r3, r2
 800da54:	61fb      	str	r3, [r7, #28]

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800da56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10e      	bne.n	800da7a <get_sos+0xcc>
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	4798      	blx	r3
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d101      	bne.n	800da6e <get_sos+0xc0>
 800da6a:	2300      	movs	r3, #0
 800da6c:	e169      	b.n	800dd42 <get_sos+0x394>
 800da6e:	6a3b      	ldr	r3, [r7, #32]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	627b      	str	r3, [r7, #36]	@ 0x24
 800da7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7c:	3b01      	subs	r3, #1
 800da7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800da80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	62ba      	str	r2, [r7, #40]	@ 0x28
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	61bb      	str	r3, [r7, #24]

  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2269      	movs	r2, #105	@ 0x69
 800da90:	615a      	str	r2, [r3, #20]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	69ba      	ldr	r2, [r7, #24]
 800da98:	619a      	str	r2, [r3, #24]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	2101      	movs	r1, #1
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	4798      	blx	r3

  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	3303      	adds	r3, #3
 800daaa:	005b      	lsls	r3, r3, #1
 800daac:	69fa      	ldr	r2, [r7, #28]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d10a      	bne.n	800dac8 <get_sos+0x11a>
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	2b04      	cmp	r3, #4
 800dab6:	dc07      	bgt.n	800dac8 <get_sos+0x11a>
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10d      	bne.n	800dada <get_sos+0x12c>
      (n == 0 && !cinfo->progressive_mode))
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d108      	bne.n	800dada <get_sos+0x12c>
      /* pseudo SOS marker only allowed in progressive mode */
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	220c      	movs	r2, #12
 800dace:	615a      	str	r2, [r3, #20]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	4798      	blx	r3

  cinfo->comps_in_scan = n;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	69ba      	ldr	r2, [r7, #24]
 800dade:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
 800dae2:	2300      	movs	r3, #0
 800dae4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dae6:	e089      	b.n	800dbfc <get_sos+0x24e>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800dae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10e      	bne.n	800db0c <get_sos+0x15e>
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	4798      	blx	r3
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <get_sos+0x152>
 800dafc:	2300      	movs	r3, #0
 800dafe:	e120      	b.n	800dd42 <get_sos+0x394>
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800db0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0e:	3b01      	subs	r3, #1
 800db10:	627b      	str	r3, [r7, #36]	@ 0x24
 800db12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	62ba      	str	r2, [r7, #40]	@ 0x28
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	60fb      	str	r3, [r7, #12]
    INPUT_BYTE(cinfo, c, return FALSE);
 800db1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10e      	bne.n	800db40 <get_sos+0x192>
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	4798      	blx	r3
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <get_sos+0x186>
 800db30:	2300      	movs	r3, #0
 800db32:	e106      	b.n	800dd42 <get_sos+0x394>
 800db34:	6a3b      	ldr	r3, [r7, #32]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db42:	3b01      	subs	r3, #1
 800db44:	627b      	str	r3, [r7, #36]	@ 0x24
 800db46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db48:	1c5a      	adds	r2, r3, #1
 800db4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	617b      	str	r3, [r7, #20]
    
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db50:	2300      	movs	r3, #0
 800db52:	633b      	str	r3, [r7, #48]	@ 0x30
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800db5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db5c:	e00a      	b.n	800db74 <get_sos+0x1c6>
	 ci++, compptr++) {
      if (cc == compptr->component_id)
 800db5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	429a      	cmp	r2, r3
 800db66:	d018      	beq.n	800db9a <get_sos+0x1ec>
	 ci++, compptr++) {
 800db68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6a:	3301      	adds	r3, #1
 800db6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800db6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db70:	3358      	adds	r3, #88	@ 0x58
 800db72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db7a:	429a      	cmp	r2, r3
 800db7c:	dbef      	blt.n	800db5e <get_sos+0x1b0>
	goto id_found;
    }

    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2204      	movs	r2, #4
 800db84:	615a      	str	r2, [r3, #20]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	619a      	str	r2, [r3, #24]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	4798      	blx	r3
 800db98:	e000      	b.n	800db9c <get_sos+0x1ee>
	goto id_found;
 800db9a:	bf00      	nop

  id_found:

    cinfo->cur_comp_info[i] = compptr;
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba0:	3354      	adds	r3, #84	@ 0x54
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4413      	add	r3, r2
 800dba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dba8:	605a      	str	r2, [r3, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	111b      	asrs	r3, r3, #4
 800dbae:	f003 020f 	and.w	r2, r3, #15
 800dbb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb4:	615a      	str	r2, [r3, #20]
    compptr->ac_tbl_no = (c     ) & 15;
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f003 020f 	and.w	r2, r3, #15
 800dbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbe:	619a      	str	r2, [r3, #24]
    
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3318      	adds	r3, #24
 800dbc6:	60bb      	str	r3, [r7, #8]
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	601a      	str	r2, [r3, #0]
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbd4:	6952      	ldr	r2, [r2, #20]
 800dbd6:	601a      	str	r2, [r3, #0]
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbde:	6992      	ldr	r2, [r2, #24]
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	226a      	movs	r2, #106	@ 0x6a
 800dbe8:	615a      	str	r2, [r3, #20]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800dbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	f6ff af71 	blt.w	800dae8 <get_sos+0x13a>
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10e      	bne.n	800dc2a <get_sos+0x27c>
 800dc0c:	6a3b      	ldr	r3, [r7, #32]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	4798      	blx	r3
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <get_sos+0x270>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e091      	b.n	800dd42 <get_sos+0x394>
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	62ba      	str	r2, [r7, #40]	@ 0x28
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	617b      	str	r3, [r7, #20]
  cinfo->Ss = c;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	697a      	ldr	r2, [r7, #20]
 800dc3e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10e      	bne.n	800dc66 <get_sos+0x2b8>
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	4798      	blx	r3
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <get_sos+0x2ac>
 800dc56:	2300      	movs	r3, #0
 800dc58:	e073      	b.n	800dd42 <get_sos+0x394>
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	62ba      	str	r2, [r7, #40]	@ 0x28
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	617b      	str	r3, [r7, #20]
  cinfo->Se = c;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d10e      	bne.n	800dca2 <get_sos+0x2f4>
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	4798      	blx	r3
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d101      	bne.n	800dc96 <get_sos+0x2e8>
 800dc92:	2300      	movs	r3, #0
 800dc94:	e055      	b.n	800dd42 <get_sos+0x394>
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca4:	3b01      	subs	r3, #1
 800dca6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcaa:	1c5a      	adds	r2, r3, #1
 800dcac:	62ba      	str	r2, [r7, #40]	@ 0x28
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	617b      	str	r3, [r7, #20]
  cinfo->Ah = (c >> 4) & 15;
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	111b      	asrs	r3, r3, #4
 800dcb6:	f003 020f 	and.w	r2, r3, #15
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
  cinfo->Al = (c     ) & 15;
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	f003 020f 	and.w	r2, r3, #15
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3318      	adds	r3, #24
 800dcd2:	613b      	str	r3, [r7, #16]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	3304      	adds	r3, #4
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	f8d2 219c 	ldr.w	r2, [r2, #412]	@ 0x19c
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	3308      	adds	r3, #8
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	f8d2 21a0 	ldr.w	r2, [r2, #416]	@ 0x1a0
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	330c      	adds	r3, #12
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	f8d2 21a4 	ldr.w	r2, [r2, #420]	@ 0x1a4
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	226b      	movs	r2, #107	@ 0x6b
 800dd08:	615a      	str	r2, [r3, #20]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	2101      	movs	r1, #1
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	4798      	blx	r3
	   cinfo->Ah, cinfo->Al);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	615a      	str	r2, [r3, #20]

  /* Count another (non-pseudo) SOS marker */
  if (n) cinfo->input_scan_number++;
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d006      	beq.n	800dd34 <get_sos+0x386>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  INPUT_SYNC(cinfo);
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd3e:	605a      	str	r2, [r3, #4]
  return TRUE;
 800dd40:	2301      	movs	r3, #1
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3738      	adds	r7, #56	@ 0x38
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <get_dac>:
#ifdef D_ARITH_CODING_SUPPORTED

LOCAL(boolean)
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b088      	sub	sp, #32
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	613b      	str	r3, [r7, #16]
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	61bb      	str	r3, [r7, #24]
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	617b      	str	r3, [r7, #20]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d10e      	bne.n	800dd88 <get_dac+0x3e>
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	4798      	blx	r3
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d101      	bne.n	800dd7c <get_dac+0x32>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e0dc      	b.n	800df36 <get_dac+0x1ec>
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	61bb      	str	r3, [r7, #24]
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	617b      	str	r3, [r7, #20]
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	61ba      	str	r2, [r7, #24]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	021b      	lsls	r3, r3, #8
 800dd98:	61fb      	str	r3, [r7, #28]
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10e      	bne.n	800ddbe <get_dac+0x74>
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	4798      	blx	r3
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d101      	bne.n	800ddb2 <get_dac+0x68>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e0c1      	b.n	800df36 <get_dac+0x1ec>
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	61bb      	str	r3, [r7, #24]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	617b      	str	r3, [r7, #20]
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	617b      	str	r3, [r7, #20]
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	61ba      	str	r2, [r7, #24]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	461a      	mov	r2, r3
 800ddce:	69fb      	ldr	r3, [r7, #28]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	61fb      	str	r3, [r7, #28]
  length -= 2;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	3b02      	subs	r3, #2
 800ddd8:	61fb      	str	r3, [r7, #28]
  
  while (length > 0) {
 800ddda:	e095      	b.n	800df08 <get_dac+0x1be>
    INPUT_BYTE(cinfo, index, return FALSE);
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10e      	bne.n	800de00 <get_dac+0xb6>
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	4798      	blx	r3
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <get_dac+0xaa>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e0a0      	b.n	800df36 <get_dac+0x1ec>
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	61bb      	str	r3, [r7, #24]
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	3b01      	subs	r3, #1
 800de04:	617b      	str	r3, [r7, #20]
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	61ba      	str	r2, [r7, #24]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	60fb      	str	r3, [r7, #12]
    INPUT_BYTE(cinfo, val, return FALSE);
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10e      	bne.n	800de34 <get_dac+0xea>
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	4798      	blx	r3
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d101      	bne.n	800de28 <get_dac+0xde>
 800de24:	2300      	movs	r3, #0
 800de26:	e086      	b.n	800df36 <get_dac+0x1ec>
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	61bb      	str	r3, [r7, #24]
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	617b      	str	r3, [r7, #20]
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	3b01      	subs	r3, #1
 800de38:	617b      	str	r3, [r7, #20]
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	1c5a      	adds	r2, r3, #1
 800de3e:	61ba      	str	r2, [r7, #24]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	60bb      	str	r3, [r7, #8]

    length -= 2;
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	3b02      	subs	r3, #2
 800de48:	61fb      	str	r3, [r7, #28]

    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2251      	movs	r2, #81	@ 0x51
 800de50:	615a      	str	r2, [r3, #20]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	619a      	str	r2, [r3, #24]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	61da      	str	r2, [r3, #28]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	2101      	movs	r1, #1
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	4798      	blx	r3

    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	db02      	blt.n	800de7a <get_dac+0x130>
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b1f      	cmp	r3, #31
 800de78:	dd0c      	ble.n	800de94 <get_dac+0x14a>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	221d      	movs	r2, #29
 800de80:	615a      	str	r2, [r3, #20]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	619a      	str	r2, [r3, #24]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	4798      	blx	r3

    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b0f      	cmp	r3, #15
 800de98:	dd09      	ble.n	800deae <get_dac+0x164>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3b10      	subs	r3, #16
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	b2d1      	uxtb	r1, r2
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	4413      	add	r3, r2
 800dea6:	460a      	mov	r2, r1
 800dea8:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
 800deac:	e02c      	b.n	800df08 <get_dac+0x1be>
    } else {			/* define DC table */
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f003 030f 	and.w	r3, r3, #15
 800deb6:	b2d9      	uxtb	r1, r3
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	4413      	add	r3, r2
 800debe:	33e8      	adds	r3, #232	@ 0xe8
 800dec0:	460a      	mov	r2, r1
 800dec2:	701a      	strb	r2, [r3, #0]
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	111b      	asrs	r3, r3, #4
 800dec8:	b2d9      	uxtb	r1, r3
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	4413      	add	r3, r2
 800ded0:	33f8      	adds	r3, #248	@ 0xf8
 800ded2:	460a      	mov	r2, r1
 800ded4:	701a      	strb	r2, [r3, #0]
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	33e8      	adds	r3, #232	@ 0xe8
 800dede:	781a      	ldrb	r2, [r3, #0]
 800dee0:	6879      	ldr	r1, [r7, #4]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	440b      	add	r3, r1
 800dee6:	33f8      	adds	r3, #248	@ 0xf8
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	429a      	cmp	r2, r3
 800deec:	d90c      	bls.n	800df08 <get_dac+0x1be>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	221e      	movs	r2, #30
 800def4:	615a      	str	r2, [r3, #20]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	619a      	str	r2, [r3, #24]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	4798      	blx	r3
  while (length > 0) {
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f73f af66 	bgt.w	800dddc <get_dac+0x92>
    }
  }

  if (length != 0)
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d008      	beq.n	800df28 <get_dac+0x1de>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	220c      	movs	r2, #12
 800df1c:	615a      	str	r2, [r3, #20]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	69ba      	ldr	r2, [r7, #24]
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	697a      	ldr	r2, [r7, #20]
 800df32:	605a      	str	r2, [r3, #4]
  return TRUE;
 800df34:	2301      	movs	r3, #1
}
 800df36:	4618      	mov	r0, r3
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <get_dht>:


LOCAL(boolean)
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
 800df3e:	b5b0      	push	{r4, r5, r7, lr}
 800df40:	b0d2      	sub	sp, #328	@ 0x148
 800df42:	af00      	add	r7, sp, #0
 800df44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800df48:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800df4c:	6018      	str	r0, [r3, #0]
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);
 800df4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800df52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800df5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800df68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

  INPUT_2BYTES(cinfo, length, return FALSE);
 800df72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d117      	bne.n	800dfaa <get_dht+0x6c>
 800df7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800df84:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800df88:	6810      	ldr	r0, [r2, #0]
 800df8a:	4798      	blx	r3
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d101      	bne.n	800df96 <get_dht+0x58>
 800df92:	2300      	movs	r3, #0
 800df94:	e28a      	b.n	800e4ac <get_dht+0x56e>
 800df96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800dfa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800dfaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dfae:	3b01      	subs	r3, #1
 800dfb0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800dfb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dfb8:	1c5a      	adds	r2, r3, #1
 800dfba:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	021b      	lsls	r3, r3, #8
 800dfc2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800dfc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d117      	bne.n	800dffe <get_dht+0xc0>
 800dfce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800dfd8:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800dfdc:	6810      	ldr	r0, [r2, #0]
 800dfde:	4798      	blx	r3
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <get_dht+0xac>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e260      	b.n	800e4ac <get_dht+0x56e>
 800dfea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800dff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800dffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e002:	3b01      	subs	r3, #1
 800e004:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e008:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e00c:	1c5a      	adds	r2, r3, #1
 800e00e:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	461a      	mov	r2, r3
 800e016:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e01a:	4413      	add	r3, r2
 800e01c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  length -= 2;
 800e020:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e024:	3b02      	subs	r3, #2
 800e026:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  
  while (length > 16) {
 800e02a:	e216      	b.n	800e45a <get_dht+0x51c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e02c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d117      	bne.n	800e064 <get_dht+0x126>
 800e034:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e03e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e042:	6810      	ldr	r0, [r2, #0]
 800e044:	4798      	blx	r3
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <get_dht+0x112>
 800e04c:	2300      	movs	r3, #0
 800e04e:	e22d      	b.n	800e4ac <get_dht+0x56e>
 800e050:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800e05a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e064:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e068:	3b01      	subs	r3, #1
 800e06a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e06e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e07e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e082:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2252      	movs	r2, #82	@ 0x52
 800e08c:	615a      	str	r2, [r3, #20]
 800e08e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e092:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800e09e:	619a      	str	r2, [r3, #24]
 800e0a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e0a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e0b2:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e0b6:	2101      	movs	r1, #1
 800e0b8:	6810      	ldr	r0, [r2, #0]
 800e0ba:	4798      	blx	r3
      
    bits[0] = 0;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
    count = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    for (i = 1; i <= 16; i++) {
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800e0ce:	e03e      	b.n	800e14e <get_dht+0x210>
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e0d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d117      	bne.n	800e108 <get_dht+0x1ca>
 800e0d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e0e2:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e0e6:	6810      	ldr	r0, [r2, #0]
 800e0e8:	4798      	blx	r3
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <get_dht+0x1b6>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e1db      	b.n	800e4ac <get_dht+0x56e>
 800e0f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800e0fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e108:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e10c:	3b01      	subs	r3, #1
 800e10e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e112:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800e11c:	7819      	ldrb	r1, [r3, #0]
 800e11e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800e122:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e126:	4413      	add	r3, r2
 800e128:	460a      	mov	r2, r1
 800e12a:	701a      	strb	r2, [r3, #0]
      count += bits[i];
 800e12c:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800e130:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e134:	4413      	add	r3, r2
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	461a      	mov	r2, r3
 800e13a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800e13e:	4413      	add	r3, r2
 800e140:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    for (i = 1; i <= 16; i++) {
 800e144:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e148:	3301      	adds	r3, #1
 800e14a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800e14e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e152:	2b10      	cmp	r3, #16
 800e154:	ddbc      	ble.n	800e0d0 <get_dht+0x192>
    }

    length -= 1 + 16;
 800e156:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e15a:	3b11      	subs	r3, #17
 800e15c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e160:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e164:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	3318      	adds	r3, #24
 800e16e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800e172:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 800e176:	461a      	mov	r2, r3
 800e178:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800e182:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e186:	3304      	adds	r3, #4
 800e188:	601a      	str	r2, [r3, #0]
 800e18a:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800e18e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e192:	3308      	adds	r3, #8
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	f897 2110 	ldrb.w	r2, [r7, #272]	@ 0x110
 800e19a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e19e:	330c      	adds	r3, #12
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	f897 2111 	ldrb.w	r2, [r7, #273]	@ 0x111
 800e1a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e1aa:	3310      	adds	r3, #16
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	f897 2112 	ldrb.w	r2, [r7, #274]	@ 0x112
 800e1b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e1b6:	3314      	adds	r3, #20
 800e1b8:	601a      	str	r2, [r3, #0]
 800e1ba:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 800e1be:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e1c2:	3318      	adds	r3, #24
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	f897 2114 	ldrb.w	r2, [r7, #276]	@ 0x114
 800e1ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800e1ce:	331c      	adds	r3, #28
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e1d6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2258      	movs	r2, #88	@ 0x58
 800e1e0:	615a      	str	r2, [r3, #20]
 800e1e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e1e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e1f4:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e1f8:	2102      	movs	r1, #2
 800e1fa:	6810      	ldr	r0, [r2, #0]
 800e1fc:	4798      	blx	r3
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e1fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e202:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3318      	adds	r3, #24
 800e20c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800e210:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800e214:	461a      	mov	r2, r3
 800e216:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e21a:	601a      	str	r2, [r3, #0]
 800e21c:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800e220:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e224:	3304      	adds	r3, #4
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800e22c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e230:	3308      	adds	r3, #8
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	f897 2118 	ldrb.w	r2, [r7, #280]	@ 0x118
 800e238:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e23c:	330c      	adds	r3, #12
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	f897 2119 	ldrb.w	r2, [r7, #281]	@ 0x119
 800e244:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e248:	3310      	adds	r3, #16
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	f897 211a 	ldrb.w	r2, [r7, #282]	@ 0x11a
 800e250:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e254:	3314      	adds	r3, #20
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 800e25c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e260:	3318      	adds	r3, #24
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 800e268:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e26c:	331c      	adds	r3, #28
 800e26e:	601a      	str	r2, [r3, #0]
 800e270:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e274:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2258      	movs	r2, #88	@ 0x58
 800e27e:	615a      	str	r2, [r3, #20]
 800e280:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e284:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e292:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e296:	2102      	movs	r1, #2
 800e298:	6810      	ldr	r0, [r2, #0]
 800e29a:	4798      	blx	r3
	     bits[13], bits[14], bits[15], bits[16]);

    /* Here we just do minimal validation of the counts to avoid walking
     * off the end of our table space.  jdhuff.c will check more carefully.
     */
    if (count > 256 || ((INT32) count) > length)
 800e29c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800e2a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2a4:	dc05      	bgt.n	800e2b2 <get_dht+0x374>
 800e2a6:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800e2aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	dd14      	ble.n	800e2dc <get_dht+0x39e>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e2b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e2b6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2209      	movs	r2, #9
 800e2c0:	615a      	str	r2, [r3, #20]
 800e2c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e2c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e2d4:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e2d8:	6810      	ldr	r0, [r2, #0]
 800e2da:	4798      	blx	r3

    for (i = 0; i < count; i++)
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800e2e2:	e034      	b.n	800e34e <get_dht+0x410>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e2e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d117      	bne.n	800e31c <get_dht+0x3de>
 800e2ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e2f6:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e2fa:	6810      	ldr	r0, [r2, #0]
 800e2fc:	4798      	blx	r3
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d101      	bne.n	800e308 <get_dht+0x3ca>
 800e304:	2300      	movs	r3, #0
 800e306:	e0d1      	b.n	800e4ac <get_dht+0x56e>
 800e308:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800e312:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e31c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e320:	3b01      	subs	r3, #1
 800e322:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800e326:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e32a:	1c5a      	adds	r2, r3, #1
 800e32c:	f8c7 2130 	str.w	r2, [r7, #304]	@ 0x130
 800e330:	7819      	ldrb	r1, [r3, #0]
 800e332:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e336:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800e33a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e33e:	4413      	add	r3, r2
 800e340:	460a      	mov	r2, r1
 800e342:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 800e344:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e348:	3301      	adds	r3, #1
 800e34a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800e34e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800e352:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800e356:	429a      	cmp	r2, r3
 800e358:	dbc4      	blt.n	800e2e4 <get_dht+0x3a6>

    length -= count;
 800e35a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e35e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    if (index & 0x10) {		/* AC table definition */
 800e368:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800e36c:	f003 0310 	and.w	r3, r3, #16
 800e370:	2b00      	cmp	r3, #0
 800e372:	d012      	beq.n	800e39a <get_dht+0x45c>
      index -= 0x10;
 800e374:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800e378:	3b10      	subs	r3, #16
 800e37a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800e37e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e382:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e386:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800e38a:	3330      	adds	r3, #48	@ 0x30
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	6812      	ldr	r2, [r2, #0]
 800e390:	4413      	add	r3, r2
 800e392:	3304      	adds	r3, #4
 800e394:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800e398:	e00c      	b.n	800e3b4 <get_dht+0x476>
    } else {			/* DC table definition */
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e39a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e39e:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800e3a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800e3a6:	332c      	adds	r3, #44	@ 0x2c
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	6812      	ldr	r2, [r2, #0]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    }

    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e3b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	db03      	blt.n	800e3c4 <get_dht+0x486>
 800e3bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800e3c0:	2b03      	cmp	r3, #3
 800e3c2:	dd1d      	ble.n	800e400 <get_dht+0x4c2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800e3c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e3c8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	221f      	movs	r2, #31
 800e3d2:	615a      	str	r2, [r3, #20]
 800e3d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e3d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800e3e4:	619a      	str	r2, [r3, #24]
 800e3e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e3ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e3f8:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e3fc:	6810      	ldr	r0, [r2, #0]
 800e3fe:	4798      	blx	r3

    if (*htblptr == NULL)
 800e400:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d10a      	bne.n	800e420 <get_dht+0x4e2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800e40a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e40e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e412:	6818      	ldr	r0, [r3, #0]
 800e414:	f7f7 fb7e 	bl	8005b14 <jpeg_alloc_huff_table>
 800e418:	4602      	mov	r2, r0
 800e41a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e41e:	601a      	str	r2, [r3, #0]
  
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800e420:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	461d      	mov	r5, r3
 800e428:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 800e42c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e42e:	6028      	str	r0, [r5, #0]
 800e430:	6069      	str	r1, [r5, #4]
 800e432:	60aa      	str	r2, [r5, #8]
 800e434:	60eb      	str	r3, [r5, #12]
 800e436:	7823      	ldrb	r3, [r4, #0]
 800e438:	742b      	strb	r3, [r5, #16]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800e43a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	f103 0211 	add.w	r2, r3, #17
 800e444:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e448:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800e44c:	4610      	mov	r0, r2
 800e44e:	4619      	mov	r1, r3
 800e450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e454:	461a      	mov	r2, r3
 800e456:	f013 fdbf 	bl	8021fd8 <memcpy>
  while (length > 16) {
 800e45a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e45e:	2b10      	cmp	r3, #16
 800e460:	f73f ade4 	bgt.w	800e02c <get_dht+0xee>
  }

  if (length != 0)
 800e464:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d014      	beq.n	800e496 <get_dht+0x558>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e46c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e470:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	220c      	movs	r2, #12
 800e47a:	615a      	str	r2, [r3, #20]
 800e47c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800e480:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800e48e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e492:	6810      	ldr	r0, [r2, #0]
 800e494:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 800e496:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e49a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800e49e:	601a      	str	r2, [r3, #0]
 800e4a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800e4a8:	605a      	str	r2, [r3, #4]
  return TRUE;
 800e4aa:	2301      	movs	r3, #1
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e4b8 <get_dqt>:


LOCAL(boolean)
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b08e      	sub	sp, #56	@ 0x38
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  INT32 length, count, i;
  int n, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  const int *natural_order;
  INPUT_VARS(cinfo);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	61bb      	str	r3, [r7, #24]
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	623b      	str	r3, [r7, #32]
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	61fb      	str	r3, [r7, #28]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10e      	bne.n	800e4f6 <get_dqt+0x3e>
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	4798      	blx	r3
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d101      	bne.n	800e4ea <get_dqt+0x32>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	e21e      	b.n	800e928 <get_dqt+0x470>
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	623b      	str	r3, [r7, #32]
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	61fb      	str	r3, [r7, #28]
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	61fb      	str	r3, [r7, #28]
 800e4fc:	6a3b      	ldr	r3, [r7, #32]
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	623a      	str	r2, [r7, #32]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	021b      	lsls	r3, r3, #8
 800e506:	637b      	str	r3, [r7, #52]	@ 0x34
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d10e      	bne.n	800e52c <get_dqt+0x74>
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	4798      	blx	r3
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d101      	bne.n	800e520 <get_dqt+0x68>
 800e51c:	2300      	movs	r3, #0
 800e51e:	e203      	b.n	800e928 <get_dqt+0x470>
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	623b      	str	r3, [r7, #32]
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	61fb      	str	r3, [r7, #28]
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	3b01      	subs	r3, #1
 800e530:	61fb      	str	r3, [r7, #28]
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	623a      	str	r2, [r7, #32]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e53e:	4413      	add	r3, r2
 800e540:	637b      	str	r3, [r7, #52]	@ 0x34
  length -= 2;
 800e542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e544:	3b02      	subs	r3, #2
 800e546:	637b      	str	r3, [r7, #52]	@ 0x34

  while (length > 0) {
 800e548:	e1d7      	b.n	800e8fa <get_dqt+0x442>
    length--;
 800e54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e54c:	3b01      	subs	r3, #1
 800e54e:	637b      	str	r3, [r7, #52]	@ 0x34
    INPUT_BYTE(cinfo, n, return FALSE);
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10e      	bne.n	800e574 <get_dqt+0xbc>
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	4798      	blx	r3
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <get_dqt+0xb0>
 800e564:	2300      	movs	r3, #0
 800e566:	e1df      	b.n	800e928 <get_dqt+0x470>
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	623b      	str	r3, [r7, #32]
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	61fb      	str	r3, [r7, #28]
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	3b01      	subs	r3, #1
 800e578:	61fb      	str	r3, [r7, #28]
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	623a      	str	r2, [r7, #32]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	617b      	str	r3, [r7, #20]
    prec = n >> 4;
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	111b      	asrs	r3, r3, #4
 800e588:	613b      	str	r3, [r7, #16]
    n &= 0x0F;
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	f003 030f 	and.w	r3, r3, #15
 800e590:	617b      	str	r3, [r7, #20]

    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2253      	movs	r2, #83	@ 0x53
 800e598:	615a      	str	r2, [r3, #20]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	619a      	str	r2, [r3, #24]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	61da      	str	r2, [r3, #28]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	4798      	blx	r3

    if (n >= NUM_QUANT_TBLS)
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	dd0c      	ble.n	800e5d6 <get_dqt+0x11e>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2220      	movs	r2, #32
 800e5c2:	615a      	str	r2, [r3, #20]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	697a      	ldr	r2, [r7, #20]
 800e5ca:	619a      	str	r2, [r3, #24]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	4798      	blx	r3
      
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	3328      	adds	r3, #40	@ 0x28
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d109      	bne.n	800e5fa <get_dqt+0x142>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7f7 fa7f 	bl	8005aea <jpeg_alloc_quant_table>
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	3328      	adds	r3, #40	@ 0x28
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	6059      	str	r1, [r3, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	3328      	adds	r3, #40	@ 0x28
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	4413      	add	r3, r2
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	60fb      	str	r3, [r7, #12]

    if (prec) {
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d017      	beq.n	800e63e <get_dqt+0x186>
      if (length < DCTSIZE2 * 2) {
 800e60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e610:	2b7f      	cmp	r3, #127	@ 0x7f
 800e612:	dc11      	bgt.n	800e638 <get_dqt+0x180>
	/* Initialize full table for safety. */
	for (i = 0; i < DCTSIZE2; i++) {
 800e614:	2300      	movs	r3, #0
 800e616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e618:	e007      	b.n	800e62a <get_dqt+0x172>
	  quant_ptr->quantval[i] = 1;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e61e:	2101      	movs	r1, #1
 800e620:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < DCTSIZE2; i++) {
 800e624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e626:	3301      	adds	r3, #1
 800e628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62c:	2b3f      	cmp	r3, #63	@ 0x3f
 800e62e:	ddf4      	ble.n	800e61a <get_dqt+0x162>
	}
	count = length >> 1;
 800e630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e632:	105b      	asrs	r3, r3, #1
 800e634:	633b      	str	r3, [r7, #48]	@ 0x30
 800e636:	e018      	b.n	800e66a <get_dqt+0x1b2>
      } else
	count = DCTSIZE2;
 800e638:	2340      	movs	r3, #64	@ 0x40
 800e63a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e63c:	e015      	b.n	800e66a <get_dqt+0x1b2>
    } else {
      if (length < DCTSIZE2) {
 800e63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e640:	2b3f      	cmp	r3, #63	@ 0x3f
 800e642:	dc10      	bgt.n	800e666 <get_dqt+0x1ae>
	/* Initialize full table for safety. */
	for (i = 0; i < DCTSIZE2; i++) {
 800e644:	2300      	movs	r3, #0
 800e646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e648:	e007      	b.n	800e65a <get_dqt+0x1a2>
	  quant_ptr->quantval[i] = 1;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e64e:	2101      	movs	r1, #1
 800e650:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < DCTSIZE2; i++) {
 800e654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e656:	3301      	adds	r3, #1
 800e658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65c:	2b3f      	cmp	r3, #63	@ 0x3f
 800e65e:	ddf4      	ble.n	800e64a <get_dqt+0x192>
	}
	count = length;
 800e660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e662:	633b      	str	r3, [r7, #48]	@ 0x30
 800e664:	e001      	b.n	800e66a <get_dqt+0x1b2>
      } else
	count = DCTSIZE2;
 800e666:	2340      	movs	r3, #64	@ 0x40
 800e668:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    switch (count) {
 800e66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66c:	3b04      	subs	r3, #4
 800e66e:	2b2d      	cmp	r3, #45	@ 0x2d
 800e670:	d870      	bhi.n	800e754 <get_dqt+0x29c>
 800e672:	a201      	add	r2, pc, #4	@ (adr r2, 800e678 <get_dqt+0x1c0>)
 800e674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e678:	0800e731 	.word	0x0800e731
 800e67c:	0800e755 	.word	0x0800e755
 800e680:	0800e755 	.word	0x0800e755
 800e684:	0800e755 	.word	0x0800e755
 800e688:	0800e755 	.word	0x0800e755
 800e68c:	0800e737 	.word	0x0800e737
 800e690:	0800e755 	.word	0x0800e755
 800e694:	0800e755 	.word	0x0800e755
 800e698:	0800e755 	.word	0x0800e755
 800e69c:	0800e755 	.word	0x0800e755
 800e6a0:	0800e755 	.word	0x0800e755
 800e6a4:	0800e755 	.word	0x0800e755
 800e6a8:	0800e73d 	.word	0x0800e73d
 800e6ac:	0800e755 	.word	0x0800e755
 800e6b0:	0800e755 	.word	0x0800e755
 800e6b4:	0800e755 	.word	0x0800e755
 800e6b8:	0800e755 	.word	0x0800e755
 800e6bc:	0800e755 	.word	0x0800e755
 800e6c0:	0800e755 	.word	0x0800e755
 800e6c4:	0800e755 	.word	0x0800e755
 800e6c8:	0800e755 	.word	0x0800e755
 800e6cc:	0800e743 	.word	0x0800e743
 800e6d0:	0800e755 	.word	0x0800e755
 800e6d4:	0800e755 	.word	0x0800e755
 800e6d8:	0800e755 	.word	0x0800e755
 800e6dc:	0800e755 	.word	0x0800e755
 800e6e0:	0800e755 	.word	0x0800e755
 800e6e4:	0800e755 	.word	0x0800e755
 800e6e8:	0800e755 	.word	0x0800e755
 800e6ec:	0800e755 	.word	0x0800e755
 800e6f0:	0800e755 	.word	0x0800e755
 800e6f4:	0800e755 	.word	0x0800e755
 800e6f8:	0800e749 	.word	0x0800e749
 800e6fc:	0800e755 	.word	0x0800e755
 800e700:	0800e755 	.word	0x0800e755
 800e704:	0800e755 	.word	0x0800e755
 800e708:	0800e755 	.word	0x0800e755
 800e70c:	0800e755 	.word	0x0800e755
 800e710:	0800e755 	.word	0x0800e755
 800e714:	0800e755 	.word	0x0800e755
 800e718:	0800e755 	.word	0x0800e755
 800e71c:	0800e755 	.word	0x0800e755
 800e720:	0800e755 	.word	0x0800e755
 800e724:	0800e755 	.word	0x0800e755
 800e728:	0800e755 	.word	0x0800e755
 800e72c:	0800e74f 	.word	0x0800e74f
    case (2*2): natural_order = jpeg_natural_order2; break;
 800e730:	4b7f      	ldr	r3, [pc, #508]	@ (800e930 <get_dqt+0x478>)
 800e732:	627b      	str	r3, [r7, #36]	@ 0x24
 800e734:	e011      	b.n	800e75a <get_dqt+0x2a2>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800e736:	4b7f      	ldr	r3, [pc, #508]	@ (800e934 <get_dqt+0x47c>)
 800e738:	627b      	str	r3, [r7, #36]	@ 0x24
 800e73a:	e00e      	b.n	800e75a <get_dqt+0x2a2>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800e73c:	4b7e      	ldr	r3, [pc, #504]	@ (800e938 <get_dqt+0x480>)
 800e73e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e740:	e00b      	b.n	800e75a <get_dqt+0x2a2>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800e742:	4b7e      	ldr	r3, [pc, #504]	@ (800e93c <get_dqt+0x484>)
 800e744:	627b      	str	r3, [r7, #36]	@ 0x24
 800e746:	e008      	b.n	800e75a <get_dqt+0x2a2>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800e748:	4b7d      	ldr	r3, [pc, #500]	@ (800e940 <get_dqt+0x488>)
 800e74a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e74c:	e005      	b.n	800e75a <get_dqt+0x2a2>
    case (7*7): natural_order = jpeg_natural_order7; break;
 800e74e:	4b7d      	ldr	r3, [pc, #500]	@ (800e944 <get_dqt+0x48c>)
 800e750:	627b      	str	r3, [r7, #36]	@ 0x24
 800e752:	e002      	b.n	800e75a <get_dqt+0x2a2>
    default:    natural_order = jpeg_natural_order;  break;
 800e754:	4b7c      	ldr	r3, [pc, #496]	@ (800e948 <get_dqt+0x490>)
 800e756:	627b      	str	r3, [r7, #36]	@ 0x24
 800e758:	bf00      	nop
    }

    for (i = 0; i < count; i++) {
 800e75a:	2300      	movs	r3, #0
 800e75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e75e:	e062      	b.n	800e826 <get_dqt+0x36e>
      if (prec)
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d038      	beq.n	800e7d8 <get_dqt+0x320>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d10e      	bne.n	800e78a <get_dqt+0x2d2>
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	4798      	blx	r3
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d101      	bne.n	800e77e <get_dqt+0x2c6>
 800e77a:	2300      	movs	r3, #0
 800e77c:	e0d4      	b.n	800e928 <get_dqt+0x470>
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	623b      	str	r3, [r7, #32]
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	61fb      	str	r3, [r7, #28]
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	3b01      	subs	r3, #1
 800e78e:	61fb      	str	r3, [r7, #28]
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	623a      	str	r2, [r7, #32]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d10e      	bne.n	800e7c0 <get_dqt+0x308>
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	4798      	blx	r3
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <get_dqt+0x2fc>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e0b9      	b.n	800e928 <get_dqt+0x470>
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	623b      	str	r3, [r7, #32]
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	61fb      	str	r3, [r7, #28]
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	61fb      	str	r3, [r7, #28]
 800e7c6:	6a3b      	ldr	r3, [r7, #32]
 800e7c8:	1c5a      	adds	r2, r3, #1
 800e7ca:	623a      	str	r2, [r7, #32]
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d2:	4413      	add	r3, r2
 800e7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7d6:	e019      	b.n	800e80c <get_dqt+0x354>
      else
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d10e      	bne.n	800e7fc <get_dqt+0x344>
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	4798      	blx	r3
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d101      	bne.n	800e7f0 <get_dqt+0x338>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	e09b      	b.n	800e928 <get_dqt+0x470>
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	623b      	str	r3, [r7, #32]
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	61fb      	str	r3, [r7, #28]
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	61fb      	str	r3, [r7, #28]
 800e802:	6a3b      	ldr	r3, [r7, #32]
 800e804:	1c5a      	adds	r2, r3, #1
 800e806:	623a      	str	r2, [r7, #32]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* We convert the zigzag-order table to natural array order. */
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800e80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e812:	4413      	add	r3, r2
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e818:	b299      	uxth	r1, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < count; i++) {
 800e820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e822:	3301      	adds	r3, #1
 800e824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82a:	429a      	cmp	r2, r3
 800e82c:	db98      	blt.n	800e760 <get_dqt+0x2a8>
    }

    if (cinfo->err->trace_level >= 2) {
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e834:	2b01      	cmp	r3, #1
 800e836:	dd55      	ble.n	800e8e4 <get_dqt+0x42c>
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e838:	2300      	movs	r3, #0
 800e83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e83c:	e04f      	b.n	800e8de <get_dqt+0x426>
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3318      	adds	r3, #24
 800e844:	60bb      	str	r3, [r7, #8]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e84a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e84e:	461a      	mov	r2, r3
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	3304      	adds	r3, #4
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e866:	1c9a      	adds	r2, r3, #2
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	3308      	adds	r3, #8
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e876:	1cda      	adds	r2, r3, #3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	330c      	adds	r3, #12
 800e882:	601a      	str	r2, [r3, #0]
 800e884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e886:	1d1a      	adds	r2, r3, #4
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	3310      	adds	r3, #16
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e896:	1d5a      	adds	r2, r3, #5
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	3314      	adds	r3, #20
 800e8a2:	601a      	str	r2, [r3, #0]
 800e8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a6:	1d9a      	adds	r2, r3, #6
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	3318      	adds	r3, #24
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b6:	1dda      	adds	r2, r3, #7
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	331c      	adds	r3, #28
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	225f      	movs	r2, #95	@ 0x5f
 800e8ca:	615a      	str	r2, [r3, #20]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	2102      	movs	r1, #2
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	4798      	blx	r3
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8da:	3308      	adds	r3, #8
 800e8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e0:	2b3f      	cmp	r3, #63	@ 0x3f
 800e8e2:	ddac      	ble.n	800e83e <get_dqt+0x386>
		 quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
		 quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
      }
    }

    length -= count;
 800e8e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e8:	1ad3      	subs	r3, r2, r3
 800e8ea:	637b      	str	r3, [r7, #52]	@ 0x34
    if (prec) length -= count;
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d003      	beq.n	800e8fa <get_dqt+0x442>
 800e8f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	637b      	str	r3, [r7, #52]	@ 0x34
  while (length > 0) {
 800e8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f73f ae24 	bgt.w	800e54a <get_dqt+0x92>
  }

  if (length != 0)
 800e902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e904:	2b00      	cmp	r3, #0
 800e906:	d008      	beq.n	800e91a <get_dqt+0x462>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	220c      	movs	r2, #12
 800e90e:	615a      	str	r2, [r3, #20]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	6a3a      	ldr	r2, [r7, #32]
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	69fa      	ldr	r2, [r7, #28]
 800e924:	605a      	str	r2, [r3, #4]
  return TRUE;
 800e926:	2301      	movs	r3, #1
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3738      	adds	r7, #56	@ 0x38
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	080248ac 	.word	0x080248ac
 800e934:	08024848 	.word	0x08024848
 800e938:	080247c8 	.word	0x080247c8
 800e93c:	08024724 	.word	0x08024724
 800e940:	08024654 	.word	0x08024654
 800e944:	08024550 	.word	0x08024550
 800e948:	08024410 	.word	0x08024410

0800e94c <get_dri>:


LOCAL(boolean)
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b088      	sub	sp, #32
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	617b      	str	r3, [r7, #20]
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	61fb      	str	r3, [r7, #28]
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	61bb      	str	r3, [r7, #24]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10e      	bne.n	800e98a <get_dri+0x3e>
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	4798      	blx	r3
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d101      	bne.n	800e97e <get_dri+0x32>
 800e97a:	2300      	movs	r3, #0
 800e97c:	e088      	b.n	800ea90 <get_dri+0x144>
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	61fb      	str	r3, [r7, #28]
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	61bb      	str	r3, [r7, #24]
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	61bb      	str	r3, [r7, #24]
 800e990:	69fb      	ldr	r3, [r7, #28]
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	61fa      	str	r2, [r7, #28]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	021b      	lsls	r3, r3, #8
 800e99a:	613b      	str	r3, [r7, #16]
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d10e      	bne.n	800e9c0 <get_dri+0x74>
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <get_dri+0x68>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e06d      	b.n	800ea90 <get_dri+0x144>
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	61fb      	str	r3, [r7, #28]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	61bb      	str	r3, [r7, #24]
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	61bb      	str	r3, [r7, #24]
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	1c5a      	adds	r2, r3, #1
 800e9ca:	61fa      	str	r2, [r7, #28]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	613b      	str	r3, [r7, #16]
  
  if (length != 4)
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	2b04      	cmp	r3, #4
 800e9da:	d008      	beq.n	800e9ee <get_dri+0xa2>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	220c      	movs	r2, #12
 800e9e2:	615a      	str	r2, [r3, #20]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	4798      	blx	r3

  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10e      	bne.n	800ea12 <get_dri+0xc6>
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	4798      	blx	r3
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d101      	bne.n	800ea06 <get_dri+0xba>
 800ea02:	2300      	movs	r3, #0
 800ea04:	e044      	b.n	800ea90 <get_dri+0x144>
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	61fb      	str	r3, [r7, #28]
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	61bb      	str	r3, [r7, #24]
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	61bb      	str	r3, [r7, #24]
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	61fa      	str	r2, [r7, #28]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	60fb      	str	r3, [r7, #12]
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10e      	bne.n	800ea48 <get_dri+0xfc>
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	4798      	blx	r3
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <get_dri+0xf0>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	e029      	b.n	800ea90 <get_dri+0x144>
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	61fb      	str	r3, [r7, #28]
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	61bb      	str	r3, [r7, #24]
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	61bb      	str	r3, [r7, #24]
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	61fa      	str	r2, [r7, #28]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	60fb      	str	r3, [r7, #12]

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2254      	movs	r2, #84	@ 0x54
 800ea64:	615a      	str	r2, [r3, #20]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	619a      	str	r2, [r3, #24]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	2101      	movs	r1, #1
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	4798      	blx	r3

  cinfo->restart_interval = tmp;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

  INPUT_SYNC(cinfo);
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	69fa      	ldr	r2, [r7, #28]
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	69ba      	ldr	r2, [r7, #24]
 800ea8c:	605a      	str	r2, [r3, #4]
  return TRUE;
 800ea8e:	2301      	movs	r3, #1
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3720      	adds	r7, #32
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	607a      	str	r2, [r7, #4]
 800eaa4:	603b      	str	r3, [r7, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	683a      	ldr	r2, [r7, #0]
 800eaaa:	4413      	add	r3, r2
 800eaac:	617b      	str	r3, [r7, #20]

  if (datalen >= APP0_DATA_LEN &&
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b0d      	cmp	r3, #13
 800eab2:	f240 80d4 	bls.w	800ec5e <examine_app0+0x1c6>
      GETJOCTET(data[0]) == 0x4A &&
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	781b      	ldrb	r3, [r3, #0]
  if (datalen >= APP0_DATA_LEN &&
 800eaba:	2b4a      	cmp	r3, #74	@ 0x4a
 800eabc:	f040 80cf 	bne.w	800ec5e <examine_app0+0x1c6>
      GETJOCTET(data[1]) == 0x46 &&
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	3301      	adds	r3, #1
 800eac4:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x4A &&
 800eac6:	2b46      	cmp	r3, #70	@ 0x46
 800eac8:	f040 80c9 	bne.w	800ec5e <examine_app0+0x1c6>
      GETJOCTET(data[2]) == 0x49 &&
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	3302      	adds	r3, #2
 800ead0:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x46 &&
 800ead2:	2b49      	cmp	r3, #73	@ 0x49
 800ead4:	f040 80c3 	bne.w	800ec5e <examine_app0+0x1c6>
      GETJOCTET(data[3]) == 0x46 &&
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	3303      	adds	r3, #3
 800eadc:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x49 &&
 800eade:	2b46      	cmp	r3, #70	@ 0x46
 800eae0:	f040 80bd 	bne.w	800ec5e <examine_app0+0x1c6>
      GETJOCTET(data[4]) == 0) {
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	3304      	adds	r3, #4
 800eae8:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x46 &&
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f040 80b7 	bne.w	800ec5e <examine_app0+0x1c6>
    /* Found JFIF APP0 marker: save info */
    cinfo->saw_JFIF_marker = TRUE;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	795a      	ldrb	r2, [r3, #5]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	799a      	ldrb	r2, [r3, #6]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	79da      	ldrb	r2, [r3, #7]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	3308      	adds	r3, #8
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	021b      	lsls	r3, r3, #8
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	68ba      	ldr	r2, [r7, #8]
 800eb22:	3209      	adds	r2, #9
 800eb24:	7812      	ldrb	r2, [r2, #0]
 800eb26:	4413      	add	r3, r2
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8a3 2124 	strh.w	r2, [r3, #292]	@ 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	330a      	adds	r3, #10
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	021b      	lsls	r3, r3, #8
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	320b      	adds	r2, #11
 800eb3e:	7812      	ldrb	r2, [r2, #0]
 800eb40:	4413      	add	r3, r2
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f8a3 2126 	strh.w	r2, [r3, #294]	@ 0x126
     * Major version must be 1, anything else signals an incompatible change.
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d016      	beq.n	800eb82 <examine_app0+0xea>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	227a      	movs	r2, #122	@ 0x7a
 800eb5a:	615a      	str	r2, [r3, #20]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	619a      	str	r2, [r3, #24]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f893 2121 	ldrb.w	r2, [r3, #289]	@ 0x121
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	61da      	str	r2, [r3, #28]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	f04f 31ff 	mov.w	r1, #4294967295
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	3318      	adds	r3, #24
 800eb88:	613b      	str	r3, [r7, #16]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800eb90:	461a      	mov	r2, r3
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	601a      	str	r2, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f893 2121 	ldrb.w	r2, [r3, #289]	@ 0x121
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	3304      	adds	r3, #4
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	f8b3 2124 	ldrh.w	r2, [r3, #292]	@ 0x124
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	3308      	adds	r3, #8
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f8b3 2126 	ldrh.w	r2, [r3, #294]	@ 0x126
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	330c      	adds	r3, #12
 800ebb8:	601a      	str	r2, [r3, #0]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	3310      	adds	r3, #16
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2259      	movs	r2, #89	@ 0x59
 800ebcc:	615a      	str	r2, [r3, #20]
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	2101      	movs	r1, #1
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	330c      	adds	r3, #12
 800ebde:	781a      	ldrb	r2, [r3, #0]
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	330d      	adds	r3, #13
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d015      	beq.n	800ec1a <examine_app0+0x182>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	225c      	movs	r2, #92	@ 0x5c
 800ebf4:	615a      	str	r2, [r3, #20]
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	330c      	adds	r3, #12
 800ebfa:	781a      	ldrb	r2, [r3, #0]
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	619a      	str	r2, [r3, #24]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	330d      	adds	r3, #13
 800ec06:	781a      	ldrb	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	61da      	str	r2, [r3, #28]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	2101      	movs	r1, #1
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	3b0e      	subs	r3, #14
 800ec1e:	617b      	str	r3, [r7, #20]
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	330c      	adds	r3, #12
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	461a      	mov	r2, r3
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	330d      	adds	r3, #13
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	fb03 f202 	mul.w	r2, r3, r2
 800ec32:	4613      	mov	r3, r2
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	4413      	add	r3, r2
    if (totallen !=
 800ec38:	697a      	ldr	r2, [r7, #20]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	f000 8088 	beq.w	800ed50 <examine_app0+0x2b8>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	225a      	movs	r2, #90	@ 0x5a
 800ec46:	615a      	str	r2, [r3, #20]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	619a      	str	r2, [r3, #24]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	2101      	movs	r1, #1
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	4798      	blx	r3
    if (totallen !=
 800ec5c:	e078      	b.n	800ed50 <examine_app0+0x2b8>
  } else if (datalen >= 6 &&
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b05      	cmp	r3, #5
 800ec62:	d966      	bls.n	800ed32 <examine_app0+0x29a>
      GETJOCTET(data[0]) == 0x4A &&
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	781b      	ldrb	r3, [r3, #0]
  } else if (datalen >= 6 &&
 800ec68:	2b4a      	cmp	r3, #74	@ 0x4a
 800ec6a:	d162      	bne.n	800ed32 <examine_app0+0x29a>
      GETJOCTET(data[1]) == 0x46 &&
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x4A &&
 800ec72:	2b46      	cmp	r3, #70	@ 0x46
 800ec74:	d15d      	bne.n	800ed32 <examine_app0+0x29a>
      GETJOCTET(data[2]) == 0x58 &&
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	3302      	adds	r3, #2
 800ec7a:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x46 &&
 800ec7c:	2b58      	cmp	r3, #88	@ 0x58
 800ec7e:	d158      	bne.n	800ed32 <examine_app0+0x29a>
      GETJOCTET(data[3]) == 0x58 &&
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	3303      	adds	r3, #3
 800ec84:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x58 &&
 800ec86:	2b58      	cmp	r3, #88	@ 0x58
 800ec88:	d153      	bne.n	800ed32 <examine_app0+0x29a>
      GETJOCTET(data[4]) == 0) {
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x58 &&
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d14e      	bne.n	800ed32 <examine_app0+0x29a>
    /* Found JFIF "JFXX" extension APP0 marker */
    /* The library doesn't actually do anything with these,
     * but we try to produce a helpful trace message.
     */
    switch (GETJOCTET(data[5])) {
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	3305      	adds	r3, #5
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	2b13      	cmp	r3, #19
 800ec9c:	d024      	beq.n	800ece8 <examine_app0+0x250>
 800ec9e:	2b13      	cmp	r3, #19
 800eca0:	dc31      	bgt.n	800ed06 <examine_app0+0x26e>
 800eca2:	2b10      	cmp	r3, #16
 800eca4:	d002      	beq.n	800ecac <examine_app0+0x214>
 800eca6:	2b11      	cmp	r3, #17
 800eca8:	d00f      	beq.n	800ecca <examine_app0+0x232>
 800ecaa:	e02c      	b.n	800ed06 <examine_app0+0x26e>
    case 0x10:
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	226e      	movs	r2, #110	@ 0x6e
 800ecb2:	615a      	str	r2, [r3, #20]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	697a      	ldr	r2, [r7, #20]
 800ecba:	619a      	str	r2, [r3, #24]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	4798      	blx	r3
      break;
 800ecc8:	e032      	b.n	800ed30 <examine_app0+0x298>
    case 0x11:
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	226f      	movs	r2, #111	@ 0x6f
 800ecd0:	615a      	str	r2, [r3, #20]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	697a      	ldr	r2, [r7, #20]
 800ecd8:	619a      	str	r2, [r3, #24]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	2101      	movs	r1, #1
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	4798      	blx	r3
      break;
 800ece6:	e023      	b.n	800ed30 <examine_app0+0x298>
    case 0x13:
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2270      	movs	r2, #112	@ 0x70
 800ecee:	615a      	str	r2, [r3, #20]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	697a      	ldr	r2, [r7, #20]
 800ecf6:	619a      	str	r2, [r3, #24]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	2101      	movs	r1, #1
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	4798      	blx	r3
      break;
 800ed04:	e014      	b.n	800ed30 <examine_app0+0x298>
    default:
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	225b      	movs	r2, #91	@ 0x5b
 800ed0c:	615a      	str	r2, [r3, #20]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	3305      	adds	r3, #5
 800ed12:	781a      	ldrb	r2, [r3, #0]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	619a      	str	r2, [r3, #24]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	697a      	ldr	r2, [r7, #20]
 800ed20:	61da      	str	r2, [r3, #28]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	2101      	movs	r1, #1
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	4798      	blx	r3
	       GETJOCTET(data[5]), (int) totallen);
      break;
 800ed2e:	bf00      	nop
    switch (GETJOCTET(data[5])) {
 800ed30:	e00e      	b.n	800ed50 <examine_app0+0x2b8>
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	224f      	movs	r2, #79	@ 0x4f
 800ed38:	615a      	str	r2, [r3, #20]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	619a      	str	r2, [r3, #24]
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	2101      	movs	r1, #1
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	4798      	blx	r3
  }
}
 800ed4e:	bf00      	nop
 800ed50:	bf00      	nop
 800ed52:	3718      	adds	r7, #24
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b08a      	sub	sp, #40	@ 0x28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
 800ed64:	603b      	str	r3, [r7, #0]
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b0b      	cmp	r3, #11
 800ed6a:	d95d      	bls.n	800ee28 <examine_app14+0xd0>
      GETJOCTET(data[0]) == 0x41 &&
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	781b      	ldrb	r3, [r3, #0]
  if (datalen >= APP14_DATA_LEN &&
 800ed70:	2b41      	cmp	r3, #65	@ 0x41
 800ed72:	d159      	bne.n	800ee28 <examine_app14+0xd0>
      GETJOCTET(data[1]) == 0x64 &&
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	3301      	adds	r3, #1
 800ed78:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x41 &&
 800ed7a:	2b64      	cmp	r3, #100	@ 0x64
 800ed7c:	d154      	bne.n	800ee28 <examine_app14+0xd0>
      GETJOCTET(data[2]) == 0x6F &&
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	3302      	adds	r3, #2
 800ed82:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x64 &&
 800ed84:	2b6f      	cmp	r3, #111	@ 0x6f
 800ed86:	d14f      	bne.n	800ee28 <examine_app14+0xd0>
      GETJOCTET(data[3]) == 0x62 &&
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	3303      	adds	r3, #3
 800ed8c:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x6F &&
 800ed8e:	2b62      	cmp	r3, #98	@ 0x62
 800ed90:	d14a      	bne.n	800ee28 <examine_app14+0xd0>
      GETJOCTET(data[4]) == 0x65) {
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	3304      	adds	r3, #4
 800ed96:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x62 &&
 800ed98:	2b65      	cmp	r3, #101	@ 0x65
 800ed9a:	d145      	bne.n	800ee28 <examine_app14+0xd0>
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	3305      	adds	r3, #5
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	021b      	lsls	r3, r3, #8
 800eda4:	68ba      	ldr	r2, [r7, #8]
 800eda6:	3206      	adds	r2, #6
 800eda8:	7812      	ldrb	r2, [r2, #0]
 800edaa:	4413      	add	r3, r2
 800edac:	627b      	str	r3, [r7, #36]	@ 0x24
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	3307      	adds	r3, #7
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	021b      	lsls	r3, r3, #8
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	3208      	adds	r2, #8
 800edba:	7812      	ldrb	r2, [r2, #0]
 800edbc:	4413      	add	r3, r2
 800edbe:	623b      	str	r3, [r7, #32]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	3309      	adds	r3, #9
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	021b      	lsls	r3, r3, #8
 800edc8:	68ba      	ldr	r2, [r7, #8]
 800edca:	320a      	adds	r2, #10
 800edcc:	7812      	ldrb	r2, [r2, #0]
 800edce:	4413      	add	r3, r2
 800edd0:	61fb      	str	r3, [r7, #28]
    transform = GETJOCTET(data[11]);
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	330b      	adds	r3, #11
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	61bb      	str	r3, [r7, #24]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	3318      	adds	r3, #24
 800ede0:	617b      	str	r3, [r7, #20]
 800ede2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	601a      	str	r2, [r3, #0]
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	3304      	adds	r3, #4
 800edec:	6a3a      	ldr	r2, [r7, #32]
 800edee:	601a      	str	r2, [r3, #0]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	3308      	adds	r3, #8
 800edf4:	69fa      	ldr	r2, [r7, #28]
 800edf6:	601a      	str	r2, [r3, #0]
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	330c      	adds	r3, #12
 800edfc:	69ba      	ldr	r2, [r7, #24]
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	224e      	movs	r2, #78	@ 0x4e
 800ee06:	615a      	str	r2, [r3, #20]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	2101      	movs	r1, #1
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	4798      	blx	r3
    cinfo->saw_Adobe_marker = TRUE;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    cinfo->Adobe_transform = (UINT8) transform;
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
 800ee26:	e010      	b.n	800ee4a <examine_app14+0xf2>
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2250      	movs	r2, #80	@ 0x50
 800ee2e:	615a      	str	r2, [r3, #20]
 800ee30:	683a      	ldr	r2, [r7, #0]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	441a      	add	r2, r3
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	619a      	str	r2, [r3, #24]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	2101      	movs	r1, #1
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	4798      	blx	r3
  }
}
 800ee48:	bf00      	nop
 800ee4a:	bf00      	nop
 800ee4c:	3728      	adds	r7, #40	@ 0x28
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b08c      	sub	sp, #48	@ 0x30
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	699b      	ldr	r3, [r3, #24]
 800ee5e:	61fb      	str	r3, [r7, #28]
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	623b      	str	r3, [r7, #32]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10e      	bne.n	800ee90 <get_interesting_appn+0x3e>
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	4798      	blx	r3
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <get_interesting_appn+0x32>
 800ee80:	2300      	movs	r3, #0
 800ee82:	e0a1      	b.n	800efc8 <get_interesting_appn+0x176>
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	623b      	str	r3, [r7, #32]
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	3b01      	subs	r3, #1
 800ee94:	623b      	str	r3, [r7, #32]
 800ee96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee98:	1c5a      	adds	r2, r3, #1
 800ee9a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	021b      	lsls	r3, r3, #8
 800eea0:	61bb      	str	r3, [r7, #24]
 800eea2:	6a3b      	ldr	r3, [r7, #32]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d10e      	bne.n	800eec6 <get_interesting_appn+0x74>
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	4798      	blx	r3
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d101      	bne.n	800eeba <get_interesting_appn+0x68>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	e086      	b.n	800efc8 <get_interesting_appn+0x176>
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	627b      	str	r3, [r7, #36]	@ 0x24
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	623b      	str	r3, [r7, #32]
 800eec6:	6a3b      	ldr	r3, [r7, #32]
 800eec8:	3b01      	subs	r3, #1
 800eeca:	623b      	str	r3, [r7, #32]
 800eecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eece:	1c5a      	adds	r2, r3, #1
 800eed0:	627a      	str	r2, [r7, #36]	@ 0x24
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	4413      	add	r3, r2
 800eeda:	61bb      	str	r3, [r7, #24]
  length -= 2;
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	3b02      	subs	r3, #2
 800eee0:	61bb      	str	r3, [r7, #24]

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	2b0d      	cmp	r3, #13
 800eee6:	dd02      	ble.n	800eeee <get_interesting_appn+0x9c>
    numtoread = APPN_DATA_LEN;
 800eee8:	230e      	movs	r3, #14
 800eeea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eeec:	e007      	b.n	800eefe <get_interesting_appn+0xac>
  else if (length > 0)
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	dd02      	ble.n	800eefa <get_interesting_appn+0xa8>
    numtoread = (unsigned int) length;
 800eef4:	69bb      	ldr	r3, [r7, #24]
 800eef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eef8:	e001      	b.n	800eefe <get_interesting_appn+0xac>
  else
    numtoread = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < numtoread; i++)
 800eefe:	2300      	movs	r3, #0
 800ef00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef02:	e021      	b.n	800ef48 <get_interesting_appn+0xf6>
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800ef04:	6a3b      	ldr	r3, [r7, #32]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10e      	bne.n	800ef28 <get_interesting_appn+0xd6>
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	4798      	blx	r3
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d101      	bne.n	800ef1c <get_interesting_appn+0xca>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e055      	b.n	800efc8 <get_interesting_appn+0x176>
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	623b      	str	r3, [r7, #32]
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	623b      	str	r3, [r7, #32]
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef30:	1c5a      	adds	r2, r3, #1
 800ef32:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef34:	7819      	ldrb	r1, [r3, #0]
 800ef36:	f107 0208 	add.w	r2, r7, #8
 800ef3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3c:	4413      	add	r3, r2
 800ef3e:	460a      	mov	r2, r1
 800ef40:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < numtoread; i++)
 800ef42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef44:	3301      	adds	r3, #1
 800ef46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d3d9      	bcc.n	800ef04 <get_interesting_appn+0xb2>
  length -= numtoread;
 800ef50:	69ba      	ldr	r2, [r7, #24]
 800ef52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	61bb      	str	r3, [r7, #24]

  /* process it */
  switch (cinfo->unread_marker) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800ef5e:	2be0      	cmp	r3, #224	@ 0xe0
 800ef60:	d002      	beq.n	800ef68 <get_interesting_appn+0x116>
 800ef62:	2bee      	cmp	r3, #238	@ 0xee
 800ef64:	d008      	beq.n	800ef78 <get_interesting_appn+0x126>
 800ef66:	e00f      	b.n	800ef88 <get_interesting_appn+0x136>
  case M_APP0:
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800ef68:	f107 0108 	add.w	r1, r7, #8
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f7ff fd91 	bl	800ea98 <examine_app0>
    break;
 800ef76:	e017      	b.n	800efa8 <get_interesting_appn+0x156>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800ef78:	f107 0108 	add.w	r1, r7, #8
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7ff fee9 	bl	800ed58 <examine_app14>
    break;
 800ef86:	e00f      	b.n	800efa8 <get_interesting_appn+0x156>
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2246      	movs	r2, #70	@ 0x46
 800ef8e:	615a      	str	r2, [r3, #20]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	f8d2 21b4 	ldr.w	r2, [r2, #436]	@ 0x1b4
 800ef9a:	619a      	str	r2, [r3, #24]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	4798      	blx	r3
    break;
 800efa6:	bf00      	nop
  }

  /* skip any remaining data -- could be lots */
  INPUT_SYNC(cinfo);
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	6a3a      	ldr	r2, [r7, #32]
 800efb2:	605a      	str	r2, [r3, #4]
  if (length > 0)
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	dd05      	ble.n	800efc6 <get_interesting_appn+0x174>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	699b      	ldr	r3, [r3, #24]
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	69b9      	ldr	r1, [r7, #24]
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	4798      	blx	r3

  return TRUE;
 800efc6:	2301      	movs	r3, #1
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3730      	adds	r7, #48	@ 0x30
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b086      	sub	sp, #24
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  INT32 length;
  INPUT_VARS(cinfo);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	699b      	ldr	r3, [r3, #24]
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	617b      	str	r3, [r7, #20]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	613b      	str	r3, [r7, #16]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10e      	bne.n	800f00e <skip_variable+0x3e>
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	4798      	blx	r3
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <skip_variable+0x32>
 800effe:	2300      	movs	r3, #0
 800f000:	e052      	b.n	800f0a8 <skip_variable+0xd8>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	617b      	str	r3, [r7, #20]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	613b      	str	r3, [r7, #16]
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	3b01      	subs	r3, #1
 800f012:	613b      	str	r3, [r7, #16]
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	1c5a      	adds	r2, r3, #1
 800f018:	617a      	str	r2, [r7, #20]
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	021b      	lsls	r3, r3, #8
 800f01e:	60bb      	str	r3, [r7, #8]
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d10e      	bne.n	800f044 <skip_variable+0x74>
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	4798      	blx	r3
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d101      	bne.n	800f038 <skip_variable+0x68>
 800f034:	2300      	movs	r3, #0
 800f036:	e037      	b.n	800f0a8 <skip_variable+0xd8>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	617b      	str	r3, [r7, #20]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	685b      	ldr	r3, [r3, #4]
 800f042:	613b      	str	r3, [r7, #16]
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	3b01      	subs	r3, #1
 800f048:	613b      	str	r3, [r7, #16]
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	1c5a      	adds	r2, r3, #1
 800f04e:	617a      	str	r2, [r7, #20]
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	4413      	add	r3, r2
 800f058:	60bb      	str	r3, [r7, #8]
  length -= 2;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	3b02      	subs	r3, #2
 800f05e:	60bb      	str	r3, [r7, #8]
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	225d      	movs	r2, #93	@ 0x5d
 800f066:	615a      	str	r2, [r3, #20]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	f8d2 21b4 	ldr.w	r2, [r2, #436]	@ 0x1b4
 800f072:	619a      	str	r2, [r3, #24]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68ba      	ldr	r2, [r7, #8]
 800f07a:	61da      	str	r2, [r3, #28]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	2101      	movs	r1, #1
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	4798      	blx	r3

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	697a      	ldr	r2, [r7, #20]
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	693a      	ldr	r2, [r7, #16]
 800f092:	605a      	str	r2, [r3, #4]
  if (length > 0)
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	2b00      	cmp	r3, #0
 800f098:	dd05      	ble.n	800f0a6 <skip_variable+0xd6>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	4798      	blx	r3

  return TRUE;
 800f0a6:	2301      	movs	r3, #1
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3718      	adds	r7, #24
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  int c;
  INPUT_VARS(cinfo);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	699b      	ldr	r3, [r3, #24]
 800f0bc:	60bb      	str	r3, [r7, #8]
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	613b      	str	r3, [r7, #16]
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	60fb      	str	r3, [r7, #12]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d10e      	bne.n	800f0ee <next_marker+0x3e>
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	4798      	blx	r3
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <next_marker+0x32>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	e094      	b.n	800f20c <next_marker+0x15c>
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	613b      	str	r3, [r7, #16]
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	60fb      	str	r3, [r7, #12]
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	613a      	str	r2, [r7, #16]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	617b      	str	r3, [r7, #20]
    /* Skip any non-FF bytes.
     * This may look a bit inefficient, but it will not occur in a valid file.
     * We sync after each discarded byte so that a suspending data source
     * can discard the byte from its buffer.
     */
    while (c != 0xFF) {
 800f0fe:	e025      	b.n	800f14c <next_marker+0x9c>
      cinfo->marker->discarded_bytes++;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f106:	699a      	ldr	r2, [r3, #24]
 800f108:	3201      	adds	r2, #1
 800f10a:	619a      	str	r2, [r3, #24]
      INPUT_SYNC(cinfo);
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	693a      	ldr	r2, [r7, #16]
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	605a      	str	r2, [r3, #4]
      INPUT_BYTE(cinfo, c, return FALSE);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d10e      	bne.n	800f13c <next_marker+0x8c>
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	4798      	blx	r3
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d101      	bne.n	800f130 <next_marker+0x80>
 800f12c:	2300      	movs	r3, #0
 800f12e:	e06d      	b.n	800f20c <next_marker+0x15c>
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	613b      	str	r3, [r7, #16]
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3b01      	subs	r3, #1
 800f140:	60fb      	str	r3, [r7, #12]
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	613a      	str	r2, [r7, #16]
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	617b      	str	r3, [r7, #20]
    while (c != 0xFF) {
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	2bff      	cmp	r3, #255	@ 0xff
 800f150:	d1d6      	bne.n	800f100 <next_marker+0x50>
     * pad bytes, so don't count them in discarded_bytes.  We assume there
     * will not be so many consecutive FF bytes as to overflow a suspending
     * data source's input buffer.
     */
    do {
      INPUT_BYTE(cinfo, c, return FALSE);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10e      	bne.n	800f176 <next_marker+0xc6>
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	4798      	blx	r3
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <next_marker+0xba>
 800f166:	2300      	movs	r3, #0
 800f168:	e050      	b.n	800f20c <next_marker+0x15c>
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	613b      	str	r3, [r7, #16]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	60fb      	str	r3, [r7, #12]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	3b01      	subs	r3, #1
 800f17a:	60fb      	str	r3, [r7, #12]
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	1c5a      	adds	r2, r3, #1
 800f180:	613a      	str	r2, [r7, #16]
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	617b      	str	r3, [r7, #20]
    } while (c == 0xFF);
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	2bff      	cmp	r3, #255	@ 0xff
 800f18a:	d0e2      	beq.n	800f152 <next_marker+0xa2>
    if (c != 0)
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10f      	bne.n	800f1b2 <next_marker+0x102>
      break;			/* found a valid marker, exit loop */
    /* Reach here if we found a stuffed-zero data sequence (FF/00).
     * Discard it and loop back to try again.
     */
    cinfo->marker->discarded_bytes += 2;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f198:	699a      	ldr	r2, [r3, #24]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f1a0:	3202      	adds	r2, #2
 800f1a2:	619a      	str	r2, [r3, #24]
    INPUT_SYNC(cinfo);
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	693a      	ldr	r2, [r7, #16]
 800f1a8:	601a      	str	r2, [r3, #0]
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	68fa      	ldr	r2, [r7, #12]
 800f1ae:	605a      	str	r2, [r3, #4]
    INPUT_BYTE(cinfo, c, return FALSE);
 800f1b0:	e78b      	b.n	800f0ca <next_marker+0x1a>
      break;			/* found a valid marker, exit loop */
 800f1b2:	bf00      	nop
  }

  if (cinfo->marker->discarded_bytes != 0) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d01a      	beq.n	800f1f6 <next_marker+0x146>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2277      	movs	r2, #119	@ 0x77
 800f1c6:	615a      	str	r2, [r3, #20]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f1ce:	699a      	ldr	r2, [r3, #24]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	619a      	str	r2, [r3, #24]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	61da      	str	r2, [r3, #28]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	f04f 31ff 	mov.w	r1, #4294967295
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	619a      	str	r2, [r3, #24]
  }

  cinfo->unread_marker = c;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	697a      	ldr	r2, [r7, #20]
 800f1fa:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4

  INPUT_SYNC(cinfo);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	693a      	ldr	r2, [r7, #16]
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	605a      	str	r2, [r3, #4]
  return TRUE;
 800f20a:	2301      	movs	r3, #1
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <first_marker>:
/* For this marker, we do not allow preceding garbage or fill; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 */
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b088      	sub	sp, #32
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  int c, c2;
  INPUT_VARS(cinfo);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	617b      	str	r3, [r7, #20]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	61fb      	str	r3, [r7, #28]
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	61bb      	str	r3, [r7, #24]

  INPUT_BYTE(cinfo, c, return FALSE);
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d10e      	bne.n	800f252 <first_marker+0x3e>
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	4798      	blx	r3
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <first_marker+0x32>
 800f242:	2300      	movs	r3, #0
 800f244:	e049      	b.n	800f2da <first_marker+0xc6>
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	61fb      	str	r3, [r7, #28]
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	61bb      	str	r3, [r7, #24]
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	3b01      	subs	r3, #1
 800f256:	61bb      	str	r3, [r7, #24]
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	1c5a      	adds	r2, r3, #1
 800f25c:	61fa      	str	r2, [r7, #28]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	613b      	str	r3, [r7, #16]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10e      	bne.n	800f286 <first_marker+0x72>
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	4798      	blx	r3
 800f270:	4603      	mov	r3, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d101      	bne.n	800f27a <first_marker+0x66>
 800f276:	2300      	movs	r3, #0
 800f278:	e02f      	b.n	800f2da <first_marker+0xc6>
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	61fb      	str	r3, [r7, #28]
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	61bb      	str	r3, [r7, #24]
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	3b01      	subs	r3, #1
 800f28a:	61bb      	str	r3, [r7, #24]
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	1c5a      	adds	r2, r3, #1
 800f290:	61fa      	str	r2, [r7, #28]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	60fb      	str	r3, [r7, #12]
  if (c != 0xFF || c2 != (int) M_SOI)
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	2bff      	cmp	r3, #255	@ 0xff
 800f29a:	d102      	bne.n	800f2a2 <first_marker+0x8e>
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2bd8      	cmp	r3, #216	@ 0xd8
 800f2a0:	d010      	beq.n	800f2c4 <first_marker+0xb0>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2237      	movs	r2, #55	@ 0x37
 800f2a8:	615a      	str	r2, [r3, #20]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	693a      	ldr	r2, [r7, #16]
 800f2b0:	619a      	str	r2, [r3, #24]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	61da      	str	r2, [r3, #28]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	4798      	blx	r3

  cinfo->unread_marker = c2;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4

  INPUT_SYNC(cinfo);
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	69fa      	ldr	r2, [r7, #28]
 800f2d0:	601a      	str	r2, [r3, #0]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	69ba      	ldr	r2, [r7, #24]
 800f2d6:	605a      	str	r2, [r3, #4]
  return TRUE;
 800f2d8:	2301      	movs	r3, #1
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3720      	adds	r7, #32
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
	...

0800f2e4 <read_markers>:
 * after processing for the caller.
 */

METHODDEF(int)
read_markers (j_decompress_ptr cinfo)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* Outer loop repeats once for each marker. */
  for (;;) {
    /* Collect the marker proper, unless we already did. */
    /* NB: first_marker() enforces the requirement that SOI appear first. */
    if (cinfo->unread_marker == 0) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d115      	bne.n	800f322 <read_markers+0x3e>
      if (! cinfo->marker->saw_SOI) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d107      	bne.n	800f312 <read_markers+0x2e>
	if (! first_marker(cinfo))
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7ff ff86 	bl	800f214 <first_marker>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d109      	bne.n	800f322 <read_markers+0x3e>
	  return JPEG_SUSPENDED;
 800f30e:	2300      	movs	r3, #0
 800f310:	e192      	b.n	800f638 <read_markers+0x354>
      } else {
	if (! next_marker(cinfo))
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff fecc 	bl	800f0b0 <next_marker>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d101      	bne.n	800f322 <read_markers+0x3e>
	  return JPEG_SUSPENDED;
 800f31e:	2300      	movs	r3, #0
 800f320:	e18a      	b.n	800f638 <read_markers+0x354>
    }
    /* At this point cinfo->unread_marker contains the marker code and the
     * input point is just past the marker proper, but before any parameters.
     * A suspension will cause us to return with this state still true.
     */
    switch (cinfo->unread_marker) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800f328:	2b01      	cmp	r3, #1
 800f32a:	f000 813e 	beq.w	800f5aa <read_markers+0x2c6>
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f340 8154 	ble.w	800f5dc <read_markers+0x2f8>
 800f334:	2bfe      	cmp	r3, #254	@ 0xfe
 800f336:	f300 8151 	bgt.w	800f5dc <read_markers+0x2f8>
 800f33a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f33c:	f2c0 814e 	blt.w	800f5dc <read_markers+0x2f8>
 800f340:	3bc0      	subs	r3, #192	@ 0xc0
 800f342:	2b3e      	cmp	r3, #62	@ 0x3e
 800f344:	f200 814a 	bhi.w	800f5dc <read_markers+0x2f8>
 800f348:	a201      	add	r2, pc, #4	@ (adr r2, 800f350 <read_markers+0x6c>)
 800f34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34e:	bf00      	nop
 800f350:	0800f45f 	.word	0x0800f45f
 800f354:	0800f477 	.word	0x0800f477
 800f358:	0800f48f 	.word	0x0800f48f
 800f35c:	0800f4d7 	.word	0x0800f4d7
 800f360:	0800f543 	.word	0x0800f543
 800f364:	0800f4d7 	.word	0x0800f4d7
 800f368:	0800f4d7 	.word	0x0800f4d7
 800f36c:	0800f4d7 	.word	0x0800f4d7
 800f370:	0800f4d7 	.word	0x0800f4d7
 800f374:	0800f4a7 	.word	0x0800f4a7
 800f378:	0800f4bf 	.word	0x0800f4bf
 800f37c:	0800f4d7 	.word	0x0800f4d7
 800f380:	0800f533 	.word	0x0800f533
 800f384:	0800f4d7 	.word	0x0800f4d7
 800f388:	0800f4d7 	.word	0x0800f4d7
 800f38c:	0800f4d7 	.word	0x0800f4d7
 800f390:	0800f5ab 	.word	0x0800f5ab
 800f394:	0800f5ab 	.word	0x0800f5ab
 800f398:	0800f5ab 	.word	0x0800f5ab
 800f39c:	0800f5ab 	.word	0x0800f5ab
 800f3a0:	0800f5ab 	.word	0x0800f5ab
 800f3a4:	0800f5ab 	.word	0x0800f5ab
 800f3a8:	0800f5ab 	.word	0x0800f5ab
 800f3ac:	0800f5ab 	.word	0x0800f5ab
 800f3b0:	0800f44d 	.word	0x0800f44d
 800f3b4:	0800f513 	.word	0x0800f513
 800f3b8:	0800f4f7 	.word	0x0800f4f7
 800f3bc:	0800f553 	.word	0x0800f553
 800f3c0:	0800f5cd 	.word	0x0800f5cd
 800f3c4:	0800f563 	.word	0x0800f563
 800f3c8:	0800f5dd 	.word	0x0800f5dd
 800f3cc:	0800f5dd 	.word	0x0800f5dd
 800f3d0:	0800f573 	.word	0x0800f573
 800f3d4:	0800f573 	.word	0x0800f573
 800f3d8:	0800f573 	.word	0x0800f573
 800f3dc:	0800f573 	.word	0x0800f573
 800f3e0:	0800f573 	.word	0x0800f573
 800f3e4:	0800f573 	.word	0x0800f573
 800f3e8:	0800f573 	.word	0x0800f573
 800f3ec:	0800f573 	.word	0x0800f573
 800f3f0:	0800f573 	.word	0x0800f573
 800f3f4:	0800f573 	.word	0x0800f573
 800f3f8:	0800f573 	.word	0x0800f573
 800f3fc:	0800f573 	.word	0x0800f573
 800f400:	0800f573 	.word	0x0800f573
 800f404:	0800f573 	.word	0x0800f573
 800f408:	0800f573 	.word	0x0800f573
 800f40c:	0800f573 	.word	0x0800f573
 800f410:	0800f5dd 	.word	0x0800f5dd
 800f414:	0800f5dd 	.word	0x0800f5dd
 800f418:	0800f5dd 	.word	0x0800f5dd
 800f41c:	0800f5dd 	.word	0x0800f5dd
 800f420:	0800f5dd 	.word	0x0800f5dd
 800f424:	0800f5dd 	.word	0x0800f5dd
 800f428:	0800f5dd 	.word	0x0800f5dd
 800f42c:	0800f5dd 	.word	0x0800f5dd
 800f430:	0800f5dd 	.word	0x0800f5dd
 800f434:	0800f5dd 	.word	0x0800f5dd
 800f438:	0800f5dd 	.word	0x0800f5dd
 800f43c:	0800f5dd 	.word	0x0800f5dd
 800f440:	0800f5dd 	.word	0x0800f5dd
 800f444:	0800f5dd 	.word	0x0800f5dd
 800f448:	0800f595 	.word	0x0800f595
    case M_SOI:
      if (! get_soi(cinfo))
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7fe f82b 	bl	800d4a8 <get_soi>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 80d1 	bne.w	800f5fc <read_markers+0x318>
	return JPEG_SUSPENDED;
 800f45a:	2300      	movs	r3, #0
 800f45c:	e0ec      	b.n	800f638 <read_markers+0x354>
      break;

    case M_SOF0:		/* Baseline */
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800f45e:	2300      	movs	r3, #0
 800f460:	2200      	movs	r2, #0
 800f462:	2101      	movs	r1, #1
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7fe f88e 	bl	800d586 <get_sof>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f040 80c7 	bne.w	800f600 <read_markers+0x31c>
	return JPEG_SUSPENDED;
 800f472:	2300      	movs	r3, #0
 800f474:	e0e0      	b.n	800f638 <read_markers+0x354>
      break;

    case M_SOF1:		/* Extended sequential, Huffman */
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800f476:	2300      	movs	r3, #0
 800f478:	2200      	movs	r2, #0
 800f47a:	2100      	movs	r1, #0
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7fe f882 	bl	800d586 <get_sof>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	f040 80bd 	bne.w	800f604 <read_markers+0x320>
	return JPEG_SUSPENDED;
 800f48a:	2300      	movs	r3, #0
 800f48c:	e0d4      	b.n	800f638 <read_markers+0x354>
      break;

    case M_SOF2:		/* Progressive, Huffman */
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800f48e:	2300      	movs	r3, #0
 800f490:	2201      	movs	r2, #1
 800f492:	2100      	movs	r1, #0
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7fe f876 	bl	800d586 <get_sof>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f040 80b3 	bne.w	800f608 <read_markers+0x324>
	return JPEG_SUSPENDED;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	e0c8      	b.n	800f638 <read_markers+0x354>
      break;

    case M_SOF9:		/* Extended sequential, arithmetic */
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7fe f86a 	bl	800d586 <get_sof>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f040 80a9 	bne.w	800f60c <read_markers+0x328>
	return JPEG_SUSPENDED;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e0bc      	b.n	800f638 <read_markers+0x354>
      break;

    case M_SOF10:		/* Progressive, arithmetic */
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800f4be:	2301      	movs	r3, #1
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f7fe f85e 	bl	800d586 <get_sof>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f040 809f 	bne.w	800f610 <read_markers+0x32c>
	return JPEG_SUSPENDED;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	e0b0      	b.n	800f638 <read_markers+0x354>
    case M_JPG:			/* Reserved for JPEG extensions */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	223e      	movs	r2, #62	@ 0x3e
 800f4dc:	615a      	str	r2, [r3, #20]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	f8d2 21b4 	ldr.w	r2, [r2, #436]	@ 0x1b4
 800f4e8:	619a      	str	r2, [r3, #24]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	4798      	blx	r3
      break;
 800f4f4:	e09b      	b.n	800f62e <read_markers+0x34a>

    case M_SOS:
      if (! get_sos(cinfo))
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7fe fa59 	bl	800d9ae <get_sos>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d101      	bne.n	800f506 <read_markers+0x222>
	return JPEG_SUSPENDED;
 800f502:	2300      	movs	r3, #0
 800f504:	e098      	b.n	800f638 <read_markers+0x354>
      cinfo->unread_marker = 0;	/* processed the marker */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
      return JPEG_REACHED_SOS;
 800f50e:	2301      	movs	r3, #1
 800f510:	e092      	b.n	800f638 <read_markers+0x354>
    
    case M_EOI:
      TRACEMS(cinfo, 1, JTRC_EOI);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2257      	movs	r2, #87	@ 0x57
 800f518:	615a      	str	r2, [r3, #20]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	2101      	movs	r1, #1
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
      return JPEG_REACHED_EOI;
 800f52e:	2302      	movs	r3, #2
 800f530:	e082      	b.n	800f638 <read_markers+0x354>
      
    case M_DAC:
      if (! get_dac(cinfo))
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7fe fc09 	bl	800dd4a <get_dac>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d16a      	bne.n	800f614 <read_markers+0x330>
	return JPEG_SUSPENDED;
 800f53e:	2300      	movs	r3, #0
 800f540:	e07a      	b.n	800f638 <read_markers+0x354>
      break;
      
    case M_DHT:
      if (! get_dht(cinfo))
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7fe fcfb 	bl	800df3e <get_dht>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d164      	bne.n	800f618 <read_markers+0x334>
	return JPEG_SUSPENDED;
 800f54e:	2300      	movs	r3, #0
 800f550:	e072      	b.n	800f638 <read_markers+0x354>
      break;
      
    case M_DQT:
      if (! get_dqt(cinfo))
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7fe ffb0 	bl	800e4b8 <get_dqt>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d15e      	bne.n	800f61c <read_markers+0x338>
	return JPEG_SUSPENDED;
 800f55e:	2300      	movs	r3, #0
 800f560:	e06a      	b.n	800f638 <read_markers+0x354>
      break;
      
    case M_DRI:
      if (! get_dri(cinfo))
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff f9f2 	bl	800e94c <get_dri>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d158      	bne.n	800f620 <read_markers+0x33c>
	return JPEG_SUSPENDED;
 800f56e:	2300      	movs	r3, #0
 800f570:	e062      	b.n	800f638 <read_markers+0x354>
    case M_APP11:
    case M_APP12:
    case M_APP13:
    case M_APP14:
    case M_APP15:
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
		cinfo->unread_marker - (int) M_APP0]) (cinfo))
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	f8d2 21b4 	ldr.w	r2, [r2, #436]	@ 0x1b4
 800f57e:	3ae0      	subs	r2, #224	@ 0xe0
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800f580:	3208      	adds	r2, #8
 800f582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	4798      	blx	r3
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d149      	bne.n	800f624 <read_markers+0x340>
	return JPEG_SUSPENDED;
 800f590:	2300      	movs	r3, #0
 800f592:	e051      	b.n	800f638 <read_markers+0x354>
      break;
      
    case M_COM:
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f59a:	69db      	ldr	r3, [r3, #28]
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	4798      	blx	r3
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d140      	bne.n	800f628 <read_markers+0x344>
	return JPEG_SUSPENDED;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	e046      	b.n	800f638 <read_markers+0x354>
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM:
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	225e      	movs	r2, #94	@ 0x5e
 800f5b0:	615a      	str	r2, [r3, #20]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	f8d2 21b4 	ldr.w	r2, [r2, #436]	@ 0x1b4
 800f5bc:	619a      	str	r2, [r3, #24]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	4798      	blx	r3
      break;
 800f5ca:	e030      	b.n	800f62e <read_markers+0x34a>

    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
      if (! skip_variable(cinfo))
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f7ff fcff 	bl	800efd0 <skip_variable>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d129      	bne.n	800f62c <read_markers+0x348>
	return JPEG_SUSPENDED;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	e02d      	b.n	800f638 <read_markers+0x354>
      /* For now, we treat the reserved markers as fatal errors since they are
       * likely to be used to signal incompatible JPEG Part 3 extensions.
       * Once the JPEG 3 version-number marker is well defined, this code
       * ought to change!
       */
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2246      	movs	r2, #70	@ 0x46
 800f5e2:	615a      	str	r2, [r3, #20]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	f8d2 21b4 	ldr.w	r2, [r2, #436]	@ 0x1b4
 800f5ee:	619a      	str	r2, [r3, #24]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	4798      	blx	r3
      break;
 800f5fa:	e018      	b.n	800f62e <read_markers+0x34a>
      break;
 800f5fc:	bf00      	nop
 800f5fe:	e016      	b.n	800f62e <read_markers+0x34a>
      break;
 800f600:	bf00      	nop
 800f602:	e014      	b.n	800f62e <read_markers+0x34a>
      break;
 800f604:	bf00      	nop
 800f606:	e012      	b.n	800f62e <read_markers+0x34a>
      break;
 800f608:	bf00      	nop
 800f60a:	e010      	b.n	800f62e <read_markers+0x34a>
      break;
 800f60c:	bf00      	nop
 800f60e:	e00e      	b.n	800f62e <read_markers+0x34a>
      break;
 800f610:	bf00      	nop
 800f612:	e00c      	b.n	800f62e <read_markers+0x34a>
      break;
 800f614:	bf00      	nop
 800f616:	e00a      	b.n	800f62e <read_markers+0x34a>
      break;
 800f618:	bf00      	nop
 800f61a:	e008      	b.n	800f62e <read_markers+0x34a>
      break;
 800f61c:	bf00      	nop
 800f61e:	e006      	b.n	800f62e <read_markers+0x34a>
      break;
 800f620:	bf00      	nop
 800f622:	e004      	b.n	800f62e <read_markers+0x34a>
      break;
 800f624:	bf00      	nop
 800f626:	e002      	b.n	800f62e <read_markers+0x34a>
      break;
 800f628:	bf00      	nop
 800f62a:	e000      	b.n	800f62e <read_markers+0x34a>
      break;
 800f62c:	bf00      	nop
    }
    /* Successfully processed marker, so reset state variable */
    cinfo->unread_marker = 0;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    if (cinfo->unread_marker == 0) {
 800f636:	e659      	b.n	800f2ec <read_markers+0x8>
  } /* end loop */
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <read_restart_marker>:
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d107      	bne.n	800f662 <read_restart_marker+0x22>
    if (! next_marker(cinfo))
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7ff fd2c 	bl	800f0b0 <next_marker>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <read_restart_marker+0x22>
      return FALSE;
 800f65e:	2300      	movs	r3, #0
 800f660:	e03a      	b.n	800f6d8 <read_restart_marker+0x98>
  }

  if (cinfo->unread_marker ==
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f66e:	695b      	ldr	r3, [r3, #20]
 800f670:	33d0      	adds	r3, #208	@ 0xd0
  if (cinfo->unread_marker ==
 800f672:	429a      	cmp	r2, r3
 800f674:	d115      	bne.n	800f6a2 <read_restart_marker+0x62>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2264      	movs	r2, #100	@ 0x64
 800f67c:	615a      	str	r2, [r3, #20]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 21cc 	ldr.w	r2, [r3, #460]	@ 0x1cc
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6952      	ldr	r2, [r2, #20]
 800f68a:	619a      	str	r2, [r3, #24]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	2103      	movs	r1, #3
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
 800f6a0:	e00e      	b.n	800f6c0 <read_restart_marker+0x80>
  } else {
    /* Uh-oh, the restart markers have been messed up. */
    /* Let the data source manager determine how to resync. */
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	699b      	ldr	r3, [r3, #24]
 800f6a6:	695b      	ldr	r3, [r3, #20]
					    cinfo->marker->next_restart_num))
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	f8d2 21cc 	ldr.w	r2, [r2, #460]	@ 0x1cc
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800f6ae:	6952      	ldr	r2, [r2, #20]
 800f6b0:	4611      	mov	r1, r2
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	4798      	blx	r3
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <read_restart_marker+0x80>
      return FALSE;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	e00b      	b.n	800f6d8 <read_restart_marker+0x98>
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f6c6:	695b      	ldr	r3, [r3, #20]
 800f6c8:	1c5a      	adds	r2, r3, #1
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f6d0:	f002 0207 	and.w	r2, r2, #7
 800f6d4:	615a      	str	r2, [r3, #20]

  return TRUE;
 800f6d6:	2301      	movs	r3, #1
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <jpeg_resync_to_restart>:
 * any other marker would have to be bogus data in that case.
 */

GLOBAL(boolean)
jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  int marker = cinfo->unread_marker;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800f6f0:	60fb      	str	r3, [r7, #12]
  int action = 1;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	60bb      	str	r3, [r7, #8]
  
  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	227c      	movs	r2, #124	@ 0x7c
 800f6fc:	615a      	str	r2, [r3, #20]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	619a      	str	r2, [r3, #24]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	683a      	ldr	r2, [r7, #0]
 800f70c:	61da      	str	r2, [r3, #28]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	f04f 31ff 	mov.w	r1, #4294967295
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	4798      	blx	r3
  
  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
    if (marker < (int) M_SOF0)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2bbf      	cmp	r3, #191	@ 0xbf
 800f720:	dc02      	bgt.n	800f728 <jpeg_resync_to_restart+0x48>
      action = 2;		/* invalid marker */
 800f722:	2302      	movs	r3, #2
 800f724:	60bb      	str	r3, [r7, #8]
 800f726:	e030      	b.n	800f78a <jpeg_resync_to_restart+0xaa>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2bcf      	cmp	r3, #207	@ 0xcf
 800f72c:	dd02      	ble.n	800f734 <jpeg_resync_to_restart+0x54>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2bd7      	cmp	r3, #215	@ 0xd7
 800f732:	dd02      	ble.n	800f73a <jpeg_resync_to_restart+0x5a>
      action = 3;		/* valid non-restart marker */
 800f734:	2303      	movs	r3, #3
 800f736:	60bb      	str	r3, [r7, #8]
 800f738:	e027      	b.n	800f78a <jpeg_resync_to_restart+0xaa>
    else {
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	3301      	adds	r3, #1
 800f73e:	f003 0307 	and.w	r3, r3, #7
 800f742:	33d0      	adds	r3, #208	@ 0xd0
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	429a      	cmp	r2, r3
 800f748:	d007      	beq.n	800f75a <jpeg_resync_to_restart+0x7a>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	3302      	adds	r3, #2
 800f74e:	f003 0307 	and.w	r3, r3, #7
 800f752:	33d0      	adds	r3, #208	@ 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	429a      	cmp	r2, r3
 800f758:	d102      	bne.n	800f760 <jpeg_resync_to_restart+0x80>
	action = 3;		/* one of the next two expected restarts */
 800f75a:	2303      	movs	r3, #3
 800f75c:	60bb      	str	r3, [r7, #8]
 800f75e:	e014      	b.n	800f78a <jpeg_resync_to_restart+0xaa>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	3b01      	subs	r3, #1
 800f764:	f003 0307 	and.w	r3, r3, #7
 800f768:	33d0      	adds	r3, #208	@ 0xd0
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d007      	beq.n	800f780 <jpeg_resync_to_restart+0xa0>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	3b02      	subs	r3, #2
 800f774:	f003 0307 	and.w	r3, r3, #7
 800f778:	33d0      	adds	r3, #208	@ 0xd0
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d102      	bne.n	800f786 <jpeg_resync_to_restart+0xa6>
	action = 2;		/* a prior restart, so advance */
 800f780:	2302      	movs	r3, #2
 800f782:	60bb      	str	r3, [r7, #8]
 800f784:	e001      	b.n	800f78a <jpeg_resync_to_restart+0xaa>
      else
	action = 1;		/* desired restart or too far away */
 800f786:	2301      	movs	r3, #1
 800f788:	60bb      	str	r3, [r7, #8]
    }
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2263      	movs	r2, #99	@ 0x63
 800f790:	615a      	str	r2, [r3, #20]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	68fa      	ldr	r2, [r7, #12]
 800f798:	619a      	str	r2, [r3, #24]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	68ba      	ldr	r2, [r7, #8]
 800f7a0:	61da      	str	r2, [r3, #28]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	2104      	movs	r1, #4
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	4798      	blx	r3
    switch (action) {
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d01c      	beq.n	800f7ee <jpeg_resync_to_restart+0x10e>
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	dcb0      	bgt.n	800f71c <jpeg_resync_to_restart+0x3c>
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d003      	beq.n	800f7c8 <jpeg_resync_to_restart+0xe8>
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	d006      	beq.n	800f7d4 <jpeg_resync_to_restart+0xf4>
 800f7c6:	e014      	b.n	800f7f2 <jpeg_resync_to_restart+0x112>
    case 1:
      /* Discard marker and let entropy decoder resume processing. */
      cinfo->unread_marker = 0;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
      return TRUE;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e00f      	b.n	800f7f4 <jpeg_resync_to_restart+0x114>
    case 2:
      /* Scan to the next marker, and repeat the decision loop. */
      if (! next_marker(cinfo))
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff fc6b 	bl	800f0b0 <next_marker>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d101      	bne.n	800f7e4 <jpeg_resync_to_restart+0x104>
	return FALSE;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	e007      	b.n	800f7f4 <jpeg_resync_to_restart+0x114>
      marker = cinfo->unread_marker;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800f7ea:	60fb      	str	r3, [r7, #12]
      break;
 800f7ec:	e001      	b.n	800f7f2 <jpeg_resync_to_restart+0x112>
    case 3:
      /* Return without advancing past this marker. */
      /* Entropy decoder will be forced to process an empty segment. */
      return TRUE;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e000      	b.n	800f7f4 <jpeg_resync_to_restart+0x114>
    if (marker < (int) M_SOF0)
 800f7f2:	e793      	b.n	800f71c <jpeg_resync_to_restart+0x3c>
    }
  } /* end loop */
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <reset_marker_reader>:
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b085      	sub	sp, #20
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 800f80a:	60fb      	str	r3, [r7, #12]

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2200      	movs	r2, #0
 800f818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2200      	movs	r2, #0
 800f828:	60da      	str	r2, [r3, #12]
  marker->pub.saw_SOF = FALSE;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2200      	movs	r2, #0
 800f82e:	611a      	str	r2, [r3, #16]
  marker->pub.discarded_bytes = 0;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	619a      	str	r2, [r3, #24]
  marker->cur_marker = NULL;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
}
 800f83e:	bf00      	nop
 800f840:	3714      	adds	r7, #20
 800f842:	46bd      	mov	sp, r7
 800f844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f848:	4770      	bx	lr
	...

0800f84c <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	22ac      	movs	r2, #172	@ 0xac
 800f85c:	2100      	movs	r1, #0
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	4798      	blx	r3
 800f862:	60b8      	str	r0, [r7, #8]
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	68ba      	ldr	r2, [r7, #8]
 800f868:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	4a18      	ldr	r2, [pc, #96]	@ (800f8d0 <jinit_marker_reader+0x84>)
 800f870:	601a      	str	r2, [r3, #0]
  marker->pub.read_markers = read_markers;
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	4a17      	ldr	r2, [pc, #92]	@ (800f8d4 <jinit_marker_reader+0x88>)
 800f876:	605a      	str	r2, [r3, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	4a17      	ldr	r2, [pc, #92]	@ (800f8d8 <jinit_marker_reader+0x8c>)
 800f87c:	609a      	str	r2, [r3, #8]
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	4a16      	ldr	r2, [pc, #88]	@ (800f8dc <jinit_marker_reader+0x90>)
 800f882:	61da      	str	r2, [r3, #28]
  marker->length_limit_COM = 0;
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	2200      	movs	r2, #0
 800f888:	661a      	str	r2, [r3, #96]	@ 0x60
  for (i = 0; i < 16; i++) {
 800f88a:	2300      	movs	r3, #0
 800f88c:	60fb      	str	r3, [r7, #12]
 800f88e:	e00f      	b.n	800f8b0 <jinit_marker_reader+0x64>
    marker->process_APPn[i] = skip_variable;
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	3208      	adds	r2, #8
 800f896:	4911      	ldr	r1, [pc, #68]	@ (800f8dc <jinit_marker_reader+0x90>)
 800f898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    marker->length_limit_APPn[i] = 0;
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3318      	adds	r3, #24
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	4413      	add	r3, r2
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 16; i++) {
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	60fb      	str	r3, [r7, #12]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b0f      	cmp	r3, #15
 800f8b4:	ddec      	ble.n	800f890 <jinit_marker_reader+0x44>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	4a09      	ldr	r2, [pc, #36]	@ (800f8e0 <jinit_marker_reader+0x94>)
 800f8ba:	621a      	str	r2, [r3, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	4a08      	ldr	r2, [pc, #32]	@ (800f8e0 <jinit_marker_reader+0x94>)
 800f8c0:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff ff9a 	bl	800f7fc <reset_marker_reader>
}
 800f8c8:	bf00      	nop
 800f8ca:	3710      	adds	r7, #16
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	0800f7fd 	.word	0x0800f7fd
 800f8d4:	0800f2e5 	.word	0x0800f2e5
 800f8d8:	0800f641 	.word	0x0800f641
 800f8dc:	0800efd1 	.word	0x0800efd1
 800f8e0:	0800ee53 	.word	0x0800ee53

0800f8e4 <use_merged_upsample>:
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL(boolean)
use_merged_upsample (j_decompress_ptr cinfo)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d104      	bne.n	800f8fe <use_merged_upsample+0x1a>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <use_merged_upsample+0x1e>
    return FALSE;
 800f8fe:	2300      	movs	r3, #0
 800f900:	e07a      	b.n	800f9f8 <use_merged_upsample+0x114>
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f908:	2b03      	cmp	r3, #3
 800f90a:	d10c      	bne.n	800f926 <use_merged_upsample+0x42>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f910:	2b03      	cmp	r3, #3
 800f912:	d108      	bne.n	800f926 <use_merged_upsample+0x42>
      cinfo->out_color_space != JCS_RGB ||
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d103      	bne.n	800f926 <use_merged_upsample+0x42>
      cinfo->out_color_components != RGB_PIXELSIZE)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      cinfo->out_color_space != JCS_RGB ||
 800f922:	2b03      	cmp	r3, #3
 800f924:	d001      	beq.n	800f92a <use_merged_upsample+0x46>
    return FALSE;
 800f926:	2300      	movs	r3, #0
 800f928:	e066      	b.n	800f9f8 <use_merged_upsample+0x114>
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f930:	689b      	ldr	r3, [r3, #8]
 800f932:	2b02      	cmp	r3, #2
 800f934:	d121      	bne.n	800f97a <use_merged_upsample+0x96>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f93c:	3358      	adds	r3, #88	@ 0x58
 800f93e:	689b      	ldr	r3, [r3, #8]
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800f940:	2b01      	cmp	r3, #1
 800f942:	d11a      	bne.n	800f97a <use_merged_upsample+0x96>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f94a:	33b0      	adds	r3, #176	@ 0xb0
 800f94c:	689b      	ldr	r3, [r3, #8]
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d113      	bne.n	800f97a <use_merged_upsample+0x96>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f958:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800f95a:	2b02      	cmp	r3, #2
 800f95c:	dc0d      	bgt.n	800f97a <use_merged_upsample+0x96>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f964:	3358      	adds	r3, #88	@ 0x58
 800f966:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d106      	bne.n	800f97a <use_merged_upsample+0x96>
      cinfo->comp_info[2].v_samp_factor != 1)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f972:	33b0      	adds	r3, #176	@ 0xb0
 800f974:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800f976:	2b01      	cmp	r3, #1
 800f978:	d001      	beq.n	800f97e <use_merged_upsample+0x9a>
    return FALSE;
 800f97a:	2300      	movs	r3, #0
 800f97c:	e03c      	b.n	800f9f8 <use_merged_upsample+0x114>
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d130      	bne.n	800f9f2 <use_merged_upsample+0x10e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f996:	3358      	adds	r3, #88	@ 0x58
 800f998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d126      	bne.n	800f9f2 <use_merged_upsample+0x10e>
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f9aa:	33b0      	adds	r3, #176	@ 0xb0
 800f9ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d11c      	bne.n	800f9f2 <use_merged_upsample+0x10e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f9be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d113      	bne.n	800f9f2 <use_merged_upsample+0x10e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f9d0:	3358      	adds	r3, #88	@ 0x58
 800f9d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d109      	bne.n	800f9f2 <use_merged_upsample+0x10e>
      cinfo->comp_info[2].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800f9e4:	33b0      	adds	r3, #176	@ 0xb0
 800f9e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d001      	beq.n	800f9f6 <use_merged_upsample+0x112>
    return FALSE;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	e000      	b.n	800f9f8 <use_merged_upsample+0x114>
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  return TRUE;			/* by golly, it'll work... */
 800f9f6:	2301      	movs	r3, #1
#else
  return FALSE;
#endif
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <jpeg_calc_output_dimensions>:
GLOBAL(void)
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase.
 * This function is used for full decompression.
 */
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  int ci;
  jpeg_component_info *compptr;
#endif

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_READY)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	695b      	ldr	r3, [r3, #20]
 800fa10:	2bca      	cmp	r3, #202	@ 0xca
 800fa12:	d00d      	beq.n	800fa30 <jpeg_calc_output_dimensions+0x2c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2215      	movs	r2, #21
 800fa1a:	615a      	str	r2, [r3, #20]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	6952      	ldr	r2, [r2, #20]
 800fa24:	619a      	str	r2, [r3, #24]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	4798      	blx	r3

  /* Compute core output image dimensions and DCT scaling choices. */
  jpeg_core_output_dimensions(cinfo);
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f7fc f80f 	bl	800ba54 <jpeg_core_output_dimensions>
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code adapts subsampling ratios which are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fa36:	2300      	movs	r3, #0
 800fa38:	617b      	str	r3, [r7, #20]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fa40:	613b      	str	r3, [r7, #16]
 800fa42:	e078      	b.n	800fb36 <jpeg_calc_output_dimensions+0x132>
       ci++, compptr++) {
    int ssize = 1;
 800fa44:	2301      	movs	r3, #1
 800fa46:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800fa48:	e002      	b.n	800fa50 <jpeg_calc_output_dimensions+0x4c>
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	005b      	lsls	r3, r3, #1
 800fa4e:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800fa60:	2a00      	cmp	r2, #0
 800fa62:	d001      	beq.n	800fa68 <jpeg_calc_output_dimensions+0x64>
 800fa64:	2208      	movs	r2, #8
 800fa66:	e000      	b.n	800fa6a <jpeg_calc_output_dimensions+0x66>
 800fa68:	2204      	movs	r2, #4
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	db0f      	blt.n	800fa8e <jpeg_calc_output_dimensions+0x8a>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800fa74:	693a      	ldr	r2, [r7, #16]
 800fa76:	6892      	ldr	r2, [r2, #8]
 800fa78:	68f9      	ldr	r1, [r7, #12]
 800fa7a:	fb01 f202 	mul.w	r2, r1, r2
 800fa7e:	0052      	lsls	r2, r2, #1
 800fa80:	fb93 f1f2 	sdiv	r1, r3, r2
 800fa84:	fb01 f202 	mul.w	r2, r1, r2
 800fa88:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d0dd      	beq.n	800fa4a <jpeg_calc_output_dimensions+0x46>
    }
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	fb03 f202 	mul.w	r2, r3, r2
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	625a      	str	r2, [r3, #36]	@ 0x24
    ssize = 1;
 800fa9e:	2301      	movs	r3, #1
 800faa0:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800faa2:	e002      	b.n	800faaa <jpeg_calc_output_dimensions+0xa6>
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800fab0:	68fa      	ldr	r2, [r7, #12]
 800fab2:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800faba:	2a00      	cmp	r2, #0
 800fabc:	d001      	beq.n	800fac2 <jpeg_calc_output_dimensions+0xbe>
 800fabe:	2208      	movs	r2, #8
 800fac0:	e000      	b.n	800fac4 <jpeg_calc_output_dimensions+0xc0>
 800fac2:	2204      	movs	r2, #4
 800fac4:	429a      	cmp	r2, r3
 800fac6:	db0f      	blt.n	800fae8 <jpeg_calc_output_dimensions+0xe4>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800face:	693a      	ldr	r2, [r7, #16]
 800fad0:	68d2      	ldr	r2, [r2, #12]
 800fad2:	68f9      	ldr	r1, [r7, #12]
 800fad4:	fb01 f202 	mul.w	r2, r1, r2
 800fad8:	0052      	lsls	r2, r2, #1
 800fada:	fb93 f1f2 	sdiv	r1, r3, r2
 800fade:	fb01 f202 	mul.w	r2, r1, r2
 800fae2:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d0dd      	beq.n	800faa4 <jpeg_calc_output_dimensions+0xa0>
    }
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	fb03 f202 	mul.w	r2, r3, r2
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* We don't support IDCT ratios larger than 2. */
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb00:	005b      	lsls	r3, r3, #1
 800fb02:	429a      	cmp	r2, r3
 800fb04:	dd05      	ble.n	800fb12 <jpeg_calc_output_dimensions+0x10e>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb0a:	005a      	lsls	r2, r3, #1
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	625a      	str	r2, [r3, #36]	@ 0x24
 800fb10:	e00b      	b.n	800fb2a <jpeg_calc_output_dimensions+0x126>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	dd04      	ble.n	800fb2a <jpeg_calc_output_dimensions+0x126>
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb24:	005a      	lsls	r2, r3, #1
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	629a      	str	r2, [r3, #40]	@ 0x28
       ci++, compptr++) {
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	617b      	str	r3, [r7, #20]
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	3358      	adds	r3, #88	@ 0x58
 800fb34:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3a:	697a      	ldr	r2, [r7, #20]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	db81      	blt.n	800fa44 <jpeg_calc_output_dimensions+0x40>
  }

  /* Recompute downsampled dimensions of components;
   * application needs to know these if using raw downsampled data.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fb40:	2300      	movs	r3, #0
 800fb42:	617b      	str	r3, [r7, #20]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fb4a:	613b      	str	r3, [r7, #16]
 800fb4c:	e039      	b.n	800fbc2 <jpeg_calc_output_dimensions+0x1be>
       ci++, compptr++) {
    /* Size in samples, after IDCT scaling */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width *
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	69db      	ldr	r3, [r3, #28]
 800fb52:	4619      	mov	r1, r3
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	689b      	ldr	r3, [r3, #8]
 800fb58:	693a      	ldr	r2, [r7, #16]
 800fb5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fb5c:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width *
 800fb60:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800fb70:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width *
 800fb74:	4619      	mov	r1, r3
 800fb76:	f012 f8a7 	bl	8021cc8 <jdiv_round_up>
 800fb7a:	4603      	mov	r3, r0
    compptr->downsampled_width = (JDIMENSION)
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	62da      	str	r2, [r3, #44]	@ 0x2c
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height *
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	4619      	mov	r1, r3
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	693a      	ldr	r2, [r7, #16]
 800fb8e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800fb90:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height *
 800fb94:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	f8d2 21a8 	ldr.w	r2, [r2, #424]	@ 0x1a8
 800fba4:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height *
 800fba8:	4619      	mov	r1, r3
 800fbaa:	f012 f88d 	bl	8021cc8 <jdiv_round_up>
 800fbae:	4603      	mov	r3, r0
    compptr->downsampled_height = (JDIMENSION)
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	631a      	str	r2, [r3, #48]	@ 0x30
       ci++, compptr++) {
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	617b      	str	r3, [r7, #20]
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	3358      	adds	r3, #88	@ 0x58
 800fbc0:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	dbc0      	blt.n	800fb4e <jpeg_calc_output_dimensions+0x14a>

#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	2b04      	cmp	r3, #4
 800fbd6:	d81d      	bhi.n	800fc14 <jpeg_calc_output_dimensions+0x210>
 800fbd8:	a201      	add	r2, pc, #4	@ (adr r2, 800fbe0 <jpeg_calc_output_dimensions+0x1dc>)
 800fbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbde:	bf00      	nop
 800fbe0:	0800fbf5 	.word	0x0800fbf5
 800fbe4:	0800fbfd 	.word	0x0800fbfd
 800fbe8:	0800fc05 	.word	0x0800fc05
 800fbec:	0800fc0d 	.word	0x0800fc0d
 800fbf0:	0800fc0d 	.word	0x0800fc0d
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	679a      	str	r2, [r3, #120]	@ 0x78
    break;
 800fbfa:	e010      	b.n	800fc1e <jpeg_calc_output_dimensions+0x21a>
  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2203      	movs	r2, #3
 800fc00:	679a      	str	r2, [r3, #120]	@ 0x78
    break;
 800fc02:	e00c      	b.n	800fc1e <jpeg_calc_output_dimensions+0x21a>
  case JCS_YCbCr:
    cinfo->out_color_components = 3;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2203      	movs	r2, #3
 800fc08:	679a      	str	r2, [r3, #120]	@ 0x78
    break;
 800fc0a:	e008      	b.n	800fc1e <jpeg_calc_output_dimensions+0x21a>
  case JCS_CMYK:
  case JCS_YCCK:
    cinfo->out_color_components = 4;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2204      	movs	r2, #4
 800fc10:	679a      	str	r2, [r3, #120]	@ 0x78
    break;
 800fc12:	e004      	b.n	800fc1e <jpeg_calc_output_dimensions+0x21a>
  default:			/* else must be same colorspace as in file */
    cinfo->out_color_components = cinfo->num_components;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	679a      	str	r2, [r3, #120]	@ 0x78
    break;
 800fc1c:	bf00      	nop
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d102      	bne.n	800fc2c <jpeg_calc_output_dimensions+0x228>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc2a:	e000      	b.n	800fc2e <jpeg_calc_output_dimensions+0x22a>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	67d3      	str	r3, [r2, #124]	@ 0x7c
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7ff fe56 	bl	800f8e4 <use_merged_upsample>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d006      	beq.n	800fc4c <jpeg_calc_output_dimensions+0x248>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  else
    cinfo->rec_outbuf_height = 1;
}
 800fc4a:	e003      	b.n	800fc54 <jpeg_calc_output_dimensions+0x250>
    cinfo->rec_outbuf_height = 1;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2201      	movs	r2, #1
 800fc50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 800fc54:	bf00      	nop
 800fc56:	3718      	adds	r7, #24
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <prepare_range_limit_table>:
 */

LOCAL(void)
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800fc6e:	2101      	movs	r1, #1
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	4798      	blx	r3
 800fc74:	60b8      	str	r0, [r7, #8]
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800fc7c:	60bb      	str	r3, [r7, #8]
  cinfo->sample_range_limit = table;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	68ba      	ldr	r2, [r7, #8]
 800fc82:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800fc8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fc90:	2100      	movs	r1, #0
 800fc92:	4618      	mov	r0, r3
 800fc94:	f012 f95c 	bl	8021f50 <memset>
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
 800fc98:	2300      	movs	r3, #0
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	e008      	b.n	800fcb0 <prepare_range_limit_table+0x54>
    table[i] = (JSAMPLE) i;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	68ba      	ldr	r2, [r7, #8]
 800fca2:	4413      	add	r3, r2
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	b2d2      	uxtb	r2, r2
 800fca8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i <= MAXJSAMPLE; i++)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	3301      	adds	r3, #1
 800fcae:	60fb      	str	r3, [r7, #12]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2bff      	cmp	r3, #255	@ 0xff
 800fcb4:	ddf3      	ble.n	800fc9e <prepare_range_limit_table+0x42>
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	3380      	adds	r3, #128	@ 0x80
 800fcba:	60bb      	str	r3, [r7, #8]
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800fcbc:	2380      	movs	r3, #128	@ 0x80
 800fcbe:	60fb      	str	r3, [r7, #12]
 800fcc0:	e007      	b.n	800fcd2 <prepare_range_limit_table+0x76>
    table[i] = MAXJSAMPLE;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	68ba      	ldr	r2, [r7, #8]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	22ff      	movs	r2, #255	@ 0xff
 800fcca:	701a      	strb	r2, [r3, #0]
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	60fb      	str	r3, [r7, #12]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fcd8:	dbf3      	blt.n	800fcc2 <prepare_range_limit_table+0x66>
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800fce0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800fce4:	2100      	movs	r1, #0
 800fce6:	4618      	mov	r0, r3
 800fce8:	f012 f932 	bl	8021f50 <memset>
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	f503 7060 	add.w	r0, r3, #896	@ 0x380
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800fcf8:	2280      	movs	r2, #128	@ 0x80
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	f012 f96c 	bl	8021fd8 <memcpy>
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}
 800fd00:	bf00      	nop
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <master_selection>:
 * settings.
 */

LOCAL(void)
master_selection (j_decompress_ptr cinfo)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b088      	sub	sp, #32
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800fd16:	61bb      	str	r3, [r7, #24]
  boolean use_c_buffer;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7ff fe73 	bl	800fa04 <jpeg_calc_output_dimensions>
  prepare_range_limit_table(cinfo);
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7ff ff9c 	bl	800fc5c <prepare_range_limit_table>

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd28:	461a      	mov	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd2e:	fb02 f303 	mul.w	r3, r2, r3
 800fd32:	617b      	str	r3, [r7, #20]
  jd_samplesperrow = (JDIMENSION) samplesperrow;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	613b      	str	r3, [r7, #16]
  if ((long) jd_samplesperrow != samplesperrow)
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d008      	beq.n	800fd52 <master_selection+0x4a>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2248      	movs	r2, #72	@ 0x48
 800fd46:	615a      	str	r2, [r3, #20]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	4798      	blx	r3

  /* Initialize my private state */
  master->pass_number = 0;
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	2200      	movs	r2, #0
 800fd56:	60da      	str	r2, [r3, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7ff fdc3 	bl	800f8e4 <use_merged_upsample>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	611a      	str	r2, [r3, #16]

  /* Color quantizer selection */
  master->quantizer_1pass = NULL;
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	2200      	movs	r2, #0
 800fd68:	615a      	str	r2, [r3, #20]
  master->quantizer_2pass = NULL;
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	619a      	str	r2, [r3, #24]
  /* No mode changes if not using buffered-image mode. */
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d003      	beq.n	800fd80 <master_selection+0x78>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d108      	bne.n	800fd92 <master_selection+0x8a>
    cinfo->enable_1pass_quant = FALSE;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2200      	movs	r2, #0
 800fd84:	665a      	str	r2, [r3, #100]	@ 0x64
    cinfo->enable_external_quant = FALSE;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	669a      	str	r2, [r3, #104]	@ 0x68
    cinfo->enable_2pass_quant = FALSE;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (cinfo->quantize_colors) {
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d04e      	beq.n	800fe38 <master_selection+0x130>
    if (cinfo->raw_data_out)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d008      	beq.n	800fdb4 <master_selection+0xac>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	2230      	movs	r2, #48	@ 0x30
 800fda8:	615a      	str	r2, [r3, #20]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	4798      	blx	r3
    /* 2-pass quantizer only works in 3-component color space. */
    if (cinfo->out_color_components != 3) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdb8:	2b03      	cmp	r3, #3
 800fdba:	d00d      	beq.n	800fdd8 <master_selection+0xd0>
      cinfo->enable_1pass_quant = TRUE;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	665a      	str	r2, [r3, #100]	@ 0x64
      cinfo->enable_external_quant = FALSE;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	669a      	str	r2, [r3, #104]	@ 0x68
      cinfo->enable_2pass_quant = FALSE;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	66da      	str	r2, [r3, #108]	@ 0x6c
      cinfo->colormap = NULL;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800fdd6:	e013      	b.n	800fe00 <master_selection+0xf8>
    } else if (cinfo->colormap != NULL) {
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <master_selection+0xe2>
      cinfo->enable_external_quant = TRUE;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2201      	movs	r2, #1
 800fde6:	669a      	str	r2, [r3, #104]	@ 0x68
 800fde8:	e00a      	b.n	800fe00 <master_selection+0xf8>
    } else if (cinfo->two_pass_quantize) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d003      	beq.n	800fdfa <master_selection+0xf2>
      cinfo->enable_2pass_quant = TRUE;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fdf8:	e002      	b.n	800fe00 <master_selection+0xf8>
    } else {
      cinfo->enable_1pass_quant = TRUE;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	665a      	str	r2, [r3, #100]	@ 0x64
    }

    if (cinfo->enable_1pass_quant) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d007      	beq.n	800fe18 <master_selection+0x110>
#ifdef QUANT_1PASS_SUPPORTED
      jinit_1pass_quantizer(cinfo);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f010 faaf 	bl	802036c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	615a      	str	r2, [r3, #20]
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }

    /* We use the 2-pass code to map to external colormaps. */
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d103      	bne.n	800fe28 <master_selection+0x120>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d007      	beq.n	800fe38 <master_selection+0x130>
#ifdef QUANT_2PASS_SUPPORTED
      jinit_2pass_quantizer(cinfo);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f011 fe99 	bl	8021b60 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	619a      	str	r2, [r3, #24]
     * this is necessary for starting with quantization to an external map.
     */
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d113      	bne.n	800fe68 <master_selection+0x160>
    if (master->using_merged_upsample) {
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	691b      	ldr	r3, [r3, #16]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d003      	beq.n	800fe50 <master_selection+0x148>
#ifdef UPSAMPLE_MERGING_SUPPORTED
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 fc9f 	bl	801078c <jinit_merged_upsampler>
 800fe4e:	e005      	b.n	800fe5c <master_selection+0x154>
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
      jinit_color_deconverter(cinfo);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7f9 f8b1 	bl	8008fb8 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f001 f88c 	bl	8010f74 <jinit_upsampler>
    }
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe60:	4619      	mov	r1, r3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 fe6c 	bl	8010b40 <jinit_d_post_controller>
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7f9 fd07 	bl	800987c <jinit_inverse_dct>
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d003      	beq.n	800fe80 <master_selection+0x178>
    jinit_arith_decoder(cinfo);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7f7 fad7 	bl	800742c <jinit_arith_decoder>
 800fe7e:	e002      	b.n	800fe86 <master_selection+0x17e>
  else {
    jinit_huff_decoder(cinfo);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f7fb fd73 	bl	800b96c <jinit_huff_decoder>
  }

  /* Initialize principal buffer controllers. */
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800fe8c:	691b      	ldr	r3, [r3, #16]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d103      	bne.n	800fe9a <master_selection+0x192>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d001      	beq.n	800fe9e <master_selection+0x196>
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	e000      	b.n	800fea0 <master_selection+0x198>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	60fb      	str	r3, [r7, #12]
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800fea2:	68f9      	ldr	r1, [r7, #12]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7f8 fcbd 	bl	8008824 <jinit_d_coef_controller>

  if (! cinfo->raw_data_out)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d103      	bne.n	800feba <master_selection+0x1b2>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800feb2:	2100      	movs	r1, #0
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f7fd fa79 	bl	800d3ac <jinit_d_main_controller>

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	4798      	blx	r3

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	4798      	blx	r3
#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* If jpeg_start_decompress will read the whole file, initialize
   * progress monitoring appropriately.  The input step is counted
   * as one pass.
   */
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d03a      	beq.n	800ff4e <master_selection+0x246>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d136      	bne.n	800ff4e <master_selection+0x246>
      cinfo->inputctl->has_multiple_scans) {
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800fee6:	691b      	ldr	r3, [r3, #16]
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d030      	beq.n	800ff4e <master_selection+0x246>
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d007      	beq.n	800ff06 <master_selection+0x1fe>
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fefa:	4613      	mov	r3, r2
 800fefc:	005b      	lsls	r3, r3, #1
 800fefe:	4413      	add	r3, r2
 800ff00:	3302      	adds	r3, #2
 800ff02:	61fb      	str	r3, [r7, #28]
 800ff04:	e002      	b.n	800ff0c <master_selection+0x204>
    } else {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff0a:	61fb      	str	r3, [r7, #28]
    }
    cinfo->progress->pass_counter = 0L;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	2200      	movs	r2, #0
 800ff12:	605a      	str	r2, [r3, #4]
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	69fa      	ldr	r2, [r7, #28]
 800ff22:	fb01 f202 	mul.w	r2, r1, r2
 800ff26:	609a      	str	r2, [r3, #8]
    cinfo->progress->completed_passes = 0;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	60da      	str	r2, [r3, #12]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <master_selection+0x234>
 800ff38:	2203      	movs	r2, #3
 800ff3a:	e000      	b.n	800ff3e <master_selection+0x236>
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	611a      	str	r2, [r3, #16]
    /* Count the input pass as done */
    master->pass_number++;
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	1c5a      	adds	r2, r3, #1
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	60da      	str	r2, [r3, #12]
  }
#endif /* D_MULTISCAN_FILES_SUPPORTED */
}
 800ff4e:	bf00      	nop
 800ff50:	3720      	adds	r7, #32
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b084      	sub	sp, #16
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800ff64:	60fb      	str	r3, [r7, #12]

  if (master->pub.is_dummy_pass) {
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d018      	beq.n	800ffa0 <prepare_for_output_pass+0x4a>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2200      	movs	r2, #0
 800ff72:	609a      	str	r2, [r3, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2102      	movs	r1, #2
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2102      	movs	r1, #2
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	4798      	blx	r3
 800ff9e:	e06e      	b.n	801007e <prepare_for_output_pass+0x128>
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  } else {
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d028      	beq.n	800fffa <prepare_for_output_pass+0xa4>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d123      	bne.n	800fffa <prepare_for_output_pass+0xa4>
      /* Select new quantization method */
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00c      	beq.n	800ffd4 <prepare_for_output_pass+0x7e>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d008      	beq.n	800ffd4 <prepare_for_output_pass+0x7e>
	cinfo->cquantize = master->quantizer_2pass;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	699a      	ldr	r2, [r3, #24]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	609a      	str	r2, [r3, #8]
 800ffd2:	e012      	b.n	800fffa <prepare_for_output_pass+0xa4>
      } else if (cinfo->enable_1pass_quant) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d005      	beq.n	800ffe8 <prepare_for_output_pass+0x92>
	cinfo->cquantize = master->quantizer_1pass;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	695a      	ldr	r2, [r3, #20]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 800ffe6:	e008      	b.n	800fffa <prepare_for_output_pass+0xa4>
      } else {
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	222f      	movs	r2, #47	@ 0x2f
 800ffee:	615a      	str	r2, [r3, #20]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	4798      	blx	r3
      }
    }
    (*cinfo->idct->start_pass) (cinfo);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	@ 0x1d4
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010016:	2b00      	cmp	r3, #0
 8010018:	d131      	bne.n	801007e <prepare_for_output_pass+0x128>
      if (! master->using_merged_upsample)
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d105      	bne.n	801002e <prepare_for_output_pass+0xd8>
	(*cinfo->cconvert->start_pass) (cinfo);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	4798      	blx	r3
      if (cinfo->quantize_colors)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801003e:	2b00      	cmp	r3, #0
 8010040:	d008      	beq.n	8010054 <prepare_for_output_pass+0xfe>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	6892      	ldr	r2, [r2, #8]
 801004e:	4611      	mov	r1, r2
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801005a:	681b      	ldr	r3, [r3, #0]
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	6892      	ldr	r2, [r2, #8]
      (*cinfo->post->start_pass) (cinfo,
 8010060:	2a00      	cmp	r2, #0
 8010062:	d001      	beq.n	8010068 <prepare_for_output_pass+0x112>
 8010064:	2203      	movs	r2, #3
 8010066:	e000      	b.n	801006a <prepare_for_output_pass+0x114>
 8010068:	2200      	movs	r2, #0
 801006a:	4611      	mov	r1, r2
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2100      	movs	r1, #0
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	689b      	ldr	r3, [r3, #8]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d029      	beq.n	80100da <prepare_for_output_pass+0x184>
    cinfo->progress->completed_passes = master->pass_number;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	689b      	ldr	r3, [r3, #8]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	68d2      	ldr	r2, [r2, #12]
 801008e:	60da      	str	r2, [r3, #12]
    cinfo->progress->total_passes = master->pass_number +
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	68da      	ldr	r2, [r3, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	689b      	ldr	r3, [r3, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d001      	beq.n	80100a0 <prepare_for_output_pass+0x14a>
 801009c:	2102      	movs	r1, #2
 801009e:	e000      	b.n	80100a2 <prepare_for_output_pass+0x14c>
 80100a0:	2101      	movs	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	689b      	ldr	r3, [r3, #8]
 80100a6:	440a      	add	r2, r1
 80100a8:	611a      	str	r2, [r3, #16]
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d013      	beq.n	80100da <prepare_for_output_pass+0x184>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 80100b8:	695b      	ldr	r3, [r3, #20]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d10d      	bne.n	80100da <prepare_for_output_pass+0x184>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	689b      	ldr	r3, [r3, #8]
 80100c2:	691a      	ldr	r2, [r3, #16]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <prepare_for_output_pass+0x17a>
 80100cc:	2102      	movs	r1, #2
 80100ce:	e000      	b.n	80100d2 <prepare_for_output_pass+0x17c>
 80100d0:	2101      	movs	r1, #1
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	689b      	ldr	r3, [r3, #8]
 80100d6:	440a      	add	r2, r1
 80100d8:	611a      	str	r2, [r3, #16]
    }
  }
}
 80100da:	bf00      	nop
 80100dc:	3710      	adds	r7, #16
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <finish_output_pass>:
 * Finish up at end of an output pass.
 */

METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b084      	sub	sp, #16
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 80100f0:	60fb      	str	r3, [r7, #12]

  if (cinfo->quantize_colors)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d005      	beq.n	8010106 <finish_output_pass+0x24>
    (*cinfo->cquantize->finish_pass) (cinfo);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	4798      	blx	r3
  master->pass_number++;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	68db      	ldr	r3, [r3, #12]
 801010a:	1c5a      	adds	r2, r3, #1
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	60da      	str	r2, [r3, #12]
}
 8010110:	bf00      	nop
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}

08010118 <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	221c      	movs	r2, #28
 8010128:	2101      	movs	r1, #1
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	4798      	blx	r3
 801012e:	60f8      	str	r0, [r7, #12]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4a07      	ldr	r2, [pc, #28]	@ (8010158 <jinit_master_decompress+0x40>)
 801013c:	601a      	str	r2, [r3, #0]
  master->pub.finish_output_pass = finish_output_pass;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	4a06      	ldr	r2, [pc, #24]	@ (801015c <jinit_master_decompress+0x44>)
 8010142:	605a      	str	r2, [r3, #4]

  master->pub.is_dummy_pass = FALSE;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2200      	movs	r2, #0
 8010148:	609a      	str	r2, [r3, #8]

  master_selection(cinfo);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7ff fddc 	bl	800fd08 <master_selection>
}
 8010150:	bf00      	nop
 8010152:	3710      	adds	r7, #16
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	0800ff57 	.word	0x0800ff57
 801015c:	080100e3 	.word	0x080100e3

08010160 <build_ycc_rgb_table>:
 * This is taken directly from jdcolor.c; see that file for more info.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 801016e:	60fb      	str	r3, [r7, #12]
  int i;
  INT32 x;
  SHIFT_TEMPS

  upsample->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801017a:	2101      	movs	r1, #1
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	4798      	blx	r3
 8010180:	4602      	mov	r2, r0
  upsample->Cr_r_tab = (int *)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	611a      	str	r2, [r3, #16]
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010190:	2101      	movs	r1, #1
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	4798      	blx	r3
 8010196:	4602      	mov	r2, r0
  upsample->Cb_b_tab = (int *)
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	615a      	str	r2, [r3, #20]
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80101a6:	2101      	movs	r1, #1
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	4798      	blx	r3
 80101ac:	4602      	mov	r2, r0
  upsample->Cr_g_tab = (INT32 *)
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	619a      	str	r2, [r3, #24]
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80101bc:	2101      	movs	r1, #1
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	4798      	blx	r3
 80101c2:	4602      	mov	r2, r0
  upsample->Cb_g_tab = (INT32 *)
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	61da      	str	r2, [r3, #28]
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 80101c8:	2300      	movs	r3, #0
 80101ca:	617b      	str	r3, [r7, #20]
 80101cc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80101d0:	613b      	str	r3, [r7, #16]
 80101d2:	e035      	b.n	8010240 <build_ycc_rgb_table+0xe0>
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	4a1e      	ldr	r2, [pc, #120]	@ (8010250 <build_ycc_rgb_table+0xf0>)
 80101d8:	fb02 f303 	mul.w	r3, r2, r3
 80101dc:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    upsample->Cr_r_tab[i] = (int)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6919      	ldr	r1, [r3, #16]
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 80101ea:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 80101ec:	601a      	str	r2, [r3, #0]
    /* Cb=>B value is nearest int to 1.77200 * x */
    upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	4a18      	ldr	r2, [pc, #96]	@ (8010254 <build_ycc_rgb_table+0xf4>)
 80101f2:	fb02 f303 	mul.w	r3, r2, r3
 80101f6:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
    upsample->Cb_b_tab[i] = (int)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6959      	ldr	r1, [r3, #20]
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8010204:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 8010206:	601a      	str	r2, [r3, #0]
    /* Cr=>G value is scaled-up -0.71414 * x */
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	699a      	ldr	r2, [r3, #24]
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4413      	add	r3, r2
 8010212:	693a      	ldr	r2, [r7, #16]
 8010214:	4910      	ldr	r1, [pc, #64]	@ (8010258 <build_ycc_rgb_table+0xf8>)
 8010216:	fb01 f202 	mul.w	r2, r1, r2
 801021a:	601a      	str	r2, [r3, #0]
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	4a0f      	ldr	r2, [pc, #60]	@ (801025c <build_ycc_rgb_table+0xfc>)
 8010220:	fb03 f202 	mul.w	r2, r3, r2
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	69d9      	ldr	r1, [r3, #28]
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	440b      	add	r3, r1
 801022e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8010232:	601a      	str	r2, [r3, #0]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	3301      	adds	r3, #1
 8010238:	617b      	str	r3, [r7, #20]
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	3301      	adds	r3, #1
 801023e:	613b      	str	r3, [r7, #16]
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	2bff      	cmp	r3, #255	@ 0xff
 8010244:	ddc6      	ble.n	80101d4 <build_ycc_rgb_table+0x74>
  }
}
 8010246:	bf00      	nop
 8010248:	bf00      	nop
 801024a:	3718      	adds	r7, #24
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	000166e9 	.word	0x000166e9
 8010254:	0001c5a2 	.word	0x0001c5a2
 8010258:	ffff492e 	.word	0xffff492e
 801025c:	ffffa7e6 	.word	0xffffa7e6

08010260 <start_pass_merged_upsample>:
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 801026e:	60fb      	str	r3, [r7, #12]

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2200      	movs	r2, #0
 8010274:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 801027e:	bf00      	nop
 8010280:	3714      	adds	r7, #20
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr

0801028a <merged_2v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
 801028a:	b590      	push	{r4, r7, lr}
 801028c:	b08b      	sub	sp, #44	@ 0x2c
 801028e:	af02      	add	r7, sp, #8
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	607a      	str	r2, [r7, #4]
 8010296:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 801029e:	61bb      	str	r3, [r7, #24]
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d016      	beq.n	80102d6 <merged_2v_upsample+0x4c>
    /* If we have a spare row saved from a previous cycle, just return it. */
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 80102a8:	69bb      	ldr	r3, [r7, #24]
 80102aa:	f103 0020 	add.w	r0, r3, #32
 80102ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102b6:	441a      	add	r2, r3
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102bc:	9301      	str	r3, [sp, #4]
 80102be:	2301      	movs	r3, #1
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	2300      	movs	r3, #0
 80102c4:	2100      	movs	r1, #0
 80102c6:	f011 fd2b 	bl	8021d20 <jcopy_sample_rows>
		      1, upsample->out_row_width);
    num_rows = 1;
 80102ca:	2301      	movs	r3, #1
 80102cc:	61fb      	str	r3, [r7, #28]
    upsample->spare_full = FALSE;
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	2200      	movs	r2, #0
 80102d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80102d4:	e036      	b.n	8010344 <merged_2v_upsample+0xba>
  } else {
    /* Figure number of rows to return to caller. */
    num_rows = 2;
 80102d6:	2302      	movs	r3, #2
 80102d8:	61fb      	str	r3, [r7, #28]
    /* Not more than the distance to the end of the image. */
    if (num_rows > upsample->rows_to_go)
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102de:	69fa      	ldr	r2, [r7, #28]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d902      	bls.n	80102ea <merged_2v_upsample+0x60>
      num_rows = upsample->rows_to_go;
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102e8:	61fb      	str	r3, [r7, #28]
    /* And not more than what the client can accept: */
    out_rows_avail -= *out_row_ctr;
 80102ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (num_rows > out_rows_avail)
 80102f4:	69fa      	ldr	r2, [r7, #28]
 80102f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d901      	bls.n	8010300 <merged_2v_upsample+0x76>
      num_rows = out_rows_avail;
 80102fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102fe:	61fb      	str	r3, [r7, #28]
    /* Create output pointer array for upsampler. */
    work_ptrs[0] = output_buf[*out_row_ctr];
 8010300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010308:	4413      	add	r3, r2
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	613b      	str	r3, [r7, #16]
    if (num_rows > 1) {
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	2b01      	cmp	r3, #1
 8010312:	d908      	bls.n	8010326 <merged_2v_upsample+0x9c>
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 8010314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	3301      	adds	r3, #1
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801031e:	4413      	add	r3, r2
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	617b      	str	r3, [r7, #20]
 8010324:	e005      	b.n	8010332 <merged_2v_upsample+0xa8>
    } else {
      work_ptrs[1] = upsample->spare_row;
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	617b      	str	r3, [r7, #20]
      upsample->spare_full = TRUE;
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	2201      	movs	r2, #1
 8010330:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    /* Now do the upsampling. */
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	68dc      	ldr	r4, [r3, #12]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	f107 0310 	add.w	r3, r7, #16
 801033e:	68b9      	ldr	r1, [r7, #8]
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	47a0      	blx	r4
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
 8010344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	441a      	add	r2, r3
 801034c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801034e:	601a      	str	r2, [r3, #0]
  upsample->rows_to_go -= num_rows;
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	1ad2      	subs	r2, r2, r3
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010360:	2b00      	cmp	r3, #0
 8010362:	d104      	bne.n	801036e <merged_2v_upsample+0xe4>
    (*in_row_group_ctr)++;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	1c5a      	adds	r2, r3, #1
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	601a      	str	r2, [r3, #0]
}
 801036e:	bf00      	nop
 8010370:	3724      	adds	r7, #36	@ 0x24
 8010372:	46bd      	mov	sp, r7
 8010374:	bd90      	pop	{r4, r7, pc}

08010376 <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 8010376:	b590      	push	{r4, r7, lr}
 8010378:	b087      	sub	sp, #28
 801037a:	af00      	add	r7, sp, #0
 801037c:	60f8      	str	r0, [r7, #12]
 801037e:	60b9      	str	r1, [r7, #8]
 8010380:	607a      	str	r2, [r7, #4]
 8010382:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 801038a:	617b      	str	r3, [r7, #20]

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	68dc      	ldr	r4, [r3, #12]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6819      	ldr	r1, [r3, #0]
			 output_buf + *out_row_ctr);
 8010394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	009b      	lsls	r3, r3, #2
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 801039a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801039c:	4413      	add	r3, r2
 801039e:	460a      	mov	r2, r1
 80103a0:	68b9      	ldr	r1, [r7, #8]
 80103a2:	68f8      	ldr	r0, [r7, #12]
 80103a4:	47a0      	blx	r4
  /* Adjust counts */
  (*out_row_ctr)++;
 80103a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ae:	601a      	str	r2, [r3, #0]
  (*in_row_group_ctr)++;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	1c5a      	adds	r2, r3, #1
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	601a      	str	r2, [r3, #0]
}
 80103ba:	bf00      	nop
 80103bc:	371c      	adds	r7, #28
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd90      	pop	{r4, r7, pc}

080103c2 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 80103c2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80103c6:	b093      	sub	sp, #76	@ 0x4c
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6178      	str	r0, [r7, #20]
 80103cc:	6139      	str	r1, [r7, #16]
 80103ce:	60fa      	str	r2, [r7, #12]
 80103d0:	60bb      	str	r3, [r7, #8]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 80103d8:	637b      	str	r3, [r7, #52]	@ 0x34
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	f8d3 514c 	ldr.w	r5, [r3, #332]	@ 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 80103e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	633b      	str	r3, [r7, #48]	@ 0x30
  int * Cbbtab = upsample->Cb_b_tab;
 80103e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  INT32 * Crgtab = upsample->Cr_g_tab;
 80103ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ee:	699b      	ldr	r3, [r3, #24]
 80103f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  INT32 * Cbgtab = upsample->Cb_g_tab;
 80103f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f4:	69db      	ldr	r3, [r3, #28]
 80103f6:	627b      	str	r3, [r7, #36]	@ 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	4413      	add	r3, r2
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	647b      	str	r3, [r7, #68]	@ 0x44
  inptr1 = input_buf[1][in_row_group_ctr];
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	3304      	adds	r3, #4
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	4413      	add	r3, r2
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	643b      	str	r3, [r7, #64]	@ 0x40
  inptr2 = input_buf[2][in_row_group_ctr];
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	3308      	adds	r3, #8
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	4413      	add	r3, r2
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  outptr = output_buf[0];
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	681c      	ldr	r4, [r3, #0]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801042e:	085b      	lsrs	r3, r3, #1
 8010430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010432:	e050      	b.n	80104d6 <h2v1_merged_upsample+0x114>
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
 8010434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010436:	1c5a      	adds	r2, r3, #1
 8010438:	643a      	str	r2, [r7, #64]	@ 0x40
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	623b      	str	r3, [r7, #32]
    cr = GETJSAMPLE(*inptr2++);
 801043e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010440:	1c5a      	adds	r2, r3, #1
 8010442:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	61fb      	str	r3, [r7, #28]
    cred = Crrtab[cr];
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801044e:	4413      	add	r3, r2
 8010450:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010458:	4413      	add	r3, r2
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	009b      	lsls	r3, r3, #2
 8010460:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010462:	440b      	add	r3, r1
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4413      	add	r3, r2
 8010468:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010472:	4413      	add	r3, r2
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	607b      	str	r3, [r7, #4]
    /* Fetch 2 Y values and emit 2 pixels */
    y  = GETJSAMPLE(*inptr0++);
 8010478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801047a:	1c5a      	adds	r2, r3, #1
 801047c:	647a      	str	r2, [r7, #68]	@ 0x44
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 8010482:	4601      	mov	r1, r0
 8010484:	1873      	adds	r3, r6, r1
 8010486:	442b      	add	r3, r5
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 801048c:	eb06 0308 	add.w	r3, r6, r8
 8010490:	18ea      	adds	r2, r5, r3
 8010492:	1c63      	adds	r3, r4, #1
 8010494:	7812      	ldrb	r2, [r2, #0]
 8010496:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	1833      	adds	r3, r6, r0
 801049c:	18ea      	adds	r2, r5, r3
 801049e:	1ca3      	adds	r3, r4, #2
 80104a0:	7812      	ldrb	r2, [r2, #0]
 80104a2:	701a      	strb	r2, [r3, #0]
    outptr += RGB_PIXELSIZE;
 80104a4:	3403      	adds	r4, #3
    y  = GETJSAMPLE(*inptr0++);
 80104a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 80104b0:	1873      	adds	r3, r6, r1
 80104b2:	442b      	add	r3, r5
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 80104b8:	eb06 0308 	add.w	r3, r6, r8
 80104bc:	18ea      	adds	r2, r5, r3
 80104be:	1c63      	adds	r3, r4, #1
 80104c0:	7812      	ldrb	r2, [r2, #0]
 80104c2:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 80104c4:	1833      	adds	r3, r6, r0
 80104c6:	18ea      	adds	r2, r5, r3
 80104c8:	1ca3      	adds	r3, r4, #2
 80104ca:	7812      	ldrb	r2, [r2, #0]
 80104cc:	701a      	strb	r2, [r3, #0]
    outptr += RGB_PIXELSIZE;
 80104ce:	3403      	adds	r4, #3
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80104d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d2:	3b01      	subs	r3, #1
 80104d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1ab      	bne.n	8010434 <h2v1_merged_upsample+0x72>
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104e0:	f003 0301 	and.w	r3, r3, #1
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d02e      	beq.n	8010546 <h2v1_merged_upsample+0x184>
    cb = GETJSAMPLE(*inptr1);
 80104e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	623b      	str	r3, [r7, #32]
    cr = GETJSAMPLE(*inptr2);
 80104ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	61fb      	str	r3, [r7, #28]
    cred = Crrtab[cr];
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	009b      	lsls	r3, r3, #2
 80104f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104fa:	4413      	add	r3, r2
 80104fc:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80104fe:	6a3b      	ldr	r3, [r7, #32]
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010504:	4413      	add	r3, r2
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801050e:	440b      	add	r3, r1
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4413      	add	r3, r2
 8010514:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 8010518:	6a3b      	ldr	r3, [r7, #32]
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801051e:	4413      	add	r3, r2
 8010520:	6819      	ldr	r1, [r3, #0]
    y  = GETJSAMPLE(*inptr0);
 8010522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 8010528:	1833      	adds	r3, r6, r0
 801052a:	442b      	add	r3, r5
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8010530:	eb06 0308 	add.w	r3, r6, r8
 8010534:	18ea      	adds	r2, r5, r3
 8010536:	1c63      	adds	r3, r4, #1
 8010538:	7812      	ldrb	r2, [r2, #0]
 801053a:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 801053c:	1873      	adds	r3, r6, r1
 801053e:	18ea      	adds	r2, r5, r3
 8010540:	1ca3      	adds	r3, r4, #2
 8010542:	7812      	ldrb	r2, [r2, #0]
 8010544:	701a      	strb	r2, [r3, #0]
  }
}
 8010546:	bf00      	nop
 8010548:	374c      	adds	r7, #76	@ 0x4c
 801054a:	46bd      	mov	sp, r7
 801054c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8010550:	4770      	bx	lr

08010552 <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 8010552:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8010556:	b093      	sub	sp, #76	@ 0x4c
 8010558:	af00      	add	r7, sp, #0
 801055a:	6178      	str	r0, [r7, #20]
 801055c:	6139      	str	r1, [r7, #16]
 801055e:	60fa      	str	r2, [r7, #12]
 8010560:	60bb      	str	r3, [r7, #8]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8010568:	633b      	str	r3, [r7, #48]	@ 0x30
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f8d3 414c 	ldr.w	r4, [r3, #332]	@ 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 8010570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010572:	691b      	ldr	r3, [r3, #16]
 8010574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int * Cbbtab = upsample->Cb_b_tab;
 8010576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010578:	695b      	ldr	r3, [r3, #20]
 801057a:	62bb      	str	r3, [r7, #40]	@ 0x28
  INT32 * Crgtab = upsample->Cr_g_tab;
 801057c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801057e:	699b      	ldr	r3, [r3, #24]
 8010580:	627b      	str	r3, [r7, #36]	@ 0x24
  INT32 * Cbgtab = upsample->Cb_g_tab;
 8010582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010584:	69db      	ldr	r3, [r3, #28]
 8010586:	623b      	str	r3, [r7, #32]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	00db      	lsls	r3, r3, #3
 8010590:	4413      	add	r3, r2
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	647b      	str	r3, [r7, #68]	@ 0x44
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	00db      	lsls	r3, r3, #3
 801059e:	3304      	adds	r3, #4
 80105a0:	4413      	add	r3, r2
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	643b      	str	r3, [r7, #64]	@ 0x40
  inptr1 = input_buf[1][in_row_group_ctr];
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	3304      	adds	r3, #4
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4413      	add	r3, r2
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  inptr2 = input_buf[2][in_row_group_ctr];
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	3308      	adds	r3, #8
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	4413      	add	r3, r2
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  outptr0 = output_buf[0];
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	607b      	str	r3, [r7, #4]
  outptr1 = output_buf[1];
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	685e      	ldr	r6, [r3, #4]
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80105d4:	085b      	lsrs	r3, r3, #1
 80105d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80105d8:	e083      	b.n	80106e2 <h2v2_merged_upsample+0x190>
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
 80105da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105dc:	1c5a      	adds	r2, r3, #1
 80105de:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	61fb      	str	r3, [r7, #28]
    cr = GETJSAMPLE(*inptr2++);
 80105e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e6:	1c5a      	adds	r2, r3, #1
 80105e8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	61bb      	str	r3, [r7, #24]
    cred = Crrtab[cr];
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80105f4:	4413      	add	r3, r2
 80105f6:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	009b      	lsls	r3, r3, #2
 80105fc:	6a3a      	ldr	r2, [r7, #32]
 80105fe:	4413      	add	r3, r2
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	69bb      	ldr	r3, [r7, #24]
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010608:	440b      	add	r3, r1
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4413      	add	r3, r2
 801060e:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010618:	4413      	add	r3, r2
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	603b      	str	r3, [r7, #0]
    /* Fetch 4 Y values and emit 4 pixels */
    y  = GETJSAMPLE(*inptr00++);
 801061e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	647a      	str	r2, [r7, #68]	@ 0x44
 8010624:	781b      	ldrb	r3, [r3, #0]
 8010626:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010628:	4601      	mov	r1, r0
 801062a:	186b      	adds	r3, r5, r1
 801062c:	4423      	add	r3, r4
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	4602      	mov	r2, r0
 8010634:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010636:	eb05 0308 	add.w	r3, r5, r8
 801063a:	18e2      	adds	r2, r4, r3
 801063c:	6078      	str	r0, [r7, #4]
 801063e:	1c43      	adds	r3, r0, #1
 8010640:	7812      	ldrb	r2, [r2, #0]
 8010642:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010644:	6838      	ldr	r0, [r7, #0]
 8010646:	182b      	adds	r3, r5, r0
 8010648:	18e2      	adds	r2, r4, r3
 801064a:	687d      	ldr	r5, [r7, #4]
 801064c:	1cab      	adds	r3, r5, #2
 801064e:	7812      	ldrb	r2, [r2, #0]
 8010650:	701a      	strb	r2, [r3, #0]
    outptr0 += RGB_PIXELSIZE;
 8010652:	3503      	adds	r5, #3
 8010654:	607d      	str	r5, [r7, #4]
    y  = GETJSAMPLE(*inptr00++);
 8010656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010658:	1c5a      	adds	r2, r3, #1
 801065a:	647a      	str	r2, [r7, #68]	@ 0x44
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010660:	186b      	adds	r3, r5, r1
 8010662:	4423      	add	r3, r4
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 801066a:	eb05 0308 	add.w	r3, r5, r8
 801066e:	18e2      	adds	r2, r4, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	3301      	adds	r3, #1
 8010674:	7812      	ldrb	r2, [r2, #0]
 8010676:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8010678:	182b      	adds	r3, r5, r0
 801067a:	18e2      	adds	r2, r4, r3
 801067c:	687d      	ldr	r5, [r7, #4]
 801067e:	1cab      	adds	r3, r5, #2
 8010680:	7812      	ldrb	r2, [r2, #0]
 8010682:	701a      	strb	r2, [r3, #0]
    outptr0 += RGB_PIXELSIZE;
 8010684:	1ceb      	adds	r3, r5, #3
 8010686:	607b      	str	r3, [r7, #4]
    y  = GETJSAMPLE(*inptr01++);
 8010688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801068a:	1c5a      	adds	r2, r3, #1
 801068c:	643a      	str	r2, [r7, #64]	@ 0x40
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010692:	186b      	adds	r3, r5, r1
 8010694:	4423      	add	r3, r4
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 801069a:	eb05 0308 	add.w	r3, r5, r8
 801069e:	18e2      	adds	r2, r4, r3
 80106a0:	1c73      	adds	r3, r6, #1
 80106a2:	7812      	ldrb	r2, [r2, #0]
 80106a4:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 80106a6:	182b      	adds	r3, r5, r0
 80106a8:	18e2      	adds	r2, r4, r3
 80106aa:	1cb3      	adds	r3, r6, #2
 80106ac:	7812      	ldrb	r2, [r2, #0]
 80106ae:	701a      	strb	r2, [r3, #0]
    outptr1 += RGB_PIXELSIZE;
 80106b0:	3603      	adds	r6, #3
    y  = GETJSAMPLE(*inptr01++);
 80106b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80106b4:	1c5a      	adds	r2, r3, #1
 80106b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 80106bc:	186b      	adds	r3, r5, r1
 80106be:	4423      	add	r3, r4
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 80106c4:	eb05 0308 	add.w	r3, r5, r8
 80106c8:	18e2      	adds	r2, r4, r3
 80106ca:	1c73      	adds	r3, r6, #1
 80106cc:	7812      	ldrb	r2, [r2, #0]
 80106ce:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 80106d0:	182b      	adds	r3, r5, r0
 80106d2:	18e2      	adds	r2, r4, r3
 80106d4:	1cb3      	adds	r3, r6, #2
 80106d6:	7812      	ldrb	r2, [r2, #0]
 80106d8:	701a      	strb	r2, [r3, #0]
    outptr1 += RGB_PIXELSIZE;
 80106da:	3603      	adds	r6, #3
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 80106dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106de:	3b01      	subs	r3, #1
 80106e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80106e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f47f af78 	bne.w	80105da <h2v2_merged_upsample+0x88>
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106ee:	f003 0301 	and.w	r3, r3, #1
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d044      	beq.n	8010780 <h2v2_merged_upsample+0x22e>
    cb = GETJSAMPLE(*inptr1);
 80106f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	61fb      	str	r3, [r7, #28]
    cr = GETJSAMPLE(*inptr2);
 80106fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	61bb      	str	r3, [r7, #24]
    cred = Crrtab[cr];
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	009b      	lsls	r3, r3, #2
 8010706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010708:	4413      	add	r3, r2
 801070a:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	6a3a      	ldr	r2, [r7, #32]
 8010712:	4413      	add	r3, r2
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801071c:	440b      	add	r3, r1
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4413      	add	r3, r2
 8010722:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801072c:	4413      	add	r3, r2
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	603b      	str	r3, [r7, #0]
    y  = GETJSAMPLE(*inptr00);
 8010732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 8010738:	182b      	adds	r3, r5, r0
 801073a:	4423      	add	r3, r4
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	6879      	ldr	r1, [r7, #4]
 8010740:	700b      	strb	r3, [r1, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8010742:	eb05 0308 	add.w	r3, r5, r8
 8010746:	18e2      	adds	r2, r4, r3
 8010748:	1c4b      	adds	r3, r1, #1
 801074a:	7812      	ldrb	r2, [r2, #0]
 801074c:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	18eb      	adds	r3, r5, r3
 8010752:	18e2      	adds	r2, r4, r3
 8010754:	1c8b      	adds	r3, r1, #2
 8010756:	7812      	ldrb	r2, [r2, #0]
 8010758:	701a      	strb	r2, [r3, #0]
    y  = GETJSAMPLE(*inptr01);
 801075a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 8010760:	182b      	adds	r3, r5, r0
 8010762:	4423      	add	r3, r4
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8010768:	eb05 0308 	add.w	r3, r5, r8
 801076c:	18e2      	adds	r2, r4, r3
 801076e:	1c73      	adds	r3, r6, #1
 8010770:	7812      	ldrb	r2, [r2, #0]
 8010772:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	18eb      	adds	r3, r5, r3
 8010778:	18e2      	adds	r2, r4, r3
 801077a:	1cb3      	adds	r3, r6, #2
 801077c:	7812      	ldrb	r2, [r2, #0]
 801077e:	701a      	strb	r2, [r3, #0]
  }
}
 8010780:	bf00      	nop
 8010782:	374c      	adds	r7, #76	@ 0x4c
 8010784:	46bd      	mov	sp, r7
 8010786:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 801078a:	4770      	bx	lr

0801078c <jinit_merged_upsampler>:
 * of this module; no safety checks are made here.
 */

GLOBAL(void)
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2230      	movs	r2, #48	@ 0x30
 801079c:	2101      	movs	r1, #1
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	4798      	blx	r3
 80107a2:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
  upsample->pub.start_pass = start_pass_merged_upsample;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	4a1a      	ldr	r2, [pc, #104]	@ (8010818 <jinit_merged_upsampler+0x8c>)
 80107b0:	601a      	str	r2, [r3, #0]
  upsample->pub.need_context_rows = FALSE;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2200      	movs	r2, #0
 80107b6:	609a      	str	r2, [r3, #8]

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80107c0:	fb03 f202 	mul.w	r2, r3, r2
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (cinfo->max_v_samp_factor == 2) {
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d111      	bne.n	80107f6 <jinit_merged_upsampler+0x6a>
    upsample->pub.upsample = merged_2v_upsample;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	4a11      	ldr	r2, [pc, #68]	@ (801081c <jinit_merged_upsampler+0x90>)
 80107d6:	605a      	str	r2, [r3, #4]
    upsample->upmethod = h2v2_merged_upsample;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	4a11      	ldr	r2, [pc, #68]	@ (8010820 <jinit_merged_upsampler+0x94>)
 80107dc:	60da      	str	r2, [r3, #12]
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	685b      	ldr	r3, [r3, #4]
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80107e8:	2101      	movs	r1, #1
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	4798      	blx	r3
 80107ee:	4602      	mov	r2, r0
    upsample->spare_row = (JSAMPROW)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	621a      	str	r2, [r3, #32]
 80107f4:	e008      	b.n	8010808 <jinit_merged_upsampler+0x7c>
  } else {
    upsample->pub.upsample = merged_1v_upsample;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	4a0a      	ldr	r2, [pc, #40]	@ (8010824 <jinit_merged_upsampler+0x98>)
 80107fa:	605a      	str	r2, [r3, #4]
    upsample->upmethod = h2v1_merged_upsample;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	4a0a      	ldr	r2, [pc, #40]	@ (8010828 <jinit_merged_upsampler+0x9c>)
 8010800:	60da      	str	r2, [r3, #12]
    /* No spare row needed */
    upsample->spare_row = NULL;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2200      	movs	r2, #0
 8010806:	621a      	str	r2, [r3, #32]
  }

  build_ycc_rgb_table(cinfo);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f7ff fca9 	bl	8010160 <build_ycc_rgb_table>
}
 801080e:	bf00      	nop
 8010810:	3710      	adds	r7, #16
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	08010261 	.word	0x08010261
 801081c:	0801028b 	.word	0x0801028b
 8010820:	08010553 	.word	0x08010553
 8010824:	08010377 	.word	0x08010377
 8010828:	080103c3 	.word	0x080103c3

0801082c <start_pass_dpost>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 801082c:	b590      	push	{r4, r7, lr}
 801082e:	b087      	sub	sp, #28
 8010830:	af02      	add	r7, sp, #8
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	460b      	mov	r3, r1
 8010836:	70fb      	strb	r3, [r7, #3]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801083e:	60fb      	str	r3, [r7, #12]

  switch (pass_mode) {
 8010840:	78fb      	ldrb	r3, [r7, #3]
 8010842:	2b03      	cmp	r3, #3
 8010844:	d028      	beq.n	8010898 <start_pass_dpost+0x6c>
 8010846:	2b03      	cmp	r3, #3
 8010848:	dc48      	bgt.n	80108dc <start_pass_dpost+0xb0>
 801084a:	2b00      	cmp	r3, #0
 801084c:	d002      	beq.n	8010854 <start_pass_dpost+0x28>
 801084e:	2b02      	cmp	r3, #2
 8010850:	d033      	beq.n	80108ba <start_pass_dpost+0x8e>
 8010852:	e043      	b.n	80108dc <start_pass_dpost+0xb0>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010858:	2b00      	cmp	r3, #0
 801085a:	d016      	beq.n	801088a <start_pass_dpost+0x5e>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	4a2a      	ldr	r2, [pc, #168]	@ (8010908 <start_pass_dpost+0xdc>)
 8010860:	605a      	str	r2, [r3, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d142      	bne.n	80108f0 <start_pass_dpost+0xc4>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	69dc      	ldr	r4, [r3, #28]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6899      	ldr	r1, [r3, #8]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	691b      	ldr	r3, [r3, #16]
 8010878:	2201      	movs	r2, #1
 801087a:	9200      	str	r2, [sp, #0]
 801087c:	2200      	movs	r2, #0
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	47a0      	blx	r4
 8010882:	4602      	mov	r2, r0
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	60da      	str	r2, [r3, #12]
      /* For single-pass processing without color quantization,
       * I have no work to do; just call the upsampler directly.
       */
      post->pub.post_process_data = cinfo->upsample->upsample;
    }
    break;
 8010888:	e032      	b.n	80108f0 <start_pass_dpost+0xc4>
      post->pub.post_process_data = cinfo->upsample->upsample;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8010890:	685a      	ldr	r2, [r3, #4]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	605a      	str	r2, [r3, #4]
    break;
 8010896:	e02b      	b.n	80108f0 <start_pass_dpost+0xc4>
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    /* First pass of 2-pass quantization */
    if (post->whole_image == NULL)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d108      	bne.n	80108b2 <start_pass_dpost+0x86>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2203      	movs	r2, #3
 80108a6:	615a      	str	r2, [r3, #20]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	4a15      	ldr	r2, [pc, #84]	@ (801090c <start_pass_dpost+0xe0>)
 80108b6:	605a      	str	r2, [r3, #4]
    break;
 80108b8:	e01b      	b.n	80108f2 <start_pass_dpost+0xc6>
  case JBUF_CRANK_DEST:
    /* Second pass of 2-pass quantization */
    if (post->whole_image == NULL)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d108      	bne.n	80108d4 <start_pass_dpost+0xa8>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2203      	movs	r2, #3
 80108c8:	615a      	str	r2, [r3, #20]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	4a0e      	ldr	r2, [pc, #56]	@ (8010910 <start_pass_dpost+0xe4>)
 80108d8:	605a      	str	r2, [r3, #4]
    break;
 80108da:	e00a      	b.n	80108f2 <start_pass_dpost+0xc6>
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2203      	movs	r2, #3
 80108e2:	615a      	str	r2, [r3, #20]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	4798      	blx	r3
    break;
 80108ee:	e000      	b.n	80108f2 <start_pass_dpost+0xc6>
    break;
 80108f0:	bf00      	nop
  }
  post->starting_row = post->next_row = 0;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2200      	movs	r2, #0
 80108f6:	619a      	str	r2, [r3, #24]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	699a      	ldr	r2, [r3, #24]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	615a      	str	r2, [r3, #20]
}
 8010900:	bf00      	nop
 8010902:	3714      	adds	r7, #20
 8010904:	46bd      	mov	sp, r7
 8010906:	bd90      	pop	{r4, r7, pc}
 8010908:	08010915 	.word	0x08010915
 801090c:	0801099b 	.word	0x0801099b
 8010910:	08010a65 	.word	0x08010a65

08010914 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8010914:	b590      	push	{r4, r7, lr}
 8010916:	b08d      	sub	sp, #52	@ 0x34
 8010918:	af04      	add	r7, sp, #16
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	607a      	str	r2, [r7, #4]
 8010920:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8010928:	61bb      	str	r3, [r7, #24]
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 801092a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	61fb      	str	r3, [r7, #28]
  if (max_rows > post->strip_height)
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	691b      	ldr	r3, [r3, #16]
 8010938:	69fa      	ldr	r2, [r7, #28]
 801093a:	429a      	cmp	r2, r3
 801093c:	d902      	bls.n	8010944 <post_process_1pass+0x30>
    max_rows = post->strip_height;
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	691b      	ldr	r3, [r3, #16]
 8010942:	61fb      	str	r3, [r7, #28]
  num_rows = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	617b      	str	r3, [r7, #20]
  (*cinfo->upsample->upsample) (cinfo,
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 801094e:	685c      	ldr	r4, [r3, #4]
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	69fa      	ldr	r2, [r7, #28]
 8010956:	9202      	str	r2, [sp, #8]
 8010958:	f107 0214 	add.w	r2, r7, #20
 801095c:	9201      	str	r2, [sp, #4]
 801095e:	9300      	str	r3, [sp, #0]
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	68b9      	ldr	r1, [r7, #8]
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	47a0      	blx	r4
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8010970:	685c      	ldr	r4, [r3, #4]
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	68d9      	ldr	r1, [r3, #12]
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 8010976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 801097c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801097e:	441a      	add	r2, r3
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	47a0      	blx	r4
  *out_row_ctr += num_rows;
 8010986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	441a      	add	r2, r3
 801098e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010990:	601a      	str	r2, [r3, #0]
}
 8010992:	bf00      	nop
 8010994:	3724      	adds	r7, #36	@ 0x24
 8010996:	46bd      	mov	sp, r7
 8010998:	bd90      	pop	{r4, r7, pc}

0801099a <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 801099a:	b590      	push	{r4, r7, lr}
 801099c:	b08d      	sub	sp, #52	@ 0x34
 801099e:	af04      	add	r7, sp, #16
 80109a0:	60f8      	str	r0, [r7, #12]
 80109a2:	60b9      	str	r1, [r7, #8]
 80109a4:	607a      	str	r2, [r7, #4]
 80109a6:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80109ae:	61fb      	str	r3, [r7, #28]
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	699b      	ldr	r3, [r3, #24]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10f      	bne.n	80109d8 <post_process_prepass+0x3e>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	69dc      	ldr	r4, [r3, #28]
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	6899      	ldr	r1, [r3, #8]
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	695a      	ldr	r2, [r3, #20]
 80109c6:	69fb      	ldr	r3, [r7, #28]
 80109c8:	691b      	ldr	r3, [r3, #16]
 80109ca:	2001      	movs	r0, #1
 80109cc:	9000      	str	r0, [sp, #0]
 80109ce:	68f8      	ldr	r0, [r7, #12]
 80109d0:	47a0      	blx	r4
 80109d2:	4602      	mov	r2, r0
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	60da      	str	r2, [r3, #12]
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	699b      	ldr	r3, [r3, #24]
 80109dc:	61bb      	str	r3, [r7, #24]
  (*cinfo->upsample->upsample) (cinfo,
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 80109e4:	685c      	ldr	r4, [r3, #4]
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	69fa      	ldr	r2, [r7, #28]
 80109ec:	3218      	adds	r2, #24
 80109ee:	69f9      	ldr	r1, [r7, #28]
 80109f0:	6909      	ldr	r1, [r1, #16]
 80109f2:	9102      	str	r1, [sp, #8]
 80109f4:	9201      	str	r2, [sp, #4]
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	68b9      	ldr	r1, [r7, #8]
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	47a0      	blx	r4
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	69ba      	ldr	r2, [r7, #24]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d217      	bcs.n	8010a3c <post_process_prepass+0xa2>
    num_rows = post->next_row - old_next_row;
 8010a0c:	69fb      	ldr	r3, [r7, #28]
 8010a0e:	699a      	ldr	r2, [r3, #24]
 8010a10:	69bb      	ldr	r3, [r7, #24]
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	617b      	str	r3, [r7, #20]
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8010a1c:	685c      	ldr	r4, [r3, #4]
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	68da      	ldr	r2, [r3, #12]
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	18d1      	adds	r1, r2, r3
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	47a0      	blx	r4
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 8010a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	441a      	add	r2, r3
 8010a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a3a:	601a      	str	r2, [r3, #0]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	699a      	ldr	r2, [r3, #24]
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	691b      	ldr	r3, [r3, #16]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d309      	bcc.n	8010a5c <post_process_prepass+0xc2>
    post->starting_row += post->strip_height;
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	695a      	ldr	r2, [r3, #20]
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	691b      	ldr	r3, [r3, #16]
 8010a50:	441a      	add	r2, r3
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	615a      	str	r2, [r3, #20]
    post->next_row = 0;
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	619a      	str	r2, [r3, #24]
  }
}
 8010a5c:	bf00      	nop
 8010a5e:	3724      	adds	r7, #36	@ 0x24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd90      	pop	{r4, r7, pc}

08010a64 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8010a64:	b590      	push	{r4, r7, lr}
 8010a66:	b08b      	sub	sp, #44	@ 0x2c
 8010a68:	af02      	add	r7, sp, #8
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8010a78:	61bb      	str	r3, [r7, #24]
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	699b      	ldr	r3, [r3, #24]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d10f      	bne.n	8010aa2 <post_process_2pass+0x3e>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	69dc      	ldr	r4, [r3, #28]
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	6899      	ldr	r1, [r3, #8]
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	695a      	ldr	r2, [r3, #20]
 8010a90:	69bb      	ldr	r3, [r7, #24]
 8010a92:	691b      	ldr	r3, [r3, #16]
 8010a94:	2000      	movs	r0, #0
 8010a96:	9000      	str	r0, [sp, #0]
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	47a0      	blx	r4
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	69bb      	ldr	r3, [r7, #24]
 8010aa0:	60da      	str	r2, [r3, #12]
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
 8010aa2:	69bb      	ldr	r3, [r7, #24]
 8010aa4:	691a      	ldr	r2, [r3, #16]
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	699b      	ldr	r3, [r3, #24]
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	61fb      	str	r3, [r7, #28]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 8010aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	617b      	str	r3, [r7, #20]
  if (num_rows > max_rows)
 8010ab8:	69fa      	ldr	r2, [r7, #28]
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d901      	bls.n	8010ac4 <post_process_2pass+0x60>
    num_rows = max_rows;
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	61fb      	str	r3, [r7, #28]
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8010ac8:	69bb      	ldr	r3, [r7, #24]
 8010aca:	695b      	ldr	r3, [r3, #20]
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	617b      	str	r3, [r7, #20]
  if (num_rows > max_rows)
 8010ad0:	69fa      	ldr	r2, [r7, #28]
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d901      	bls.n	8010adc <post_process_2pass+0x78>
    num_rows = max_rows;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	61fb      	str	r3, [r7, #28]

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8010ae2:	685c      	ldr	r4, [r3, #4]
		post->buffer + post->next_row, output_buf + *out_row_ctr,
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	68da      	ldr	r2, [r3, #12]
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	699b      	ldr	r3, [r3, #24]
 8010aec:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010aee:	18d1      	adds	r1, r2, r3
		post->buffer + post->next_row, output_buf + *out_row_ctr,
 8010af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 8010af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010af8:	441a      	add	r2, r3
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	47a0      	blx	r4
		(int) num_rows);
  *out_row_ctr += num_rows;
 8010b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	441a      	add	r2, r3
 8010b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b0a:	601a      	str	r2, [r3, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	699a      	ldr	r2, [r3, #24]
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	441a      	add	r2, r3
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	619a      	str	r2, [r3, #24]
  if (post->next_row >= post->strip_height) {
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	699a      	ldr	r2, [r3, #24]
 8010b1c:	69bb      	ldr	r3, [r7, #24]
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d309      	bcc.n	8010b38 <post_process_2pass+0xd4>
    post->starting_row += post->strip_height;
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	695a      	ldr	r2, [r3, #20]
 8010b28:	69bb      	ldr	r3, [r7, #24]
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	441a      	add	r2, r3
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	615a      	str	r2, [r3, #20]
    post->next_row = 0;
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	2200      	movs	r2, #0
 8010b36:	619a      	str	r2, [r3, #24]
  }
}
 8010b38:	bf00      	nop
 8010b3a:	3724      	adds	r7, #36	@ 0x24
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd90      	pop	{r4, r7, pc}

08010b40 <jinit_d_post_controller>:
 * Initialize postprocessing controller.
 */

GLOBAL(void)
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 8010b40:	b5b0      	push	{r4, r5, r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af02      	add	r7, sp, #8
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	221c      	movs	r2, #28
 8010b52:	2101      	movs	r1, #1
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	4798      	blx	r3
 8010b58:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
  post->pub.start_pass = start_pass_dpost;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	4a25      	ldr	r2, [pc, #148]	@ (8010bfc <jinit_d_post_controller+0xbc>)
 8010b66:	601a      	str	r2, [r3, #0]
  post->whole_image = NULL;	/* flag for no virtual arrays */
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	609a      	str	r2, [r3, #8]
  post->buffer = NULL;		/* flag for no strip buffer */
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2200      	movs	r2, #0
 8010b72:	60da      	str	r2, [r3, #12]

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d03a      	beq.n	8010bf2 <jinit_d_post_controller+0xb2>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010b82:	461a      	mov	r2, r3
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	611a      	str	r2, [r3, #16]
    if (need_full_buffer) {
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d020      	beq.n	8010bd0 <jinit_d_post_controller+0x90>
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	691c      	ldr	r4, [r3, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8010b9c:	fb02 f503 	mul.w	r5, r2, r3
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ba4:	461a      	mov	r2, r3
				(long) post->strip_height),
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	691b      	ldr	r3, [r3, #16]
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 8010baa:	4619      	mov	r1, r3
 8010bac:	4610      	mov	r0, r2
 8010bae:	f011 f89d 	bl	8021cec <jround_up>
 8010bb2:	4603      	mov	r3, r0
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	691b      	ldr	r3, [r3, #16]
 8010bba:	9301      	str	r3, [sp, #4]
 8010bbc:	9200      	str	r2, [sp, #0]
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	2101      	movs	r1, #1
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	47a0      	blx	r4
 8010bc8:	4602      	mov	r2, r0
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	609a      	str	r2, [r3, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 8010bce:	e010      	b.n	8010bf2 <jinit_d_post_controller+0xb2>
      post->buffer = (*cinfo->mem->alloc_sarray)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	689c      	ldr	r4, [r3, #8]
	 cinfo->output_width * cinfo->out_color_components,
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
      post->buffer = (*cinfo->mem->alloc_sarray)
 8010bde:	fb03 f202 	mul.w	r2, r3, r2
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	2101      	movs	r1, #1
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	47a0      	blx	r4
 8010bec:	4602      	mov	r2, r0
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	60da      	str	r2, [r3, #12]
}
 8010bf2:	bf00      	nop
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	0801082d 	.word	0x0801082d

08010c00 <start_pass_upsample>:
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_upsample (j_decompress_ptr cinfo)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b085      	sub	sp, #20
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8010c0e:	60fb      	str	r3, [r7, #12]

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8010c22:	bf00      	nop
 8010c24:	3714      	adds	r7, #20
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr

08010c2e <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 8010c2e:	b590      	push	{r4, r7, lr}
 8010c30:	b08b      	sub	sp, #44	@ 0x2c
 8010c32:	af02      	add	r7, sp, #8
 8010c34:	60f8      	str	r0, [r7, #12]
 8010c36:	60b9      	str	r1, [r7, #8]
 8010c38:	607a      	str	r2, [r7, #4]
 8010c3a:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8010c42:	613b      	str	r3, [r7, #16]
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	db35      	blt.n	8010cbe <sep_upsample+0x90>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010c52:	2300      	movs	r3, #0
 8010c54:	61fb      	str	r3, [r7, #28]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010c5c:	61bb      	str	r3, [r7, #24]
 8010c5e:	e026      	b.n	8010cae <sep_upsample+0x80>
	 ci++, compptr++) {
      /* Invoke per-component upsample method.  Notice we pass a POINTER
       * to color_buf[ci], so that fullsize_upsample can change it.
       */
      (*upsample->methods[ci]) (cinfo, compptr,
 8010c60:	693a      	ldr	r2, [r7, #16]
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	330c      	adds	r3, #12
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	4413      	add	r3, r2
 8010c6a:	685c      	ldr	r4, [r3, #4]
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	009b      	lsls	r3, r3, #2
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	4413      	add	r3, r2
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6819      	ldr	r1, [r3, #0]
 8010c7a:	6938      	ldr	r0, [r7, #16]
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	3318      	adds	r3, #24
 8010c80:	009b      	lsls	r3, r3, #2
 8010c82:	4403      	add	r3, r0
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	fb01 f303 	mul.w	r3, r1, r3
 8010c8a:	009b      	lsls	r3, r3, #2
      (*upsample->methods[ci]) (cinfo, compptr,
 8010c8c:	18d1      	adds	r1, r2, r3
	upsample->color_buf + ci);
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	f103 020c 	add.w	r2, r3, #12
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	009b      	lsls	r3, r3, #2
      (*upsample->methods[ci]) (cinfo, compptr,
 8010c98:	4413      	add	r3, r2
 8010c9a:	460a      	mov	r2, r1
 8010c9c:	69b9      	ldr	r1, [r7, #24]
 8010c9e:	68f8      	ldr	r0, [r7, #12]
 8010ca0:	47a0      	blx	r4
	 ci++, compptr++) {
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	61fb      	str	r3, [r7, #28]
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	3358      	adds	r3, #88	@ 0x58
 8010cac:	61bb      	str	r3, [r7, #24]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cb2:	69fa      	ldr	r2, [r7, #28]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	dbd3      	blt.n	8010c60 <sep_upsample+0x32>
    }
    upsample->next_row_out = 0;
 8010cb8:	693b      	ldr	r3, [r7, #16]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	617b      	str	r3, [r7, #20]
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cd0:	697a      	ldr	r2, [r7, #20]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d902      	bls.n	8010cdc <sep_upsample+0xae>
    num_rows = upsample->rows_to_go;
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010cda:	617b      	str	r3, [r7, #20]
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 8010cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (num_rows > out_rows_avail)
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d901      	bls.n	8010cf2 <sep_upsample+0xc4>
    num_rows = out_rows_avail;
 8010cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf0:	617b      	str	r3, [r7, #20]

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8010cf8:	685c      	ldr	r4, [r3, #4]
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	f103 010c 	add.w	r1, r3, #12
				     (JDIMENSION) upsample->next_row_out,
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010d04:	4618      	mov	r0, r3
				     output_buf + *out_row_ctr,
 8010d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	009b      	lsls	r3, r3, #2
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8010d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d0e:	441a      	add	r2, r3
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	4613      	mov	r3, r2
 8010d16:	4602      	mov	r2, r0
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	47a0      	blx	r4
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 8010d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d1e:	681a      	ldr	r2, [r3, #0]
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	441a      	add	r2, r3
 8010d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d26:	601a      	str	r2, [r3, #0]
  upsample->rows_to_go -= num_rows;
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	1ad2      	subs	r2, r2, r3
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	661a      	str	r2, [r3, #96]	@ 0x60
  upsample->next_row_out += num_rows;
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d38:	461a      	mov	r2, r3
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	4413      	add	r3, r2
 8010d3e:	461a      	mov	r2, r3
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	db04      	blt.n	8010d5c <sep_upsample+0x12e>
    (*in_row_group_ctr)++;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	1c5a      	adds	r2, r3, #1
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	601a      	str	r2, [r3, #0]
}
 8010d5c:	bf00      	nop
 8010d5e:	3724      	adds	r7, #36	@ 0x24
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd90      	pop	{r4, r7, pc}

08010d64 <fullsize_upsample>:
 */

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b085      	sub	sp, #20
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
 8010d70:	603b      	str	r3, [r7, #0]
  *output_data_ptr = input_data;
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	601a      	str	r2, [r3, #0]
}
 8010d78:	bf00      	nop
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <noop_upsample>:
 */

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
 8010d90:	603b      	str	r3, [r7, #0]
  *output_data_ptr = NULL;	/* safety check */
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2200      	movs	r2, #0
 8010d96:	601a      	str	r2, [r3, #0]
}
 8010d98:	bf00      	nop
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <int_upsample>:
 */

METHODDEF(void)
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da8:	b08e      	sub	sp, #56	@ 0x38
 8010daa:	af02      	add	r7, sp, #8
 8010dac:	60f8      	str	r0, [r7, #12]
 8010dae:	60b9      	str	r1, [r7, #8]
 8010db0:	607a      	str	r2, [r7, #4]
 8010db2:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 8010dba:	627b      	str	r3, [r7, #36]	@ 0x24
  JSAMPARRAY output_data = *output_data_ptr;
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	623b      	str	r3, [r7, #32]
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dc8:	4413      	add	r3, r2
 8010dca:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8010dce:	61fb      	str	r3, [r7, #28]
  v_expand = upsample->v_expand[compptr->component_index];
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dd6:	4413      	add	r3, r2
 8010dd8:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8010ddc:	61bb      	str	r3, [r7, #24]

  inrow = outrow = 0;
 8010dde:	2300      	movs	r3, #0
 8010de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (outrow < cinfo->max_v_samp_factor) {
 8010de6:	e036      	b.n	8010e56 <int_upsample+0xb2>
    /* Generate one output row with proper horizontal expansion */
    inptr = input_data[inrow];
 8010de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dea:	009b      	lsls	r3, r3, #2
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	4413      	add	r3, r2
 8010df0:	681e      	ldr	r6, [r3, #0]
    outptr = output_data[outrow];
 8010df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	6a3a      	ldr	r2, [r7, #32]
 8010df8:	4413      	add	r3, r2
 8010dfa:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e00:	4423      	add	r3, r4
 8010e02:	617b      	str	r3, [r7, #20]
    while (outptr < outend) {
 8010e04:	e00c      	b.n	8010e20 <int_upsample+0x7c>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 8010e06:	4633      	mov	r3, r6
 8010e08:	1c5e      	adds	r6, r3, #1
 8010e0a:	f893 8000 	ldrb.w	r8, [r3]
      for (h = h_expand; h > 0; h--) {
 8010e0e:	69fd      	ldr	r5, [r7, #28]
 8010e10:	e004      	b.n	8010e1c <int_upsample+0x78>
	*outptr++ = invalue;
 8010e12:	4623      	mov	r3, r4
 8010e14:	1c5c      	adds	r4, r3, #1
 8010e16:	4642      	mov	r2, r8
 8010e18:	701a      	strb	r2, [r3, #0]
      for (h = h_expand; h > 0; h--) {
 8010e1a:	3d01      	subs	r5, #1
 8010e1c:	2d00      	cmp	r5, #0
 8010e1e:	dcf8      	bgt.n	8010e12 <int_upsample+0x6e>
    while (outptr < outend) {
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	429c      	cmp	r4, r3
 8010e24:	d3ef      	bcc.n	8010e06 <int_upsample+0x62>
      }
    }
    /* Generate any additional output rows by duplicating the first one */
    if (v_expand > 1) {
 8010e26:	69bb      	ldr	r3, [r7, #24]
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	dd0d      	ble.n	8010e48 <int_upsample+0xa4>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2e:	1c59      	adds	r1, r3, #1
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	3b01      	subs	r3, #1
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8010e38:	9201      	str	r2, [sp, #4]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	6a3a      	ldr	r2, [r7, #32]
 8010e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e42:	6a38      	ldr	r0, [r7, #32]
 8010e44:	f010 ff6c 	bl	8021d20 <jcopy_sample_rows>
			v_expand-1, cinfo->output_width);
    }
    inrow++;
 8010e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    outrow += v_expand;
 8010e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	4413      	add	r3, r2
 8010e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  while (outrow < cinfo->max_v_samp_factor) {
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010e5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	dbc2      	blt.n	8010de8 <int_upsample+0x44>
  }
}
 8010e62:	bf00      	nop
 8010e64:	bf00      	nop
 8010e66:	3730      	adds	r7, #48	@ 0x30
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e6e <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010e6e:	b4f0      	push	{r4, r5, r6, r7}
 8010e70:	b088      	sub	sp, #32
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	60f8      	str	r0, [r7, #12]
 8010e76:	60b9      	str	r1, [r7, #8]
 8010e78:	607a      	str	r2, [r7, #4]
 8010e7a:	603b      	str	r3, [r7, #0]
  JSAMPARRAY output_data = *output_data_ptr;
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	61bb      	str	r3, [r7, #24]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 8010e82:	2300      	movs	r3, #0
 8010e84:	61fb      	str	r3, [r7, #28]
 8010e86:	e01f      	b.n	8010ec8 <h2v1_upsample+0x5a>
    inptr = input_data[outrow];
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	4413      	add	r3, r2
 8010e90:	681d      	ldr	r5, [r3, #0]
    outptr = output_data[outrow];
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	69ba      	ldr	r2, [r7, #24]
 8010e98:	4413      	add	r3, r2
 8010e9a:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ea0:	4423      	add	r3, r4
 8010ea2:	617b      	str	r3, [r7, #20]
    while (outptr < outend) {
 8010ea4:	e00a      	b.n	8010ebc <h2v1_upsample+0x4e>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 8010ea6:	462b      	mov	r3, r5
 8010ea8:	1c5d      	adds	r5, r3, #1
 8010eaa:	781e      	ldrb	r6, [r3, #0]
      *outptr++ = invalue;
 8010eac:	4623      	mov	r3, r4
 8010eae:	1c5c      	adds	r4, r3, #1
 8010eb0:	4632      	mov	r2, r6
 8010eb2:	701a      	strb	r2, [r3, #0]
      *outptr++ = invalue;
 8010eb4:	4623      	mov	r3, r4
 8010eb6:	1c5c      	adds	r4, r3, #1
 8010eb8:	4632      	mov	r2, r6
 8010eba:	701a      	strb	r2, [r3, #0]
    while (outptr < outend) {
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	429c      	cmp	r4, r3
 8010ec0:	d3f1      	bcc.n	8010ea6 <h2v1_upsample+0x38>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	61fb      	str	r3, [r7, #28]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010ece:	69fa      	ldr	r2, [r7, #28]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	dbd9      	blt.n	8010e88 <h2v1_upsample+0x1a>
    }
  }
}
 8010ed4:	bf00      	nop
 8010ed6:	bf00      	nop
 8010ed8:	3720      	adds	r7, #32
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bcf0      	pop	{r4, r5, r6, r7}
 8010ede:	4770      	bx	lr

08010ee0 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8010ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee2:	b08b      	sub	sp, #44	@ 0x2c
 8010ee4:	af02      	add	r7, sp, #8
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
 8010eec:	603b      	str	r3, [r7, #0]
  JSAMPARRAY output_data = *output_data_ptr;
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	617b      	str	r3, [r7, #20]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	61bb      	str	r3, [r7, #24]
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	61fb      	str	r3, [r7, #28]
  while (outrow < cinfo->max_v_samp_factor) {
 8010efc:	e02f      	b.n	8010f5e <h2v2_upsample+0x7e>
    inptr = input_data[inrow];
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	4413      	add	r3, r2
 8010f06:	681d      	ldr	r5, [r3, #0]
    outptr = output_data[outrow];
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	697a      	ldr	r2, [r7, #20]
 8010f0e:	4413      	add	r3, r2
 8010f10:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f16:	4423      	add	r3, r4
 8010f18:	613b      	str	r3, [r7, #16]
    while (outptr < outend) {
 8010f1a:	e00a      	b.n	8010f32 <h2v2_upsample+0x52>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 8010f1c:	462b      	mov	r3, r5
 8010f1e:	1c5d      	adds	r5, r3, #1
 8010f20:	781e      	ldrb	r6, [r3, #0]
      *outptr++ = invalue;
 8010f22:	4623      	mov	r3, r4
 8010f24:	1c5c      	adds	r4, r3, #1
 8010f26:	4632      	mov	r2, r6
 8010f28:	701a      	strb	r2, [r3, #0]
      *outptr++ = invalue;
 8010f2a:	4623      	mov	r3, r4
 8010f2c:	1c5c      	adds	r4, r3, #1
 8010f2e:	4632      	mov	r2, r6
 8010f30:	701a      	strb	r2, [r3, #0]
    while (outptr < outend) {
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	429c      	cmp	r4, r3
 8010f36:	d3f1      	bcc.n	8010f1c <h2v2_upsample+0x3c>
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f40:	9301      	str	r3, [sp, #4]
 8010f42:	2301      	movs	r3, #1
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	4613      	mov	r3, r2
 8010f48:	697a      	ldr	r2, [r7, #20]
 8010f4a:	69b9      	ldr	r1, [r7, #24]
 8010f4c:	6978      	ldr	r0, [r7, #20]
 8010f4e:	f010 fee7 	bl	8021d20 <jcopy_sample_rows>
		      1, cinfo->output_width);
    inrow++;
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	3301      	adds	r3, #1
 8010f56:	61fb      	str	r3, [r7, #28]
    outrow += 2;
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	3302      	adds	r3, #2
 8010f5c:	61bb      	str	r3, [r7, #24]
  while (outrow < cinfo->max_v_samp_factor) {
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010f64:	69ba      	ldr	r2, [r7, #24]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	dbc9      	blt.n	8010efe <h2v2_upsample+0x1e>
  }
}
 8010f6a:	bf00      	nop
 8010f6c:	bf00      	nop
 8010f6e:	3724      	adds	r7, #36	@ 0x24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f74 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 8010f74:	b590      	push	{r4, r7, lr}
 8010f76:	b08b      	sub	sp, #44	@ 0x2c
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	22a0      	movs	r2, #160	@ 0xa0
 8010f84:	2101      	movs	r1, #1
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	4798      	blx	r3
 8010f8a:	61b8      	str	r0, [r7, #24]
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	69ba      	ldr	r2, [r7, #24]
 8010f90:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
  upsample->pub.start_pass = start_pass_upsample;
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	4a7a      	ldr	r2, [pc, #488]	@ (8011180 <jinit_upsampler+0x20c>)
 8010f98:	601a      	str	r2, [r3, #0]
  upsample->pub.upsample = sep_upsample;
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	4a79      	ldr	r2, [pc, #484]	@ (8011184 <jinit_upsampler+0x210>)
 8010f9e:	605a      	str	r2, [r3, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	609a      	str	r2, [r3, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d008      	beq.n	8010fc2 <jinit_upsampler+0x4e>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	221a      	movs	r2, #26
 8010fb6:	615a      	str	r2, [r3, #20]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010fcc:	623b      	str	r3, [r7, #32]
 8010fce:	e0cb      	b.n	8011168 <jinit_upsampler+0x1f4>
       ci++, compptr++) {
    /* Compute size of an "input group" after IDCT scaling.  This many samples
     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010fd0:	6a3b      	ldr	r3, [r7, #32]
 8010fd2:	689b      	ldr	r3, [r3, #8]
 8010fd4:	6a3a      	ldr	r2, [r7, #32]
 8010fd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010fd8:	fb03 f202 	mul.w	r2, r3, r2
		 cinfo->min_DCT_h_scaled_size;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010fe2:	fb92 f3f3 	sdiv	r3, r2, r3
 8010fe6:	617b      	str	r3, [r7, #20]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	6a3a      	ldr	r2, [r7, #32]
 8010fee:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8010ff0:	fb03 f202 	mul.w	r2, r3, r2
		 cinfo->min_DCT_v_scaled_size;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ffe:	613b      	str	r3, [r7, #16]
    h_out_group = cinfo->max_h_samp_factor;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8011006:	60fb      	str	r3, [r7, #12]
    v_out_group = cinfo->max_v_samp_factor;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801100e:	60bb      	str	r3, [r7, #8]
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 8011010:	69ba      	ldr	r2, [r7, #24]
 8011012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011014:	3318      	adds	r3, #24
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	4413      	add	r3, r2
 801101a:	693a      	ldr	r2, [r7, #16]
 801101c:	605a      	str	r2, [r3, #4]
    need_buffer = TRUE;
 801101e:	2301      	movs	r3, #1
 8011020:	61fb      	str	r3, [r7, #28]
    if (! compptr->component_needed) {
 8011022:	6a3b      	ldr	r3, [r7, #32]
 8011024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011026:	2b00      	cmp	r3, #0
 8011028:	d109      	bne.n	801103e <jinit_upsampler+0xca>
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
 801102a:	69ba      	ldr	r2, [r7, #24]
 801102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102e:	330c      	adds	r3, #12
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	4413      	add	r3, r2
 8011034:	4a54      	ldr	r2, [pc, #336]	@ (8011188 <jinit_upsampler+0x214>)
 8011036:	605a      	str	r2, [r3, #4]
      need_buffer = FALSE;
 8011038:	2300      	movs	r3, #0
 801103a:	61fb      	str	r3, [r7, #28]
 801103c:	e06f      	b.n	801111e <jinit_upsampler+0x1aa>
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 801103e:	697a      	ldr	r2, [r7, #20]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	429a      	cmp	r2, r3
 8011044:	d10d      	bne.n	8011062 <jinit_upsampler+0xee>
 8011046:	693a      	ldr	r2, [r7, #16]
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	429a      	cmp	r2, r3
 801104c:	d109      	bne.n	8011062 <jinit_upsampler+0xee>
      /* Fullsize components can be processed without any work. */
      upsample->methods[ci] = fullsize_upsample;
 801104e:	69ba      	ldr	r2, [r7, #24]
 8011050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011052:	330c      	adds	r3, #12
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	4413      	add	r3, r2
 8011058:	4a4c      	ldr	r2, [pc, #304]	@ (801118c <jinit_upsampler+0x218>)
 801105a:	605a      	str	r2, [r3, #4]
      need_buffer = FALSE;
 801105c:	2300      	movs	r3, #0
 801105e:	61fb      	str	r3, [r7, #28]
 8011060:	e05d      	b.n	801111e <jinit_upsampler+0x1aa>
    } else if (h_in_group * 2 == h_out_group &&
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	429a      	cmp	r2, r3
 801106a:	d10b      	bne.n	8011084 <jinit_upsampler+0x110>
 801106c:	693a      	ldr	r2, [r7, #16]
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	429a      	cmp	r2, r3
 8011072:	d107      	bne.n	8011084 <jinit_upsampler+0x110>
	       v_in_group == v_out_group) {
      /* Special case for 2h1v upsampling */
      upsample->methods[ci] = h2v1_upsample;
 8011074:	69ba      	ldr	r2, [r7, #24]
 8011076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011078:	330c      	adds	r3, #12
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	4413      	add	r3, r2
 801107e:	4a44      	ldr	r2, [pc, #272]	@ (8011190 <jinit_upsampler+0x21c>)
 8011080:	605a      	str	r2, [r3, #4]
 8011082:	e04c      	b.n	801111e <jinit_upsampler+0x1aa>
    } else if (h_in_group * 2 == h_out_group &&
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	429a      	cmp	r2, r3
 801108c:	d10c      	bne.n	80110a8 <jinit_upsampler+0x134>
	       v_in_group * 2 == v_out_group) {
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	005b      	lsls	r3, r3, #1
    } else if (h_in_group * 2 == h_out_group &&
 8011092:	68ba      	ldr	r2, [r7, #8]
 8011094:	429a      	cmp	r2, r3
 8011096:	d107      	bne.n	80110a8 <jinit_upsampler+0x134>
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
 8011098:	69ba      	ldr	r2, [r7, #24]
 801109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801109c:	330c      	adds	r3, #12
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	4413      	add	r3, r2
 80110a2:	4a3c      	ldr	r2, [pc, #240]	@ (8011194 <jinit_upsampler+0x220>)
 80110a4:	605a      	str	r2, [r3, #4]
 80110a6:	e03a      	b.n	801111e <jinit_upsampler+0x1aa>
    } else if ((h_out_group % h_in_group) == 0 &&
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80110b0:	6979      	ldr	r1, [r7, #20]
 80110b2:	fb01 f202 	mul.w	r2, r1, r2
 80110b6:	1a9b      	subs	r3, r3, r2
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d127      	bne.n	801110c <jinit_upsampler+0x198>
	       (v_out_group % v_in_group) == 0) {
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	693a      	ldr	r2, [r7, #16]
 80110c0:	fb93 f2f2 	sdiv	r2, r3, r2
 80110c4:	6939      	ldr	r1, [r7, #16]
 80110c6:	fb01 f202 	mul.w	r2, r1, r2
 80110ca:	1a9b      	subs	r3, r3, r2
    } else if ((h_out_group % h_in_group) == 0 &&
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d11d      	bne.n	801110c <jinit_upsampler+0x198>
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 80110d0:	69ba      	ldr	r2, [r7, #24]
 80110d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d4:	330c      	adds	r3, #12
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	4413      	add	r3, r2
 80110da:	4a2f      	ldr	r2, [pc, #188]	@ (8011198 <jinit_upsampler+0x224>)
 80110dc:	605a      	str	r2, [r3, #4]
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80110e6:	b2d9      	uxtb	r1, r3
 80110e8:	69ba      	ldr	r2, [r7, #24]
 80110ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ec:	4413      	add	r3, r2
 80110ee:	338c      	adds	r3, #140	@ 0x8c
 80110f0:	460a      	mov	r2, r1
 80110f2:	701a      	strb	r2, [r3, #0]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 80110f4:	68ba      	ldr	r2, [r7, #8]
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80110fc:	b2d9      	uxtb	r1, r3
 80110fe:	69ba      	ldr	r2, [r7, #24]
 8011100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011102:	4413      	add	r3, r2
 8011104:	3396      	adds	r3, #150	@ 0x96
 8011106:	460a      	mov	r2, r1
 8011108:	701a      	strb	r2, [r3, #0]
 801110a:	e008      	b.n	801111e <jinit_upsampler+0x1aa>
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	2227      	movs	r2, #39	@ 0x27
 8011112:	615a      	str	r2, [r3, #20]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	4798      	blx	r3
    if (need_buffer) {
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d01b      	beq.n	801115c <jinit_upsampler+0x1e8>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	689c      	ldr	r4, [r3, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801112e:	461a      	mov	r2, r3
				(long) cinfo->max_h_samp_factor),
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8011136:	4619      	mov	r1, r3
 8011138:	4610      	mov	r0, r2
 801113a:	f010 fdd7 	bl	8021cec <jround_up>
 801113e:	4603      	mov	r3, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8011140:	461a      	mov	r2, r3
	 (JDIMENSION) cinfo->max_v_samp_factor);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8011148:	2101      	movs	r1, #1
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	47a0      	blx	r4
 801114e:	4601      	mov	r1, r0
 8011150:	69ba      	ldr	r2, [r7, #24]
 8011152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011154:	3302      	adds	r3, #2
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	4413      	add	r3, r2
 801115a:	6059      	str	r1, [r3, #4]
       ci++, compptr++) {
 801115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115e:	3301      	adds	r3, #1
 8011160:	627b      	str	r3, [r7, #36]	@ 0x24
 8011162:	6a3b      	ldr	r3, [r7, #32]
 8011164:	3358      	adds	r3, #88	@ 0x58
 8011166:	623b      	str	r3, [r7, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801116e:	429a      	cmp	r2, r3
 8011170:	f6ff af2e 	blt.w	8010fd0 <jinit_upsampler+0x5c>
    }
  }
}
 8011174:	bf00      	nop
 8011176:	bf00      	nop
 8011178:	372c      	adds	r7, #44	@ 0x2c
 801117a:	46bd      	mov	sp, r7
 801117c:	bd90      	pop	{r4, r7, pc}
 801117e:	bf00      	nop
 8011180:	08010c01 	.word	0x08010c01
 8011184:	08010c2f 	.word	0x08010c2f
 8011188:	08010d85 	.word	0x08010d85
 801118c:	08010d65 	.word	0x08010d65
 8011190:	08010e6f 	.word	0x08010e6f
 8011194:	08010ee1 	.word	0x08010ee1
 8011198:	08010da5 	.word	0x08010da5

0801119c <error_exit>:
 * or jpeg_destroy) at some point.
 */

METHODDEF(void)
error_exit (j_common_ptr cinfo)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  /* Always display the message */
  (*cinfo->err->output_message) (cinfo);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	4798      	blx	r3

  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7f4 fc84 	bl	8005abc <jpeg_destroy>

  //exit(EXIT_FAILURE);
}
 80111b4:	bf00      	nop
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b0b4      	sub	sp, #208	@ 0xd0
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	f107 0208 	add.w	r2, r7, #8
 80111ce:	4611      	mov	r1, r2
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 80111d4:	bf00      	nop
 80111d6:	37d0      	adds	r7, #208	@ 0xd0
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <emit_message>:
 * or change the policy about which messages to display.
 */

METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
  struct jpeg_error_mgr * err = cinfo->err;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	60fb      	str	r3, [r7, #12]

  if (msg_level < 0) {
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	da11      	bge.n	8011216 <emit_message+0x3a>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d003      	beq.n	8011202 <emit_message+0x26>
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80111fe:	2b02      	cmp	r3, #2
 8011200:	dd03      	ble.n	801120a <emit_message+0x2e>
      (*err->output_message) (cinfo);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	4798      	blx	r3
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801120e:	1c5a      	adds	r2, r3, #1
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	66da      	str	r2, [r3, #108]	@ 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 8011214:	e008      	b.n	8011228 <emit_message+0x4c>
    if (err->trace_level >= msg_level)
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801121a:	683a      	ldr	r2, [r7, #0]
 801121c:	429a      	cmp	r2, r3
 801121e:	dc03      	bgt.n	8011228 <emit_message+0x4c>
      (*err->output_message) (cinfo);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	4798      	blx	r3
}
 8011228:	bf00      	nop
 801122a:	3710      	adds	r7, #16
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <format_message>:
 * Few applications should need to override this method.
 */

METHODDEF(void)
format_message (j_common_ptr cinfo, char * buffer)
{
 8011230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011232:	b091      	sub	sp, #68	@ 0x44
 8011234:	af06      	add	r7, sp, #24
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
  struct jpeg_error_mgr * err = cinfo->err;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	61bb      	str	r3, [r7, #24]
  int msg_code = err->msg_code;
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	695b      	ldr	r3, [r3, #20]
 8011244:	617b      	str	r3, [r7, #20]
  const char * msgtext = NULL;
 8011246:	2300      	movs	r3, #0
 8011248:	627b      	str	r3, [r7, #36]	@ 0x24
  const char * msgptr;
  char ch;
  boolean isstring;

  /* Look up message string in proper table */
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	2b00      	cmp	r3, #0
 801124e:	dd0c      	ble.n	801126a <format_message+0x3a>
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011254:	697a      	ldr	r2, [r7, #20]
 8011256:	429a      	cmp	r2, r3
 8011258:	dc07      	bgt.n	801126a <format_message+0x3a>
    msgtext = err->jpeg_message_table[msg_code];
 801125a:	69bb      	ldr	r3, [r7, #24]
 801125c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	4413      	add	r3, r2
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	627b      	str	r3, [r7, #36]	@ 0x24
 8011268:	e018      	b.n	801129c <format_message+0x6c>
  } else if (err->addon_message_table != NULL &&
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801126e:	2b00      	cmp	r3, #0
 8011270:	d014      	beq.n	801129c <format_message+0x6c>
	     msg_code >= err->first_addon_message &&
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
  } else if (err->addon_message_table != NULL &&
 8011276:	697a      	ldr	r2, [r7, #20]
 8011278:	429a      	cmp	r2, r3
 801127a:	db0f      	blt.n	801129c <format_message+0x6c>
	     msg_code <= err->last_addon_message) {
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
	     msg_code >= err->first_addon_message &&
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	429a      	cmp	r2, r3
 8011286:	dc09      	bgt.n	801129c <format_message+0x6c>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801128c:	69bb      	ldr	r3, [r7, #24]
 801128e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011290:	6979      	ldr	r1, [r7, #20]
 8011292:	1acb      	subs	r3, r1, r3
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Defend against bogus message number */
  if (msgtext == NULL) {
 801129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d106      	bne.n	80112b0 <format_message+0x80>
    err->msg_parm.i[0] = msg_code;
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	697a      	ldr	r2, [r7, #20]
 80112a6:	619a      	str	r2, [r3, #24]
    msgtext = err->jpeg_message_table[0];
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check for string parameter, as indicated by %s in the message text */
  isstring = FALSE;
 80112b0:	2300      	movs	r3, #0
 80112b2:	61fb      	str	r3, [r7, #28]
  msgptr = msgtext;
 80112b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b6:	623b      	str	r3, [r7, #32]
  while ((ch = *msgptr++) != '\0') {
 80112b8:	e009      	b.n	80112ce <format_message+0x9e>
    if (ch == '%') {
 80112ba:	7cfb      	ldrb	r3, [r7, #19]
 80112bc:	2b25      	cmp	r3, #37	@ 0x25
 80112be:	d106      	bne.n	80112ce <format_message+0x9e>
      if (*msgptr == 's') isstring = TRUE;
 80112c0:	6a3b      	ldr	r3, [r7, #32]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b73      	cmp	r3, #115	@ 0x73
 80112c6:	d10b      	bne.n	80112e0 <format_message+0xb0>
 80112c8:	2301      	movs	r3, #1
 80112ca:	61fb      	str	r3, [r7, #28]
      break;
 80112cc:	e008      	b.n	80112e0 <format_message+0xb0>
  while ((ch = *msgptr++) != '\0') {
 80112ce:	6a3b      	ldr	r3, [r7, #32]
 80112d0:	1c5a      	adds	r2, r3, #1
 80112d2:	623a      	str	r2, [r7, #32]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	74fb      	strb	r3, [r7, #19]
 80112d8:	7cfb      	ldrb	r3, [r7, #19]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1ed      	bne.n	80112ba <format_message+0x8a>
 80112de:	e000      	b.n	80112e2 <format_message+0xb2>
      break;
 80112e0:	bf00      	nop
    }
  }

  /* Format the message into the passed buffer */
  if (isstring)
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d007      	beq.n	80112f8 <format_message+0xc8>
    sprintf(buffer, msgtext, err->msg_parm.s);
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	3318      	adds	r3, #24
 80112ec:	461a      	mov	r2, r3
 80112ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80112f0:	68b8      	ldr	r0, [r7, #8]
 80112f2:	f010 fe0d 	bl	8021f10 <siprintf>
    sprintf(buffer, msgtext,
	    err->msg_parm.i[0], err->msg_parm.i[1],
	    err->msg_parm.i[2], err->msg_parm.i[3],
	    err->msg_parm.i[4], err->msg_parm.i[5],
	    err->msg_parm.i[6], err->msg_parm.i[7]);
}
 80112f6:	e01c      	b.n	8011332 <format_message+0x102>
    sprintf(buffer, msgtext,
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	699e      	ldr	r6, [r3, #24]
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	69db      	ldr	r3, [r3, #28]
 8011300:	607b      	str	r3, [r7, #4]
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	6a1b      	ldr	r3, [r3, #32]
 8011306:	69ba      	ldr	r2, [r7, #24]
 8011308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801130a:	69b9      	ldr	r1, [r7, #24]
 801130c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 801130e:	69b8      	ldr	r0, [r7, #24]
 8011310:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8011312:	69bc      	ldr	r4, [r7, #24]
 8011314:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8011316:	69bd      	ldr	r5, [r7, #24]
 8011318:	6b6d      	ldr	r5, [r5, #52]	@ 0x34
 801131a:	9505      	str	r5, [sp, #20]
 801131c:	9404      	str	r4, [sp, #16]
 801131e:	9003      	str	r0, [sp, #12]
 8011320:	9102      	str	r1, [sp, #8]
 8011322:	9201      	str	r2, [sp, #4]
 8011324:	9300      	str	r3, [sp, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4632      	mov	r2, r6
 801132a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801132c:	68b8      	ldr	r0, [r7, #8]
 801132e:	f010 fdef 	bl	8021f10 <siprintf>
}
 8011332:	bf00      	nop
 8011334:	372c      	adds	r7, #44	@ 0x2c
 8011336:	46bd      	mov	sp, r7
 8011338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801133a <reset_error_mgr>:
 * this method if it has additional error processing state.
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
 801133a:	b480      	push	{r7}
 801133c:	b083      	sub	sp, #12
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
  cinfo->err->num_warnings = 0;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	2200      	movs	r2, #0
 8011348:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2200      	movs	r2, #0
 8011350:	615a      	str	r2, [r3, #20]
}
 8011352:	bf00      	nop
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr
	...

08011360 <jpeg_std_error>:
 * after which the application may override some of the methods.
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  err->error_exit = error_exit;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	4a17      	ldr	r2, [pc, #92]	@ (80113c8 <jpeg_std_error+0x68>)
 801136c:	601a      	str	r2, [r3, #0]
  err->emit_message = emit_message;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4a16      	ldr	r2, [pc, #88]	@ (80113cc <jpeg_std_error+0x6c>)
 8011372:	605a      	str	r2, [r3, #4]
  err->output_message = output_message;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4a16      	ldr	r2, [pc, #88]	@ (80113d0 <jpeg_std_error+0x70>)
 8011378:	609a      	str	r2, [r3, #8]
  err->format_message = format_message;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4a15      	ldr	r2, [pc, #84]	@ (80113d4 <jpeg_std_error+0x74>)
 801137e:	60da      	str	r2, [r3, #12]
  err->reset_error_mgr = reset_error_mgr;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	4a15      	ldr	r2, [pc, #84]	@ (80113d8 <jpeg_std_error+0x78>)
 8011384:	611a      	str	r2, [r3, #16]

  err->trace_level = 0;		/* default = no tracing */
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	669a      	str	r2, [r3, #104]	@ 0x68
  err->num_warnings = 0;	/* no warnings emitted yet */
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	66da      	str	r2, [r3, #108]	@ 0x6c
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	615a      	str	r2, [r3, #20]

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4a10      	ldr	r2, [pc, #64]	@ (80113dc <jpeg_std_error+0x7c>)
 801139c:	671a      	str	r2, [r3, #112]	@ 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	227e      	movs	r2, #126	@ 0x7e
 80113a2:	675a      	str	r2, [r3, #116]	@ 0x74

  err->addon_message_table = NULL;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	679a      	str	r2, [r3, #120]	@ 0x78
  err->first_addon_message = 0;	/* for safety */
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2200      	movs	r2, #0
 80113ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  err->last_addon_message = 0;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2200      	movs	r2, #0
 80113b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return err;
 80113b8:	687b      	ldr	r3, [r7, #4]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr
 80113c6:	bf00      	nop
 80113c8:	0801119d 	.word	0x0801119d
 80113cc:	080111dd 	.word	0x080111dd
 80113d0:	080111bd 	.word	0x080111bd
 80113d4:	08011231 	.word	0x08011231
 80113d8:	0801133b 	.word	0x0801133b
 80113dc:	080240f4 	.word	0x080240f4

080113e0 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80113e0:	b490      	push	{r4, r7}
 80113e2:	b0dc      	sub	sp, #368	@ 0x170
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	f507 74b8 	add.w	r4, r7, #368	@ 0x170
 80113ea:	f5a4 74b2 	sub.w	r4, r4, #356	@ 0x164
 80113ee:	6020      	str	r0, [r4, #0]
 80113f0:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 80113f4:	f5a0 70b4 	sub.w	r0, r0, #360	@ 0x168
 80113f8:	6001      	str	r1, [r0, #0]
 80113fa:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80113fe:	f5a1 71b6 	sub.w	r1, r1, #364	@ 0x16c
 8011402:	600a      	str	r2, [r1, #0]
 8011404:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8011408:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 801140c:	6013      	str	r3, [r2, #0]
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801140e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8011412:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801141c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8011420:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8011424:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 801142e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8011432:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801143a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  wsptr = workspace;
 801143e:	f107 0310 	add.w	r3, r7, #16
 8011442:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011446:	2308      	movs	r3, #8
 8011448:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 801144c:	e230      	b.n	80118b0 <jpeg_idct_float+0x4d0>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801144e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011452:	3310      	adds	r3, #16
 8011454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d178      	bne.n	801154e <jpeg_idct_float+0x16e>
 801145c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011460:	3320      	adds	r3, #32
 8011462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d171      	bne.n	801154e <jpeg_idct_float+0x16e>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801146a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801146e:	3330      	adds	r3, #48	@ 0x30
 8011470:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011474:	2b00      	cmp	r3, #0
 8011476:	d16a      	bne.n	801154e <jpeg_idct_float+0x16e>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011478:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801147c:	3340      	adds	r3, #64	@ 0x40
 801147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d163      	bne.n	801154e <jpeg_idct_float+0x16e>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011486:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801148a:	3350      	adds	r3, #80	@ 0x50
 801148c:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011490:	2b00      	cmp	r3, #0
 8011492:	d15c      	bne.n	801154e <jpeg_idct_float+0x16e>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011494:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011498:	3360      	adds	r3, #96	@ 0x60
 801149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d155      	bne.n	801154e <jpeg_idct_float+0x16e>
	inptr[DCTSIZE*7] == 0) {
 80114a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80114a6:	3370      	adds	r3, #112	@ 0x70
 80114a8:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d14e      	bne.n	801154e <jpeg_idct_float+0x16e>
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80114b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80114b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114b8:	ee07 3a90 	vmov	s15, r3
 80114bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80114c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80114c4:	edd3 7a00 	vldr	s15, [r3]
 80114c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114cc:	edc7 7a44 	vstr	s15, [r7, #272]	@ 0x110
      
      wsptr[DCTSIZE*0] = dcval;
 80114d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80114d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80114d8:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 80114da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80114de:	3320      	adds	r3, #32
 80114e0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80114e4:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 80114e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80114ea:	3340      	adds	r3, #64	@ 0x40
 80114ec:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80114f0:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 80114f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80114f6:	3360      	adds	r3, #96	@ 0x60
 80114f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80114fc:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 80114fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011502:	3380      	adds	r3, #128	@ 0x80
 8011504:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8011508:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 801150a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801150e:	33a0      	adds	r3, #160	@ 0xa0
 8011510:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8011514:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 8011516:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801151a:	33c0      	adds	r3, #192	@ 0xc0
 801151c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8011520:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 8011522:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011526:	33e0      	adds	r3, #224	@ 0xe0
 8011528:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801152c:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 801152e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011532:	3302      	adds	r3, #2
 8011534:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
      quantptr++;
 8011538:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801153c:	3304      	adds	r3, #4
 801153e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
      wsptr++;
 8011542:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011546:	3304      	adds	r3, #4
 8011548:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
      continue;
 801154c:	e1ab      	b.n	80118a6 <jpeg_idct_float+0x4c6>
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801154e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011556:	ee07 3a90 	vmov	s15, r3
 801155a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801155e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8011562:	edd3 7a00 	vldr	s15, [r3]
 8011566:	ee67 7a27 	vmul.f32	s15, s14, s15
 801156a:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801156e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011572:	3320      	adds	r3, #32
 8011574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011578:	ee07 3a90 	vmov	s15, r3
 801157c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011580:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8011584:	3340      	adds	r3, #64	@ 0x40
 8011586:	edd3 7a00 	vldr	s15, [r3]
 801158a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801158e:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011592:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011596:	3340      	adds	r3, #64	@ 0x40
 8011598:	f9b3 3000 	ldrsh.w	r3, [r3]
 801159c:	ee07 3a90 	vmov	s15, r3
 80115a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80115a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80115a8:	3380      	adds	r3, #128	@ 0x80
 80115aa:	edd3 7a00 	vldr	s15, [r3]
 80115ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115b2:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80115b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80115ba:	3360      	adds	r3, #96	@ 0x60
 80115bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115c0:	ee07 3a90 	vmov	s15, r3
 80115c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80115c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80115cc:	33c0      	adds	r3, #192	@ 0xc0
 80115ce:	edd3 7a00 	vldr	s15, [r3]
 80115d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115d6:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c

    tmp10 = tmp0 + tmp2;	/* phase 3 */
 80115da:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 80115de:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 80115e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80115e6:	edc7 7a54 	vstr	s15, [r7, #336]	@ 0x150
    tmp11 = tmp0 - tmp2;
 80115ea:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 80115ee:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 80115f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115f6:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 80115fa:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 80115fe:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8011602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011606:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 801160a:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 801160e:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8011612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011616:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80118d0 <jpeg_idct_float+0x4f0>
 801161a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801161e:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8011622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011626:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

    tmp0 = tmp10 + tmp13;	/* phase 2 */
 801162a:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 801162e:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8011632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011636:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
    tmp3 = tmp10 - tmp13;
 801163a:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 801163e:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 8011642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011646:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
    tmp1 = tmp11 + tmp12;
 801164a:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 801164e:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8011652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011656:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
    tmp2 = tmp11 - tmp12;
 801165a:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 801165e:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8011662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011666:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801166a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801166e:	3310      	adds	r3, #16
 8011670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011674:	ee07 3a90 	vmov	s15, r3
 8011678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801167c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8011680:	3320      	adds	r3, #32
 8011682:	edd3 7a00 	vldr	s15, [r3]
 8011686:	ee67 7a27 	vmul.f32	s15, s14, s15
 801168a:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801168e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011692:	3330      	adds	r3, #48	@ 0x30
 8011694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011698:	ee07 3a90 	vmov	s15, r3
 801169c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80116a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80116a4:	3360      	adds	r3, #96	@ 0x60
 80116a6:	edd3 7a00 	vldr	s15, [r3]
 80116aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116ae:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80116b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80116b6:	3350      	adds	r3, #80	@ 0x50
 80116b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116bc:	ee07 3a90 	vmov	s15, r3
 80116c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80116c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80116c8:	33a0      	adds	r3, #160	@ 0xa0
 80116ca:	edd3 7a00 	vldr	s15, [r3]
 80116ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116d2:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80116d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80116da:	3370      	adds	r3, #112	@ 0x70
 80116dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116e0:	ee07 3a90 	vmov	s15, r3
 80116e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80116e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80116ec:	33e0      	adds	r3, #224	@ 0xe0
 80116ee:	edd3 7a00 	vldr	s15, [r3]
 80116f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116f6:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120

    z13 = tmp6 + tmp5;		/* phase 6 */
 80116fa:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 80116fe:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8011702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011706:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
    z10 = tmp6 - tmp5;
 801170a:	ed97 7a47 	vldr	s14, [r7, #284]	@ 0x11c
 801170e:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8011712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011716:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
    z11 = tmp4 + tmp7;
 801171a:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 801171e:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8011722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011726:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
    z12 = tmp4 - tmp7;
 801172a:	ed97 7a45 	vldr	s14, [r7, #276]	@ 0x114
 801172e:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8011732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011736:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124

    tmp7 = z11 + z13;		/* phase 5 */
 801173a:	ed97 7a4a 	vldr	s14, [r7, #296]	@ 0x128
 801173e:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8011742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011746:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 801174a:	ed97 7a4a 	vldr	s14, [r7, #296]	@ 0x128
 801174e:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8011752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011756:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80118d0 <jpeg_idct_float+0x4f0>
 801175a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801175e:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8011762:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8011766:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 801176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801176e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80118d4 <jpeg_idct_float+0x4f4>
 8011772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011776:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 801177a:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 801177e:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80118d8 <jpeg_idct_float+0x4f8>
 8011782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011786:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 801178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801178e:	edc7 7a54 	vstr	s15, [r7, #336]	@ 0x150
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8011792:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8011796:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80118dc <jpeg_idct_float+0x4fc>
 801179a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801179e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80117a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117a6:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 80117aa:	ed97 7a51 	vldr	s14, [r7, #324]	@ 0x144
 80117ae:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80117b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117b6:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
    tmp5 = tmp11 - tmp6;
 80117ba:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 80117be:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 80117c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117c6:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
    tmp4 = tmp10 - tmp5;
 80117ca:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 80117ce:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80117d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117d6:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 80117da:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 80117de:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80117e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80117ea:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 80117ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80117f2:	33e0      	adds	r3, #224	@ 0xe0
 80117f4:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 80117f8:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80117fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011800:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8011804:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011808:	3320      	adds	r3, #32
 801180a:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 801180e:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8011812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011816:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 801181a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801181e:	33c0      	adds	r3, #192	@ 0xc0
 8011820:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8011824:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8011828:	ee77 7a67 	vsub.f32	s15, s14, s15
 801182c:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8011830:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011834:	3340      	adds	r3, #64	@ 0x40
 8011836:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 801183a:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 801183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011842:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8011846:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801184a:	33a0      	adds	r3, #160	@ 0xa0
 801184c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8011850:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8011854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011858:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 801185c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011860:	3360      	adds	r3, #96	@ 0x60
 8011862:	ed97 7a4f 	vldr	s14, [r7, #316]	@ 0x13c
 8011866:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 801186a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801186e:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 8011872:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011876:	3380      	adds	r3, #128	@ 0x80
 8011878:	ed97 7a4f 	vldr	s14, [r7, #316]	@ 0x13c
 801187c:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8011880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011884:	edc3 7a00 	vstr	s15, [r3]

    inptr++;			/* advance pointers to next column */
 8011888:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801188c:	3302      	adds	r3, #2
 801188e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    quantptr++;
 8011892:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8011896:	3304      	adds	r3, #4
 8011898:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    wsptr++;
 801189c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80118a0:	3304      	adds	r3, #4
 80118a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80118a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80118aa:	3b01      	subs	r3, #1
 80118ac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80118b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f73f adca 	bgt.w	801144e <jpeg_idct_float+0x6e>
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 80118ba:	f107 0310 	add.w	r3, r7, #16
 80118be:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80118c2:	2300      	movs	r3, #0
 80118c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80118c8:	e1ae      	b.n	8011c28 <jpeg_idct_float+0x848>
 80118ca:	bf00      	nop
 80118cc:	43008000 	.word	0x43008000
 80118d0:	3fb504f3 	.word	0x3fb504f3
 80118d4:	3fec835e 	.word	0x3fec835e
 80118d8:	3f8a8bd4 	.word	0x3f8a8bd4
 80118dc:	40273d75 	.word	0x40273d75
    outptr = output_buf[ctr] + output_col;
 80118e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80118ea:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 80118ee:	6812      	ldr	r2, [r2, #0]
 80118f0:	4413      	add	r3, r2
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80118f8:	4413      	add	r3, r2
 80118fa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 80118fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011902:	edd3 7a00 	vldr	s15, [r3]
 8011906:	ed1f 7a0f 	vldr	s14, [pc, #-60]	@ 80118cc <jpeg_idct_float+0x4ec>
 801190a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801190e:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
    tmp10 = z5 + wsptr[4];
 8011912:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011916:	3310      	adds	r3, #16
 8011918:	edd3 7a00 	vldr	s15, [r3]
 801191c:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8011920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011924:	edc7 7a54 	vstr	s15, [r7, #336]	@ 0x150
    tmp11 = z5 - wsptr[4];
 8011928:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801192c:	3310      	adds	r3, #16
 801192e:	edd3 7a00 	vldr	s15, [r3]
 8011932:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8011936:	ee77 7a67 	vsub.f32	s15, s14, s15
 801193a:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

    tmp13 = wsptr[2] + wsptr[6];
 801193e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011942:	3308      	adds	r3, #8
 8011944:	ed93 7a00 	vldr	s14, [r3]
 8011948:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801194c:	3318      	adds	r3, #24
 801194e:	edd3 7a00 	vldr	s15, [r3]
 8011952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011956:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 801195a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801195e:	3308      	adds	r3, #8
 8011960:	ed93 7a00 	vldr	s14, [r3]
 8011964:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011968:	3318      	adds	r3, #24
 801196a:	edd3 7a00 	vldr	s15, [r3]
 801196e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011972:	ed1f 7a29 	vldr	s14, [pc, #-164]	@ 80118d0 <jpeg_idct_float+0x4f0>
 8011976:	ee27 7a87 	vmul.f32	s14, s15, s14
 801197a:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 801197e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011982:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

    tmp0 = tmp10 + tmp13;
 8011986:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 801198a:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 801198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011992:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
    tmp3 = tmp10 - tmp13;
 8011996:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 801199a:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 801199e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119a2:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
    tmp1 = tmp11 + tmp12;
 80119a6:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 80119aa:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 80119ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119b2:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
    tmp2 = tmp11 - tmp12;
 80119b6:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 80119ba:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 80119be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119c2:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
 80119c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80119ca:	3314      	adds	r3, #20
 80119cc:	ed93 7a00 	vldr	s14, [r3]
 80119d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80119d4:	330c      	adds	r3, #12
 80119d6:	edd3 7a00 	vldr	s15, [r3]
 80119da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119de:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
    z10 = wsptr[5] - wsptr[3];
 80119e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80119e6:	3314      	adds	r3, #20
 80119e8:	ed93 7a00 	vldr	s14, [r3]
 80119ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80119f0:	330c      	adds	r3, #12
 80119f2:	edd3 7a00 	vldr	s15, [r3]
 80119f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119fa:	edc7 7a4b 	vstr	s15, [r7, #300]	@ 0x12c
    z11 = wsptr[1] + wsptr[7];
 80119fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011a02:	3304      	adds	r3, #4
 8011a04:	ed93 7a00 	vldr	s14, [r3]
 8011a08:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011a0c:	331c      	adds	r3, #28
 8011a0e:	edd3 7a00 	vldr	s15, [r3]
 8011a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a16:	edc7 7a4a 	vstr	s15, [r7, #296]	@ 0x128
    z12 = wsptr[1] - wsptr[7];
 8011a1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011a1e:	3304      	adds	r3, #4
 8011a20:	ed93 7a00 	vldr	s14, [r3]
 8011a24:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011a28:	331c      	adds	r3, #28
 8011a2a:	edd3 7a00 	vldr	s15, [r3]
 8011a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a32:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124

    tmp7 = z11 + z13;
 8011a36:	ed97 7a4a 	vldr	s14, [r7, #296]	@ 0x128
 8011a3a:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8011a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a42:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 8011a46:	ed97 7a4a 	vldr	s14, [r7, #296]	@ 0x128
 8011a4a:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8011a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a52:	ed1f 7a61 	vldr	s14, [pc, #-388]	@ 80118d0 <jpeg_idct_float+0x4f0>
 8011a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a5a:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8011a5e:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8011a62:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8011a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a6a:	ed1f 7a66 	vldr	s14, [pc, #-408]	@ 80118d4 <jpeg_idct_float+0x4f4>
 8011a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a72:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8011a76:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8011a7a:	ed1f 7a69 	vldr	s14, [pc, #-420]	@ 80118d8 <jpeg_idct_float+0x4f8>
 8011a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a82:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8011a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a8a:	edc7 7a54 	vstr	s15, [r7, #336]	@ 0x150
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8011a8e:	edd7 7a4b 	vldr	s15, [r7, #300]	@ 0x12c
 8011a92:	ed1f 7a6e 	vldr	s14, [pc, #-440]	@ 80118dc <jpeg_idct_float+0x4fc>
 8011a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a9a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8011a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aa2:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

    tmp6 = tmp12 - tmp7;
 8011aa6:	ed97 7a51 	vldr	s14, [r7, #324]	@ 0x144
 8011aaa:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8011aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ab2:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c
    tmp5 = tmp11 - tmp6;
 8011ab6:	ed97 7a53 	vldr	s14, [r7, #332]	@ 0x14c
 8011aba:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8011abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ac2:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
    tmp4 = tmp10 - tmp5;
 8011ac6:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8011aca:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8011ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ad2:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114

    /* Final output stage: float->int conversion and range-limit */

    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8011ad6:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 8011ada:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8011ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ae6:	ee17 3a90 	vmov	r3, s15
 8011aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011aee:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011af2:	4413      	add	r3, r2
 8011af4:	781a      	ldrb	r2, [r3, #0]
 8011af6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011afa:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8011afc:	ed97 7a50 	vldr	s14, [r7, #320]	@ 0x140
 8011b00:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8011b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b0c:	ee17 3a90 	vmov	r3, s15
 8011b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b14:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011b18:	441a      	add	r2, r3
 8011b1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011b1e:	3307      	adds	r3, #7
 8011b20:	7812      	ldrb	r2, [r2, #0]
 8011b22:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8011b24:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8011b28:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8011b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b34:	ee17 3a90 	vmov	r3, s15
 8011b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b3c:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011b40:	441a      	add	r2, r3
 8011b42:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011b46:	3301      	adds	r3, #1
 8011b48:	7812      	ldrb	r2, [r2, #0]
 8011b4a:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8011b4c:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8011b50:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 8011b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b5c:	ee17 3a90 	vmov	r3, s15
 8011b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b64:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011b68:	441a      	add	r2, r3
 8011b6a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011b6e:	3306      	adds	r3, #6
 8011b70:	7812      	ldrb	r2, [r2, #0]
 8011b72:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 8011b74:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8011b78:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8011b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b84:	ee17 3a90 	vmov	r3, s15
 8011b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b8c:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011b90:	441a      	add	r2, r3
 8011b92:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011b96:	3302      	adds	r3, #2
 8011b98:	7812      	ldrb	r2, [r2, #0]
 8011b9a:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 8011b9c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8011ba0:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 8011ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bac:	ee17 3a90 	vmov	r3, s15
 8011bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011bb4:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011bb8:	441a      	add	r2, r3
 8011bba:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011bbe:	3305      	adds	r3, #5
 8011bc0:	7812      	ldrb	r2, [r2, #0]
 8011bc2:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 8011bc4:	ed97 7a4f 	vldr	s14, [r7, #316]	@ 0x13c
 8011bc8:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8011bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bd4:	ee17 3a90 	vmov	r3, s15
 8011bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011bdc:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011be0:	441a      	add	r2, r3
 8011be2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011be6:	3303      	adds	r3, #3
 8011be8:	7812      	ldrb	r2, [r2, #0]
 8011bea:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8011bec:	ed97 7a4f 	vldr	s14, [r7, #316]	@ 0x13c
 8011bf0:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8011bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bfc:	ee17 3a90 	vmov	r3, s15
 8011c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c04:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011c08:	441a      	add	r2, r3
 8011c0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8011c0e:	3304      	adds	r3, #4
 8011c10:	7812      	ldrb	r2, [r2, #0]
 8011c12:	701a      	strb	r2, [r3, #0]
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8011c14:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011c18:	3320      	adds	r3, #32
 8011c1a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8011c1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8011c22:	3301      	adds	r3, #1
 8011c24:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8011c28:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8011c2c:	2b07      	cmp	r3, #7
 8011c2e:	f77f ae57 	ble.w	80118e0 <jpeg_idct_float+0x500>
  }
}
 8011c32:	bf00      	nop
 8011c34:	bf00      	nop
 8011c36:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bc90      	pop	{r4, r7}
 8011c3e:	4770      	bx	lr

08011c40 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011c40:	b490      	push	{r4, r7}
 8011c42:	b0de      	sub	sp, #376	@ 0x178
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 8011c4a:	f5a4 74b6 	sub.w	r4, r4, #364	@ 0x16c
 8011c4e:	6020      	str	r0, [r4, #0]
 8011c50:	f507 70bc 	add.w	r0, r7, #376	@ 0x178
 8011c54:	f5a0 70b8 	sub.w	r0, r0, #368	@ 0x170
 8011c58:	6001      	str	r1, [r0, #0]
 8011c5a:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 8011c5e:	f5a1 71ba 	sub.w	r1, r1, #372	@ 0x174
 8011c62:	600a      	str	r2, [r1, #0]
 8011c64:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8011c68:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8011c6c:	6013      	str	r3, [r2, #0]
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  IFAST_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011c6e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8011c72:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011c7c:	3380      	adds	r3, #128	@ 0x80
 8011c7e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8011c82:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8011c86:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 8011c90:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8011c94:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c9c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  wsptr = workspace;
 8011ca0:	f107 0314 	add.w	r3, r7, #20
 8011ca4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8011ca8:	2308      	movs	r3, #8
 8011caa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8011cae:	e1ec      	b.n	801208a <jpeg_idct_ifast+0x44a>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011cb0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011cb4:	3310      	adds	r3, #16
 8011cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d174      	bne.n	8011da8 <jpeg_idct_ifast+0x168>
 8011cbe:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011cc2:	3320      	adds	r3, #32
 8011cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d16d      	bne.n	8011da8 <jpeg_idct_ifast+0x168>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011ccc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011cd0:	3330      	adds	r3, #48	@ 0x30
 8011cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d166      	bne.n	8011da8 <jpeg_idct_ifast+0x168>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011cda:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011cde:	3340      	adds	r3, #64	@ 0x40
 8011ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d15f      	bne.n	8011da8 <jpeg_idct_ifast+0x168>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011ce8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011cec:	3350      	adds	r3, #80	@ 0x50
 8011cee:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d158      	bne.n	8011da8 <jpeg_idct_ifast+0x168>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011cf6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011cfa:	3360      	adds	r3, #96	@ 0x60
 8011cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d151      	bne.n	8011da8 <jpeg_idct_ifast+0x168>
	inptr[DCTSIZE*7] == 0) {
 8011d04:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011d08:	3370      	adds	r3, #112	@ 0x70
 8011d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d14a      	bne.n	8011da8 <jpeg_idct_ifast+0x168>
      /* AC terms all zero */
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d12:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	fb02 f303 	mul.w	r3, r2, r3
 8011d26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

      wsptr[DCTSIZE*0] = dcval;
 8011d2a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d32:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 8011d34:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d38:	3320      	adds	r3, #32
 8011d3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d3e:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 8011d40:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d44:	3340      	adds	r3, #64	@ 0x40
 8011d46:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d4a:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 8011d4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d50:	3360      	adds	r3, #96	@ 0x60
 8011d52:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d56:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 8011d58:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d5c:	3380      	adds	r3, #128	@ 0x80
 8011d5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d62:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 8011d64:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d68:	33a0      	adds	r3, #160	@ 0xa0
 8011d6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d6e:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 8011d70:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d74:	33c0      	adds	r3, #192	@ 0xc0
 8011d76:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d7a:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 8011d7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011d80:	33e0      	adds	r3, #224	@ 0xe0
 8011d82:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8011d86:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 8011d88:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011d8c:	3302      	adds	r3, #2
 8011d8e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      quantptr++;
 8011d92:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011d96:	3304      	adds	r3, #4
 8011d98:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
      wsptr++;
 8011d9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011da0:	3304      	adds	r3, #4
 8011da2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
      continue;
 8011da6:	e16b      	b.n	8012080 <jpeg_idct_ifast+0x440>
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011da8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011db0:	461a      	mov	r2, r3
 8011db2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	fb02 f303 	mul.w	r3, r2, r3
 8011dbc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011dc0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011dc4:	3320      	adds	r3, #32
 8011dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011dca:	461a      	mov	r2, r3
 8011dcc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011dd0:	3340      	adds	r3, #64	@ 0x40
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	fb02 f303 	mul.w	r3, r2, r3
 8011dd8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ddc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011de0:	3340      	adds	r3, #64	@ 0x40
 8011de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011de6:	461a      	mov	r2, r3
 8011de8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011dec:	3380      	adds	r3, #128	@ 0x80
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	fb02 f303 	mul.w	r3, r2, r3
 8011df4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011df8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011dfc:	3360      	adds	r3, #96	@ 0x60
 8011dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e02:	461a      	mov	r2, r3
 8011e04:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011e08:	33c0      	adds	r3, #192	@ 0xc0
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	fb02 f303 	mul.w	r3, r2, r3
 8011e10:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8011e14:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011e18:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8011e1c:	4413      	add	r3, r2
 8011e1e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp11 = tmp0 - tmp2;
 8011e22:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011e26:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8011e30:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8011e34:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8011e38:	4413      	add	r3, r2
 8011e3a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8011e3e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8011e42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011e4c:	fb02 f303 	mul.w	r3, r2, r3
 8011e50:	121a      	asrs	r2, r3, #8
 8011e52:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8011e56:	1ad3      	subs	r3, r2, r3
 8011e58:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8011e5c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8011e60:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8011e64:	4413      	add	r3, r2
 8011e66:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp3 = tmp10 - tmp13;
 8011e6a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8011e6e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp1 = tmp11 + tmp12;
 8011e78:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8011e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8011e80:	4413      	add	r3, r2
 8011e82:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp2 = tmp11 - tmp12;
 8011e86:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8011e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8011e8e:	1ad3      	subs	r3, r2, r3
 8011e90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011e94:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011e98:	3310      	adds	r3, #16
 8011e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011ea4:	3320      	adds	r3, #32
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	fb02 f303 	mul.w	r3, r2, r3
 8011eac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011eb0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011eb4:	3330      	adds	r3, #48	@ 0x30
 8011eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011eba:	461a      	mov	r2, r3
 8011ebc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011ec0:	3360      	adds	r3, #96	@ 0x60
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	fb02 f303 	mul.w	r3, r2, r3
 8011ec8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011ecc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011ed0:	3350      	adds	r3, #80	@ 0x50
 8011ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011edc:	33a0      	adds	r3, #160	@ 0xa0
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	fb02 f303 	mul.w	r3, r2, r3
 8011ee4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011ee8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011eec:	3370      	adds	r3, #112	@ 0x70
 8011eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011ef8:	33e0      	adds	r3, #224	@ 0xe0
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	fb02 f303 	mul.w	r3, r2, r3
 8011f00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    z13 = tmp6 + tmp5;		/* phase 6 */
 8011f04:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8011f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011f0c:	4413      	add	r3, r2
 8011f0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    z10 = tmp6 - tmp5;
 8011f12:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8011f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z11 = tmp4 + tmp7;
 8011f20:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8011f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011f28:	4413      	add	r3, r2
 8011f2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    z12 = tmp4 - tmp7;
 8011f2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8011f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    tmp7 = z11 + z13;		/* phase 5 */
 8011f3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011f40:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8011f44:	4413      	add	r3, r2
 8011f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8011f4a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011f4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8011f52:	1ad3      	subs	r3, r2, r3
 8011f54:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011f58:	fb02 f303 	mul.w	r3, r2, r3
 8011f5c:	121b      	asrs	r3, r3, #8
 8011f5e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8011f62:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8011f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f240 12d9 	movw	r2, #473	@ 0x1d9
 8011f70:	fb02 f303 	mul.w	r3, r2, r3
 8011f74:	121b      	asrs	r3, r3, #8
 8011f76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8011f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011f7e:	f240 1215 	movw	r2, #277	@ 0x115
 8011f82:	fb02 f303 	mul.w	r3, r2, r3
 8011f86:	121a      	asrs	r2, r3, #8
 8011f88:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8011f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011f96:	f46f 7227 	mvn.w	r2, #668	@ 0x29c
 8011f9a:	fb02 f303 	mul.w	r3, r2, r3
 8011f9e:	121b      	asrs	r3, r3, #8
 8011fa0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8011faa:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8011fae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp5 = tmp11 - tmp6;
 8011fb8:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8011fbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp4 = tmp10 + tmp5;
 8011fc6:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8011fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011fce:	4413      	add	r3, r2
 8011fd0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8011fd4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011fdc:	441a      	add	r2, r3
 8011fde:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011fe2:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8011fe4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011fe8:	33e0      	adds	r3, #224	@ 0xe0
 8011fea:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8011fee:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8011ff2:	1a8a      	subs	r2, r1, r2
 8011ff4:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8011ff6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011ffa:	3320      	adds	r3, #32
 8011ffc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8012000:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8012004:	440a      	add	r2, r1
 8012006:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8012008:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801200c:	33c0      	adds	r3, #192	@ 0xc0
 801200e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8012012:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8012016:	1a8a      	subs	r2, r1, r2
 8012018:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 801201a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801201e:	3340      	adds	r3, #64	@ 0x40
 8012020:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8012024:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012028:	440a      	add	r2, r1
 801202a:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 801202c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012030:	33a0      	adds	r3, #160	@ 0xa0
 8012032:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8012036:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801203a:	1a8a      	subs	r2, r1, r2
 801203c:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 801203e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012042:	3380      	adds	r3, #128	@ 0x80
 8012044:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8012048:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801204c:	440a      	add	r2, r1
 801204e:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 8012050:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012054:	3360      	adds	r3, #96	@ 0x60
 8012056:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 801205a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801205e:	1a8a      	subs	r2, r1, r2
 8012060:	601a      	str	r2, [r3, #0]

    inptr++;			/* advance pointers to next column */
 8012062:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8012066:	3302      	adds	r3, #2
 8012068:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    quantptr++;
 801206c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8012070:	3304      	adds	r3, #4
 8012072:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    wsptr++;
 8012076:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801207a:	3304      	adds	r3, #4
 801207c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012080:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8012084:	3b01      	subs	r3, #1
 8012086:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801208a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801208e:	2b00      	cmp	r3, #0
 8012090:	f73f ae0e 	bgt.w	8011cb0 <jpeg_idct_ifast+0x70>
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8012094:	f107 0314 	add.w	r3, r7, #20
 8012098:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801209c:	2300      	movs	r3, #0
 801209e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80120a2:	e1c8      	b.n	8012436 <jpeg_idct_ifast+0x7f6>
    outptr = output_buf[ctr] + output_col;
 80120a4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 80120ae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80120b2:	6812      	ldr	r2, [r2, #0]
 80120b4:	4413      	add	r3, r2
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80120bc:	4413      	add	r3, r2
 80120be:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80120c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80120c6:	3304      	adds	r3, #4
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d164      	bne.n	8012198 <jpeg_idct_ifast+0x558>
 80120ce:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80120d2:	3308      	adds	r3, #8
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d15e      	bne.n	8012198 <jpeg_idct_ifast+0x558>
 80120da:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80120de:	330c      	adds	r3, #12
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d158      	bne.n	8012198 <jpeg_idct_ifast+0x558>
 80120e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80120ea:	3310      	adds	r3, #16
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d152      	bne.n	8012198 <jpeg_idct_ifast+0x558>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80120f2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80120f6:	3314      	adds	r3, #20
 80120f8:	681b      	ldr	r3, [r3, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d14c      	bne.n	8012198 <jpeg_idct_ifast+0x558>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80120fe:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012102:	3318      	adds	r3, #24
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d146      	bne.n	8012198 <jpeg_idct_ifast+0x558>
 801210a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801210e:	331c      	adds	r3, #28
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d140      	bne.n	8012198 <jpeg_idct_ifast+0x558>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8012116:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	115b      	asrs	r3, r3, #5
				  & RANGE_MASK];
 801211e:	f3c3 0309 	ubfx	r3, r3, #0, #10
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8012122:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8012126:	4413      	add	r3, r2
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
      
      outptr[0] = dcval;
 801212e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8012132:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8012136:	701a      	strb	r2, [r3, #0]
      outptr[1] = dcval;
 8012138:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801213c:	3301      	adds	r3, #1
 801213e:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8012142:	701a      	strb	r2, [r3, #0]
      outptr[2] = dcval;
 8012144:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8012148:	3302      	adds	r3, #2
 801214a:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 801214e:	701a      	strb	r2, [r3, #0]
      outptr[3] = dcval;
 8012150:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8012154:	3303      	adds	r3, #3
 8012156:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 801215a:	701a      	strb	r2, [r3, #0]
      outptr[4] = dcval;
 801215c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8012160:	3304      	adds	r3, #4
 8012162:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8012166:	701a      	strb	r2, [r3, #0]
      outptr[5] = dcval;
 8012168:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801216c:	3305      	adds	r3, #5
 801216e:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 8012172:	701a      	strb	r2, [r3, #0]
      outptr[6] = dcval;
 8012174:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8012178:	3306      	adds	r3, #6
 801217a:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 801217e:	701a      	strb	r2, [r3, #0]
      outptr[7] = dcval;
 8012180:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8012184:	3307      	adds	r3, #7
 8012186:	f897 215f 	ldrb.w	r2, [r7, #351]	@ 0x15f
 801218a:	701a      	strb	r2, [r3, #0]

      wsptr += DCTSIZE;		/* advance pointer to next row */
 801218c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012190:	3320      	adds	r3, #32
 8012192:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
      continue;
 8012196:	e149      	b.n	801242c <jpeg_idct_ifast+0x7ec>
    }
#endif
    
    /* Even part */

    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 8012198:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80121a2:	3310      	adds	r3, #16
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	4413      	add	r3, r2
 80121a8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 80121ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80121b0:	681a      	ldr	r2, [r3, #0]
 80121b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80121b6:	3310      	adds	r3, #16
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 80121c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80121c4:	3308      	adds	r3, #8
 80121c6:	681a      	ldr	r2, [r3, #0]
 80121c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80121cc:	3318      	adds	r3, #24
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	4413      	add	r3, r2
 80121d2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80121d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80121da:	3308      	adds	r3, #8
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80121e2:	3318      	adds	r3, #24
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	1ad3      	subs	r3, r2, r3
 80121e8:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80121ec:	fb02 f303 	mul.w	r3, r2, r3
 80121f0:	121a      	asrs	r2, r3, #8
 80121f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80121f6:	1ad3      	subs	r3, r2, r3
 80121f8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	    - tmp13;

    tmp0 = tmp10 + tmp13;
 80121fc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8012200:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8012204:	4413      	add	r3, r2
 8012206:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp3 = tmp10 - tmp13;
 801220a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801220e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8012212:	1ad3      	subs	r3, r2, r3
 8012214:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp1 = tmp11 + tmp12;
 8012218:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801221c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8012220:	4413      	add	r3, r2
 8012222:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp2 = tmp11 - tmp12;
 8012226:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801222a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801222e:	1ad3      	subs	r3, r2, r3
 8012230:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    /* Odd part */

    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8012234:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012238:	3314      	adds	r3, #20
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012240:	330c      	adds	r3, #12
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	4413      	add	r3, r2
 8012246:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 801224a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801224e:	3314      	adds	r3, #20
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012256:	330c      	adds	r3, #12
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	1ad3      	subs	r3, r2, r3
 801225c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 8012260:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012264:	3304      	adds	r3, #4
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801226c:	331c      	adds	r3, #28
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4413      	add	r3, r2
 8012272:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 8012276:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801227a:	3304      	adds	r3, #4
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012282:	331c      	adds	r3, #28
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    tmp7 = z11 + z13;		/* phase 5 */
 801228c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8012290:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8012294:	4413      	add	r3, r2
 8012296:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801229a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801229e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80122a8:	fb02 f303 	mul.w	r3, r2, r3
 80122ac:	121b      	asrs	r3, r3, #8
 80122ae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80122b2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80122b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80122ba:	4413      	add	r3, r2
 80122bc:	f240 12d9 	movw	r2, #473	@ 0x1d9
 80122c0:	fb02 f303 	mul.w	r3, r2, r3
 80122c4:	121b      	asrs	r3, r3, #8
 80122c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80122ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80122ce:	f240 1215 	movw	r2, #277	@ 0x115
 80122d2:	fb02 f303 	mul.w	r3, r2, r3
 80122d6:	121a      	asrs	r2, r3, #8
 80122d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80122dc:	1ad3      	subs	r3, r2, r3
 80122de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80122e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80122e6:	f46f 7227 	mvn.w	r2, #668	@ 0x29c
 80122ea:	fb02 f303 	mul.w	r3, r2, r3
 80122ee:	121b      	asrs	r3, r3, #8
 80122f0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80122f4:	4413      	add	r3, r2
 80122f6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 80122fa:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80122fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012302:	1ad3      	subs	r3, r2, r3
 8012304:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp5 = tmp11 - tmp6;
 8012308:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801230c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8012310:	1ad3      	subs	r3, r2, r3
 8012312:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp4 = tmp10 + tmp5;
 8012316:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801231a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801231e:	4413      	add	r3, r2
 8012320:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8012324:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8012328:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801232c:	4413      	add	r3, r2
 801232e:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 8012330:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8012334:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8012338:	4413      	add	r3, r2
 801233a:	781a      	ldrb	r2, [r3, #0]
 801233c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8012340:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8012342:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8012346:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801234a:	1ad3      	subs	r3, r2, r3
 801234c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 801234e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8012352:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8012356:	441a      	add	r2, r3
 8012358:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801235c:	3307      	adds	r3, #7
 801235e:	7812      	ldrb	r2, [r2, #0]
 8012360:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8012362:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012366:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801236a:	4413      	add	r3, r2
 801236c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 801236e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8012372:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8012376:	441a      	add	r2, r3
 8012378:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801237c:	3301      	adds	r3, #1
 801237e:	7812      	ldrb	r2, [r2, #0]
 8012380:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8012382:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012386:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 801238e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8012392:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8012396:	441a      	add	r2, r3
 8012398:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801239c:	3306      	adds	r3, #6
 801239e:	7812      	ldrb	r2, [r2, #0]
 80123a0:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80123a2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80123a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80123aa:	4413      	add	r3, r2
 80123ac:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 80123ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80123b2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80123b6:	441a      	add	r2, r3
 80123b8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80123bc:	3302      	adds	r3, #2
 80123be:	7812      	ldrb	r2, [r2, #0]
 80123c0:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80123c2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80123c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 80123ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80123d2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80123d6:	441a      	add	r2, r3
 80123d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80123dc:	3305      	adds	r3, #5
 80123de:	7812      	ldrb	r2, [r2, #0]
 80123e0:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 80123e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80123e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80123ea:	4413      	add	r3, r2
 80123ec:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 80123ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 80123f2:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80123f6:	441a      	add	r2, r3
 80123f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80123fc:	3304      	adds	r3, #4
 80123fe:	7812      	ldrb	r2, [r2, #0]
 8012400:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8012402:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8012406:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 801240e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8012412:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8012416:	441a      	add	r2, r3
 8012418:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801241c:	3303      	adds	r3, #3
 801241e:	7812      	ldrb	r2, [r2, #0]
 8012420:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8012422:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8012426:	3320      	adds	r3, #32
 8012428:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 801242c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8012430:	3301      	adds	r3, #1
 8012432:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8012436:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801243a:	2b07      	cmp	r3, #7
 801243c:	f77f ae32 	ble.w	80120a4 <jpeg_idct_ifast+0x464>
  }
}
 8012440:	bf00      	nop
 8012442:	bf00      	nop
 8012444:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8012448:	46bd      	mov	sp, r7
 801244a:	bc90      	pop	{r4, r7}
 801244c:	4770      	bx	lr
	...

08012450 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012450:	b490      	push	{r4, r7}
 8012452:	b0d8      	sub	sp, #352	@ 0x160
 8012454:	af00      	add	r7, sp, #0
 8012456:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 801245a:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 801245e:	6020      	str	r0, [r4, #0]
 8012460:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8012464:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 8012468:	6001      	str	r1, [r0, #0]
 801246a:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 801246e:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8012472:	600a      	str	r2, [r1, #0]
 8012474:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8012478:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 801247c:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801247e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8012482:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801248c:	3380      	adds	r3, #128	@ 0x80
 801248e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 8012492:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8012496:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80124a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80124a4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124ac:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  wsptr = workspace;
 80124b0:	f107 0314 	add.w	r3, r7, #20
 80124b4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80124b8:	2308      	movs	r3, #8
 80124ba:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80124be:	e238      	b.n	8012932 <jpeg_idct_islow+0x4e2>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80124c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80124c4:	3310      	adds	r3, #16
 80124c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d175      	bne.n	80125ba <jpeg_idct_islow+0x16a>
 80124ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80124d2:	3320      	adds	r3, #32
 80124d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d16e      	bne.n	80125ba <jpeg_idct_islow+0x16a>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80124dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80124e0:	3330      	adds	r3, #48	@ 0x30
 80124e2:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d167      	bne.n	80125ba <jpeg_idct_islow+0x16a>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80124ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80124ee:	3340      	adds	r3, #64	@ 0x40
 80124f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d160      	bne.n	80125ba <jpeg_idct_islow+0x16a>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80124f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80124fc:	3350      	adds	r3, #80	@ 0x50
 80124fe:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8012502:	2b00      	cmp	r3, #0
 8012504:	d159      	bne.n	80125ba <jpeg_idct_islow+0x16a>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012506:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801250a:	3360      	adds	r3, #96	@ 0x60
 801250c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d152      	bne.n	80125ba <jpeg_idct_islow+0x16a>
	inptr[DCTSIZE*7] == 0) {
 8012514:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8012518:	3370      	adds	r3, #112	@ 0x70
 801251a:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801251e:	2b00      	cmp	r3, #0
 8012520:	d14b      	bne.n	80125ba <jpeg_idct_islow+0x16a>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012522:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8012526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801252a:	461a      	mov	r2, r3
 801252c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	fb02 f303 	mul.w	r3, r2, r3
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

      wsptr[DCTSIZE*0] = dcval;
 801253c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012540:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012544:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 8012546:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801254a:	3320      	adds	r3, #32
 801254c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012550:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 8012552:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012556:	3340      	adds	r3, #64	@ 0x40
 8012558:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801255c:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 801255e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012562:	3360      	adds	r3, #96	@ 0x60
 8012564:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012568:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 801256a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801256e:	3380      	adds	r3, #128	@ 0x80
 8012570:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012574:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 8012576:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801257a:	33a0      	adds	r3, #160	@ 0xa0
 801257c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012580:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 8012582:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012586:	33c0      	adds	r3, #192	@ 0xc0
 8012588:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801258c:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 801258e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012592:	33e0      	adds	r3, #224	@ 0xe0
 8012594:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012598:	601a      	str	r2, [r3, #0]

      inptr++;			/* advance pointers to next column */
 801259a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801259e:	3302      	adds	r3, #2
 80125a0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
      quantptr++;
 80125a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80125a8:	3304      	adds	r3, #4
 80125aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
      wsptr++;
 80125ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80125b2:	3304      	adds	r3, #4
 80125b4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
      continue;
 80125b8:	e1b6      	b.n	8012928 <jpeg_idct_islow+0x4d8>
    }

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80125ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80125be:	3320      	adds	r3, #32
 80125c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125c4:	461a      	mov	r2, r3
 80125c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80125ca:	3340      	adds	r3, #64	@ 0x40
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	fb02 f303 	mul.w	r3, r2, r3
 80125d2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80125d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80125da:	3360      	adds	r3, #96	@ 0x60
 80125dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125e0:	461a      	mov	r2, r3
 80125e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80125e6:	33c0      	adds	r3, #192	@ 0xc0
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	fb02 f303 	mul.w	r3, r2, r3
 80125ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80125f2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80125f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80125fa:	4413      	add	r3, r2
 80125fc:	f241 1251 	movw	r2, #4433	@ 0x1151
 8012600:	fb02 f303 	mul.w	r3, r2, r3
 8012604:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012608:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801260c:	f641 027e 	movw	r2, #6270	@ 0x187e
 8012610:	fb02 f303 	mul.w	r3, r2, r3
 8012614:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012618:	4413      	add	r3, r2
 801261a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801261e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012622:	4aca      	ldr	r2, [pc, #808]	@ (801294c <jpeg_idct_islow+0x4fc>)
 8012624:	fb02 f303 	mul.w	r3, r2, r3
 8012628:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801262c:	4413      	add	r3, r2
 801262e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012632:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8012636:	f9b3 3000 	ldrsh.w	r3, [r3]
 801263a:	461a      	mov	r2, r3
 801263c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	fb02 f303 	mul.w	r3, r2, r3
 8012646:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801264a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801264e:	3340      	adds	r3, #64	@ 0x40
 8012650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012654:	461a      	mov	r2, r3
 8012656:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801265a:	3380      	adds	r3, #128	@ 0x80
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	fb02 f303 	mul.w	r3, r2, r3
 8012662:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    z2 <<= CONST_BITS;
 8012666:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801266a:	035b      	lsls	r3, r3, #13
 801266c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 <<= CONST_BITS;
 8012670:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012674:	035b      	lsls	r3, r3, #13
 8012676:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 801267a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801267e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012682:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    tmp0 = z2 + z3;
 8012686:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801268a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801268e:	4413      	add	r3, r2
 8012690:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp1 = z2 - z3;
 8012694:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012698:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801269c:	1ad3      	subs	r3, r2, r3
 801269e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    tmp10 = tmp0 + tmp2;
 80126a2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80126a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80126aa:	4413      	add	r3, r2
 80126ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp13 = tmp0 - tmp2;
 80126b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80126b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp11 = tmp1 + tmp3;
 80126be:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80126c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80126c6:	4413      	add	r3, r2
 80126c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp12 = tmp1 - tmp3;
 80126cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80126d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80126d4:	1ad3      	subs	r3, r2, r3
 80126d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80126da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80126de:	3370      	adds	r3, #112	@ 0x70
 80126e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126e4:	461a      	mov	r2, r3
 80126e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80126ea:	33e0      	adds	r3, #224	@ 0xe0
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	fb02 f303 	mul.w	r3, r2, r3
 80126f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80126f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80126fa:	3350      	adds	r3, #80	@ 0x50
 80126fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012700:	461a      	mov	r2, r3
 8012702:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8012706:	33a0      	adds	r3, #160	@ 0xa0
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	fb02 f303 	mul.w	r3, r2, r3
 801270e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012712:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8012716:	3330      	adds	r3, #48	@ 0x30
 8012718:	f9b3 3000 	ldrsh.w	r3, [r3]
 801271c:	461a      	mov	r2, r3
 801271e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8012722:	3360      	adds	r3, #96	@ 0x60
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	fb02 f303 	mul.w	r3, r2, r3
 801272a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801272e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8012732:	3310      	adds	r3, #16
 8012734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012738:	461a      	mov	r2, r3
 801273a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801273e:	3320      	adds	r3, #32
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	fb02 f303 	mul.w	r3, r2, r3
 8012746:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    
    z2 = tmp0 + tmp2;
 801274a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 801274e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012752:	4413      	add	r3, r2
 8012754:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = tmp1 + tmp3;
 8012758:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801275c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012760:	4413      	add	r3, r2
 8012762:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012766:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801276a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801276e:	4413      	add	r3, r2
 8012770:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 8012774:	fb02 f303 	mul.w	r3, r2, r3
 8012778:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801277c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8012780:	4a73      	ldr	r2, [pc, #460]	@ (8012950 <jpeg_idct_islow+0x500>)
 8012782:	fb02 f303 	mul.w	r3, r2, r3
 8012786:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801278a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801278e:	4a71      	ldr	r2, [pc, #452]	@ (8012954 <jpeg_idct_islow+0x504>)
 8012790:	fb02 f303 	mul.w	r3, r2, r3
 8012794:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    z2 += z1;
 8012798:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801279c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80127a0:	4413      	add	r3, r2
 80127a2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 += z1;
 80127a6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80127aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80127ae:	4413      	add	r3, r2
 80127b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80127b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80127b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80127bc:	4413      	add	r3, r2
 80127be:	4a66      	ldr	r2, [pc, #408]	@ (8012958 <jpeg_idct_islow+0x508>)
 80127c0:	fb02 f303 	mul.w	r3, r2, r3
 80127c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 80127c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80127cc:	f640 128e 	movw	r2, #2446	@ 0x98e
 80127d0:	fb02 f303 	mul.w	r3, r2, r3
 80127d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 80127d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80127dc:	f243 020b 	movw	r2, #12299	@ 0x300b
 80127e0:	fb02 f303 	mul.w	r3, r2, r3
 80127e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp0 += z1 + z2;
 80127e8:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80127ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80127f0:	4413      	add	r3, r2
 80127f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80127f6:	4413      	add	r3, r2
 80127f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp3 += z1 + z3;
 80127fc:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012800:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012804:	4413      	add	r3, r2
 8012806:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801280a:	4413      	add	r3, r2
 801280c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012810:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012814:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012818:	4413      	add	r3, r2
 801281a:	4a50      	ldr	r2, [pc, #320]	@ (801295c <jpeg_idct_islow+0x50c>)
 801281c:	fb02 f303 	mul.w	r3, r2, r3
 8012820:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8012824:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012828:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 801282c:	fb02 f303 	mul.w	r3, r2, r3
 8012830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8012834:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012838:	f246 2254 	movw	r2, #25172	@ 0x6254
 801283c:	fb02 f303 	mul.w	r3, r2, r3
 8012840:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp1 += z1 + z3;
 8012844:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012848:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801284c:	4413      	add	r3, r2
 801284e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012852:	4413      	add	r3, r2
 8012854:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp2 += z1 + z2;
 8012858:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801285c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8012860:	4413      	add	r3, r2
 8012862:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8012866:	4413      	add	r3, r2
 8012868:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801286c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8012870:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012874:	4413      	add	r3, r2
 8012876:	12da      	asrs	r2, r3, #11
 8012878:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801287c:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801287e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8012882:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012886:	1ad2      	subs	r2, r2, r3
 8012888:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801288c:	33e0      	adds	r3, #224	@ 0xe0
 801288e:	12d2      	asrs	r2, r2, #11
 8012890:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012892:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012896:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801289a:	441a      	add	r2, r3
 801289c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80128a0:	3320      	adds	r3, #32
 80128a2:	12d2      	asrs	r2, r2, #11
 80128a4:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80128a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80128aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80128ae:	1ad2      	subs	r2, r2, r3
 80128b0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80128b4:	33c0      	adds	r3, #192	@ 0xc0
 80128b6:	12d2      	asrs	r2, r2, #11
 80128b8:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80128ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80128be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128c2:	441a      	add	r2, r3
 80128c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80128c8:	3340      	adds	r3, #64	@ 0x40
 80128ca:	12d2      	asrs	r2, r2, #11
 80128cc:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80128ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80128d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128d6:	1ad2      	subs	r2, r2, r3
 80128d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80128dc:	33a0      	adds	r3, #160	@ 0xa0
 80128de:	12d2      	asrs	r2, r2, #11
 80128e0:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80128e2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80128e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80128ea:	441a      	add	r2, r3
 80128ec:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80128f0:	3360      	adds	r3, #96	@ 0x60
 80128f2:	12d2      	asrs	r2, r2, #11
 80128f4:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80128f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80128fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80128fe:	1ad2      	subs	r2, r2, r3
 8012900:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012904:	3380      	adds	r3, #128	@ 0x80
 8012906:	12d2      	asrs	r2, r2, #11
 8012908:	601a      	str	r2, [r3, #0]
    
    inptr++;			/* advance pointers to next column */
 801290a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801290e:	3302      	adds	r3, #2
 8012910:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    quantptr++;
 8012914:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8012918:	3304      	adds	r3, #4
 801291a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    wsptr++;
 801291e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012922:	3304      	adds	r3, #4
 8012924:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012928:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801292c:	3b01      	subs	r3, #1
 801292e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8012932:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8012936:	2b00      	cmp	r3, #0
 8012938:	f73f adc2 	bgt.w	80124c0 <jpeg_idct_islow+0x70>

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801293c:	f107 0314 	add.w	r3, r7, #20
 8012940:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8012944:	2300      	movs	r3, #0
 8012946:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801294a:	e21a      	b.n	8012d82 <jpeg_idct_islow+0x932>
 801294c:	ffffc4df 	.word	0xffffc4df
 8012950:	ffffc13b 	.word	0xffffc13b
 8012954:	fffff384 	.word	0xfffff384
 8012958:	ffffe333 	.word	0xffffe333
 801295c:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 8012960:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 801296a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 801296e:	6812      	ldr	r2, [r2, #0]
 8012970:	4413      	add	r3, r2
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8012978:	4413      	add	r3, r2
 801297a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801297e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012982:	3304      	adds	r3, #4
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d165      	bne.n	8012a56 <jpeg_idct_islow+0x606>
 801298a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801298e:	3308      	adds	r3, #8
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d15f      	bne.n	8012a56 <jpeg_idct_islow+0x606>
 8012996:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801299a:	330c      	adds	r3, #12
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d159      	bne.n	8012a56 <jpeg_idct_islow+0x606>
 80129a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80129a6:	3310      	adds	r3, #16
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d153      	bne.n	8012a56 <jpeg_idct_islow+0x606>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80129ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80129b2:	3314      	adds	r3, #20
 80129b4:	681b      	ldr	r3, [r3, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d14d      	bne.n	8012a56 <jpeg_idct_islow+0x606>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80129ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80129be:	3318      	adds	r3, #24
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d147      	bne.n	8012a56 <jpeg_idct_islow+0x606>
 80129c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80129ca:	331c      	adds	r3, #28
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d141      	bne.n	8012a56 <jpeg_idct_islow+0x606>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80129d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	3310      	adds	r3, #16
 80129da:	115b      	asrs	r3, r3, #5
				  & RANGE_MASK];
 80129dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 80129e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80129e4:	4413      	add	r3, r2
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

      outptr[0] = dcval;
 80129ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80129f0:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 80129f4:	701a      	strb	r2, [r3, #0]
      outptr[1] = dcval;
 80129f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80129fa:	3301      	adds	r3, #1
 80129fc:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 8012a00:	701a      	strb	r2, [r3, #0]
      outptr[2] = dcval;
 8012a02:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012a06:	3302      	adds	r3, #2
 8012a08:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 8012a0c:	701a      	strb	r2, [r3, #0]
      outptr[3] = dcval;
 8012a0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012a12:	3303      	adds	r3, #3
 8012a14:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 8012a18:	701a      	strb	r2, [r3, #0]
      outptr[4] = dcval;
 8012a1a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012a1e:	3304      	adds	r3, #4
 8012a20:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 8012a24:	701a      	strb	r2, [r3, #0]
      outptr[5] = dcval;
 8012a26:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012a2a:	3305      	adds	r3, #5
 8012a2c:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 8012a30:	701a      	strb	r2, [r3, #0]
      outptr[6] = dcval;
 8012a32:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012a36:	3306      	adds	r3, #6
 8012a38:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 8012a3c:	701a      	strb	r2, [r3, #0]
      outptr[7] = dcval;
 8012a3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012a42:	3307      	adds	r3, #7
 8012a44:	f897 2147 	ldrb.w	r2, [r7, #327]	@ 0x147
 8012a48:	701a      	strb	r2, [r3, #0]

      wsptr += DCTSIZE;		/* advance pointer to next row */
 8012a4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012a4e:	3320      	adds	r3, #32
 8012a50:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
      continue;
 8012a54:	e190      	b.n	8012d78 <jpeg_idct_islow+0x928>
#endif

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
 8012a56:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012a5a:	3308      	adds	r3, #8
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = (INT32) wsptr[6];
 8012a62:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012a66:	3318      	adds	r3, #24
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012a6e:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012a72:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012a76:	4413      	add	r3, r2
 8012a78:	f241 1251 	movw	r2, #4433	@ 0x1151
 8012a7c:	fb02 f303 	mul.w	r3, r2, r3
 8012a80:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012a84:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8012a88:	f641 027e 	movw	r2, #6270	@ 0x187e
 8012a8c:	fb02 f303 	mul.w	r3, r2, r3
 8012a90:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012a94:	4413      	add	r3, r2
 8012a96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012a9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012a9e:	4abf      	ldr	r2, [pc, #764]	@ (8012d9c <jpeg_idct_islow+0x94c>)
 8012aa0:	fb02 f303 	mul.w	r3, r2, r3
 8012aa4:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012aa8:	4413      	add	r3, r2
 8012aaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012aae:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3310      	adds	r3, #16
 8012ab6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = (INT32) wsptr[4];
 8012aba:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012abe:	3310      	adds	r3, #16
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    tmp0 = (z2 + z3) << CONST_BITS;
 8012ac6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012aca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012ace:	4413      	add	r3, r2
 8012ad0:	035b      	lsls	r3, r3, #13
 8012ad2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp1 = (z2 - z3) << CONST_BITS;
 8012ad6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012ada:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	035b      	lsls	r3, r3, #13
 8012ae2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    
    tmp10 = tmp0 + tmp2;
 8012ae6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8012aea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012aee:	4413      	add	r3, r2
 8012af0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp13 = tmp0 - tmp2;
 8012af4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8012af8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp11 = tmp1 + tmp3;
 8012b02:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012b06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp12 = tmp1 - tmp3;
 8012b10:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012b14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012b18:	1ad3      	subs	r3, r2, r3
 8012b1a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = (INT32) wsptr[7];
 8012b1e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012b22:	331c      	adds	r3, #28
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp1 = (INT32) wsptr[5];
 8012b2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012b2e:	3314      	adds	r3, #20
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp2 = (INT32) wsptr[3];
 8012b36:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012b3a:	330c      	adds	r3, #12
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp3 = (INT32) wsptr[1];
 8012b42:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012b46:	3304      	adds	r3, #4
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    z2 = tmp0 + tmp2;
 8012b4e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8012b52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012b56:	4413      	add	r3, r2
 8012b58:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = tmp1 + tmp3;
 8012b5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012b60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012b64:	4413      	add	r3, r2
 8012b66:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012b6a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012b6e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012b72:	4413      	add	r3, r2
 8012b74:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 8012b78:	fb02 f303 	mul.w	r3, r2, r3
 8012b7c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8012b80:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8012b84:	4a86      	ldr	r2, [pc, #536]	@ (8012da0 <jpeg_idct_islow+0x950>)
 8012b86:	fb02 f303 	mul.w	r3, r2, r3
 8012b8a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8012b8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012b92:	4a84      	ldr	r2, [pc, #528]	@ (8012da4 <jpeg_idct_islow+0x954>)
 8012b94:	fb02 f303 	mul.w	r3, r2, r3
 8012b98:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    z2 += z1;
 8012b9c:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8012ba0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8012ba4:	4413      	add	r3, r2
 8012ba6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z3 += z1;
 8012baa:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8012bae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8012bb2:	4413      	add	r3, r2
 8012bb4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8012bb8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8012bbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012bc0:	4413      	add	r3, r2
 8012bc2:	4a79      	ldr	r2, [pc, #484]	@ (8012da8 <jpeg_idct_islow+0x958>)
 8012bc4:	fb02 f303 	mul.w	r3, r2, r3
 8012bc8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8012bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012bd0:	f640 128e 	movw	r2, #2446	@ 0x98e
 8012bd4:	fb02 f303 	mul.w	r3, r2, r3
 8012bd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8012bdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012be0:	f243 020b 	movw	r2, #12299	@ 0x300b
 8012be4:	fb02 f303 	mul.w	r3, r2, r3
 8012be8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp0 += z1 + z2;
 8012bec:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012bf0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8012bf4:	4413      	add	r3, r2
 8012bf6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8012bfa:	4413      	add	r3, r2
 8012bfc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp3 += z1 + z3;
 8012c00:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012c04:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012c08:	4413      	add	r3, r2
 8012c0a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8012c0e:	4413      	add	r3, r2
 8012c10:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012c14:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012c18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012c1c:	4413      	add	r3, r2
 8012c1e:	4a63      	ldr	r2, [pc, #396]	@ (8012dac <jpeg_idct_islow+0x95c>)
 8012c20:	fb02 f303 	mul.w	r3, r2, r3
 8012c24:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8012c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c2c:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 8012c30:	fb02 f303 	mul.w	r3, r2, r3
 8012c34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8012c38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012c3c:	f246 2254 	movw	r2, #25172	@ 0x6254
 8012c40:	fb02 f303 	mul.w	r3, r2, r3
 8012c44:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp1 += z1 + z3;
 8012c48:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012c4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012c50:	4413      	add	r3, r2
 8012c52:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012c56:	4413      	add	r3, r2
 8012c58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp2 += z1 + z2;
 8012c5c:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8012c60:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8012c64:	4413      	add	r3, r2
 8012c66:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8012c6a:	4413      	add	r3, r2
 8012c6c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012c70:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8012c74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012c78:	4413      	add	r3, r2
 8012c7a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8012c80:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012c84:	4413      	add	r3, r2
 8012c86:	781a      	ldrb	r2, [r3, #0]
 8012c88:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012c8c:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012c8e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8012c92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012c96:	1ad3      	subs	r3, r2, r3
 8012c98:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8012c9e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012ca2:	441a      	add	r2, r3
 8012ca4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012ca8:	3307      	adds	r3, #7
 8012caa:	7812      	ldrb	r2, [r2, #0]
 8012cac:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012cae:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012cb6:	4413      	add	r3, r2
 8012cb8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8012cbe:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012cc2:	441a      	add	r2, r3
 8012cc4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012cc8:	3301      	adds	r3, #1
 8012cca:	7812      	ldrb	r2, [r2, #0]
 8012ccc:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012cce:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8012cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012cd6:	1ad3      	subs	r3, r2, r3
 8012cd8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8012cde:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012ce2:	441a      	add	r2, r3
 8012ce4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012ce8:	3306      	adds	r3, #6
 8012cea:	7812      	ldrb	r2, [r2, #0]
 8012cec:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012cee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8012cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cf6:	4413      	add	r3, r2
 8012cf8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8012cfe:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012d02:	441a      	add	r2, r3
 8012d04:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012d08:	3302      	adds	r3, #2
 8012d0a:	7812      	ldrb	r2, [r2, #0]
 8012d0c:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012d0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8012d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d16:	1ad3      	subs	r3, r2, r3
 8012d18:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8012d1e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012d22:	441a      	add	r2, r3
 8012d24:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012d28:	3305      	adds	r3, #5
 8012d2a:	7812      	ldrb	r2, [r2, #0]
 8012d2c:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8012d2e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8012d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012d36:	4413      	add	r3, r2
 8012d38:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8012d3e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012d42:	441a      	add	r2, r3
 8012d44:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012d48:	3303      	adds	r3, #3
 8012d4a:	7812      	ldrb	r2, [r2, #0]
 8012d4c:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8012d4e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8012d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012d56:	1ad3      	subs	r3, r2, r3
 8012d58:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8012d5e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8012d62:	441a      	add	r2, r3
 8012d64:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8012d68:	3304      	adds	r3, #4
 8012d6a:	7812      	ldrb	r2, [r2, #0]
 8012d6c:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8012d6e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012d72:	3320      	adds	r3, #32
 8012d74:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8012d78:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8012d82:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8012d86:	2b07      	cmp	r3, #7
 8012d88:	f77f adea 	ble.w	8012960 <jpeg_idct_islow+0x510>
  }
}
 8012d8c:	bf00      	nop
 8012d8e:	bf00      	nop
 8012d90:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bc90      	pop	{r4, r7}
 8012d98:	4770      	bx	lr
 8012d9a:	bf00      	nop
 8012d9c:	ffffc4df 	.word	0xffffc4df
 8012da0:	ffffc13b 	.word	0xffffc13b
 8012da4:	fffff384 	.word	0xfffff384
 8012da8:	ffffe333 	.word	0xffffe333
 8012dac:	ffffadfd 	.word	0xffffadfd

08012db0 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012db0:	b490      	push	{r4, r7}
 8012db2:	b0c6      	sub	sp, #280	@ 0x118
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8012dba:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8012dbe:	6020      	str	r0, [r4, #0]
 8012dc0:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8012dc4:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8012dc8:	6001      	str	r1, [r0, #0]
 8012dca:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8012dce:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8012dd2:	600a      	str	r2, [r1, #0]
 8012dd4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8012dd8:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8012ddc:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012dde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012de2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012dec:	3380      	adds	r3, #128	@ 0x80
 8012dee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  int workspace[7*7];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8012df2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012df6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012e00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012e04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e0c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  wsptr = workspace;
 8012e10:	f107 0314 	add.w	r3, r7, #20
 8012e14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8012e18:	2300      	movs	r3, #0
 8012e1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8012e1e:	e17a      	b.n	8013116 <jpeg_idct_7x7+0x366>
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e28:	461a      	mov	r2, r3
 8012e2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	fb02 f303 	mul.w	r3, r2, r3
 8012e34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp13 <<= CONST_BITS;
 8012e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012e3c:	035b      	lsls	r3, r3, #13
 8012e3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    /* Add fudge factor here for final descale. */
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012e46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012e4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e52:	3320      	adds	r3, #32
 8012e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e58:	461a      	mov	r2, r3
 8012e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012e5e:	3340      	adds	r3, #64	@ 0x40
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	fb02 f303 	mul.w	r3, r2, r3
 8012e66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e6e:	3340      	adds	r3, #64	@ 0x40
 8012e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e74:	461a      	mov	r2, r3
 8012e76:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012e7a:	3380      	adds	r3, #128	@ 0x80
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	fb02 f303 	mul.w	r3, r2, r3
 8012e82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012e8a:	3360      	adds	r3, #96	@ 0x60
 8012e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e90:	461a      	mov	r2, r3
 8012e92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012e96:	33c0      	adds	r3, #192	@ 0xc0
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	fb02 f303 	mul.w	r3, r2, r3
 8012e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8012ea2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8012ea6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012eaa:	1ad3      	subs	r3, r2, r3
 8012eac:	f641 4237 	movw	r2, #7223	@ 0x1c37
 8012eb0:	fb02 f303 	mul.w	r3, r2, r3
 8012eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8012eb8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8012ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	f640 2212 	movw	r2, #2578	@ 0xa12
 8012ec6:	fb02 f303 	mul.w	r3, r2, r3
 8012eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012ece:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012ed2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012ed6:	441a      	add	r2, r3
 8012ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012edc:	441a      	add	r2, r3
 8012ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ee2:	4993      	ldr	r1, [pc, #588]	@ (8013130 <jpeg_idct_7x7+0x380>)
 8012ee4:	fb01 f303 	mul.w	r3, r1, r3
 8012ee8:	4413      	add	r3, r2
 8012eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp0 = z1 + z3;
 8012eee:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8012ef2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012ef6:	4413      	add	r3, r2
 8012ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    z2 -= tmp0;
 8012efc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8012f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8012f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f0e:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 8012f12:	fb02 f303 	mul.w	r3, r2, r3
 8012f16:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8012f1a:	4413      	add	r3, r2
 8012f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8012f20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012f24:	f46f 721f 	mvn.w	r2, #636	@ 0x27c
 8012f28:	fb03 f202 	mul.w	r2, r3, r2
 8012f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f30:	4413      	add	r3, r2
 8012f32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8012f36:	4413      	add	r3, r2
 8012f38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8012f3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012f40:	4a7c      	ldr	r2, [pc, #496]	@ (8013134 <jpeg_idct_7x7+0x384>)
 8012f42:	fb03 f202 	mul.w	r2, r3, r2
 8012f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012f4a:	4413      	add	r3, r2
 8012f4c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8012f50:	4413      	add	r3, r2
 8012f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8012f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012f5a:	f642 5241 	movw	r2, #11585	@ 0x2d41
 8012f5e:	fb02 f303 	mul.w	r3, r2, r3
 8012f62:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8012f66:	4413      	add	r3, r2
 8012f68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f70:	3310      	adds	r3, #16
 8012f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f76:	461a      	mov	r2, r3
 8012f78:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012f7c:	3320      	adds	r3, #32
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	fb02 f303 	mul.w	r3, r2, r3
 8012f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012f8c:	3330      	adds	r3, #48	@ 0x30
 8012f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f92:	461a      	mov	r2, r3
 8012f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012f98:	3360      	adds	r3, #96	@ 0x60
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	fb02 f303 	mul.w	r3, r2, r3
 8012fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012fa8:	3350      	adds	r3, #80	@ 0x50
 8012faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012fb4:	33a0      	adds	r3, #160	@ 0xa0
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	fb02 f303 	mul.w	r3, r2, r3
 8012fbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8012fc0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8012fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012fc8:	4413      	add	r3, r2
 8012fca:	f641 52ef 	movw	r2, #7663	@ 0x1def
 8012fce:	fb02 f303 	mul.w	r3, r2, r3
 8012fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8012fd6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8012fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012fde:	1ad3      	subs	r3, r2, r3
 8012fe0:	f240 5273 	movw	r2, #1395	@ 0x573
 8012fe4:	fb02 f303 	mul.w	r3, r2, r3
 8012fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp0 = tmp1 - tmp2;
 8012fec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp1 += tmp2;
 8012ffa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013002:	4413      	add	r3, r2
 8013004:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8013008:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801300c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013010:	4413      	add	r3, r2
 8013012:	4a49      	ldr	r2, [pc, #292]	@ (8013138 <jpeg_idct_7x7+0x388>)
 8013014:	fb02 f303 	mul.w	r3, r2, r3
 8013018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp1 += tmp2;
 801301c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013024:	4413      	add	r3, r2
 8013026:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 801302a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801302e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013032:	4413      	add	r3, r2
 8013034:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 8013038:	fb02 f303 	mul.w	r3, r2, r3
 801303c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp0 += z2;
 8013040:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013048:	4413      	add	r3, r2
 801304a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801304e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013052:	f643 32de 	movw	r2, #15326	@ 0x3bde
 8013056:	fb03 f202 	mul.w	r2, r3, r2
 801305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801305e:	4413      	add	r3, r2
 8013060:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8013064:	4413      	add	r3, r2
 8013066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801306a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013072:	4413      	add	r3, r2
 8013074:	12da      	asrs	r2, r3, #11
 8013076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801307a:	601a      	str	r2, [r3, #0]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801307c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8013080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013084:	1ad2      	subs	r2, r2, r3
 8013086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801308a:	33a8      	adds	r3, #168	@ 0xa8
 801308c:	12d2      	asrs	r2, r2, #11
 801308e:	601a      	str	r2, [r3, #0]
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8013090:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013098:	441a      	add	r2, r3
 801309a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801309e:	331c      	adds	r3, #28
 80130a0:	12d2      	asrs	r2, r2, #11
 80130a2:	601a      	str	r2, [r3, #0]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80130a4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80130a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80130ac:	1ad2      	subs	r2, r2, r3
 80130ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80130b2:	338c      	adds	r3, #140	@ 0x8c
 80130b4:	12d2      	asrs	r2, r2, #11
 80130b6:	601a      	str	r2, [r3, #0]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80130b8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80130bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80130c0:	441a      	add	r2, r3
 80130c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80130c6:	3338      	adds	r3, #56	@ 0x38
 80130c8:	12d2      	asrs	r2, r2, #11
 80130ca:	601a      	str	r2, [r3, #0]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80130cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80130d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80130d4:	1ad2      	subs	r2, r2, r3
 80130d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80130da:	3370      	adds	r3, #112	@ 0x70
 80130dc:	12d2      	asrs	r2, r2, #11
 80130de:	601a      	str	r2, [r3, #0]
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 80130e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80130e4:	3354      	adds	r3, #84	@ 0x54
 80130e6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80130ea:	12d2      	asrs	r2, r2, #11
 80130ec:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80130ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80130f2:	3301      	adds	r3, #1
 80130f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80130f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80130fc:	3302      	adds	r3, #2
 80130fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8013102:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8013106:	3304      	adds	r3, #4
 8013108:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801310c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013110:	3304      	adds	r3, #4
 8013112:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8013116:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801311a:	2b06      	cmp	r3, #6
 801311c:	f77f ae80 	ble.w	8012e20 <jpeg_idct_7x7+0x70>
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 8013120:	f107 0314 	add.w	r3, r7, #20
 8013124:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  for (ctr = 0; ctr < 7; ctr++) {
 8013128:	2300      	movs	r3, #0
 801312a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801312e:	e173      	b.n	8013418 <jpeg_idct_7x7+0x668>
 8013130:	ffffc515 	.word	0xffffc515
 8013134:	ffffb0f1 	.word	0xffffb0f1
 8013138:	ffffd3e1 	.word	0xffffd3e1
    outptr = output_buf[ctr] + output_col;
 801313c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013140:	009b      	lsls	r3, r3, #2
 8013142:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8013146:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801314a:	6812      	ldr	r2, [r2, #0]
 801314c:	4413      	add	r3, r2
 801314e:	681a      	ldr	r2, [r3, #0]
 8013150:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013154:	4413      	add	r3, r2
 8013156:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801315a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	3310      	adds	r3, #16
 8013162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp13 <<= CONST_BITS;
 8013166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801316a:	035b      	lsls	r3, r3, #13
 801316c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    z1 = (INT32) wsptr[2];
 8013170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013174:	3308      	adds	r3, #8
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = (INT32) wsptr[4];
 801317c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013180:	3310      	adds	r3, #16
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = (INT32) wsptr[6];
 8013188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801318c:	3318      	adds	r3, #24
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8013194:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8013198:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	f641 4237 	movw	r2, #7223	@ 0x1c37
 80131a2:	fb02 f303 	mul.w	r3, r2, r3
 80131a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80131aa:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80131ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80131b2:	1ad3      	subs	r3, r2, r3
 80131b4:	f640 2212 	movw	r2, #2578	@ 0xa12
 80131b8:	fb02 f303 	mul.w	r3, r2, r3
 80131bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80131c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80131c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80131c8:	441a      	add	r2, r3
 80131ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80131ce:	441a      	add	r2, r3
 80131d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80131d4:	4996      	ldr	r1, [pc, #600]	@ (8013430 <jpeg_idct_7x7+0x680>)
 80131d6:	fb01 f303 	mul.w	r3, r1, r3
 80131da:	4413      	add	r3, r2
 80131dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp0 = z1 + z3;
 80131e0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80131e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80131e8:	4413      	add	r3, r2
 80131ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    z2 -= tmp0;
 80131ee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80131f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80131f6:	1ad3      	subs	r3, r2, r3
 80131f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80131fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013200:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 8013204:	fb02 f303 	mul.w	r3, r2, r3
 8013208:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801320c:	4413      	add	r3, r2
 801320e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8013212:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013216:	f46f 721f 	mvn.w	r2, #636	@ 0x27c
 801321a:	fb03 f202 	mul.w	r2, r3, r2
 801321e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013222:	4413      	add	r3, r2
 8013224:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8013228:	4413      	add	r3, r2
 801322a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801322e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013232:	4a80      	ldr	r2, [pc, #512]	@ (8013434 <jpeg_idct_7x7+0x684>)
 8013234:	fb03 f202 	mul.w	r2, r3, r2
 8013238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801323c:	4413      	add	r3, r2
 801323e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8013242:	4413      	add	r3, r2
 8013244:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8013248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801324c:	f642 5241 	movw	r2, #11585	@ 0x2d41
 8013250:	fb02 f303 	mul.w	r3, r2, r3
 8013254:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8013258:	4413      	add	r3, r2
 801325a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013262:	3304      	adds	r3, #4
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 = (INT32) wsptr[3];
 801326a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801326e:	330c      	adds	r3, #12
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z3 = (INT32) wsptr[5];
 8013276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801327a:	3314      	adds	r3, #20
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8013282:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8013286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801328a:	4413      	add	r3, r2
 801328c:	f641 52ef 	movw	r2, #7663	@ 0x1def
 8013290:	fb02 f303 	mul.w	r3, r2, r3
 8013294:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8013298:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	f240 5273 	movw	r2, #1395	@ 0x573
 80132a6:	fb02 f303 	mul.w	r3, r2, r3
 80132aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp0 = tmp1 - tmp2;
 80132ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80132b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80132b6:	1ad3      	subs	r3, r2, r3
 80132b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp1 += tmp2;
 80132bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80132c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80132c4:	4413      	add	r3, r2
 80132c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80132ca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80132ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80132d2:	4413      	add	r3, r2
 80132d4:	4a58      	ldr	r2, [pc, #352]	@ (8013438 <jpeg_idct_7x7+0x688>)
 80132d6:	fb02 f303 	mul.w	r3, r2, r3
 80132da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp1 += tmp2;
 80132de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80132e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80132e6:	4413      	add	r3, r2
 80132e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80132ec:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80132f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80132f4:	4413      	add	r3, r2
 80132f6:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 80132fa:	fb02 f303 	mul.w	r3, r2, r3
 80132fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp0 += z2;
 8013302:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801330a:	4413      	add	r3, r2
 801330c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8013310:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013314:	f643 32de 	movw	r2, #15326	@ 0x3bde
 8013318:	fb03 f202 	mul.w	r2, r3, r2
 801331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013320:	4413      	add	r3, r2
 8013322:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8013326:	4413      	add	r3, r2
 8013328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801332c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8013330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013334:	4413      	add	r3, r2
 8013336:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013338:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801333c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013340:	4413      	add	r3, r2
 8013342:	781a      	ldrb	r2, [r3, #0]
 8013344:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013348:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801334a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801334e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013352:	1ad3      	subs	r3, r2, r3
 8013354:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013356:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801335a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801335e:	441a      	add	r2, r3
 8013360:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013364:	3306      	adds	r3, #6
 8013366:	7812      	ldrb	r2, [r2, #0]
 8013368:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801336a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801336e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013372:	4413      	add	r3, r2
 8013374:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013376:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801337a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801337e:	441a      	add	r2, r3
 8013380:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8013384:	3301      	adds	r3, #1
 8013386:	7812      	ldrb	r2, [r2, #0]
 8013388:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801338a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801338e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013392:	1ad3      	subs	r3, r2, r3
 8013394:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013396:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801339a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801339e:	441a      	add	r2, r3
 80133a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80133a4:	3305      	adds	r3, #5
 80133a6:	7812      	ldrb	r2, [r2, #0]
 80133a8:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80133aa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80133ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80133b2:	4413      	add	r3, r2
 80133b4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80133b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80133ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80133be:	441a      	add	r2, r3
 80133c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80133c4:	3302      	adds	r3, #2
 80133c6:	7812      	ldrb	r2, [r2, #0]
 80133c8:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80133ca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80133ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80133d2:	1ad3      	subs	r3, r2, r3
 80133d4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80133d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80133da:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80133de:	441a      	add	r2, r3
 80133e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80133e4:	3304      	adds	r3, #4
 80133e6:	7812      	ldrb	r2, [r2, #0]
 80133e8:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80133ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80133ee:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80133f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80133f4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80133f8:	441a      	add	r2, r3
 80133fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80133fe:	3303      	adds	r3, #3
 8013400:	7812      	ldrb	r2, [r2, #0]
 8013402:	701a      	strb	r2, [r3, #0]

    wsptr += 7;		/* advance pointer to next row */
 8013404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8013408:	331c      	adds	r3, #28
 801340a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  for (ctr = 0; ctr < 7; ctr++) {
 801340e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8013412:	3301      	adds	r3, #1
 8013414:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8013418:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801341c:	2b06      	cmp	r3, #6
 801341e:	f77f ae8d 	ble.w	801313c <jpeg_idct_7x7+0x38c>
  }
}
 8013422:	bf00      	nop
 8013424:	bf00      	nop
 8013426:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801342a:	46bd      	mov	sp, r7
 801342c:	bc90      	pop	{r4, r7}
 801342e:	4770      	bx	lr
 8013430:	ffffc515 	.word	0xffffc515
 8013434:	ffffb0f1 	.word	0xffffb0f1
 8013438:	ffffd3e1 	.word	0xffffd3e1

0801343c <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801343c:	b480      	push	{r7}
 801343e:	b0b9      	sub	sp, #228	@ 0xe4
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]
 8013448:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013450:	3380      	adds	r3, #128	@ 0x80
 8013452:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  int workspace[6*6];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801345c:	68bb      	ldr	r3, [r7, #8]
 801345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  wsptr = workspace;
 8013464:	f107 0314 	add.w	r3, r7, #20
 8013468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801346c:	2300      	movs	r3, #0
 801346e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013472:	e105      	b.n	8013680 <jpeg_idct_6x6+0x244>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013478:	f9b3 3000 	ldrsh.w	r3, [r3]
 801347c:	461a      	mov	r2, r3
 801347e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	fb02 f303 	mul.w	r3, r2, r3
 8013488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp0 <<= CONST_BITS;
 801348c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013490:	035b      	lsls	r3, r3, #13
 8013492:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801349a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801349e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80134a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80134a6:	3340      	adds	r3, #64	@ 0x40
 80134a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134ac:	461a      	mov	r2, r3
 80134ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80134b2:	3380      	adds	r3, #128	@ 0x80
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	fb02 f303 	mul.w	r3, r2, r3
 80134ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80134be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80134c2:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80134c6:	fb02 f303 	mul.w	r3, r2, r3
 80134ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = tmp0 + tmp10;
 80134ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80134d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80134d6:	4413      	add	r3, r2
 80134d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80134dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80134e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80134e4:	1ad2      	subs	r2, r2, r3
 80134e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	12db      	asrs	r3, r3, #11
 80134ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80134f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80134f6:	3320      	adds	r3, #32
 80134f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134fc:	461a      	mov	r2, r3
 80134fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013502:	3340      	adds	r3, #64	@ 0x40
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	fb02 f303 	mul.w	r3, r2, r3
 801350a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801350e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013512:	f242 7231 	movw	r2, #10033	@ 0x2731
 8013516:	fb02 f303 	mul.w	r3, r2, r3
 801351a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp10 = tmp1 + tmp0;
 801351e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8013522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013526:	4413      	add	r3, r2
 8013528:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp12 = tmp1 - tmp0;
 801352c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8013530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013534:	1ad3      	subs	r3, r2, r3
 8013536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801353a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801353e:	3310      	adds	r3, #16
 8013540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013544:	461a      	mov	r2, r3
 8013546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801354a:	3320      	adds	r3, #32
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	fb02 f303 	mul.w	r3, r2, r3
 8013552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801355a:	3330      	adds	r3, #48	@ 0x30
 801355c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013560:	461a      	mov	r2, r3
 8013562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013566:	3360      	adds	r3, #96	@ 0x60
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	fb02 f303 	mul.w	r3, r2, r3
 801356e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013576:	3350      	adds	r3, #80	@ 0x50
 8013578:	f9b3 3000 	ldrsh.w	r3, [r3]
 801357c:	461a      	mov	r2, r3
 801357e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013582:	33a0      	adds	r3, #160	@ 0xa0
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	fb02 f303 	mul.w	r3, r2, r3
 801358a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801358e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013596:	4413      	add	r3, r2
 8013598:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 801359c:	fb02 f303 	mul.w	r3, r2, r3
 80135a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80135a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80135a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80135ac:	4413      	add	r3, r2
 80135ae:	035b      	lsls	r3, r3, #13
 80135b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80135b4:	4413      	add	r3, r2
 80135b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80135ba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80135be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80135c2:	1ad3      	subs	r3, r2, r3
 80135c4:	035b      	lsls	r3, r3, #13
 80135c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80135ca:	4413      	add	r3, r2
 80135cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80135d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80135d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80135d8:	1ad2      	subs	r2, r2, r3
 80135da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80135de:	1ad3      	subs	r3, r2, r3
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80135e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80135ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80135ee:	4413      	add	r3, r2
 80135f0:	12da      	asrs	r2, r3, #11
 80135f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80135f6:	601a      	str	r2, [r3, #0]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80135f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80135fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013600:	1ad2      	subs	r2, r2, r3
 8013602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013606:	3378      	adds	r3, #120	@ 0x78
 8013608:	12d2      	asrs	r2, r2, #11
 801360a:	601a      	str	r2, [r3, #0]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 801360c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013610:	3318      	adds	r3, #24
 8013612:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8013616:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801361a:	440a      	add	r2, r1
 801361c:	601a      	str	r2, [r3, #0]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801361e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013622:	3360      	adds	r3, #96	@ 0x60
 8013624:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8013628:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801362c:	1a8a      	subs	r2, r1, r2
 801362e:	601a      	str	r2, [r3, #0]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8013630:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8013634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013638:	441a      	add	r2, r3
 801363a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801363e:	3330      	adds	r3, #48	@ 0x30
 8013640:	12d2      	asrs	r2, r2, #11
 8013642:	601a      	str	r2, [r3, #0]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8013644:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8013648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801364c:	1ad2      	subs	r2, r2, r3
 801364e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013652:	3348      	adds	r3, #72	@ 0x48
 8013654:	12d2      	asrs	r2, r2, #11
 8013656:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013658:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801365c:	3301      	adds	r3, #1
 801365e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013666:	3302      	adds	r3, #2
 8013668:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801366c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013670:	3304      	adds	r3, #4
 8013672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801367a:	3304      	adds	r3, #4
 801367c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013680:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013684:	2b05      	cmp	r3, #5
 8013686:	f77f aef5 	ble.w	8013474 <jpeg_idct_6x6+0x38>
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 801368a:	f107 0314 	add.w	r3, r7, #20
 801368e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  for (ctr = 0; ctr < 6; ctr++) {
 8013692:	2300      	movs	r3, #0
 8013694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013698:	e0f7      	b.n	801388a <jpeg_idct_6x6+0x44e>
    outptr = output_buf[ctr] + output_col;
 801369a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	683a      	ldr	r2, [r7, #0]
 80136a2:	4413      	add	r3, r2
 80136a4:	681a      	ldr	r2, [r3, #0]
 80136a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80136aa:	4413      	add	r3, r2
 80136ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	3310      	adds	r3, #16
 80136b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp0 <<= CONST_BITS;
 80136bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80136c0:	035b      	lsls	r3, r3, #13
 80136c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp2 = (INT32) wsptr[4];
 80136c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80136ca:	3310      	adds	r3, #16
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80136d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80136d6:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80136da:	fb02 f303 	mul.w	r3, r2, r3
 80136de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = tmp0 + tmp10;
 80136e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80136e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80136ea:	4413      	add	r3, r2
 80136ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp11 = tmp0 - tmp10 - tmp10;
 80136f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80136f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80136f8:	1ad2      	subs	r2, r2, r3
 80136fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80136fe:	1ad3      	subs	r3, r2, r3
 8013700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp10 = (INT32) wsptr[2];
 8013704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013708:	3308      	adds	r3, #8
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013714:	f242 7231 	movw	r2, #10033	@ 0x2731
 8013718:	fb02 f303 	mul.w	r3, r2, r3
 801371c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp10 = tmp1 + tmp0;
 8013720:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8013724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013728:	4413      	add	r3, r2
 801372a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp12 = tmp1 - tmp0;
 801372e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8013732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013736:	1ad3      	subs	r3, r2, r3
 8013738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801373c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013740:	3304      	adds	r3, #4
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z2 = (INT32) wsptr[3];
 8013748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801374c:	330c      	adds	r3, #12
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    z3 = (INT32) wsptr[5];
 8013754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013758:	3314      	adds	r3, #20
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013760:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013768:	4413      	add	r3, r2
 801376a:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 801376e:	fb02 f303 	mul.w	r3, r2, r3
 8013772:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013776:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801377a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801377e:	4413      	add	r3, r2
 8013780:	035b      	lsls	r3, r3, #13
 8013782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8013786:	4413      	add	r3, r2
 8013788:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801378c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013794:	1ad3      	subs	r3, r2, r3
 8013796:	035b      	lsls	r3, r3, #13
 8013798:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801379c:	4413      	add	r3, r2
 801379e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80137a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80137a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80137aa:	1ad2      	subs	r2, r2, r3
 80137ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80137b0:	1ad3      	subs	r3, r2, r3
 80137b2:	035b      	lsls	r3, r3, #13
 80137b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80137b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80137bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80137c0:	4413      	add	r3, r2
 80137c2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80137c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80137c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80137cc:	4413      	add	r3, r2
 80137ce:	781a      	ldrb	r2, [r3, #0]
 80137d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80137d4:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80137d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80137da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80137de:	1ad3      	subs	r3, r2, r3
 80137e0:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80137e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80137e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80137ea:	441a      	add	r2, r3
 80137ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80137f0:	3305      	adds	r3, #5
 80137f2:	7812      	ldrb	r2, [r2, #0]
 80137f4:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80137f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80137fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80137fe:	4413      	add	r3, r2
 8013800:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013802:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013806:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 801380a:	441a      	add	r2, r3
 801380c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013810:	3301      	adds	r3, #1
 8013812:	7812      	ldrb	r2, [r2, #0]
 8013814:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801381a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801381e:	1ad3      	subs	r3, r2, r3
 8013820:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013822:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013826:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 801382a:	441a      	add	r2, r3
 801382c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013830:	3304      	adds	r3, #4
 8013832:	7812      	ldrb	r2, [r2, #0]
 8013834:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801383a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801383e:	4413      	add	r3, r2
 8013840:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013842:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013846:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 801384a:	441a      	add	r2, r3
 801384c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013850:	3302      	adds	r3, #2
 8013852:	7812      	ldrb	r2, [r2, #0]
 8013854:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801385a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801385e:	1ad3      	subs	r3, r2, r3
 8013860:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013862:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013866:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 801386a:	441a      	add	r2, r3
 801386c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013870:	3303      	adds	r3, #3
 8013872:	7812      	ldrb	r2, [r2, #0]
 8013874:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 8013876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801387a:	3318      	adds	r3, #24
 801387c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  for (ctr = 0; ctr < 6; ctr++) {
 8013880:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013884:	3301      	adds	r3, #1
 8013886:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801388a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801388e:	2b05      	cmp	r3, #5
 8013890:	f77f af03 	ble.w	801369a <jpeg_idct_6x6+0x25e>
  }
}
 8013894:	bf00      	nop
 8013896:	bf00      	nop
 8013898:	37e4      	adds	r7, #228	@ 0xe4
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr
	...

080138a4 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b0ad      	sub	sp, #180	@ 0xb4
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	60f8      	str	r0, [r7, #12]
 80138ac:	60b9      	str	r1, [r7, #8]
 80138ae:	607a      	str	r2, [r7, #4]
 80138b0:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80138b8:	3380      	adds	r3, #128	@ 0x80
 80138ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int workspace[5*5];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  wsptr = workspace;
 80138cc:	f107 0314 	add.w	r3, r7, #20
 80138d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80138d4:	2300      	movs	r3, #0
 80138d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80138da:	e0dd      	b.n	8013a98 <jpeg_idct_5x5+0x1f4>
    /* Even part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80138dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80138e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138e4:	461a      	mov	r2, r3
 80138e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	fb02 f303 	mul.w	r3, r2, r3
 80138f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp12 <<= CONST_BITS;
 80138f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80138f8:	035b      	lsls	r3, r3, #13
 80138fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80138fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801390a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801390e:	3320      	adds	r3, #32
 8013910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013914:	461a      	mov	r2, r3
 8013916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801391a:	3340      	adds	r3, #64	@ 0x40
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	fb02 f303 	mul.w	r3, r2, r3
 8013922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801392a:	3340      	adds	r3, #64	@ 0x40
 801392c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013930:	461a      	mov	r2, r3
 8013932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013936:	3380      	adds	r3, #128	@ 0x80
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	fb02 f303 	mul.w	r3, r2, r3
 801393e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8013942:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801394a:	4413      	add	r3, r2
 801394c:	f641 124c 	movw	r2, #6476	@ 0x194c
 8013950:	fb02 f303 	mul.w	r3, r2, r3
 8013954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8013958:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801395c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013960:	1ad3      	subs	r3, r2, r3
 8013962:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8013966:	fb02 f303 	mul.w	r3, r2, r3
 801396a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    z3 = tmp12 + z2;
 801396e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013972:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013976:	4413      	add	r3, r2
 8013978:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    tmp10 = z3 + z1;
 801397c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013980:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013984:	4413      	add	r3, r2
 8013986:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp11 = z3 - z1;
 8013988:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801398c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013990:	1ad3      	subs	r3, r2, r3
 8013992:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp12 -= z2 << 2;
 8013994:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801399e:	1ad3      	subs	r3, r2, r3
 80139a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80139a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80139a8:	3310      	adds	r3, #16
 80139aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139ae:	461a      	mov	r2, r3
 80139b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80139b4:	3320      	adds	r3, #32
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	fb02 f303 	mul.w	r3, r2, r3
 80139bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80139c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80139c4:	3330      	adds	r3, #48	@ 0x30
 80139c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139ca:	461a      	mov	r2, r3
 80139cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80139d0:	3360      	adds	r3, #96	@ 0x60
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	fb02 f303 	mul.w	r3, r2, r3
 80139d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80139dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80139e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80139e4:	4413      	add	r3, r2
 80139e6:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 80139ea:	fb02 f303 	mul.w	r3, r2, r3
 80139ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80139f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80139f6:	f241 0271 	movw	r2, #4209	@ 0x1071
 80139fa:	fb02 f303 	mul.w	r3, r2, r3
 80139fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013a02:	4413      	add	r3, r2
 8013a04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8013a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013a0c:	4a97      	ldr	r2, [pc, #604]	@ (8013c6c <jpeg_idct_5x5+0x3c8>)
 8013a0e:	fb02 f303 	mul.w	r3, r2, r3
 8013a12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013a16:	4413      	add	r3, r2
 8013a18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013a1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a22:	4413      	add	r3, r2
 8013a24:	12da      	asrs	r2, r3, #11
 8013a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013a2a:	601a      	str	r2, [r3, #0]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013a2c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a32:	1ad2      	subs	r2, r2, r3
 8013a34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013a38:	3350      	adds	r3, #80	@ 0x50
 8013a3a:	12d2      	asrs	r2, r2, #11
 8013a3c:	601a      	str	r2, [r3, #0]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8013a3e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a44:	441a      	add	r2, r3
 8013a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013a4a:	3314      	adds	r3, #20
 8013a4c:	12d2      	asrs	r2, r2, #11
 8013a4e:	601a      	str	r2, [r3, #0]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8013a50:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a56:	1ad2      	subs	r2, r2, r3
 8013a58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013a5c:	333c      	adds	r3, #60	@ 0x3c
 8013a5e:	12d2      	asrs	r2, r2, #11
 8013a60:	601a      	str	r2, [r3, #0]
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8013a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013a66:	3328      	adds	r3, #40	@ 0x28
 8013a68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013a6c:	12d2      	asrs	r2, r2, #11
 8013a6e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8013a70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a74:	3301      	adds	r3, #1
 8013a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a7e:	3302      	adds	r3, #2
 8013a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013a88:	3304      	adds	r3, #4
 8013a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8013a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013a92:	3304      	adds	r3, #4
 8013a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013a9c:	2b04      	cmp	r3, #4
 8013a9e:	f77f af1d 	ble.w	80138dc <jpeg_idct_5x5+0x38>
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8013aa2:	f107 0314 	add.w	r3, r7, #20
 8013aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (ctr = 0; ctr < 5; ctr++) {
 8013aaa:	2300      	movs	r3, #0
 8013aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013ab0:	e0d0      	b.n	8013c54 <jpeg_idct_5x5+0x3b0>
    outptr = output_buf[ctr] + output_col;
 8013ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	683a      	ldr	r2, [r7, #0]
 8013aba:	4413      	add	r3, r2
 8013abc:	681a      	ldr	r2, [r3, #0]
 8013abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013ac2:	4413      	add	r3, r2
 8013ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013ac8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	3310      	adds	r3, #16
 8013ad0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp12 <<= CONST_BITS;
 8013ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013ad8:	035b      	lsls	r3, r3, #13
 8013ada:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp0 = (INT32) wsptr[2];
 8013ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013ae2:	3308      	adds	r3, #8
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp1 = (INT32) wsptr[4];
 8013aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013aee:	3310      	adds	r3, #16
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8013af6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013afe:	4413      	add	r3, r2
 8013b00:	f641 124c 	movw	r2, #6476	@ 0x194c
 8013b04:	fb02 f303 	mul.w	r3, r2, r3
 8013b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8013b0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8013b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013b14:	1ad3      	subs	r3, r2, r3
 8013b16:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8013b1a:	fb02 f303 	mul.w	r3, r2, r3
 8013b1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    z3 = tmp12 + z2;
 8013b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b2a:	4413      	add	r3, r2
 8013b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    tmp10 = z3 + z1;
 8013b30:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b38:	4413      	add	r3, r2
 8013b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp11 = z3 - z1;
 8013b3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp12 -= z2 << 2;
 8013b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013b52:	1ad3      	subs	r3, r2, r3
 8013b54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Odd part */

    z2 = (INT32) wsptr[1];
 8013b58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    z3 = (INT32) wsptr[3];
 8013b64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b68:	330c      	adds	r3, #12
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8013b70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013b74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013b78:	4413      	add	r3, r2
 8013b7a:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 8013b7e:	fb02 f303 	mul.w	r3, r2, r3
 8013b82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8013b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b8a:	f241 0271 	movw	r2, #4209	@ 0x1071
 8013b8e:	fb02 f303 	mul.w	r3, r2, r3
 8013b92:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013b96:	4413      	add	r3, r2
 8013b98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8013b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013ba0:	4a32      	ldr	r2, [pc, #200]	@ (8013c6c <jpeg_idct_5x5+0x3c8>)
 8013ba2:	fb02 f303 	mul.w	r3, r2, r3
 8013ba6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013baa:	4413      	add	r3, r2
 8013bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013bb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bb6:	4413      	add	r3, r2
 8013bb8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013bbe:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013bc2:	4413      	add	r3, r2
 8013bc4:	781a      	ldrb	r2, [r3, #0]
 8013bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013bca:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013bcc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013bd2:	1ad3      	subs	r3, r2, r3
 8013bd4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013bda:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013bde:	441a      	add	r2, r3
 8013be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013be4:	3304      	adds	r3, #4
 8013be6:	7812      	ldrb	r2, [r2, #0]
 8013be8:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013bea:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013bf0:	4413      	add	r3, r2
 8013bf2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013bf8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013bfc:	441a      	add	r2, r3
 8013bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013c02:	3301      	adds	r3, #1
 8013c04:	7812      	ldrb	r2, [r2, #0]
 8013c06:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013c08:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c0e:	1ad3      	subs	r3, r2, r3
 8013c10:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013c16:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013c1a:	441a      	add	r2, r3
 8013c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013c20:	3303      	adds	r3, #3
 8013c22:	7812      	ldrb	r2, [r2, #0]
 8013c24:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8013c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013c2a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8013c30:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013c34:	441a      	add	r2, r3
 8013c36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013c3a:	3302      	adds	r3, #2
 8013c3c:	7812      	ldrb	r2, [r2, #0]
 8013c3e:	701a      	strb	r2, [r3, #0]

    wsptr += 5;		/* advance pointer to next row */
 8013c40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013c44:	3314      	adds	r3, #20
 8013c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (ctr = 0; ctr < 5; ctr++) {
 8013c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c4e:	3301      	adds	r3, #1
 8013c50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013c58:	2b04      	cmp	r3, #4
 8013c5a:	f77f af2a 	ble.w	8013ab2 <jpeg_idct_5x5+0x20e>
  }
}
 8013c5e:	bf00      	nop
 8013c60:	bf00      	nop
 8013c62:	37b4      	adds	r7, #180	@ 0xb4
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	ffffba5c 	.word	0xffffba5c

08013c70 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013c70:	b480      	push	{r7}
 8013c72:	b0a3      	sub	sp, #140	@ 0x8c
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	60f8      	str	r0, [r7, #12]
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	607a      	str	r2, [r7, #4]
 8013c7c:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013c84:	3380      	adds	r3, #128	@ 0x80
 8013c86:	677b      	str	r3, [r7, #116]	@ 0x74
  int workspace[4*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013c8e:	68bb      	ldr	r3, [r7, #8]
 8013c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  wsptr = workspace;
 8013c96:	f107 0314 	add.w	r3, r7, #20
 8013c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013ca0:	e07f      	b.n	8013da2 <jpeg_idct_4x4+0x132>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013caa:	461a      	mov	r2, r3
 8013cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	fb02 f303 	mul.w	r3, r2, r3
 8013cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013cbc:	3320      	adds	r3, #32
 8013cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cc2:	461a      	mov	r2, r3
 8013cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013cc8:	3340      	adds	r3, #64	@ 0x40
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	fb02 f303 	mul.w	r3, r2, r3
 8013cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
    
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8013cd2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013cd6:	4413      	add	r3, r2
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	667b      	str	r3, [r7, #100]	@ 0x64
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8013cdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013ce0:	1ad3      	subs	r3, r2, r3
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013cea:	3310      	adds	r3, #16
 8013cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013cf6:	3320      	adds	r3, #32
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	fb02 f303 	mul.w	r3, r2, r3
 8013cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013d04:	3330      	adds	r3, #48	@ 0x30
 8013d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d10:	3360      	adds	r3, #96	@ 0x60
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	fb02 f303 	mul.w	r3, r2, r3
 8013d18:	65bb      	str	r3, [r7, #88]	@ 0x58

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013d1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d1e:	4413      	add	r3, r2
 8013d20:	f241 1251 	movw	r2, #4433	@ 0x1151
 8013d24:	fb02 f303 	mul.w	r3, r2, r3
 8013d28:	657b      	str	r3, [r7, #84]	@ 0x54
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013d30:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d34:	f641 027e 	movw	r2, #6270	@ 0x187e
 8013d38:	fb03 f202 	mul.w	r2, r3, r2
 8013d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d3e:	4413      	add	r3, r2
 8013d40:	12db      	asrs	r3, r3, #11
 8013d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d46:	4a58      	ldr	r2, [pc, #352]	@ (8013ea8 <jpeg_idct_4x4+0x238>)
 8013d48:	fb03 f202 	mul.w	r2, r3, r2
 8013d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d4e:	4413      	add	r3, r2
 8013d50:	12db      	asrs	r3, r3, #11
 8013d52:	66bb      	str	r3, [r7, #104]	@ 0x68
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8013d54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d58:	441a      	add	r2, r3
 8013d5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d5c:	601a      	str	r2, [r3, #0]
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8013d5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d60:	3330      	adds	r3, #48	@ 0x30
 8013d62:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8013d64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013d66:	1a8a      	subs	r2, r1, r2
 8013d68:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8013d6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d6c:	3310      	adds	r3, #16
 8013d6e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013d70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013d72:	440a      	add	r2, r1
 8013d74:	601a      	str	r2, [r3, #0]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8013d76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d78:	3320      	adds	r3, #32
 8013d7a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013d7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013d7e:	1a8a      	subs	r2, r1, r2
 8013d80:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013d82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d84:	3301      	adds	r3, #1
 8013d86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013d8c:	3302      	adds	r3, #2
 8013d8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8013d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013d96:	3304      	adds	r3, #4
 8013d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013d9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d9e:	3304      	adds	r3, #4
 8013da0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013da4:	2b03      	cmp	r3, #3
 8013da6:	f77f af7c 	ble.w	8013ca2 <jpeg_idct_4x4+0x32>
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8013daa:	f107 0314 	add.w	r3, r7, #20
 8013dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (ctr = 0; ctr < 4; ctr++) {
 8013db0:	2300      	movs	r3, #0
 8013db2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013db4:	e06e      	b.n	8013e94 <jpeg_idct_4x4+0x224>
    outptr = output_buf[ctr] + output_col;
 8013db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013db8:	009b      	lsls	r3, r3, #2
 8013dba:	683a      	ldr	r2, [r7, #0]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013dc4:	4413      	add	r3, r2
 8013dc6:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013dc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	3310      	adds	r3, #16
 8013dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp2 = (INT32) wsptr[2];
 8013dd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dd2:	3308      	adds	r3, #8
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	66bb      	str	r3, [r7, #104]	@ 0x68

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013dd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013ddc:	4413      	add	r3, r2
 8013dde:	035b      	lsls	r3, r3, #13
 8013de0:	667b      	str	r3, [r7, #100]	@ 0x64
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013de2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013de4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	035b      	lsls	r3, r3, #13
 8013dea:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
 8013dec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dee:	3304      	adds	r3, #4
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    z3 = (INT32) wsptr[3];
 8013df4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013df6:	330c      	adds	r3, #12
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	65bb      	str	r3, [r7, #88]	@ 0x58

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013dfc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e00:	4413      	add	r3, r2
 8013e02:	f241 1251 	movw	r2, #4433	@ 0x1151
 8013e06:	fb02 f303 	mul.w	r3, r2, r3
 8013e0a:	657b      	str	r3, [r7, #84]	@ 0x54
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e0e:	f641 027e 	movw	r2, #6270	@ 0x187e
 8013e12:	fb02 f303 	mul.w	r3, r2, r3
 8013e16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e18:	4413      	add	r3, r2
 8013e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e1e:	4a22      	ldr	r2, [pc, #136]	@ (8013ea8 <jpeg_idct_4x4+0x238>)
 8013e20:	fb02 f303 	mul.w	r3, r2, r3
 8013e24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e26:	4413      	add	r3, r2
 8013e28:	66bb      	str	r3, [r7, #104]	@ 0x68

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e2e:	4413      	add	r3, r2
 8013e30:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013e38:	4413      	add	r3, r2
 8013e3a:	781a      	ldrb	r2, [r3, #0]
 8013e3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e3e:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e44:	1ad3      	subs	r3, r2, r3
 8013e46:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e4c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013e4e:	441a      	add	r2, r3
 8013e50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e52:	3303      	adds	r3, #3
 8013e54:	7812      	ldrb	r2, [r2, #0]
 8013e56:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013e58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e5c:	4413      	add	r3, r2
 8013e5e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013e64:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013e66:	441a      	add	r2, r3
 8013e68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	7812      	ldrb	r2, [r2, #0]
 8013e6e:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013e70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e74:	1ad3      	subs	r3, r2, r3
 8013e76:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8013e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013e7c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013e7e:	441a      	add	r2, r3
 8013e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e82:	3302      	adds	r3, #2
 8013e84:	7812      	ldrb	r2, [r2, #0]
 8013e86:	701a      	strb	r2, [r3, #0]

    wsptr += 4;		/* advance pointer to next row */
 8013e88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e8a:	3310      	adds	r3, #16
 8013e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  for (ctr = 0; ctr < 4; ctr++) {
 8013e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e90:	3301      	adds	r3, #1
 8013e92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e96:	2b03      	cmp	r3, #3
 8013e98:	dd8d      	ble.n	8013db6 <jpeg_idct_4x4+0x146>
  }
}
 8013e9a:	bf00      	nop
 8013e9c:	bf00      	nop
 8013e9e:	378c      	adds	r7, #140	@ 0x8c
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr
 8013ea8:	ffffc4df 	.word	0xffffc4df

08013eac <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013eac:	b480      	push	{r7}
 8013eae:	b099      	sub	sp, #100	@ 0x64
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	60f8      	str	r0, [r7, #12]
 8013eb4:	60b9      	str	r1, [r7, #8]
 8013eb6:	607a      	str	r2, [r7, #4]
 8013eb8:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013ec0:	3380      	adds	r3, #128	@ 0x80
 8013ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int workspace[3*3];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
  wsptr = workspace;
 8013ece:	f107 0314 	add.w	r3, r7, #20
 8013ed2:	657b      	str	r3, [r7, #84]	@ 0x54
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ed8:	e059      	b.n	8013f8e <jpeg_idct_3x3+0xe2>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	fb02 f303 	mul.w	r3, r2, r3
 8013eea:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp0 <<= CONST_BITS;
 8013eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eee:	035b      	lsls	r3, r3, #13
 8013ef0:	647b      	str	r3, [r7, #68]	@ 0x44
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8013ef8:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013efc:	3320      	adds	r3, #32
 8013efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f02:	461a      	mov	r2, r3
 8013f04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f06:	3340      	adds	r3, #64	@ 0x40
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	fb02 f303 	mul.w	r3, r2, r3
 8013f0e:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f12:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 8013f16:	fb02 f303 	mul.w	r3, r2, r3
 8013f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp10 = tmp0 + tmp12;
 8013f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f20:	4413      	add	r3, r2
 8013f22:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = tmp0 - tmp12 - tmp12;
 8013f24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f28:	1ad2      	subs	r2, r2, r3
 8013f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f2c:	1ad3      	subs	r3, r2, r3
 8013f2e:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013f30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f32:	3310      	adds	r3, #16
 8013f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f38:	461a      	mov	r2, r3
 8013f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f3c:	3320      	adds	r3, #32
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	fb02 f303 	mul.w	r3, r2, r3
 8013f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f48:	f242 7231 	movw	r2, #10033	@ 0x2731
 8013f4c:	fb02 f303 	mul.w	r3, r2, r3
 8013f50:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013f52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f56:	4413      	add	r3, r2
 8013f58:	12da      	asrs	r2, r3, #11
 8013f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f5c:	601a      	str	r2, [r3, #0]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013f5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f62:	1ad2      	subs	r2, r2, r3
 8013f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f66:	3318      	adds	r3, #24
 8013f68:	12d2      	asrs	r2, r2, #11
 8013f6a:	601a      	str	r2, [r3, #0]
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f6e:	330c      	adds	r3, #12
 8013f70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013f72:	12d2      	asrs	r2, r2, #11
 8013f74:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8013f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f78:	3301      	adds	r3, #1
 8013f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f7e:	3302      	adds	r3, #2
 8013f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f84:	3304      	adds	r3, #4
 8013f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f8a:	3304      	adds	r3, #4
 8013f8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f90:	2b02      	cmp	r3, #2
 8013f92:	dda2      	ble.n	8013eda <jpeg_idct_3x3+0x2e>
  }

  /* Pass 2: process 3 rows from work array, store into output array. */

  wsptr = workspace;
 8013f94:	f107 0314 	add.w	r3, r7, #20
 8013f98:	657b      	str	r3, [r7, #84]	@ 0x54
  for (ctr = 0; ctr < 3; ctr++) {
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f9e:	e053      	b.n	8014048 <jpeg_idct_3x3+0x19c>
    outptr = output_buf[ctr] + output_col;
 8013fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fa2:	009b      	lsls	r3, r3, #2
 8013fa4:	683a      	ldr	r2, [r7, #0]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	681a      	ldr	r2, [r3, #0]
 8013faa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fac:	4413      	add	r3, r2
 8013fae:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	3310      	adds	r3, #16
 8013fb6:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp0 <<= CONST_BITS;
 8013fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fba:	035b      	lsls	r3, r3, #13
 8013fbc:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp2 = (INT32) wsptr[2];
 8013fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fc0:	3308      	adds	r3, #8
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	643b      	str	r3, [r7, #64]	@ 0x40
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013fc8:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 8013fcc:	fb02 f303 	mul.w	r3, r2, r3
 8013fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp10 = tmp0 + tmp12;
 8013fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fd6:	4413      	add	r3, r2
 8013fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    tmp2 = tmp0 - tmp12 - tmp12;
 8013fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fde:	1ad2      	subs	r2, r2, r3
 8013fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fe2:	1ad3      	subs	r3, r2, r3
 8013fe4:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
 8013fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fe8:	3304      	adds	r3, #4
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ff0:	f242 7231 	movw	r2, #10033	@ 0x2731
 8013ff4:	fb02 f303 	mul.w	r3, r2, r3
 8013ff8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ffe:	4413      	add	r3, r2
 8014000:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8014002:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014008:	4413      	add	r3, r2
 801400a:	781a      	ldrb	r2, [r3, #0]
 801400c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801400e:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014010:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8014018:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801401c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801401e:	441a      	add	r2, r3
 8014020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014022:	3302      	adds	r3, #2
 8014024:	7812      	ldrb	r2, [r2, #0]
 8014026:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801402a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801402c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014032:	441a      	add	r2, r3
 8014034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014036:	3301      	adds	r3, #1
 8014038:	7812      	ldrb	r2, [r2, #0]
 801403a:	701a      	strb	r2, [r3, #0]

    wsptr += 3;		/* advance pointer to next row */
 801403c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801403e:	330c      	adds	r3, #12
 8014040:	657b      	str	r3, [r7, #84]	@ 0x54
  for (ctr = 0; ctr < 3; ctr++) {
 8014042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014044:	3301      	adds	r3, #1
 8014046:	653b      	str	r3, [r7, #80]	@ 0x50
 8014048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801404a:	2b02      	cmp	r3, #2
 801404c:	dda8      	ble.n	8013fa0 <jpeg_idct_3x3+0xf4>
  }
}
 801404e:	bf00      	nop
 8014050:	bf00      	nop
 8014052:	3764      	adds	r7, #100	@ 0x64
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801405c:	b480      	push	{r7}
 801405e:	b08f      	sub	sp, #60	@ 0x3c
 8014060:	af00      	add	r7, sp, #0
 8014062:	60f8      	str	r0, [r7, #12]
 8014064:	60b9      	str	r1, [r7, #8]
 8014066:	607a      	str	r2, [r7, #4]
 8014068:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8014070:	3380      	adds	r3, #128	@ 0x80
 8014072:	637b      	str	r3, [r7, #52]	@ 0x34
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014078:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014080:	461a      	mov	r2, r3
 8014082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	fb02 f303 	mul.w	r3, r2, r3
 801408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	3310      	adds	r3, #16
 8014090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014094:	461a      	mov	r2, r3
 8014096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014098:	3320      	adds	r3, #32
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	fb02 f303 	mul.w	r3, r2, r3
 80140a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Add fudge factor here for final descale. */
  tmp4 += ONE << 2;
 80140a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140a4:	3304      	adds	r3, #4
 80140a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  tmp0 = tmp4 + tmp5;
 80140a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ac:	4413      	add	r3, r2
 80140ae:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp2 = tmp4 - tmp5;
 80140b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	623b      	str	r3, [r7, #32]

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	3302      	adds	r3, #2
 80140bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140c0:	461a      	mov	r2, r3
 80140c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140c4:	3304      	adds	r3, #4
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	fb02 f303 	mul.w	r3, r2, r3
 80140cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	3312      	adds	r3, #18
 80140d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80140d6:	461a      	mov	r2, r3
 80140d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140da:	3324      	adds	r3, #36	@ 0x24
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	fb02 f303 	mul.w	r3, r2, r3
 80140e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  tmp1 = tmp4 + tmp5;
 80140e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140e8:	4413      	add	r3, r2
 80140ea:	61fb      	str	r3, [r7, #28]
  tmp3 = tmp4 - tmp5;
 80140ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140f0:	1ad3      	subs	r3, r2, r3
 80140f2:	61bb      	str	r3, [r7, #24]

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	681a      	ldr	r2, [r3, #0]
 80140f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80140fa:	4413      	add	r3, r2
 80140fc:	617b      	str	r3, [r7, #20]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80140fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	4413      	add	r3, r2
 8014104:	10db      	asrs	r3, r3, #3
 8014106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801410a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801410c:	4413      	add	r3, r2
 801410e:	781a      	ldrb	r2, [r3, #0]
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8014114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014116:	69fb      	ldr	r3, [r7, #28]
 8014118:	1ad3      	subs	r3, r2, r3
 801411a:	10db      	asrs	r3, r3, #3
 801411c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014122:	441a      	add	r2, r3
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	3301      	adds	r3, #1
 8014128:	7812      	ldrb	r2, [r2, #0]
 801412a:	701a      	strb	r2, [r3, #0]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	3304      	adds	r3, #4
 8014130:	681a      	ldr	r2, [r3, #0]
 8014132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014134:	4413      	add	r3, r2
 8014136:	617b      	str	r3, [r7, #20]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8014138:	6a3a      	ldr	r2, [r7, #32]
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	4413      	add	r3, r2
 801413e:	10db      	asrs	r3, r3, #3
 8014140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014146:	4413      	add	r3, r2
 8014148:	781a      	ldrb	r2, [r3, #0]
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 801414e:	6a3a      	ldr	r2, [r7, #32]
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	1ad3      	subs	r3, r2, r3
 8014154:	10db      	asrs	r3, r3, #3
 8014156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801415a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801415c:	441a      	add	r2, r3
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	3301      	adds	r3, #1
 8014162:	7812      	ldrb	r2, [r2, #0]
 8014164:	701a      	strb	r2, [r3, #0]
}
 8014166:	bf00      	nop
 8014168:	373c      	adds	r7, #60	@ 0x3c
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr

08014172 <jpeg_idct_1x1>:

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014172:	b480      	push	{r7}
 8014174:	b089      	sub	sp, #36	@ 0x24
 8014176:	af00      	add	r7, sp, #0
 8014178:	60f8      	str	r0, [r7, #12]
 801417a:	60b9      	str	r1, [r7, #8]
 801417c:	607a      	str	r2, [r7, #4]
 801417e:	603b      	str	r3, [r7, #0]
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8014186:	3380      	adds	r3, #128	@ 0x80
 8014188:	61fb      	str	r3, [r7, #28]
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801418e:	61bb      	str	r3, [r7, #24]
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014196:	461a      	mov	r2, r3
 8014198:	69bb      	ldr	r3, [r7, #24]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	fb02 f303 	mul.w	r3, r2, r3
 80141a0:	617b      	str	r3, [r7, #20]
  dcval = (int) DESCALE((INT32) dcval, 3);
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	3304      	adds	r3, #4
 80141a6:	10db      	asrs	r3, r3, #3
 80141a8:	617b      	str	r3, [r7, #20]

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80141b0:	69fa      	ldr	r2, [r7, #28]
 80141b2:	441a      	add	r2, r3
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	6819      	ldr	r1, [r3, #0]
 80141b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141ba:	440b      	add	r3, r1
 80141bc:	7812      	ldrb	r2, [r2, #0]
 80141be:	701a      	strb	r2, [r3, #0]
}
 80141c0:	bf00      	nop
 80141c2:	3724      	adds	r7, #36	@ 0x24
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr

080141cc <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80141cc:	b490      	push	{r4, r7}
 80141ce:	b0e0      	sub	sp, #384	@ 0x180
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	f507 74c0 	add.w	r4, r7, #384	@ 0x180
 80141d6:	f5a4 74ba 	sub.w	r4, r4, #372	@ 0x174
 80141da:	6020      	str	r0, [r4, #0]
 80141dc:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80141e0:	f5a0 70bc 	sub.w	r0, r0, #376	@ 0x178
 80141e4:	6001      	str	r1, [r0, #0]
 80141e6:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80141ea:	f5a1 71be 	sub.w	r1, r1, #380	@ 0x17c
 80141ee:	600a      	str	r2, [r1, #0]
 80141f0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80141f4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80141f8:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80141fa:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80141fe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8014208:	3380      	adds	r3, #128	@ 0x80
 801420a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  int workspace[8*9];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801420e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8014212:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801421c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8014220:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014228:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
  wsptr = workspace;
 801422c:	f107 0314 	add.w	r3, r7, #20
 8014230:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014234:	2300      	movs	r3, #0
 8014236:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801423a:	e1a5      	b.n	8014588 <jpeg_idct_9x9+0x3bc>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801423c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8014240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014244:	461a      	mov	r2, r3
 8014246:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	fb02 f303 	mul.w	r3, r2, r3
 8014250:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp0 <<= CONST_BITS;
 8014254:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014258:	035b      	lsls	r3, r3, #13
 801425a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801425e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014262:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8014266:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801426a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801426e:	3320      	adds	r3, #32
 8014270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014274:	461a      	mov	r2, r3
 8014276:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801427a:	3340      	adds	r3, #64	@ 0x40
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	fb02 f303 	mul.w	r3, r2, r3
 8014282:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014286:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801428a:	3340      	adds	r3, #64	@ 0x40
 801428c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014290:	461a      	mov	r2, r3
 8014292:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014296:	3380      	adds	r3, #128	@ 0x80
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	fb02 f303 	mul.w	r3, r2, r3
 801429e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80142a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80142a6:	3360      	adds	r3, #96	@ 0x60
 80142a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80142ac:	461a      	mov	r2, r3
 80142ae:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80142b2:	33c0      	adds	r3, #192	@ 0xc0
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	fb02 f303 	mul.w	r3, r2, r3
 80142ba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80142be:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80142c2:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80142c6:	fb02 f303 	mul.w	r3, r2, r3
 80142ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = tmp0 + tmp3;
 80142ce:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80142d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80142d6:	4413      	add	r3, r2
 80142d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 = tmp0 - tmp3 - tmp3;
 80142dc:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80142e0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80142e4:	1ad2      	subs	r2, r2, r3
 80142e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80142ea:	1ad3      	subs	r3, r2, r3
 80142ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 80142f0:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80142f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 80142fe:	fb02 f303 	mul.w	r3, r2, r3
 8014302:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp11 = tmp2 + tmp0;
 8014306:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801430a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801430e:	4413      	add	r3, r2
 8014310:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp14 = tmp2 - tmp0 - tmp0;
 8014314:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014318:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801431c:	1ad2      	subs	r2, r2, r3
 801431e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014322:	1ad3      	subs	r3, r2, r3
 8014324:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8014328:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801432c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014330:	4413      	add	r3, r2
 8014332:	f642 2287 	movw	r2, #10887	@ 0x2a87
 8014336:	fb02 f303 	mul.w	r3, r2, r3
 801433a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 801433e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8014342:	f242 22ab 	movw	r2, #8875	@ 0x22ab
 8014346:	fb02 f303 	mul.w	r3, r2, r3
 801434a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 801434e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014352:	f240 72dc 	movw	r2, #2012	@ 0x7dc
 8014356:	fb02 f303 	mul.w	r3, r2, r3
 801435a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    tmp10 = tmp1 + tmp0 - tmp3;
 801435e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8014362:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014366:	441a      	add	r2, r3
 8014368:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801436c:	1ad3      	subs	r3, r2, r3
 801436e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp12 = tmp1 - tmp0 + tmp2;
 8014372:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8014376:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801437a:	1ad3      	subs	r3, r2, r3
 801437c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014380:	4413      	add	r3, r2
 8014382:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp13 = tmp1 - tmp2 + tmp3;
 8014386:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801438a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8014394:	4413      	add	r3, r2
 8014396:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801439a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801439e:	3310      	adds	r3, #16
 80143a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143a4:	461a      	mov	r2, r3
 80143a6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80143aa:	3320      	adds	r3, #32
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	fb02 f303 	mul.w	r3, r2, r3
 80143b2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80143b6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80143ba:	3330      	adds	r3, #48	@ 0x30
 80143bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143c0:	461a      	mov	r2, r3
 80143c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80143c6:	3360      	adds	r3, #96	@ 0x60
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	fb02 f303 	mul.w	r3, r2, r3
 80143ce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80143d2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80143d6:	3350      	adds	r3, #80	@ 0x50
 80143d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143dc:	461a      	mov	r2, r3
 80143de:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80143e2:	33a0      	adds	r3, #160	@ 0xa0
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	fb02 f303 	mul.w	r3, r2, r3
 80143ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80143ee:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80143f2:	3370      	adds	r3, #112	@ 0x70
 80143f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143f8:	461a      	mov	r2, r3
 80143fa:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80143fe:	33e0      	adds	r3, #224	@ 0xe0
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	fb02 f303 	mul.w	r3, r2, r3
 8014406:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801440a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801440e:	4a65      	ldr	r2, [pc, #404]	@ (80145a4 <jpeg_idct_9x9+0x3d8>)
 8014410:	fb02 f303 	mul.w	r3, r2, r3
 8014414:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8014418:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801441c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014420:	4413      	add	r3, r2
 8014422:	f641 5217 	movw	r2, #7447	@ 0x1d17
 8014426:	fb02 f303 	mul.w	r3, r2, r3
 801442a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801442e:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8014432:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014436:	4413      	add	r3, r2
 8014438:	f640 727a 	movw	r2, #3962	@ 0xf7a
 801443c:	fb02 f303 	mul.w	r3, r2, r3
 8014440:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp0 = tmp2 + tmp3 - z2;
 8014444:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8014448:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801444c:	441a      	add	r2, r3
 801444e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014452:	1ad3      	subs	r3, r2, r3
 8014454:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8014458:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801445c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014460:	1ad3      	subs	r3, r2, r3
 8014462:	f642 4291 	movw	r2, #11409	@ 0x2c91
 8014466:	fb02 f303 	mul.w	r3, r2, r3
 801446a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 += z2 - tmp1;
 801446e:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8014472:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014476:	1ad3      	subs	r3, r2, r3
 8014478:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801447c:	4413      	add	r3, r2
 801447e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 += z2 + tmp1;
 8014482:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8014486:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801448a:	4413      	add	r3, r2
 801448c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8014490:	4413      	add	r3, r2
 8014492:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8014496:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801449a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801449e:	1ad2      	subs	r2, r2, r3
 80144a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80144a4:	1ad3      	subs	r3, r2, r3
 80144a6:	f242 7231 	movw	r2, #10033	@ 0x2731
 80144aa:	fb02 f303 	mul.w	r3, r2, r3
 80144ae:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80144b2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80144b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80144ba:	4413      	add	r3, r2
 80144bc:	12da      	asrs	r2, r3, #11
 80144be:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80144c2:	601a      	str	r2, [r3, #0]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80144c4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80144c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80144cc:	1ad2      	subs	r2, r2, r3
 80144ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80144d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80144d6:	12d2      	asrs	r2, r2, #11
 80144d8:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80144da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80144de:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80144e2:	441a      	add	r2, r3
 80144e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80144e8:	3320      	adds	r3, #32
 80144ea:	12d2      	asrs	r2, r2, #11
 80144ec:	601a      	str	r2, [r3, #0]
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80144ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80144f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80144f6:	1ad2      	subs	r2, r2, r3
 80144f8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80144fc:	33e0      	adds	r3, #224	@ 0xe0
 80144fe:	12d2      	asrs	r2, r2, #11
 8014500:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014502:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801450a:	441a      	add	r2, r3
 801450c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8014510:	3340      	adds	r3, #64	@ 0x40
 8014512:	12d2      	asrs	r2, r2, #11
 8014514:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014516:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801451a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801451e:	1ad2      	subs	r2, r2, r3
 8014520:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8014524:	33c0      	adds	r3, #192	@ 0xc0
 8014526:	12d2      	asrs	r2, r2, #11
 8014528:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 801452a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801452e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014532:	441a      	add	r2, r3
 8014534:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8014538:	3360      	adds	r3, #96	@ 0x60
 801453a:	12d2      	asrs	r2, r2, #11
 801453c:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 801453e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8014542:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014546:	1ad2      	subs	r2, r2, r3
 8014548:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801454c:	33a0      	adds	r3, #160	@ 0xa0
 801454e:	12d2      	asrs	r2, r2, #11
 8014550:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8014552:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8014556:	3380      	adds	r3, #128	@ 0x80
 8014558:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 801455c:	12d2      	asrs	r2, r2, #11
 801455e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014560:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014564:	3301      	adds	r3, #1
 8014566:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801456a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801456e:	3302      	adds	r3, #2
 8014570:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8014574:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014578:	3304      	adds	r3, #4
 801457a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801457e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8014582:	3304      	adds	r3, #4
 8014584:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8014588:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801458c:	2b07      	cmp	r3, #7
 801458e:	f77f ae55 	ble.w	801423c <jpeg_idct_9x9+0x70>
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8014592:	f107 0314 	add.w	r3, r7, #20
 8014596:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  for (ctr = 0; ctr < 9; ctr++) {
 801459a:	2300      	movs	r3, #0
 801459c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80145a0:	e19e      	b.n	80148e0 <jpeg_idct_9x9+0x714>
 80145a2:	bf00      	nop
 80145a4:	ffffd8cf 	.word	0xffffd8cf
    outptr = output_buf[ctr] + output_col;
 80145a8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80145b2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80145b6:	6812      	ldr	r2, [r2, #0]
 80145b8:	4413      	add	r3, r2
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80145c0:	4413      	add	r3, r2
 80145c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80145c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	3310      	adds	r3, #16
 80145ce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp0 <<= CONST_BITS;
 80145d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80145d6:	035b      	lsls	r3, r3, #13
 80145d8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    z1 = (INT32) wsptr[2];
 80145dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80145e0:	3308      	adds	r3, #8
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    z2 = (INT32) wsptr[4];
 80145e8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80145ec:	3310      	adds	r3, #16
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    z3 = (INT32) wsptr[6];
 80145f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80145f8:	3318      	adds	r3, #24
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8014600:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014604:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 8014608:	fb02 f303 	mul.w	r3, r2, r3
 801460c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = tmp0 + tmp3;
 8014610:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8014614:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014618:	4413      	add	r3, r2
 801461a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 = tmp0 - tmp3 - tmp3;
 801461e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8014622:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8014626:	1ad2      	subs	r2, r2, r3
 8014628:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8014632:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8014636:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801463a:	1ad3      	subs	r3, r2, r3
 801463c:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 8014640:	fb02 f303 	mul.w	r3, r2, r3
 8014644:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp11 = tmp2 + tmp0;
 8014648:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801464c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014650:	4413      	add	r3, r2
 8014652:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp14 = tmp2 - tmp0 - tmp0;
 8014656:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801465a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801465e:	1ad2      	subs	r2, r2, r3
 8014660:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014664:	1ad3      	subs	r3, r2, r3
 8014666:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 801466a:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801466e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014672:	4413      	add	r3, r2
 8014674:	f642 2287 	movw	r2, #10887	@ 0x2a87
 8014678:	fb02 f303 	mul.w	r3, r2, r3
 801467c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8014680:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8014684:	f242 22ab 	movw	r2, #8875	@ 0x22ab
 8014688:	fb02 f303 	mul.w	r3, r2, r3
 801468c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8014690:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014694:	f240 72dc 	movw	r2, #2012	@ 0x7dc
 8014698:	fb02 f303 	mul.w	r3, r2, r3
 801469c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    tmp10 = tmp1 + tmp0 - tmp3;
 80146a0:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80146a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80146a8:	441a      	add	r2, r3
 80146aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80146ae:	1ad3      	subs	r3, r2, r3
 80146b0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    tmp12 = tmp1 - tmp0 + tmp2;
 80146b4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80146b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80146c2:	4413      	add	r3, r2
 80146c4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    tmp13 = tmp1 - tmp2 + tmp3;
 80146c8:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80146cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80146d0:	1ad3      	subs	r3, r2, r3
 80146d2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80146d6:	4413      	add	r3, r2
 80146d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80146dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80146e0:	3304      	adds	r3, #4
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    z2 = (INT32) wsptr[3];
 80146e8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80146ec:	330c      	adds	r3, #12
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    z3 = (INT32) wsptr[5];
 80146f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80146f8:	3314      	adds	r3, #20
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    z4 = (INT32) wsptr[7];
 8014700:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8014704:	331c      	adds	r3, #28
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801470c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014710:	4a79      	ldr	r2, [pc, #484]	@ (80148f8 <jpeg_idct_9x9+0x72c>)
 8014712:	fb02 f303 	mul.w	r3, r2, r3
 8014716:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801471a:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801471e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014722:	4413      	add	r3, r2
 8014724:	f641 5217 	movw	r2, #7447	@ 0x1d17
 8014728:	fb02 f303 	mul.w	r3, r2, r3
 801472c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8014730:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8014734:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014738:	4413      	add	r3, r2
 801473a:	f640 727a 	movw	r2, #3962	@ 0xf7a
 801473e:	fb02 f303 	mul.w	r3, r2, r3
 8014742:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp0 = tmp2 + tmp3 - z2;
 8014746:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801474a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801474e:	441a      	add	r2, r3
 8014750:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801475a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801475e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014762:	1ad3      	subs	r3, r2, r3
 8014764:	f642 4291 	movw	r2, #11409	@ 0x2c91
 8014768:	fb02 f303 	mul.w	r3, r2, r3
 801476c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp2 += z2 - tmp1;
 8014770:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8014774:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014778:	1ad3      	subs	r3, r2, r3
 801477a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801477e:	4413      	add	r3, r2
 8014780:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp3 += z2 + tmp1;
 8014784:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8014788:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801478c:	4413      	add	r3, r2
 801478e:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8014792:	4413      	add	r3, r2
 8014794:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8014798:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801479c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80147a0:	1ad2      	subs	r2, r2, r3
 80147a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	f242 7231 	movw	r2, #10033	@ 0x2731
 80147ac:	fb02 f303 	mul.w	r3, r2, r3
 80147b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80147b4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80147b8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80147bc:	4413      	add	r3, r2
 80147be:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80147c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80147c4:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80147c8:	4413      	add	r3, r2
 80147ca:	781a      	ldrb	r2, [r3, #0]
 80147cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80147d0:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80147d2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80147d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80147da:	1ad3      	subs	r3, r2, r3
 80147dc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80147de:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80147e2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80147e6:	441a      	add	r2, r3
 80147e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80147ec:	3308      	adds	r3, #8
 80147ee:	7812      	ldrb	r2, [r2, #0]
 80147f0:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80147f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80147f6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80147fa:	4413      	add	r3, r2
 80147fc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80147fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8014802:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8014806:	441a      	add	r2, r3
 8014808:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801480c:	3301      	adds	r3, #1
 801480e:	7812      	ldrb	r2, [r2, #0]
 8014810:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014812:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8014816:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801481e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8014822:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8014826:	441a      	add	r2, r3
 8014828:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801482c:	3307      	adds	r3, #7
 801482e:	7812      	ldrb	r2, [r2, #0]
 8014830:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014832:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014836:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801483a:	4413      	add	r3, r2
 801483c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801483e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014842:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8014846:	441a      	add	r2, r3
 8014848:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801484c:	3302      	adds	r3, #2
 801484e:	7812      	ldrb	r2, [r2, #0]
 8014850:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014852:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014856:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801485a:	1ad3      	subs	r3, r2, r3
 801485c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801485e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014862:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8014866:	441a      	add	r2, r3
 8014868:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801486c:	3306      	adds	r3, #6
 801486e:	7812      	ldrb	r2, [r2, #0]
 8014870:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8014872:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8014876:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801487a:	4413      	add	r3, r2
 801487c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801487e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8014882:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8014886:	441a      	add	r2, r3
 8014888:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801488c:	3303      	adds	r3, #3
 801488e:	7812      	ldrb	r2, [r2, #0]
 8014890:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8014892:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8014896:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801489a:	1ad3      	subs	r3, r2, r3
 801489c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801489e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80148a2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80148a6:	441a      	add	r2, r3
 80148a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80148ac:	3305      	adds	r3, #5
 80148ae:	7812      	ldrb	r2, [r2, #0]
 80148b0:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80148b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80148b6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80148b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80148bc:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80148c0:	441a      	add	r2, r3
 80148c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80148c6:	3304      	adds	r3, #4
 80148c8:	7812      	ldrb	r2, [r2, #0]
 80148ca:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80148cc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80148d0:	3320      	adds	r3, #32
 80148d2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  for (ctr = 0; ctr < 9; ctr++) {
 80148d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80148da:	3301      	adds	r3, #1
 80148dc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80148e0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80148e4:	2b08      	cmp	r3, #8
 80148e6:	f77f ae5f 	ble.w	80145a8 <jpeg_idct_9x9+0x3dc>
  }
}
 80148ea:	bf00      	nop
 80148ec:	bf00      	nop
 80148ee:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bc90      	pop	{r4, r7}
 80148f6:	4770      	bx	lr
 80148f8:	ffffd8cf 	.word	0xffffd8cf

080148fc <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80148fc:	b490      	push	{r4, r7}
 80148fe:	b0ea      	sub	sp, #424	@ 0x1a8
 8014900:	af00      	add	r7, sp, #0
 8014902:	f507 74d4 	add.w	r4, r7, #424	@ 0x1a8
 8014906:	f5a4 74ce 	sub.w	r4, r4, #412	@ 0x19c
 801490a:	6020      	str	r0, [r4, #0]
 801490c:	f507 70d4 	add.w	r0, r7, #424	@ 0x1a8
 8014910:	f5a0 70d0 	sub.w	r0, r0, #416	@ 0x1a0
 8014914:	6001      	str	r1, [r0, #0]
 8014916:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 801491a:	f5a1 71d2 	sub.w	r1, r1, #420	@ 0x1a4
 801491e:	600a      	str	r2, [r1, #0]
 8014920:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8014924:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8014928:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801492a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 801492e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8014938:	3380      	adds	r3, #128	@ 0x80
 801493a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  int workspace[8*10];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801493e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8014942:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801494c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8014950:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014958:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  wsptr = workspace;
 801495c:	f107 0314 	add.w	r3, r7, #20
 8014960:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014964:	2300      	movs	r3, #0
 8014966:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801496a:	e1d5      	b.n	8014d18 <jpeg_idct_10x10+0x41c>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801496c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014974:	461a      	mov	r2, r3
 8014976:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	fb02 f303 	mul.w	r3, r2, r3
 8014980:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    z3 <<= CONST_BITS;
 8014984:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014988:	035b      	lsls	r3, r3, #13
 801498a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801498e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014992:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8014996:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801499a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801499e:	3340      	adds	r3, #64	@ 0x40
 80149a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149a4:	461a      	mov	r2, r3
 80149a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80149aa:	3380      	adds	r3, #128	@ 0x80
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	fb02 f303 	mul.w	r3, r2, r3
 80149b2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80149b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80149ba:	f242 429d 	movw	r2, #9373	@ 0x249d
 80149be:	fb02 f303 	mul.w	r3, r2, r3
 80149c2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80149c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80149ca:	f640 52fc 	movw	r2, #3580	@ 0xdfc
 80149ce:	fb02 f303 	mul.w	r3, r2, r3
 80149d2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp10 = z3 + z1;
 80149d6:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80149da:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80149de:	4413      	add	r3, r2
 80149e0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    tmp11 = z3 - z2;
 80149e4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80149e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80149ec:	1ad3      	subs	r3, r2, r3
 80149ee:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80149f2:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80149f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80149fa:	1ad3      	subs	r3, r2, r3
 80149fc:	005b      	lsls	r3, r3, #1
 80149fe:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	12db      	asrs	r3, r3, #11
 8014a06:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014a0e:	3320      	adds	r3, #32
 8014a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a14:	461a      	mov	r2, r3
 8014a16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014a1a:	3340      	adds	r3, #64	@ 0x40
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	fb02 f303 	mul.w	r3, r2, r3
 8014a22:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014a26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014a2a:	3360      	adds	r3, #96	@ 0x60
 8014a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a30:	461a      	mov	r2, r3
 8014a32:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014a36:	33c0      	adds	r3, #192	@ 0xc0
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	fb02 f303 	mul.w	r3, r2, r3
 8014a3e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014a42:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8014a46:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014a4a:	4413      	add	r3, r2
 8014a4c:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 8014a50:	fb02 f303 	mul.w	r3, r2, r3
 8014a54:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014a58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014a5c:	f241 0271 	movw	r2, #4209	@ 0x1071
 8014a60:	fb02 f303 	mul.w	r3, r2, r3
 8014a64:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8014a68:	4413      	add	r3, r2
 8014a6a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014a6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014a72:	4ab0      	ldr	r2, [pc, #704]	@ (8014d34 <jpeg_idct_10x10+0x438>)
 8014a74:	fb02 f303 	mul.w	r3, r2, r3
 8014a78:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8014a7c:	4413      	add	r3, r2
 8014a7e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    tmp20 = tmp10 + tmp12;
 8014a82:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8014a86:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    tmp24 = tmp10 - tmp12;
 8014a90:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8014a94:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014a98:	1ad3      	subs	r3, r2, r3
 8014a9a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp21 = tmp11 + tmp13;
 8014a9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8014aa2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014aa6:	4413      	add	r3, r2
 8014aa8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp23 = tmp11 - tmp13;
 8014aac:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8014ab0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014aba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014abe:	3310      	adds	r3, #16
 8014ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014aca:	3320      	adds	r3, #32
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	fb02 f303 	mul.w	r3, r2, r3
 8014ad2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014ad6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014ada:	3330      	adds	r3, #48	@ 0x30
 8014adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014ae6:	3360      	adds	r3, #96	@ 0x60
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	fb02 f303 	mul.w	r3, r2, r3
 8014aee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014af2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014af6:	3350      	adds	r3, #80	@ 0x50
 8014af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014afc:	461a      	mov	r2, r3
 8014afe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014b02:	33a0      	adds	r3, #160	@ 0xa0
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	fb02 f303 	mul.w	r3, r2, r3
 8014b0a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014b0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014b12:	3370      	adds	r3, #112	@ 0x70
 8014b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b18:	461a      	mov	r2, r3
 8014b1a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014b1e:	33e0      	adds	r3, #224	@ 0xe0
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	fb02 f303 	mul.w	r3, r2, r3
 8014b26:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    tmp11 = z2 + z4;
 8014b2a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8014b2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014b32:	4413      	add	r3, r2
 8014b34:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    tmp13 = z2 - z4;
 8014b38:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8014b3c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014b40:	1ad3      	subs	r3, r2, r3
 8014b42:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014b46:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014b4a:	f640 12e3 	movw	r2, #2531	@ 0x9e3
 8014b4e:	fb02 f303 	mul.w	r3, r2, r3
 8014b52:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    z5 = z3 << CONST_BITS;
 8014b56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014b5a:	035b      	lsls	r3, r3, #13
 8014b5c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014b60:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014b64:	f641 626f 	movw	r2, #7791	@ 0x1e6f
 8014b68:	fb02 f303 	mul.w	r3, r2, r3
 8014b6c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z4 = z5 + tmp12;
 8014b70:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8014b74:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014b78:	4413      	add	r3, r2
 8014b7a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014b7e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014b82:	f642 42b3 	movw	r2, #11443	@ 0x2cb3
 8014b86:	fb03 f202 	mul.w	r2, r3, r2
 8014b8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014b8e:	4413      	add	r3, r2
 8014b90:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8014b94:	4413      	add	r3, r2
 8014b96:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014b9a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014b9e:	f240 7214 	movw	r2, #1812	@ 0x714
 8014ba2:	fb03 f202 	mul.w	r2, r3, r2
 8014ba6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014baa:	1ad3      	subs	r3, r2, r3
 8014bac:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8014bb0:	4413      	add	r3, r2
 8014bb2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014bb6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014bba:	f241 22cf 	movw	r2, #4815	@ 0x12cf
 8014bbe:	fb02 f303 	mul.w	r3, r2, r3
 8014bc2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014bc6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8014bca:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014bce:	1ad2      	subs	r2, r2, r3
 8014bd0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014bd4:	031b      	lsls	r3, r3, #12
 8014bd6:	1ad3      	subs	r3, r2, r3
 8014bd8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014bdc:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8014be0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014be4:	1ad2      	subs	r2, r2, r3
 8014be6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014bea:	1ad3      	subs	r3, r2, r3
 8014bec:	009b      	lsls	r3, r3, #2
 8014bee:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014bf2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014bf6:	f642 0253 	movw	r2, #10323	@ 0x2853
 8014bfa:	fb03 f202 	mul.w	r2, r3, r2
 8014bfe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014c02:	1ad2      	subs	r2, r2, r3
 8014c04:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014c08:	1ad3      	subs	r3, r2, r3
 8014c0a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014c0e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014c12:	f241 428c 	movw	r2, #5260	@ 0x148c
 8014c16:	fb03 f202 	mul.w	r2, r3, r2
 8014c1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014c1e:	1ad3      	subs	r3, r2, r3
 8014c20:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8014c24:	4413      	add	r3, r2
 8014c26:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014c2a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8014c2e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8014c32:	4413      	add	r3, r2
 8014c34:	12da      	asrs	r2, r3, #11
 8014c36:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014c3a:	601a      	str	r2, [r3, #0]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014c3c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8014c40:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8014c44:	1ad2      	subs	r2, r2, r3
 8014c46:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014c4a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014c4e:	12d2      	asrs	r2, r2, #11
 8014c50:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014c52:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8014c56:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014c5a:	441a      	add	r2, r3
 8014c5c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014c60:	3320      	adds	r3, #32
 8014c62:	12d2      	asrs	r2, r2, #11
 8014c64:	601a      	str	r2, [r3, #0]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014c66:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8014c6a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014c6e:	1ad2      	subs	r2, r2, r3
 8014c70:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014c74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8014c78:	12d2      	asrs	r2, r2, #11
 8014c7a:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8014c7c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014c80:	3340      	adds	r3, #64	@ 0x40
 8014c82:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8014c86:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8014c8a:	440a      	add	r2, r1
 8014c8c:	601a      	str	r2, [r3, #0]
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8014c8e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014c92:	33e0      	adds	r3, #224	@ 0xe0
 8014c94:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8014c98:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8014c9c:	1a8a      	subs	r2, r1, r2
 8014c9e:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014ca0:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8014ca4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014ca8:	441a      	add	r2, r3
 8014caa:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014cae:	3360      	adds	r3, #96	@ 0x60
 8014cb0:	12d2      	asrs	r2, r2, #11
 8014cb2:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014cb4:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8014cb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014cbc:	1ad2      	subs	r2, r2, r3
 8014cbe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014cc2:	33c0      	adds	r3, #192	@ 0xc0
 8014cc4:	12d2      	asrs	r2, r2, #11
 8014cc6:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014cc8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8014ccc:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014cd0:	441a      	add	r2, r3
 8014cd2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014cd6:	3380      	adds	r3, #128	@ 0x80
 8014cd8:	12d2      	asrs	r2, r2, #11
 8014cda:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014cdc:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8014ce0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8014ce4:	1ad2      	subs	r2, r2, r3
 8014ce6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014cea:	33a0      	adds	r3, #160	@ 0xa0
 8014cec:	12d2      	asrs	r2, r2, #11
 8014cee:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014cf0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8014cfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014cfe:	3302      	adds	r3, #2
 8014d00:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8014d04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014d08:	3304      	adds	r3, #4
 8014d0a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8014d0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014d12:	3304      	adds	r3, #4
 8014d14:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8014d18:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8014d1c:	2b07      	cmp	r3, #7
 8014d1e:	f77f ae25 	ble.w	801496c <jpeg_idct_10x10+0x70>
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 8014d22:	f107 0314 	add.w	r3, r7, #20
 8014d26:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  for (ctr = 0; ctr < 10; ctr++) {
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8014d30:	e1d4      	b.n	80150dc <jpeg_idct_10x10+0x7e0>
 8014d32:	bf00      	nop
 8014d34:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 8014d38:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8014d3c:	009b      	lsls	r3, r3, #2
 8014d3e:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8014d42:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8014d46:	6812      	ldr	r2, [r2, #0]
 8014d48:	4413      	add	r3, r2
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8014d50:	4413      	add	r3, r2
 8014d52:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014d56:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	3310      	adds	r3, #16
 8014d5e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    z3 <<= CONST_BITS;
 8014d62:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014d66:	035b      	lsls	r3, r3, #13
 8014d68:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    z4 = (INT32) wsptr[4];
 8014d6c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014d70:	3310      	adds	r3, #16
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014d78:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014d7c:	f242 429d 	movw	r2, #9373	@ 0x249d
 8014d80:	fb02 f303 	mul.w	r3, r2, r3
 8014d84:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014d88:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014d8c:	f640 52fc 	movw	r2, #3580	@ 0xdfc
 8014d90:	fb02 f303 	mul.w	r3, r2, r3
 8014d94:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp10 = z3 + z1;
 8014d98:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8014d9c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014da0:	4413      	add	r3, r2
 8014da2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    tmp11 = z3 - z2;
 8014da6:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8014daa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178

    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8014db4:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8014db8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014dbc:	1ad3      	subs	r3, r2, r3
 8014dbe:	005b      	lsls	r3, r3, #1
 8014dc0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8014dc4:	1ad3      	subs	r3, r2, r3
 8014dc6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174

    z2 = (INT32) wsptr[2];
 8014dca:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014dce:	3308      	adds	r3, #8
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z3 = (INT32) wsptr[6];
 8014dd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014dda:	3318      	adds	r3, #24
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014de2:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8014de6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014dea:	4413      	add	r3, r2
 8014dec:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 8014df0:	fb02 f303 	mul.w	r3, r2, r3
 8014df4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014df8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014dfc:	f241 0271 	movw	r2, #4209	@ 0x1071
 8014e00:	fb02 f303 	mul.w	r3, r2, r3
 8014e04:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8014e08:	4413      	add	r3, r2
 8014e0a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014e0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014e12:	4ab8      	ldr	r2, [pc, #736]	@ (80150f4 <jpeg_idct_10x10+0x7f8>)
 8014e14:	fb02 f303 	mul.w	r3, r2, r3
 8014e18:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8014e1c:	4413      	add	r3, r2
 8014e1e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    tmp20 = tmp10 + tmp12;
 8014e22:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8014e26:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014e2a:	4413      	add	r3, r2
 8014e2c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    tmp24 = tmp10 - tmp12;
 8014e30:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8014e34:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014e38:	1ad3      	subs	r3, r2, r3
 8014e3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp21 = tmp11 + tmp13;
 8014e3e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8014e42:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014e46:	4413      	add	r3, r2
 8014e48:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp23 = tmp11 - tmp13;
 8014e4c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8014e50:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014e54:	1ad3      	subs	r3, r2, r3
 8014e56:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8014e5a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014e5e:	3304      	adds	r3, #4
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    z2 = (INT32) wsptr[3];
 8014e66:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014e6a:	330c      	adds	r3, #12
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z3 = (INT32) wsptr[5];
 8014e72:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014e76:	3314      	adds	r3, #20
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    z3 <<= CONST_BITS;
 8014e7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014e82:	035b      	lsls	r3, r3, #13
 8014e84:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    z4 = (INT32) wsptr[7];
 8014e88:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8014e8c:	331c      	adds	r3, #28
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    tmp11 = z2 + z4;
 8014e94:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8014e98:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014e9c:	4413      	add	r3, r2
 8014e9e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    tmp13 = z2 - z4;
 8014ea2:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8014ea6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014eaa:	1ad3      	subs	r3, r2, r3
 8014eac:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014eb0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014eb4:	f640 12e3 	movw	r2, #2531	@ 0x9e3
 8014eb8:	fb02 f303 	mul.w	r3, r2, r3
 8014ebc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014ec0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014ec4:	f641 626f 	movw	r2, #7791	@ 0x1e6f
 8014ec8:	fb02 f303 	mul.w	r3, r2, r3
 8014ecc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z4 = z3 + tmp12;
 8014ed0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8014ed4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014ed8:	4413      	add	r3, r2
 8014eda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014ede:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014ee2:	f642 42b3 	movw	r2, #11443	@ 0x2cb3
 8014ee6:	fb03 f202 	mul.w	r2, r3, r2
 8014eea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014eee:	4413      	add	r3, r2
 8014ef0:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8014ef4:	4413      	add	r3, r2
 8014ef6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014efa:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014efe:	f240 7214 	movw	r2, #1812	@ 0x714
 8014f02:	fb03 f202 	mul.w	r2, r3, r2
 8014f06:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014f0a:	1ad3      	subs	r3, r2, r3
 8014f0c:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8014f10:	4413      	add	r3, r2
 8014f12:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014f16:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014f1a:	f241 22cf 	movw	r2, #4815	@ 0x12cf
 8014f1e:	fb02 f303 	mul.w	r3, r2, r3
 8014f22:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014f26:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8014f2a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8014f2e:	1ad2      	subs	r2, r2, r3
 8014f30:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014f34:	031b      	lsls	r3, r3, #12
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8014f3c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8014f40:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8014f44:	1ad3      	subs	r3, r2, r3
 8014f46:	035a      	lsls	r2, r3, #13
 8014f48:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014f4c:	1ad3      	subs	r3, r2, r3
 8014f4e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014f52:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014f56:	f642 0253 	movw	r2, #10323	@ 0x2853
 8014f5a:	fb03 f202 	mul.w	r2, r3, r2
 8014f5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014f62:	1ad2      	subs	r2, r2, r3
 8014f64:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014f6e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8014f72:	f241 428c 	movw	r2, #5260	@ 0x148c
 8014f76:	fb03 f202 	mul.w	r2, r3, r2
 8014f7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8014f84:	4413      	add	r3, r2
 8014f86:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014f8a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8014f8e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8014f92:	4413      	add	r3, r2
 8014f94:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8014f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014f9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8014f9e:	4413      	add	r3, r2
 8014fa0:	781a      	ldrb	r2, [r3, #0]
 8014fa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8014fa6:	701a      	strb	r2, [r3, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014fa8:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8014fac:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8014fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014fb8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8014fbc:	441a      	add	r2, r3
 8014fbe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8014fc2:	3309      	adds	r3, #9
 8014fc4:	7812      	ldrb	r2, [r2, #0]
 8014fc6:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014fc8:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8014fcc:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014fd0:	4413      	add	r3, r2
 8014fd2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8014fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014fd8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8014fdc:	441a      	add	r2, r3
 8014fde:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	7812      	ldrb	r2, [r2, #0]
 8014fe6:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014fe8:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8014fec:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8014ff0:	1ad3      	subs	r3, r2, r3
 8014ff2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8014ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014ff8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8014ffc:	441a      	add	r2, r3
 8014ffe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015002:	3308      	adds	r3, #8
 8015004:	7812      	ldrb	r2, [r2, #0]
 8015006:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015008:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801500c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8015010:	4413      	add	r3, r2
 8015012:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8015014:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015018:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801501c:	441a      	add	r2, r3
 801501e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015022:	3302      	adds	r3, #2
 8015024:	7812      	ldrb	r2, [r2, #0]
 8015026:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015028:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801502c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8015030:	1ad3      	subs	r3, r2, r3
 8015032:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8015034:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015038:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801503c:	441a      	add	r2, r3
 801503e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015042:	3307      	adds	r3, #7
 8015044:	7812      	ldrb	r2, [r2, #0]
 8015046:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8015048:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801504c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8015050:	4413      	add	r3, r2
 8015052:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8015054:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8015058:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801505c:	441a      	add	r2, r3
 801505e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015062:	3303      	adds	r3, #3
 8015064:	7812      	ldrb	r2, [r2, #0]
 8015066:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015068:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801506c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8015074:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015078:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801507c:	441a      	add	r2, r3
 801507e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015082:	3306      	adds	r3, #6
 8015084:	7812      	ldrb	r2, [r2, #0]
 8015086:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015088:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801508c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8015090:	4413      	add	r3, r2
 8015092:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8015094:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015098:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801509c:	441a      	add	r2, r3
 801509e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80150a2:	3304      	adds	r3, #4
 80150a4:	7812      	ldrb	r2, [r2, #0]
 80150a6:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80150a8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80150ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80150b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80150b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80150bc:	441a      	add	r2, r3
 80150be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80150c2:	3305      	adds	r3, #5
 80150c4:	7812      	ldrb	r2, [r2, #0]
 80150c6:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80150c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80150cc:	3320      	adds	r3, #32
 80150ce:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  for (ctr = 0; ctr < 10; ctr++) {
 80150d2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80150d6:	3301      	adds	r3, #1
 80150d8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80150dc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80150e0:	2b09      	cmp	r3, #9
 80150e2:	f77f ae29 	ble.w	8014d38 <jpeg_idct_10x10+0x43c>
  }
}
 80150e6:	bf00      	nop
 80150e8:	bf00      	nop
 80150ea:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bc90      	pop	{r4, r7}
 80150f2:	4770      	bx	lr
 80150f4:	ffffba5c 	.word	0xffffba5c

080150f8 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80150f8:	b490      	push	{r4, r7}
 80150fa:	b0f2      	sub	sp, #456	@ 0x1c8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	f507 74e4 	add.w	r4, r7, #456	@ 0x1c8
 8015102:	f5a4 74de 	sub.w	r4, r4, #444	@ 0x1bc
 8015106:	6020      	str	r0, [r4, #0]
 8015108:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 801510c:	f5a0 70e0 	sub.w	r0, r0, #448	@ 0x1c0
 8015110:	6001      	str	r1, [r0, #0]
 8015112:	f507 71e4 	add.w	r1, r7, #456	@ 0x1c8
 8015116:	f5a1 71e2 	sub.w	r1, r1, #452	@ 0x1c4
 801511a:	600a      	str	r2, [r1, #0]
 801511c:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8015120:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8015124:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015126:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801512a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8015134:	3380      	adds	r3, #128	@ 0x80
 8015136:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  int workspace[8*11];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801513a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801513e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015148:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 801514c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015154:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
  wsptr = workspace;
 8015158:	f107 0314 	add.w	r3, r7, #20
 801515c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015160:	2300      	movs	r3, #0
 8015162:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8015166:	e22b      	b.n	80155c0 <jpeg_idct_11x11+0x4c8>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015168:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801516c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015170:	461a      	mov	r2, r3
 8015172:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	fb02 f303 	mul.w	r3, r2, r3
 801517c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    tmp10 <<= CONST_BITS;
 8015180:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8015184:	035b      	lsls	r3, r3, #13
 8015186:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    /* Add fudge factor here for final descale. */
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801518a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801518e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8015192:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015196:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801519a:	3320      	adds	r3, #32
 801519c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151a0:	461a      	mov	r2, r3
 80151a2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80151a6:	3340      	adds	r3, #64	@ 0x40
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	fb02 f303 	mul.w	r3, r2, r3
 80151ae:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80151b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80151b6:	3340      	adds	r3, #64	@ 0x40
 80151b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151bc:	461a      	mov	r2, r3
 80151be:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80151c2:	3380      	adds	r3, #128	@ 0x80
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	fb02 f303 	mul.w	r3, r2, r3
 80151ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80151ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80151d2:	3360      	adds	r3, #96	@ 0x60
 80151d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151d8:	461a      	mov	r2, r3
 80151da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80151de:	33c0      	adds	r3, #192	@ 0xc0
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	fb02 f303 	mul.w	r3, r2, r3
 80151e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80151ea:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80151ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80151f2:	1ad3      	subs	r3, r2, r3
 80151f4:	f245 127e 	movw	r2, #20862	@ 0x517e
 80151f8:	fb02 f303 	mul.w	r3, r2, r3
 80151fc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8015200:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8015204:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	f640 52c9 	movw	r2, #3529	@ 0xdc9
 801520e:	fb02 f303 	mul.w	r3, r2, r3
 8015212:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    z4 = z1 + z3;
 8015216:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801521a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801521e:	4413      	add	r3, r2
 8015220:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 8015224:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015228:	4aec      	ldr	r2, [pc, #944]	@ (80155dc <jpeg_idct_11x11+0x4e4>)
 801522a:	fb02 f303 	mul.w	r3, r2, r3
 801522e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    z4 -= z2;
 8015232:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8015236:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8015240:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015244:	f642 326c 	movw	r2, #11116	@ 0x2b6c
 8015248:	fb02 f303 	mul.w	r3, r2, r3
 801524c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8015250:	4413      	add	r3, r2
 8015252:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    tmp21 = tmp20 + tmp23 + tmp25 -
 8015256:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 801525a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801525e:	441a      	add	r2, r3
 8015260:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8015264:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 8015266:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801526a:	49dd      	ldr	r1, [pc, #884]	@ (80155e0 <jpeg_idct_11x11+0x4e8>)
 801526c:	fb01 f303 	mul.w	r3, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8015270:	4413      	add	r3, r2
 8015272:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8015276:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801527a:	f244 32b5 	movw	r2, #17333	@ 0x43b5
 801527e:	fb03 f202 	mul.w	r2, r3, r2
 8015282:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8015286:	4413      	add	r3, r2
 8015288:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 801528c:	4413      	add	r3, r2
 801528e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8015292:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8015296:	4ad3      	ldr	r2, [pc, #844]	@ (80155e4 <jpeg_idct_11x11+0x4ec>)
 8015298:	fb03 f202 	mul.w	r2, r3, r2
 801529c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80152a0:	4413      	add	r3, r2
 80152a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80152a6:	4413      	add	r3, r2
 80152a8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    tmp24 += tmp25;
 80152ac:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80152b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80152b4:	4413      	add	r3, r2
 80152b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80152ba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80152be:	4aca      	ldr	r2, [pc, #808]	@ (80155e8 <jpeg_idct_11x11+0x4f0>)
 80152c0:	fb02 f303 	mul.w	r3, r2, r3
 80152c4:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80152c8:	4413      	add	r3, r2
 80152ca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80152ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80152d2:	f643 6239 	movw	r2, #15929	@ 0x3e39
 80152d6:	fb03 f202 	mul.w	r2, r3, r2
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80152da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80152de:	49c3      	ldr	r1, [pc, #780]	@ (80155ec <jpeg_idct_11x11+0x4f4>)
 80152e0:	fb01 f303 	mul.w	r3, r1, r3
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80152e4:	4413      	add	r3, r2
 80152e6:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80152ea:	4413      	add	r3, r2
 80152ec:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80152f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80152f4:	f46f 5235 	mvn.w	r2, #11584	@ 0x2d40
 80152f8:	fb02 f303 	mul.w	r3, r2, r3
 80152fc:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8015300:	4413      	add	r3, r2
 8015302:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015306:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801530a:	3310      	adds	r3, #16
 801530c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015310:	461a      	mov	r2, r3
 8015312:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015316:	3320      	adds	r3, #32
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	fb02 f303 	mul.w	r3, r2, r3
 801531e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015322:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8015326:	3330      	adds	r3, #48	@ 0x30
 8015328:	f9b3 3000 	ldrsh.w	r3, [r3]
 801532c:	461a      	mov	r2, r3
 801532e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015332:	3360      	adds	r3, #96	@ 0x60
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	fb02 f303 	mul.w	r3, r2, r3
 801533a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801533e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8015342:	3350      	adds	r3, #80	@ 0x50
 8015344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015348:	461a      	mov	r2, r3
 801534a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801534e:	33a0      	adds	r3, #160	@ 0xa0
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	fb02 f303 	mul.w	r3, r2, r3
 8015356:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801535a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801535e:	3370      	adds	r3, #112	@ 0x70
 8015360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015364:	461a      	mov	r2, r3
 8015366:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801536a:	33e0      	adds	r3, #224	@ 0xe0
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	fb02 f303 	mul.w	r3, r2, r3
 8015372:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    tmp11 = z1 + z2;
 8015376:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801537a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801537e:	4413      	add	r3, r2
 8015380:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8015384:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8015388:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801538c:	441a      	add	r2, r3
 801538e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015392:	4413      	add	r3, r2
 8015394:	f44f 624c 	mov.w	r2, #3264	@ 0xcc0
 8015398:	fb02 f303 	mul.w	r3, r2, r3
 801539c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80153a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80153a4:	f641 426a 	movw	r2, #7274	@ 0x1c6a
 80153a8:	fb02 f303 	mul.w	r3, r2, r3
 80153ac:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80153b0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80153b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80153b8:	4413      	add	r3, r2
 80153ba:	f241 5274 	movw	r2, #5492	@ 0x1574
 80153be:	fb02 f303 	mul.w	r3, r2, r3
 80153c2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80153c6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80153ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80153ce:	4413      	add	r3, r2
 80153d0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80153d4:	fb02 f303 	mul.w	r3, r2, r3
 80153d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80153dc:	4413      	add	r3, r2
 80153de:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    tmp10 = tmp11 + tmp12 + tmp13 -
 80153e2:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80153e6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80153ea:	441a      	add	r2, r3
 80153ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80153f0:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 80153f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80153f6:	497e      	ldr	r1, [pc, #504]	@ (80155f0 <jpeg_idct_11x11+0x4f8>)
 80153f8:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 80153fc:	4413      	add	r3, r2
 80153fe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8015402:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8015406:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801540a:	4413      	add	r3, r2
 801540c:	4a79      	ldr	r2, [pc, #484]	@ (80155f4 <jpeg_idct_11x11+0x4fc>)
 801540e:	fb02 f303 	mul.w	r3, r2, r3
 8015412:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8015416:	4413      	add	r3, r2
 8015418:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801541c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8015420:	f244 2258 	movw	r2, #16984	@ 0x4258
 8015424:	fb03 f202 	mul.w	r2, r3, r2
 8015428:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801542c:	4413      	add	r3, r2
 801542e:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8015432:	4413      	add	r3, r2
 8015434:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8015438:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801543c:	4a6e      	ldr	r2, [pc, #440]	@ (80155f8 <jpeg_idct_11x11+0x500>)
 801543e:	fb03 f202 	mul.w	r2, r3, r2
 8015442:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8015446:	4413      	add	r3, r2
 8015448:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801544c:	4413      	add	r3, r2
 801544e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8015452:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8015456:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801545a:	4413      	add	r3, r2
 801545c:	4a67      	ldr	r2, [pc, #412]	@ (80155fc <jpeg_idct_11x11+0x504>)
 801545e:	fb02 f303 	mul.w	r3, r2, r3
 8015462:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    tmp11 += z1;
 8015466:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801546a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801546e:	4413      	add	r3, r2
 8015470:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8015474:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015478:	f244 3247 	movw	r2, #17223	@ 0x4347
 801547c:	fb03 f202 	mul.w	r2, r3, r2
 8015480:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8015484:	4413      	add	r3, r2
 8015486:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801548a:	4413      	add	r3, r2
 801548c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8015490:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8015494:	4a5a      	ldr	r2, [pc, #360]	@ (8015600 <jpeg_idct_11x11+0x508>)
 8015496:	fb03 f202 	mul.w	r2, r3, r2
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801549a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801549e:	f242 010b 	movw	r1, #8203	@ 0x200b
 80154a2:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80154a6:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 80154a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80154ac:	4955      	ldr	r1, [pc, #340]	@ (8015604 <jpeg_idct_11x11+0x50c>)
 80154ae:	fb01 f303 	mul.w	r3, r1, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80154b2:	4413      	add	r3, r2
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80154b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80154b8:	4413      	add	r3, r2
 80154ba:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80154be:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80154c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80154c6:	4413      	add	r3, r2
 80154c8:	12da      	asrs	r2, r3, #11
 80154ca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80154ce:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80154d0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80154d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80154d8:	1ad2      	subs	r2, r2, r3
 80154da:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80154de:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80154e2:	12d2      	asrs	r2, r2, #11
 80154e4:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80154e6:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 80154ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80154ee:	441a      	add	r2, r3
 80154f0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80154f4:	3320      	adds	r3, #32
 80154f6:	12d2      	asrs	r2, r2, #11
 80154f8:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80154fa:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 80154fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8015502:	1ad2      	subs	r2, r2, r3
 8015504:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015508:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801550c:	12d2      	asrs	r2, r2, #11
 801550e:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015510:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8015514:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8015518:	441a      	add	r2, r3
 801551a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801551e:	3340      	adds	r3, #64	@ 0x40
 8015520:	12d2      	asrs	r2, r2, #11
 8015522:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015524:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8015528:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801552c:	1ad2      	subs	r2, r2, r3
 801552e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015532:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015536:	12d2      	asrs	r2, r2, #11
 8015538:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801553a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801553e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8015542:	441a      	add	r2, r3
 8015544:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015548:	3360      	adds	r3, #96	@ 0x60
 801554a:	12d2      	asrs	r2, r2, #11
 801554c:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801554e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8015552:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8015556:	1ad2      	subs	r2, r2, r3
 8015558:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801555c:	33e0      	adds	r3, #224	@ 0xe0
 801555e:	12d2      	asrs	r2, r2, #11
 8015560:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015562:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8015566:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801556a:	441a      	add	r2, r3
 801556c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015570:	3380      	adds	r3, #128	@ 0x80
 8015572:	12d2      	asrs	r2, r2, #11
 8015574:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015576:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801557a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801557e:	1ad2      	subs	r2, r2, r3
 8015580:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015584:	33c0      	adds	r3, #192	@ 0xc0
 8015586:	12d2      	asrs	r2, r2, #11
 8015588:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 801558a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801558e:	33a0      	adds	r3, #160	@ 0xa0
 8015590:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8015594:	12d2      	asrs	r2, r2, #11
 8015596:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015598:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801559c:	3301      	adds	r3, #1
 801559e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80155a2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80155a6:	3302      	adds	r3, #2
 80155a8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80155ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80155b0:	3304      	adds	r3, #4
 80155b2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80155b6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80155ba:	3304      	adds	r3, #4
 80155bc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80155c0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80155c4:	2b07      	cmp	r3, #7
 80155c6:	f77f adcf 	ble.w	8015168 <jpeg_idct_11x11+0x70>
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 80155ca:	f107 0314 	add.w	r3, r7, #20
 80155ce:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  for (ctr = 0; ctr < 11; ctr++) {
 80155d2:	2300      	movs	r3, #0
 80155d4:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80155d8:	e25a      	b.n	8015a90 <jpeg_idct_11x11+0x998>
 80155da:	bf00      	nop
 80155dc:	ffffdb05 	.word	0xffffdb05
 80155e0:	ffffc5b4 	.word	0xffffc5b4
 80155e4:	ffffcf91 	.word	0xffffcf91
 80155e8:	ffffe6c3 	.word	0xffffe6c3
 80155ec:	ffffd37d 	.word	0xffffd37d
 80155f0:	ffffe276 	.word	0xffffe276
 80155f4:	ffffdac9 	.word	0xffffdac9
 80155f8:	ffffd9da 	.word	0xffffd9da
 80155fc:	ffffc675 	.word	0xffffc675
 8015600:	ffffd10d 	.word	0xffffd10d
 8015604:	ffffca16 	.word	0xffffca16
    outptr = output_buf[ctr] + output_col;
 8015608:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801560c:	009b      	lsls	r3, r3, #2
 801560e:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8015612:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8015616:	6812      	ldr	r2, [r2, #0]
 8015618:	4413      	add	r3, r2
 801561a:	681a      	ldr	r2, [r3, #0]
 801561c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8015620:	4413      	add	r3, r2
 8015622:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015626:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	3310      	adds	r3, #16
 801562e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    tmp10 <<= CONST_BITS;
 8015632:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8015636:	035b      	lsls	r3, r3, #13
 8015638:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

    z1 = (INT32) wsptr[2];
 801563c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015640:	3308      	adds	r3, #8
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    z2 = (INT32) wsptr[4];
 8015648:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801564c:	3310      	adds	r3, #16
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    z3 = (INT32) wsptr[6];
 8015654:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015658:	3318      	adds	r3, #24
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8015660:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8015664:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	f245 127e 	movw	r2, #20862	@ 0x517e
 801566e:	fb02 f303 	mul.w	r3, r2, r3
 8015672:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8015676:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801567a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801567e:	1ad3      	subs	r3, r2, r3
 8015680:	f640 52c9 	movw	r2, #3529	@ 0xdc9
 8015684:	fb02 f303 	mul.w	r3, r2, r3
 8015688:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    z4 = z1 + z3;
 801568c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8015690:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8015694:	4413      	add	r3, r2
 8015696:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 801569a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801569e:	4af1      	ldr	r2, [pc, #964]	@ (8015a64 <jpeg_idct_11x11+0x96c>)
 80156a0:	fb02 f303 	mul.w	r3, r2, r3
 80156a4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    z4 -= z2;
 80156a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80156ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80156b0:	1ad3      	subs	r3, r2, r3
 80156b2:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80156b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80156ba:	f642 326c 	movw	r2, #11116	@ 0x2b6c
 80156be:	fb02 f303 	mul.w	r3, r2, r3
 80156c2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80156c6:	4413      	add	r3, r2
 80156c8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    tmp21 = tmp20 + tmp23 + tmp25 -
 80156cc:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80156d0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80156d4:	441a      	add	r2, r3
 80156d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80156da:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 80156dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80156e0:	49e1      	ldr	r1, [pc, #900]	@ (8015a68 <jpeg_idct_11x11+0x970>)
 80156e2:	fb01 f303 	mul.w	r3, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80156e6:	4413      	add	r3, r2
 80156e8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80156ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80156f0:	f244 32b5 	movw	r2, #17333	@ 0x43b5
 80156f4:	fb03 f202 	mul.w	r2, r3, r2
 80156f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80156fc:	4413      	add	r3, r2
 80156fe:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8015702:	4413      	add	r3, r2
 8015704:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8015708:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801570c:	4ad7      	ldr	r2, [pc, #860]	@ (8015a6c <jpeg_idct_11x11+0x974>)
 801570e:	fb03 f202 	mul.w	r2, r3, r2
 8015712:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8015716:	4413      	add	r3, r2
 8015718:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801571c:	4413      	add	r3, r2
 801571e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    tmp24 += tmp25;
 8015722:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8015726:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801572a:	4413      	add	r3, r2
 801572c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8015730:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8015734:	4ace      	ldr	r2, [pc, #824]	@ (8015a70 <jpeg_idct_11x11+0x978>)
 8015736:	fb02 f303 	mul.w	r3, r2, r3
 801573a:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801573e:	4413      	add	r3, r2
 8015740:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8015744:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8015748:	f643 6239 	movw	r2, #15929	@ 0x3e39
 801574c:	fb03 f202 	mul.w	r2, r3, r2
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8015750:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8015754:	49c7      	ldr	r1, [pc, #796]	@ (8015a74 <jpeg_idct_11x11+0x97c>)
 8015756:	fb01 f303 	mul.w	r3, r1, r3
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801575a:	4413      	add	r3, r2
 801575c:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8015760:	4413      	add	r3, r2
 8015762:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8015766:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801576a:	f46f 5235 	mvn.w	r2, #11584	@ 0x2d40
 801576e:	fb02 f303 	mul.w	r3, r2, r3
 8015772:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8015776:	4413      	add	r3, r2
 8015778:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801577c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015780:	3304      	adds	r3, #4
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    z2 = (INT32) wsptr[3];
 8015788:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801578c:	330c      	adds	r3, #12
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    z3 = (INT32) wsptr[5];
 8015794:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015798:	3314      	adds	r3, #20
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    z4 = (INT32) wsptr[7];
 80157a0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80157a4:	331c      	adds	r3, #28
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    tmp11 = z1 + z2;
 80157ac:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80157b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80157b4:	4413      	add	r3, r2
 80157b6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80157ba:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80157be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80157c2:	441a      	add	r2, r3
 80157c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80157c8:	4413      	add	r3, r2
 80157ca:	f44f 624c 	mov.w	r2, #3264	@ 0xcc0
 80157ce:	fb02 f303 	mul.w	r3, r2, r3
 80157d2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80157d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80157da:	f641 426a 	movw	r2, #7274	@ 0x1c6a
 80157de:	fb02 f303 	mul.w	r3, r2, r3
 80157e2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80157e6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80157ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80157ee:	4413      	add	r3, r2
 80157f0:	f241 5274 	movw	r2, #5492	@ 0x1574
 80157f4:	fb02 f303 	mul.w	r3, r2, r3
 80157f8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80157fc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8015800:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015804:	4413      	add	r3, r2
 8015806:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801580a:	fb02 f303 	mul.w	r3, r2, r3
 801580e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8015812:	4413      	add	r3, r2
 8015814:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    tmp10 = tmp11 + tmp12 + tmp13 -
 8015818:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801581c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8015820:	441a      	add	r2, r3
 8015822:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8015826:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 8015828:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801582c:	4992      	ldr	r1, [pc, #584]	@ (8015a78 <jpeg_idct_11x11+0x980>)
 801582e:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8015832:	4413      	add	r3, r2
 8015834:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8015838:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801583c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8015840:	4413      	add	r3, r2
 8015842:	4a8e      	ldr	r2, [pc, #568]	@ (8015a7c <jpeg_idct_11x11+0x984>)
 8015844:	fb02 f303 	mul.w	r3, r2, r3
 8015848:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 801584c:	4413      	add	r3, r2
 801584e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8015852:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8015856:	f244 2258 	movw	r2, #16984	@ 0x4258
 801585a:	fb03 f202 	mul.w	r2, r3, r2
 801585e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8015862:	4413      	add	r3, r2
 8015864:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8015868:	4413      	add	r3, r2
 801586a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801586e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8015872:	4a83      	ldr	r2, [pc, #524]	@ (8015a80 <jpeg_idct_11x11+0x988>)
 8015874:	fb03 f202 	mul.w	r2, r3, r2
 8015878:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801587c:	4413      	add	r3, r2
 801587e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8015882:	4413      	add	r3, r2
 8015884:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8015888:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801588c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015890:	4413      	add	r3, r2
 8015892:	4a7c      	ldr	r2, [pc, #496]	@ (8015a84 <jpeg_idct_11x11+0x98c>)
 8015894:	fb02 f303 	mul.w	r3, r2, r3
 8015898:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    tmp11 += z1;
 801589c:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80158a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80158a4:	4413      	add	r3, r2
 80158a6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80158aa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80158ae:	f244 3247 	movw	r2, #17223	@ 0x4347
 80158b2:	fb03 f202 	mul.w	r2, r3, r2
 80158b6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80158ba:	4413      	add	r3, r2
 80158bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80158c0:	4413      	add	r3, r2
 80158c2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80158c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80158ca:	4a6f      	ldr	r2, [pc, #444]	@ (8015a88 <jpeg_idct_11x11+0x990>)
 80158cc:	fb03 f202 	mul.w	r2, r3, r2
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80158d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80158d4:	f242 010b 	movw	r1, #8203	@ 0x200b
 80158d8:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80158dc:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 80158de:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80158e2:	496a      	ldr	r1, [pc, #424]	@ (8015a8c <jpeg_idct_11x11+0x994>)
 80158e4:	fb01 f303 	mul.w	r3, r1, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80158e8:	4413      	add	r3, r2
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80158ea:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80158ee:	4413      	add	r3, r2
 80158f0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80158f4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80158f8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80158fc:	4413      	add	r3, r2
 80158fe:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015900:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015904:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015908:	4413      	add	r3, r2
 801590a:	781a      	ldrb	r2, [r3, #0]
 801590c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8015910:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015912:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8015916:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801591a:	1ad3      	subs	r3, r2, r3
 801591c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801591e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015922:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015926:	441a      	add	r2, r3
 8015928:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801592c:	330a      	adds	r3, #10
 801592e:	7812      	ldrb	r2, [r2, #0]
 8015930:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015932:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8015936:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801593a:	4413      	add	r3, r2
 801593c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801593e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015942:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015946:	441a      	add	r2, r3
 8015948:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801594c:	3301      	adds	r3, #1
 801594e:	7812      	ldrb	r2, [r2, #0]
 8015950:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015952:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8015956:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801595a:	1ad3      	subs	r3, r2, r3
 801595c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801595e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015962:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015966:	441a      	add	r2, r3
 8015968:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801596c:	3309      	adds	r3, #9
 801596e:	7812      	ldrb	r2, [r2, #0]
 8015970:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015972:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8015976:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801597a:	4413      	add	r3, r2
 801597c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801597e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015982:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015986:	441a      	add	r2, r3
 8015988:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801598c:	3302      	adds	r3, #2
 801598e:	7812      	ldrb	r2, [r2, #0]
 8015990:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015992:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8015996:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801599a:	1ad3      	subs	r3, r2, r3
 801599c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801599e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80159a2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80159a6:	441a      	add	r2, r3
 80159a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80159ac:	3308      	adds	r3, #8
 80159ae:	7812      	ldrb	r2, [r2, #0]
 80159b0:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80159b2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80159b6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80159ba:	4413      	add	r3, r2
 80159bc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80159be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80159c2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80159c6:	441a      	add	r2, r3
 80159c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80159cc:	3303      	adds	r3, #3
 80159ce:	7812      	ldrb	r2, [r2, #0]
 80159d0:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80159d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80159d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80159da:	1ad3      	subs	r3, r2, r3
 80159dc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80159de:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80159e2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80159e6:	441a      	add	r2, r3
 80159e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80159ec:	3307      	adds	r3, #7
 80159ee:	7812      	ldrb	r2, [r2, #0]
 80159f0:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80159f2:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80159f6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80159fa:	4413      	add	r3, r2
 80159fc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80159fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015a02:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015a06:	441a      	add	r2, r3
 8015a08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8015a0c:	3304      	adds	r3, #4
 8015a0e:	7812      	ldrb	r2, [r2, #0]
 8015a10:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015a12:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8015a16:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8015a1a:	1ad3      	subs	r3, r2, r3
 8015a1c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015a22:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015a26:	441a      	add	r2, r3
 8015a28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8015a2c:	3306      	adds	r3, #6
 8015a2e:	7812      	ldrb	r2, [r2, #0]
 8015a30:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8015a32:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8015a36:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8015a3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015a40:	441a      	add	r2, r3
 8015a42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8015a46:	3305      	adds	r3, #5
 8015a48:	7812      	ldrb	r2, [r2, #0]
 8015a4a:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8015a4c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015a50:	3320      	adds	r3, #32
 8015a52:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
  for (ctr = 0; ctr < 11; ctr++) {
 8015a56:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015a5a:	3301      	adds	r3, #1
 8015a5c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8015a60:	e016      	b.n	8015a90 <jpeg_idct_11x11+0x998>
 8015a62:	bf00      	nop
 8015a64:	ffffdb05 	.word	0xffffdb05
 8015a68:	ffffc5b4 	.word	0xffffc5b4
 8015a6c:	ffffcf91 	.word	0xffffcf91
 8015a70:	ffffe6c3 	.word	0xffffe6c3
 8015a74:	ffffd37d 	.word	0xffffd37d
 8015a78:	ffffe276 	.word	0xffffe276
 8015a7c:	ffffdac9 	.word	0xffffdac9
 8015a80:	ffffd9da 	.word	0xffffd9da
 8015a84:	ffffc675 	.word	0xffffc675
 8015a88:	ffffd10d 	.word	0xffffd10d
 8015a8c:	ffffca16 	.word	0xffffca16
 8015a90:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015a94:	2b0a      	cmp	r3, #10
 8015a96:	f77f adb7 	ble.w	8015608 <jpeg_idct_11x11+0x510>
  }
}
 8015a9a:	bf00      	nop
 8015a9c:	bf00      	nop
 8015a9e:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bc90      	pop	{r4, r7}
 8015aa6:	4770      	bx	lr

08015aa8 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015aa8:	b490      	push	{r4, r7}
 8015aaa:	b0fa      	sub	sp, #488	@ 0x1e8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	f507 74f4 	add.w	r4, r7, #488	@ 0x1e8
 8015ab2:	f5a4 74ee 	sub.w	r4, r4, #476	@ 0x1dc
 8015ab6:	6020      	str	r0, [r4, #0]
 8015ab8:	f507 70f4 	add.w	r0, r7, #488	@ 0x1e8
 8015abc:	f5a0 70f0 	sub.w	r0, r0, #480	@ 0x1e0
 8015ac0:	6001      	str	r1, [r0, #0]
 8015ac2:	f507 71f4 	add.w	r1, r7, #488	@ 0x1e8
 8015ac6:	f5a1 71f2 	sub.w	r1, r1, #484	@ 0x1e4
 8015aca:	600a      	str	r2, [r1, #0]
 8015acc:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8015ad0:	f5a2 72f4 	sub.w	r2, r2, #488	@ 0x1e8
 8015ad4:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015ad6:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8015ada:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8015ae4:	3380      	adds	r3, #128	@ 0x80
 8015ae6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  int workspace[8*12];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8015aea:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8015aee:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015af8:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8015afc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015b04:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
  wsptr = workspace;
 8015b08:	f107 0310 	add.w	r3, r7, #16
 8015b0c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015b10:	2300      	movs	r3, #0
 8015b12:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8015b16:	e218      	b.n	8015f4a <jpeg_idct_12x12+0x4a2>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015b18:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b20:	461a      	mov	r2, r3
 8015b22:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	fb02 f303 	mul.w	r3, r2, r3
 8015b2c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    z3 <<= CONST_BITS;
 8015b30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8015b34:	035b      	lsls	r3, r3, #13
 8015b36:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015b3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8015b3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8015b42:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc

    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015b46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015b4a:	3340      	adds	r3, #64	@ 0x40
 8015b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b50:	461a      	mov	r2, r3
 8015b52:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015b56:	3380      	adds	r3, #128	@ 0x80
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	fb02 f303 	mul.w	r3, r2, r3
 8015b5e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8015b62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015b66:	f242 7231 	movw	r2, #10033	@ 0x2731
 8015b6a:	fb02 f303 	mul.w	r3, r2, r3
 8015b6e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    tmp10 = z3 + z4;
 8015b72:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015b76:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015b7a:	4413      	add	r3, r2
 8015b7c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp11 = z3 - z4;
 8015b80:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015b84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015b88:	1ad3      	subs	r3, r2, r3
 8015b8a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015b8e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015b92:	3320      	adds	r3, #32
 8015b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b98:	461a      	mov	r2, r3
 8015b9a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015b9e:	3340      	adds	r3, #64	@ 0x40
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	fb02 f303 	mul.w	r3, r2, r3
 8015ba6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8015baa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015bae:	f642 32b6 	movw	r2, #11190	@ 0x2bb6
 8015bb2:	fb02 f303 	mul.w	r3, r2, r3
 8015bb6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    z1 <<= CONST_BITS;
 8015bba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015bbe:	035b      	lsls	r3, r3, #13
 8015bc0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015bc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015bc8:	3360      	adds	r3, #96	@ 0x60
 8015bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015bce:	461a      	mov	r2, r3
 8015bd0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015bd4:	33c0      	adds	r3, #192	@ 0xc0
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	fb02 f303 	mul.w	r3, r2, r3
 8015bdc:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    z2 <<= CONST_BITS;
 8015be0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015be4:	035b      	lsls	r3, r3, #13
 8015be6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    tmp12 = z1 - z2;
 8015bea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8015bee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015bf2:	1ad3      	subs	r3, r2, r3
 8015bf4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    tmp21 = z3 + tmp12;
 8015bf8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015bfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015c00:	4413      	add	r3, r2
 8015c02:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    tmp24 = z3 - tmp12;
 8015c06:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015c0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015c0e:	1ad3      	subs	r3, r2, r3
 8015c10:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

    tmp12 = z4 + z2;
 8015c14:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8015c18:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015c1c:	4413      	add	r3, r2
 8015c1e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    tmp20 = tmp10 + tmp12;
 8015c22:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8015c26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015c2a:	4413      	add	r3, r2
 8015c2c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    tmp25 = tmp10 - tmp12;
 8015c30:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8015c34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015c38:	1ad3      	subs	r3, r2, r3
 8015c3a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    tmp12 = z4 - z1 - z2;
 8015c3e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8015c42:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015c46:	1ad2      	subs	r2, r2, r3
 8015c48:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015c4c:	1ad3      	subs	r3, r2, r3
 8015c4e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    tmp22 = tmp11 + tmp12;
 8015c52:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8015c56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015c5a:	4413      	add	r3, r2
 8015c5c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    tmp23 = tmp11 - tmp12;
 8015c60:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8015c64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015c68:	1ad3      	subs	r3, r2, r3
 8015c6a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015c6e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015c72:	3310      	adds	r3, #16
 8015c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c78:	461a      	mov	r2, r3
 8015c7a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015c7e:	3320      	adds	r3, #32
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	fb02 f303 	mul.w	r3, r2, r3
 8015c86:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015c8a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015c8e:	3330      	adds	r3, #48	@ 0x30
 8015c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c94:	461a      	mov	r2, r3
 8015c96:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015c9a:	3360      	adds	r3, #96	@ 0x60
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	fb02 f303 	mul.w	r3, r2, r3
 8015ca2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015ca6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015caa:	3350      	adds	r3, #80	@ 0x50
 8015cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015cb6:	33a0      	adds	r3, #160	@ 0xa0
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	fb02 f303 	mul.w	r3, r2, r3
 8015cbe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015cc2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015cc6:	3370      	adds	r3, #112	@ 0x70
 8015cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ccc:	461a      	mov	r2, r3
 8015cce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015cd2:	33e0      	adds	r3, #224	@ 0xe0
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	fb02 f303 	mul.w	r3, r2, r3
 8015cda:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8015cde:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015ce2:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 8015ce6:	fb02 f303 	mul.w	r3, r2, r3
 8015cea:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8015cee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015cf2:	4a9c      	ldr	r2, [pc, #624]	@ (8015f64 <jpeg_idct_12x12+0x4bc>)
 8015cf4:	fb02 f303 	mul.w	r3, r2, r3
 8015cf8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

    tmp10 = z1 + z3;
 8015cfc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8015d00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8015d04:	4413      	add	r3, r2
 8015d06:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8015d0a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8015d0e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015d12:	4413      	add	r3, r2
 8015d14:	f641 328d 	movw	r2, #7053	@ 0x1b8d
 8015d18:	fb02 f303 	mul.w	r3, r2, r3
 8015d1c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8015d20:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8015d24:	f640 025b 	movw	r2, #2139	@ 0x85b
 8015d28:	fb02 f303 	mul.w	r3, r2, r3
 8015d2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8015d30:	4413      	add	r3, r2
 8015d32:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8015d36:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015d3a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015d3e:	18d1      	adds	r1, r2, r3
 8015d40:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8015d44:	4613      	mov	r3, r2
 8015d46:	00db      	lsls	r3, r3, #3
 8015d48:	4413      	add	r3, r2
 8015d4a:	021a      	lsls	r2, r3, #8
 8015d4c:	1ad3      	subs	r3, r2, r3
 8015d4e:	440b      	add	r3, r1
 8015d50:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8015d54:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015d58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015d5c:	4413      	add	r3, r2
 8015d5e:	4a82      	ldr	r2, [pc, #520]	@ (8015f68 <jpeg_idct_12x12+0x4c0>)
 8015d60:	fb02 f303 	mul.w	r3, r2, r3
 8015d64:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8015d68:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8015d6c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8015d70:	441a      	add	r2, r3
 8015d72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8015d76:	497d      	ldr	r1, [pc, #500]	@ (8015f6c <jpeg_idct_12x12+0x4c4>)
 8015d78:	fb01 f303 	mul.w	r3, r1, r3
 8015d7c:	4413      	add	r3, r2
 8015d7e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8015d82:	4413      	add	r3, r2
 8015d84:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8015d88:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8015d8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015d90:	1ad2      	subs	r2, r2, r3
 8015d92:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015d96:	f243 21c6 	movw	r1, #12998	@ 0x32c6
 8015d9a:	fb01 f303 	mul.w	r3, r1, r3
 8015d9e:	4413      	add	r3, r2
 8015da0:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8015da4:	4413      	add	r3, r2
 8015da6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8015daa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015dae:	4a70      	ldr	r2, [pc, #448]	@ (8015f70 <jpeg_idct_12x12+0x4c8>)
 8015db0:	fb03 f202 	mul.w	r2, r3, r2
 8015db4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8015db8:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 8015dba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015dbe:	496d      	ldr	r1, [pc, #436]	@ (8015f74 <jpeg_idct_12x12+0x4cc>)
 8015dc0:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8015dc4:	4413      	add	r3, r2
 8015dc6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8015dca:	4413      	add	r3, r2
 8015dcc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    z1 -= z4;
 8015dd0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8015dd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z2 -= z3;
 8015dde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8015de2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8015de6:	1ad3      	subs	r3, r2, r3
 8015de8:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8015dec:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8015df0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015df4:	4413      	add	r3, r2
 8015df6:	f241 1251 	movw	r2, #4433	@ 0x1151
 8015dfa:	fb02 f303 	mul.w	r3, r2, r3
 8015dfe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8015e02:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015e06:	f641 027e 	movw	r2, #6270	@ 0x187e
 8015e0a:	fb02 f303 	mul.w	r3, r2, r3
 8015e0e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015e12:	4413      	add	r3, r2
 8015e14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8015e18:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8015e1c:	4a56      	ldr	r2, [pc, #344]	@ (8015f78 <jpeg_idct_12x12+0x4d0>)
 8015e1e:	fb02 f303 	mul.w	r3, r2, r3
 8015e22:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015e26:	4413      	add	r3, r2
 8015e28:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015e2c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8015e30:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8015e34:	4413      	add	r3, r2
 8015e36:	12da      	asrs	r2, r3, #11
 8015e38:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015e3c:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015e3e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8015e42:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8015e46:	1ad2      	subs	r2, r2, r3
 8015e48:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015e4c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8015e50:	12d2      	asrs	r2, r2, #11
 8015e52:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015e54:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8015e58:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015e5c:	441a      	add	r2, r3
 8015e5e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015e62:	3320      	adds	r3, #32
 8015e64:	12d2      	asrs	r2, r2, #11
 8015e66:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015e68:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8015e6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8015e70:	1ad2      	subs	r2, r2, r3
 8015e72:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015e76:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8015e7a:	12d2      	asrs	r2, r2, #11
 8015e7c:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015e7e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8015e82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015e86:	441a      	add	r2, r3
 8015e88:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015e8c:	3340      	adds	r3, #64	@ 0x40
 8015e8e:	12d2      	asrs	r2, r2, #11
 8015e90:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015e92:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8015e96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8015e9a:	1ad2      	subs	r2, r2, r3
 8015e9c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015ea0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8015ea4:	12d2      	asrs	r2, r2, #11
 8015ea6:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8015ea8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8015eac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015eb0:	441a      	add	r2, r3
 8015eb2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015eb6:	3360      	adds	r3, #96	@ 0x60
 8015eb8:	12d2      	asrs	r2, r2, #11
 8015eba:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015ebc:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8015ec0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8015ec4:	1ad2      	subs	r2, r2, r3
 8015ec6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015eca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015ece:	12d2      	asrs	r2, r2, #11
 8015ed0:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015ed2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8015ed6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8015eda:	441a      	add	r2, r3
 8015edc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015ee0:	3380      	adds	r3, #128	@ 0x80
 8015ee2:	12d2      	asrs	r2, r2, #11
 8015ee4:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015ee6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8015eea:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8015eee:	1ad2      	subs	r2, r2, r3
 8015ef0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015ef4:	33e0      	adds	r3, #224	@ 0xe0
 8015ef6:	12d2      	asrs	r2, r2, #11
 8015ef8:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8015efa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8015efe:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015f02:	441a      	add	r2, r3
 8015f04:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015f08:	33a0      	adds	r3, #160	@ 0xa0
 8015f0a:	12d2      	asrs	r2, r2, #11
 8015f0c:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8015f0e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8015f12:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8015f16:	1ad2      	subs	r2, r2, r3
 8015f18:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015f1c:	33c0      	adds	r3, #192	@ 0xc0
 8015f1e:	12d2      	asrs	r2, r2, #11
 8015f20:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015f22:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8015f26:	3301      	adds	r3, #1
 8015f28:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8015f2c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8015f30:	3302      	adds	r3, #2
 8015f32:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8015f36:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8015f3a:	3304      	adds	r3, #4
 8015f3c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8015f40:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015f44:	3304      	adds	r3, #4
 8015f46:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8015f4a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8015f4e:	2b07      	cmp	r3, #7
 8015f50:	f77f ade2 	ble.w	8015b18 <jpeg_idct_12x12+0x70>
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8015f54:	f107 0310 	add.w	r3, r7, #16
 8015f58:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  for (ctr = 0; ctr < 12; ctr++) {
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8015f62:	e229      	b.n	80163b8 <jpeg_idct_12x12+0x910>
 8015f64:	ffffeeaf 	.word	0xffffeeaf
 8015f68:	ffffde8b 	.word	0xffffde8b
 8015f6c:	ffffd0b0 	.word	0xffffd0b0
 8015f70:	ffffea5c 	.word	0xffffea5c
 8015f74:	ffffc08c 	.word	0xffffc08c
 8015f78:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 8015f7c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8015f80:	009b      	lsls	r3, r3, #2
 8015f82:	f507 72f4 	add.w	r2, r7, #488	@ 0x1e8
 8015f86:	f5a2 72f4 	sub.w	r2, r2, #488	@ 0x1e8
 8015f8a:	6812      	ldr	r2, [r2, #0]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	681a      	ldr	r2, [r3, #0]
 8015f90:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8015f94:	4413      	add	r3, r2
 8015f96:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015f9a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	3310      	adds	r3, #16
 8015fa2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    z3 <<= CONST_BITS;
 8015fa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8015faa:	035b      	lsls	r3, r3, #13
 8015fac:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc

    z4 = (INT32) wsptr[4];
 8015fb0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015fb4:	3310      	adds	r3, #16
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8015fbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015fc0:	f242 7231 	movw	r2, #10033	@ 0x2731
 8015fc4:	fb02 f303 	mul.w	r3, r2, r3
 8015fc8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    tmp10 = z3 + z4;
 8015fcc:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015fd0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015fd4:	4413      	add	r3, r2
 8015fd6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp11 = z3 - z4;
 8015fda:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8015fde:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8015fe2:	1ad3      	subs	r3, r2, r3
 8015fe4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

    z1 = (INT32) wsptr[2];
 8015fe8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8015fec:	3308      	adds	r3, #8
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8015ff4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8015ff8:	f642 32b6 	movw	r2, #11190	@ 0x2bb6
 8015ffc:	fb02 f303 	mul.w	r3, r2, r3
 8016000:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    z1 <<= CONST_BITS;
 8016004:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8016008:	035b      	lsls	r3, r3, #13
 801600a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z2 = (INT32) wsptr[6];
 801600e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016012:	3318      	adds	r3, #24
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    z2 <<= CONST_BITS;
 801601a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801601e:	035b      	lsls	r3, r3, #13
 8016020:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    tmp12 = z1 - z2;
 8016024:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8016028:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801602c:	1ad3      	subs	r3, r2, r3
 801602e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    tmp21 = z3 + tmp12;
 8016032:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016036:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801603a:	4413      	add	r3, r2
 801603c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    tmp24 = z3 - tmp12;
 8016040:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016048:	1ad3      	subs	r3, r2, r3
 801604a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

    tmp12 = z4 + z2;
 801604e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8016052:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016056:	4413      	add	r3, r2
 8016058:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    tmp20 = tmp10 + tmp12;
 801605c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8016060:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016064:	4413      	add	r3, r2
 8016066:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    tmp25 = tmp10 - tmp12;
 801606a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 801606e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016072:	1ad3      	subs	r3, r2, r3
 8016074:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    tmp12 = z4 - z1 - z2;
 8016078:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801607c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8016080:	1ad2      	subs	r2, r2, r3
 8016082:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    tmp22 = tmp11 + tmp12;
 801608c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8016090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016094:	4413      	add	r3, r2
 8016096:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    tmp23 = tmp11 - tmp12;
 801609a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801609e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80160a2:	1ad3      	subs	r3, r2, r3
 80160a4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80160a8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80160ac:	3304      	adds	r3, #4
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z2 = (INT32) wsptr[3];
 80160b4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80160b8:	330c      	adds	r3, #12
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    z3 = (INT32) wsptr[5];
 80160c0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80160c4:	3314      	adds	r3, #20
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    z4 = (INT32) wsptr[7];
 80160cc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80160d0:	331c      	adds	r3, #28
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80160d8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80160dc:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 80160e0:	fb02 f303 	mul.w	r3, r2, r3
 80160e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80160e8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80160ec:	4ab8      	ldr	r2, [pc, #736]	@ (80163d0 <jpeg_idct_12x12+0x928>)
 80160ee:	fb02 f303 	mul.w	r3, r2, r3
 80160f2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

    tmp10 = z1 + z3;
 80160f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80160fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80160fe:	4413      	add	r3, r2
 8016100:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8016104:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8016108:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801610c:	4413      	add	r3, r2
 801610e:	f641 328d 	movw	r2, #7053	@ 0x1b8d
 8016112:	fb02 f303 	mul.w	r3, r2, r3
 8016116:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801611a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801611e:	f640 025b 	movw	r2, #2139	@ 0x85b
 8016122:	fb02 f303 	mul.w	r3, r2, r3
 8016126:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 801612a:	4413      	add	r3, r2
 801612c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8016130:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8016134:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8016138:	18d1      	adds	r1, r2, r3
 801613a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801613e:	4613      	mov	r3, r2
 8016140:	00db      	lsls	r3, r3, #3
 8016142:	4413      	add	r3, r2
 8016144:	021a      	lsls	r2, r3, #8
 8016146:	1ad3      	subs	r3, r2, r3
 8016148:	440b      	add	r3, r1
 801614a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801614e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016152:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8016156:	4413      	add	r3, r2
 8016158:	4a9e      	ldr	r2, [pc, #632]	@ (80163d4 <jpeg_idct_12x12+0x92c>)
 801615a:	fb02 f303 	mul.w	r3, r2, r3
 801615e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8016162:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8016166:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801616a:	441a      	add	r2, r3
 801616c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016170:	4999      	ldr	r1, [pc, #612]	@ (80163d8 <jpeg_idct_12x12+0x930>)
 8016172:	fb01 f303 	mul.w	r3, r1, r3
 8016176:	4413      	add	r3, r2
 8016178:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801617c:	4413      	add	r3, r2
 801617e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8016182:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8016186:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801618a:	1ad2      	subs	r2, r2, r3
 801618c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8016190:	f243 21c6 	movw	r1, #12998	@ 0x32c6
 8016194:	fb01 f303 	mul.w	r3, r1, r3
 8016198:	4413      	add	r3, r2
 801619a:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801619e:	4413      	add	r3, r2
 80161a0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80161a4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80161a8:	4a8c      	ldr	r2, [pc, #560]	@ (80163dc <jpeg_idct_12x12+0x934>)
 80161aa:	fb03 f202 	mul.w	r2, r3, r2
 80161ae:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80161b2:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 80161b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80161b8:	4989      	ldr	r1, [pc, #548]	@ (80163e0 <jpeg_idct_12x12+0x938>)
 80161ba:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80161be:	4413      	add	r3, r2
 80161c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80161c4:	4413      	add	r3, r2
 80161c6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    z1 -= z4;
 80161ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80161ce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80161d2:	1ad3      	subs	r3, r2, r3
 80161d4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z2 -= z3;
 80161d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80161dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80161e0:	1ad3      	subs	r3, r2, r3
 80161e2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80161e6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80161ea:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80161ee:	4413      	add	r3, r2
 80161f0:	f241 1251 	movw	r2, #4433	@ 0x1151
 80161f4:	fb02 f303 	mul.w	r3, r2, r3
 80161f8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80161fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8016200:	f641 027e 	movw	r2, #6270	@ 0x187e
 8016204:	fb02 f303 	mul.w	r3, r2, r3
 8016208:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801620c:	4413      	add	r3, r2
 801620e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8016212:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016216:	4a73      	ldr	r2, [pc, #460]	@ (80163e4 <jpeg_idct_12x12+0x93c>)
 8016218:	fb02 f303 	mul.w	r3, r2, r3
 801621c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016220:	4413      	add	r3, r2
 8016222:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8016226:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801622a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801622e:	4413      	add	r3, r2
 8016230:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016232:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8016236:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 801623a:	4413      	add	r3, r2
 801623c:	781a      	ldrb	r2, [r3, #0]
 801623e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8016242:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8016244:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8016248:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801624c:	1ad3      	subs	r3, r2, r3
 801624e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016250:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8016254:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016258:	441a      	add	r2, r3
 801625a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801625e:	330b      	adds	r3, #11
 8016260:	7812      	ldrb	r2, [r2, #0]
 8016262:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016264:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8016268:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801626c:	4413      	add	r3, r2
 801626e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016270:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016274:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016278:	441a      	add	r2, r3
 801627a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801627e:	3301      	adds	r3, #1
 8016280:	7812      	ldrb	r2, [r2, #0]
 8016282:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8016284:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8016288:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801628c:	1ad3      	subs	r3, r2, r3
 801628e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016290:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8016294:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016298:	441a      	add	r2, r3
 801629a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801629e:	330a      	adds	r3, #10
 80162a0:	7812      	ldrb	r2, [r2, #0]
 80162a2:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80162a4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80162a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80162ac:	4413      	add	r3, r2
 80162ae:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80162b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80162b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80162b8:	441a      	add	r2, r3
 80162ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80162be:	3302      	adds	r3, #2
 80162c0:	7812      	ldrb	r2, [r2, #0]
 80162c2:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80162c4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80162c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80162d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80162d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80162d8:	441a      	add	r2, r3
 80162da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80162de:	3309      	adds	r3, #9
 80162e0:	7812      	ldrb	r2, [r2, #0]
 80162e2:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80162e4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80162e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80162ec:	4413      	add	r3, r2
 80162ee:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80162f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80162f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80162f8:	441a      	add	r2, r3
 80162fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80162fe:	3303      	adds	r3, #3
 8016300:	7812      	ldrb	r2, [r2, #0]
 8016302:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8016304:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8016308:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 801630c:	1ad3      	subs	r3, r2, r3
 801630e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016310:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8016314:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016318:	441a      	add	r2, r3
 801631a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801631e:	3308      	adds	r3, #8
 8016320:	7812      	ldrb	r2, [r2, #0]
 8016322:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8016324:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8016328:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801632c:	4413      	add	r3, r2
 801632e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016330:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8016334:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016338:	441a      	add	r2, r3
 801633a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801633e:	3304      	adds	r3, #4
 8016340:	7812      	ldrb	r2, [r2, #0]
 8016342:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8016344:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8016348:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801634c:	1ad3      	subs	r3, r2, r3
 801634e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016350:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8016354:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016358:	441a      	add	r2, r3
 801635a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801635e:	3307      	adds	r3, #7
 8016360:	7812      	ldrb	r2, [r2, #0]
 8016362:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8016364:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8016368:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801636c:	4413      	add	r3, r2
 801636e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016370:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8016374:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016378:	441a      	add	r2, r3
 801637a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801637e:	3305      	adds	r3, #5
 8016380:	7812      	ldrb	r2, [r2, #0]
 8016382:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8016384:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8016388:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801638c:	1ad3      	subs	r3, r2, r3
 801638e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016390:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8016394:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016398:	441a      	add	r2, r3
 801639a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801639e:	3306      	adds	r3, #6
 80163a0:	7812      	ldrb	r2, [r2, #0]
 80163a2:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80163a4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80163a8:	3320      	adds	r3, #32
 80163aa:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
  for (ctr = 0; ctr < 12; ctr++) {
 80163ae:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80163b2:	3301      	adds	r3, #1
 80163b4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80163b8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80163bc:	2b0b      	cmp	r3, #11
 80163be:	f77f addd 	ble.w	8015f7c <jpeg_idct_12x12+0x4d4>
  }
}
 80163c2:	bf00      	nop
 80163c4:	bf00      	nop
 80163c6:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bc90      	pop	{r4, r7}
 80163ce:	4770      	bx	lr
 80163d0:	ffffeeaf 	.word	0xffffeeaf
 80163d4:	ffffde8b 	.word	0xffffde8b
 80163d8:	ffffd0b0 	.word	0xffffd0b0
 80163dc:	ffffea5c 	.word	0xffffea5c
 80163e0:	ffffc08c 	.word	0xffffc08c
 80163e4:	ffffc4df 	.word	0xffffc4df

080163e8 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80163e8:	b490      	push	{r4, r7}
 80163ea:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	f507 7404 	add.w	r4, r7, #528	@ 0x210
 80163f4:	f5a4 7401 	sub.w	r4, r4, #516	@ 0x204
 80163f8:	6020      	str	r0, [r4, #0]
 80163fa:	f507 7004 	add.w	r0, r7, #528	@ 0x210
 80163fe:	f5a0 7002 	sub.w	r0, r0, #520	@ 0x208
 8016402:	6001      	str	r1, [r0, #0]
 8016404:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8016408:	f5a1 7103 	sub.w	r1, r1, #524	@ 0x20c
 801640c:	600a      	str	r2, [r1, #0]
 801640e:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8016412:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8016416:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016418:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801641c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8016426:	3380      	adds	r3, #128	@ 0x80
 8016428:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
  int workspace[8*13];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801642c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8016430:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801643a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801643e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016446:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
  wsptr = workspace;
 801644a:	f107 0314 	add.w	r3, r7, #20
 801644e:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8016452:	2300      	movs	r3, #0
 8016454:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8016458:	e299      	b.n	801698e <jpeg_idct_13x13+0x5a6>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801645a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801645e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016462:	461a      	mov	r2, r3
 8016464:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	fb02 f303 	mul.w	r3, r2, r3
 801646e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    z1 <<= CONST_BITS;
 8016472:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016476:	035b      	lsls	r3, r3, #13
 8016478:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801647c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016480:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8016484:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016488:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801648c:	3320      	adds	r3, #32
 801648e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016492:	461a      	mov	r2, r3
 8016494:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016498:	3340      	adds	r3, #64	@ 0x40
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	fb02 f303 	mul.w	r3, r2, r3
 80164a0:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80164a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80164a8:	3340      	adds	r3, #64	@ 0x40
 80164aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ae:	461a      	mov	r2, r3
 80164b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80164b4:	3380      	adds	r3, #128	@ 0x80
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	fb02 f303 	mul.w	r3, r2, r3
 80164bc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80164c0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80164c4:	3360      	adds	r3, #96	@ 0x60
 80164c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ca:	461a      	mov	r2, r3
 80164cc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80164d0:	33c0      	adds	r3, #192	@ 0xc0
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	fb02 f303 	mul.w	r3, r2, r3
 80164d8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

    tmp10 = z3 + z4;
 80164dc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 80164e0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80164e4:	4413      	add	r3, r2
 80164e6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    tmp11 = z3 - z4;
 80164ea:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 80164ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80164f2:	1ad3      	subs	r3, r2, r3
 80164f4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80164f8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80164fc:	f242 42f9 	movw	r2, #9465	@ 0x24f9
 8016500:	fb02 f303 	mul.w	r3, r2, r3
 8016504:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8016508:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801650c:	f240 3219 	movw	r2, #793	@ 0x319
 8016510:	fb02 f303 	mul.w	r3, r2, r3
 8016514:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016518:	4413      	add	r3, r2
 801651a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 801651e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016522:	f642 32f1 	movw	r2, #11249	@ 0x2bf1
 8016526:	fb03 f202 	mul.w	r2, r3, r2
 801652a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 801652e:	4413      	add	r3, r2
 8016530:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016534:	4413      	add	r3, r2
 8016536:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801653a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801653e:	f241 020c 	movw	r2, #4108	@ 0x100c
 8016542:	fb03 f202 	mul.w	r2, r3, r2
 8016546:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 801654a:	1ad3      	subs	r3, r2, r3
 801654c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016550:	4413      	add	r3, r2
 8016552:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8016556:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801655a:	f44f 6222 	mov.w	r2, #2592	@ 0xa20
 801655e:	fb02 f303 	mul.w	r3, r2, r3
 8016562:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8016566:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801656a:	f640 7295 	movw	r2, #3989	@ 0xf95
 801656e:	fb02 f303 	mul.w	r3, r2, r3
 8016572:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016576:	4413      	add	r3, r2
 8016578:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801657c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016580:	f242 12e0 	movw	r2, #8672	@ 0x21e0
 8016584:	fb03 f202 	mul.w	r2, r3, r2
 8016588:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 801658c:	1ad3      	subs	r3, r2, r3
 801658e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016592:	4413      	add	r3, r2
 8016594:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8016598:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801659c:	4af0      	ldr	r2, [pc, #960]	@ (8016960 <jpeg_idct_13x13+0x578>)
 801659e:	fb03 f202 	mul.w	r2, r3, r2
 80165a2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80165a6:	4413      	add	r3, r2
 80165a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80165ac:	4413      	add	r3, r2
 80165ae:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80165b2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80165b6:	f640 52f2 	movw	r2, #3570	@ 0xdf2
 80165ba:	fb02 f303 	mul.w	r3, r2, r3
 80165be:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80165c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80165c6:	f641 52fe 	movw	r2, #7678	@ 0x1dfe
 80165ca:	fb03 f202 	mul.w	r2, r3, r2
 80165ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80165d2:	1ad3      	subs	r3, r2, r3
 80165d4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80165d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80165dc:	4ae1      	ldr	r2, [pc, #900]	@ (8016964 <jpeg_idct_13x13+0x57c>)
 80165de:	fb03 f202 	mul.w	r2, r3, r2
 80165e2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80165e6:	1ad2      	subs	r2, r2, r3
 80165e8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80165ec:	1ad3      	subs	r3, r2, r3
 80165ee:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80165f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80165f6:	4adc      	ldr	r2, [pc, #880]	@ (8016968 <jpeg_idct_13x13+0x580>)
 80165f8:	fb03 f202 	mul.w	r2, r3, r2
 80165fc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016600:	441a      	add	r2, r3
 8016602:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8016606:	1ad3      	subs	r3, r2, r3
 8016608:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801660c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016610:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016614:	1ad3      	subs	r3, r2, r3
 8016616:	f642 5241 	movw	r2, #11585	@ 0x2d41
 801661a:	fb02 f303 	mul.w	r3, r2, r3
 801661e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016622:	4413      	add	r3, r2
 8016624:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016628:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801662c:	3310      	adds	r3, #16
 801662e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016632:	461a      	mov	r2, r3
 8016634:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016638:	3320      	adds	r3, #32
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	fb02 f303 	mul.w	r3, r2, r3
 8016640:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016644:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8016648:	3330      	adds	r3, #48	@ 0x30
 801664a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801664e:	461a      	mov	r2, r3
 8016650:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016654:	3360      	adds	r3, #96	@ 0x60
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	fb02 f303 	mul.w	r3, r2, r3
 801665c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016660:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8016664:	3350      	adds	r3, #80	@ 0x50
 8016666:	f9b3 3000 	ldrsh.w	r3, [r3]
 801666a:	461a      	mov	r2, r3
 801666c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016670:	33a0      	adds	r3, #160	@ 0xa0
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	fb02 f303 	mul.w	r3, r2, r3
 8016678:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801667c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8016680:	3370      	adds	r3, #112	@ 0x70
 8016682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016686:	461a      	mov	r2, r3
 8016688:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801668c:	33e0      	adds	r3, #224	@ 0xe0
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	fb02 f303 	mul.w	r3, r2, r3
 8016694:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8016698:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801669c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80166a0:	4413      	add	r3, r2
 80166a2:	f642 2250 	movw	r2, #10832	@ 0x2a50
 80166a6:	fb02 f303 	mul.w	r3, r2, r3
 80166aa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80166ae:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 80166b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80166b6:	4413      	add	r3, r2
 80166b8:	f242 523e 	movw	r2, #9534	@ 0x253e
 80166bc:	fb02 f303 	mul.w	r3, r2, r3
 80166c0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp15 = z1 + z4;
 80166c4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 80166c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80166cc:	4413      	add	r3, r2
 80166ce:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80166d2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80166d6:	f641 6202 	movw	r2, #7682	@ 0x1e02
 80166da:	fb02 f303 	mul.w	r3, r2, r3
 80166de:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp10 = tmp11 + tmp12 + tmp13 -
 80166e2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80166e6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80166ea:	441a      	add	r2, r3
 80166ec:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80166f0:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 80166f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80166f6:	499d      	ldr	r1, [pc, #628]	@ (801696c <jpeg_idct_13x13+0x584>)
 80166f8:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 80166fc:	4413      	add	r3, r2
 80166fe:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8016702:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8016706:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801670a:	4413      	add	r3, r2
 801670c:	4a98      	ldr	r2, [pc, #608]	@ (8016970 <jpeg_idct_13x13+0x588>)
 801670e:	fb02 f303 	mul.w	r3, r2, r3
 8016712:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8016716:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801671a:	f641 22cb 	movw	r2, #6859	@ 0x1acb
 801671e:	fb03 f202 	mul.w	r2, r3, r2
 8016722:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016726:	4413      	add	r3, r2
 8016728:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801672c:	4413      	add	r3, r2
 801672e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8016732:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8016736:	4a8f      	ldr	r2, [pc, #572]	@ (8016974 <jpeg_idct_13x13+0x58c>)
 8016738:	fb03 f202 	mul.w	r2, r3, r2
 801673c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016740:	4413      	add	r3, r2
 8016742:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8016746:	4413      	add	r3, r2
 8016748:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801674c:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8016750:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016754:	4413      	add	r3, r2
 8016756:	4a88      	ldr	r2, [pc, #544]	@ (8016978 <jpeg_idct_13x13+0x590>)
 8016758:	fb02 f303 	mul.w	r3, r2, r3
 801675c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp11 += tmp14;
 8016760:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016764:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016768:	4413      	add	r3, r2
 801676a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801676e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016772:	f244 6294 	movw	r2, #18068	@ 0x4694
 8016776:	fb03 f202 	mul.w	r2, r3, r2
 801677a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801677e:	4413      	add	r3, r2
 8016780:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016784:	4413      	add	r3, r2
 8016786:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801678a:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 801678e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016792:	4413      	add	r3, r2
 8016794:	4a79      	ldr	r2, [pc, #484]	@ (801697c <jpeg_idct_13x13+0x594>)
 8016796:	fb02 f303 	mul.w	r3, r2, r3
 801679a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp12 += tmp14;
 801679e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80167a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80167a6:	4413      	add	r3, r2
 80167a8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 += tmp14;
 80167ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80167b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80167b4:	4413      	add	r3, r2
 80167b6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80167ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80167be:	f640 22d5 	movw	r2, #2773	@ 0xad5
 80167c2:	fb02 f303 	mul.w	r3, r2, r3
 80167c6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80167ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80167ce:	f640 2233 	movw	r2, #2611	@ 0xa33
 80167d2:	fb03 f202 	mul.w	r2, r3, r2
 80167d6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80167da:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 80167dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80167e0:	4967      	ldr	r1, [pc, #412]	@ (8016980 <jpeg_idct_13x13+0x598>)
 80167e2:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80167e6:	4413      	add	r3, r2
 80167e8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 80167ec:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 80167f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80167f4:	1ad3      	subs	r3, r2, r3
 80167f6:	f641 6202 	movw	r2, #7682	@ 0x1e02
 80167fa:	fb02 f303 	mul.w	r3, r2, r3
 80167fe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp14 += z1;
 8016802:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8016806:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801680a:	4413      	add	r3, r2
 801680c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8016810:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8016814:	f640 424e 	movw	r2, #3150	@ 0xc4e
 8016818:	fb03 f202 	mul.w	r2, r3, r2
 801681c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016820:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 8016822:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016826:	f46f 515f 	mvn.w	r1, #14272	@ 0x37c0
 801682a:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801682e:	4413      	add	r3, r2
 8016830:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8016834:	4413      	add	r3, r2
 8016836:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801683a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 801683e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016842:	4413      	add	r3, r2
 8016844:	12da      	asrs	r2, r3, #11
 8016846:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 801684a:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801684c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016850:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016854:	1ad2      	subs	r2, r2, r3
 8016856:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 801685a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801685e:	12d2      	asrs	r2, r2, #11
 8016860:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8016862:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016866:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801686a:	441a      	add	r2, r3
 801686c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016870:	3320      	adds	r3, #32
 8016872:	12d2      	asrs	r2, r2, #11
 8016874:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8016876:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801687a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801687e:	1ad2      	subs	r2, r2, r3
 8016880:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016884:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8016888:	12d2      	asrs	r2, r2, #11
 801688a:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801688c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8016890:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016894:	441a      	add	r2, r3
 8016896:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 801689a:	3340      	adds	r3, #64	@ 0x40
 801689c:	12d2      	asrs	r2, r2, #11
 801689e:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80168a0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80168a4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80168a8:	1ad2      	subs	r2, r2, r3
 80168aa:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80168ae:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80168b2:	12d2      	asrs	r2, r2, #11
 80168b4:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80168b6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80168ba:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80168be:	441a      	add	r2, r3
 80168c0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80168c4:	3360      	adds	r3, #96	@ 0x60
 80168c6:	12d2      	asrs	r2, r2, #11
 80168c8:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80168ca:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80168ce:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80168d2:	1ad2      	subs	r2, r2, r3
 80168d4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80168d8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80168dc:	12d2      	asrs	r2, r2, #11
 80168de:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80168e0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80168e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80168e8:	441a      	add	r2, r3
 80168ea:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80168ee:	3380      	adds	r3, #128	@ 0x80
 80168f0:	12d2      	asrs	r2, r2, #11
 80168f2:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80168f4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80168f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80168fc:	1ad2      	subs	r2, r2, r3
 80168fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016902:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8016906:	12d2      	asrs	r2, r2, #11
 8016908:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801690a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801690e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016912:	441a      	add	r2, r3
 8016914:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016918:	33a0      	adds	r3, #160	@ 0xa0
 801691a:	12d2      	asrs	r2, r2, #11
 801691c:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801691e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8016922:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016926:	1ad2      	subs	r2, r2, r3
 8016928:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 801692c:	33e0      	adds	r3, #224	@ 0xe0
 801692e:	12d2      	asrs	r2, r2, #11
 8016930:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8016932:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016936:	33c0      	adds	r3, #192	@ 0xc0
 8016938:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801693c:	12d2      	asrs	r2, r2, #11
 801693e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8016940:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016944:	3301      	adds	r3, #1
 8016946:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 801694a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801694e:	3302      	adds	r3, #2
 8016950:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8016954:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8016958:	3304      	adds	r3, #4
 801695a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 801695e:	e011      	b.n	8016984 <jpeg_idct_13x13+0x59c>
 8016960:	ffffd7ee 	.word	0xffffd7ee
 8016964:	fffffa8c 	.word	0xfffffa8c
 8016968:	ffffe64b 	.word	0xffffe64b
 801696c:	ffffbf5b 	.word	0xffffbf5b
 8016970:	fffff52b 	.word	0xfffff52b
 8016974:	ffffcdb1 	.word	0xffffcdb1
 8016978:	ffffdac2 	.word	0xffffdac2
 801697c:	ffffeaf8 	.word	0xffffeaf8
 8016980:	fffff116 	.word	0xfffff116
 8016984:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016988:	3304      	adds	r3, #4
 801698a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 801698e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016992:	2b07      	cmp	r3, #7
 8016994:	f77f ad61 	ble.w	801645a <jpeg_idct_13x13+0x72>
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8016998:	f107 0314 	add.w	r3, r7, #20
 801699c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  for (ctr = 0; ctr < 13; ctr++) {
 80169a0:	2300      	movs	r3, #0
 80169a2:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80169a6:	e2a4      	b.n	8016ef2 <jpeg_idct_13x13+0xb0a>
    outptr = output_buf[ctr] + output_col;
 80169a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80169ac:	009b      	lsls	r3, r3, #2
 80169ae:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80169b2:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80169b6:	6812      	ldr	r2, [r2, #0]
 80169b8:	4413      	add	r3, r2
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80169c0:	4413      	add	r3, r2
 80169c2:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80169c6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	3310      	adds	r3, #16
 80169ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    z1 <<= CONST_BITS;
 80169d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80169d6:	035b      	lsls	r3, r3, #13
 80169d8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

    z2 = (INT32) wsptr[2];
 80169dc:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80169e0:	3308      	adds	r3, #8
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    z3 = (INT32) wsptr[4];
 80169e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80169ec:	3310      	adds	r3, #16
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    z4 = (INT32) wsptr[6];
 80169f4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80169f8:	3318      	adds	r3, #24
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

    tmp10 = z3 + z4;
 8016a00:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8016a04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016a08:	4413      	add	r3, r2
 8016a0a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    tmp11 = z3 - z4;
 8016a0e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8016a12:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016a16:	1ad3      	subs	r3, r2, r3
 8016a18:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8016a1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016a20:	f242 42f9 	movw	r2, #9465	@ 0x24f9
 8016a24:	fb02 f303 	mul.w	r3, r2, r3
 8016a28:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8016a2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8016a30:	f240 3219 	movw	r2, #793	@ 0x319
 8016a34:	fb02 f303 	mul.w	r3, r2, r3
 8016a38:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016a3c:	4413      	add	r3, r2
 8016a3e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8016a42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016a46:	f642 32f1 	movw	r2, #11249	@ 0x2bf1
 8016a4a:	fb03 f202 	mul.w	r2, r3, r2
 8016a4e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016a52:	4413      	add	r3, r2
 8016a54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016a58:	4413      	add	r3, r2
 8016a5a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8016a5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016a62:	f241 020c 	movw	r2, #4108	@ 0x100c
 8016a66:	fb03 f202 	mul.w	r2, r3, r2
 8016a6a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016a6e:	1ad3      	subs	r3, r2, r3
 8016a70:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016a74:	4413      	add	r3, r2
 8016a76:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8016a7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016a7e:	f44f 6222 	mov.w	r2, #2592	@ 0xa20
 8016a82:	fb02 f303 	mul.w	r3, r2, r3
 8016a86:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8016a8a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8016a8e:	f640 7295 	movw	r2, #3989	@ 0xf95
 8016a92:	fb02 f303 	mul.w	r3, r2, r3
 8016a96:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016a9a:	4413      	add	r3, r2
 8016a9c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8016aa0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016aa4:	f242 12e0 	movw	r2, #8672	@ 0x21e0
 8016aa8:	fb03 f202 	mul.w	r2, r3, r2
 8016aac:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016ab0:	1ad3      	subs	r3, r2, r3
 8016ab2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016ab6:	4413      	add	r3, r2
 8016ab8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8016abc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016ac0:	4af2      	ldr	r2, [pc, #968]	@ (8016e8c <jpeg_idct_13x13+0xaa4>)
 8016ac2:	fb03 f202 	mul.w	r2, r3, r2
 8016ac6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016aca:	4413      	add	r3, r2
 8016acc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016ad0:	4413      	add	r3, r2
 8016ad2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8016ad6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016ada:	f640 52f2 	movw	r2, #3570	@ 0xdf2
 8016ade:	fb02 f303 	mul.w	r3, r2, r3
 8016ae2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8016ae6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8016aea:	f641 52fe 	movw	r2, #7678	@ 0x1dfe
 8016aee:	fb03 f202 	mul.w	r2, r3, r2
 8016af2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016af6:	1ad3      	subs	r3, r2, r3
 8016af8:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8016afc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016b00:	4ae3      	ldr	r2, [pc, #908]	@ (8016e90 <jpeg_idct_13x13+0xaa8>)
 8016b02:	fb03 f202 	mul.w	r2, r3, r2
 8016b06:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016b0a:	1ad2      	subs	r2, r2, r3
 8016b0c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8016b10:	1ad3      	subs	r3, r2, r3
 8016b12:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8016b16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016b1a:	4ade      	ldr	r2, [pc, #888]	@ (8016e94 <jpeg_idct_13x13+0xaac>)
 8016b1c:	fb03 f202 	mul.w	r2, r3, r2
 8016b20:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016b24:	441a      	add	r2, r3
 8016b26:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8016b30:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016b34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016b38:	1ad3      	subs	r3, r2, r3
 8016b3a:	f642 5241 	movw	r2, #11585	@ 0x2d41
 8016b3e:	fb02 f303 	mul.w	r3, r2, r3
 8016b42:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016b46:	4413      	add	r3, r2
 8016b48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8016b4c:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016b50:	3304      	adds	r3, #4
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    z2 = (INT32) wsptr[3];
 8016b58:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016b5c:	330c      	adds	r3, #12
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    z3 = (INT32) wsptr[5];
 8016b64:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016b68:	3314      	adds	r3, #20
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    z4 = (INT32) wsptr[7];
 8016b70:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016b74:	331c      	adds	r3, #28
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8016b7c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016b80:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016b84:	4413      	add	r3, r2
 8016b86:	f642 2250 	movw	r2, #10832	@ 0x2a50
 8016b8a:	fb02 f303 	mul.w	r3, r2, r3
 8016b8e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8016b92:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016b96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8016b9a:	4413      	add	r3, r2
 8016b9c:	f242 523e 	movw	r2, #9534	@ 0x253e
 8016ba0:	fb02 f303 	mul.w	r3, r2, r3
 8016ba4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp15 = z1 + z4;
 8016ba8:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8016bac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016bb0:	4413      	add	r3, r2
 8016bb2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8016bb6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016bba:	f641 6202 	movw	r2, #7682	@ 0x1e02
 8016bbe:	fb02 f303 	mul.w	r3, r2, r3
 8016bc2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8016bc6:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016bca:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016bce:	441a      	add	r2, r3
 8016bd0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8016bd4:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 8016bd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016bda:	49af      	ldr	r1, [pc, #700]	@ (8016e98 <jpeg_idct_13x13+0xab0>)
 8016bdc:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8016be0:	4413      	add	r3, r2
 8016be2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8016be6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8016bea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8016bee:	4413      	add	r3, r2
 8016bf0:	4aaa      	ldr	r2, [pc, #680]	@ (8016e9c <jpeg_idct_13x13+0xab4>)
 8016bf2:	fb02 f303 	mul.w	r3, r2, r3
 8016bf6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8016bfa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016bfe:	f641 22cb 	movw	r2, #6859	@ 0x1acb
 8016c02:	fb03 f202 	mul.w	r2, r3, r2
 8016c06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016c0a:	4413      	add	r3, r2
 8016c0c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016c10:	4413      	add	r3, r2
 8016c12:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8016c16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8016c1a:	4aa1      	ldr	r2, [pc, #644]	@ (8016ea0 <jpeg_idct_13x13+0xab8>)
 8016c1c:	fb03 f202 	mul.w	r2, r3, r2
 8016c20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016c24:	4413      	add	r3, r2
 8016c26:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8016c2a:	4413      	add	r3, r2
 8016c2c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8016c30:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8016c34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016c38:	4413      	add	r3, r2
 8016c3a:	4a9a      	ldr	r2, [pc, #616]	@ (8016ea4 <jpeg_idct_13x13+0xabc>)
 8016c3c:	fb02 f303 	mul.w	r3, r2, r3
 8016c40:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp11 += tmp14;
 8016c44:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8016c48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016c4c:	4413      	add	r3, r2
 8016c4e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8016c52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016c56:	f244 6294 	movw	r2, #18068	@ 0x4694
 8016c5a:	fb03 f202 	mul.w	r2, r3, r2
 8016c5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016c62:	4413      	add	r3, r2
 8016c64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016c68:	4413      	add	r3, r2
 8016c6a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8016c6e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8016c72:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016c76:	4413      	add	r3, r2
 8016c78:	4a8b      	ldr	r2, [pc, #556]	@ (8016ea8 <jpeg_idct_13x13+0xac0>)
 8016c7a:	fb02 f303 	mul.w	r3, r2, r3
 8016c7e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp12 += tmp14;
 8016c82:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8016c86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016c8a:	4413      	add	r3, r2
 8016c8c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp13 += tmp14;
 8016c90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016c94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016c98:	4413      	add	r3, r2
 8016c9a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8016c9e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016ca2:	f640 22d5 	movw	r2, #2773	@ 0xad5
 8016ca6:	fb02 f303 	mul.w	r3, r2, r3
 8016caa:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8016cae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016cb2:	f640 2233 	movw	r2, #2611	@ 0xa33
 8016cb6:	fb03 f202 	mul.w	r2, r3, r2
 8016cba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016cbe:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 8016cc0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016cc4:	4979      	ldr	r1, [pc, #484]	@ (8016eac <jpeg_idct_13x13+0xac4>)
 8016cc6:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8016cca:	4413      	add	r3, r2
 8016ccc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8016cd0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8016cd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8016cd8:	1ad3      	subs	r3, r2, r3
 8016cda:	f641 6202 	movw	r2, #7682	@ 0x1e02
 8016cde:	fb02 f303 	mul.w	r3, r2, r3
 8016ce2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp14 += z1;
 8016ce6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8016cea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016cee:	4413      	add	r3, r2
 8016cf0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8016cf4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8016cf8:	f640 424e 	movw	r2, #3150	@ 0xc4e
 8016cfc:	fb03 f202 	mul.w	r2, r3, r2
 8016d00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8016d04:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 8016d06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8016d0a:	f46f 515f 	mvn.w	r1, #14272	@ 0x37c0
 8016d0e:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8016d12:	4413      	add	r3, r2
 8016d14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8016d18:	4413      	add	r3, r2
 8016d1a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8016d1e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016d22:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016d26:	4413      	add	r3, r2
 8016d28:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8016d2e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016d32:	4413      	add	r3, r2
 8016d34:	781a      	ldrb	r2, [r3, #0]
 8016d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016d3a:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8016d3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8016d40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8016d44:	1ad3      	subs	r3, r2, r3
 8016d46:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8016d4c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016d50:	441a      	add	r2, r3
 8016d52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016d56:	330c      	adds	r3, #12
 8016d58:	7812      	ldrb	r2, [r2, #0]
 8016d5a:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016d5c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016d60:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8016d64:	4413      	add	r3, r2
 8016d66:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8016d6c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016d70:	441a      	add	r2, r3
 8016d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016d76:	3301      	adds	r3, #1
 8016d78:	7812      	ldrb	r2, [r2, #0]
 8016d7a:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8016d7c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016d80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8016d84:	1ad3      	subs	r3, r2, r3
 8016d86:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8016d8c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016d90:	441a      	add	r2, r3
 8016d92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016d96:	330b      	adds	r3, #11
 8016d98:	7812      	ldrb	r2, [r2, #0]
 8016d9a:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8016d9c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8016da0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016da4:	4413      	add	r3, r2
 8016da6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8016dac:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016db0:	441a      	add	r2, r3
 8016db2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016db6:	3302      	adds	r3, #2
 8016db8:	7812      	ldrb	r2, [r2, #0]
 8016dba:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8016dbc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8016dc0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8016dc4:	1ad3      	subs	r3, r2, r3
 8016dc6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8016dcc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016dd0:	441a      	add	r2, r3
 8016dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016dd6:	330a      	adds	r3, #10
 8016dd8:	7812      	ldrb	r2, [r2, #0]
 8016dda:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8016ddc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8016de0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8016de4:	4413      	add	r3, r2
 8016de6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8016dec:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016df0:	441a      	add	r2, r3
 8016df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016df6:	3303      	adds	r3, #3
 8016df8:	7812      	ldrb	r2, [r2, #0]
 8016dfa:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8016dfc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8016e00:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8016e04:	1ad3      	subs	r3, r2, r3
 8016e06:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8016e0c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016e10:	441a      	add	r2, r3
 8016e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016e16:	3309      	adds	r3, #9
 8016e18:	7812      	ldrb	r2, [r2, #0]
 8016e1a:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8016e1c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8016e20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016e24:	4413      	add	r3, r2
 8016e26:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8016e2c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016e30:	441a      	add	r2, r3
 8016e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016e36:	3304      	adds	r3, #4
 8016e38:	7812      	ldrb	r2, [r2, #0]
 8016e3a:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8016e3c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8016e40:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8016e44:	1ad3      	subs	r3, r2, r3
 8016e46:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8016e4c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016e50:	441a      	add	r2, r3
 8016e52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016e56:	3308      	adds	r3, #8
 8016e58:	7812      	ldrb	r2, [r2, #0]
 8016e5a:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8016e5c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8016e60:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016e64:	4413      	add	r3, r2
 8016e66:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8016e6c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016e70:	441a      	add	r2, r3
 8016e72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016e76:	3305      	adds	r3, #5
 8016e78:	7812      	ldrb	r2, [r2, #0]
 8016e7a:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8016e7c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8016e80:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8016e84:	1ad3      	subs	r3, r2, r3
 8016e86:	149b      	asrs	r3, r3, #18
 8016e88:	e012      	b.n	8016eb0 <jpeg_idct_13x13+0xac8>
 8016e8a:	bf00      	nop
 8016e8c:	ffffd7ee 	.word	0xffffd7ee
 8016e90:	fffffa8c 	.word	0xfffffa8c
 8016e94:	ffffe64b 	.word	0xffffe64b
 8016e98:	ffffbf5b 	.word	0xffffbf5b
 8016e9c:	fffff52b 	.word	0xfffff52b
 8016ea0:	ffffcdb1 	.word	0xffffcdb1
 8016ea4:	ffffdac2 	.word	0xffffdac2
 8016ea8:	ffffeaf8 	.word	0xffffeaf8
 8016eac:	fffff116 	.word	0xfffff116
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8016eb4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016eb8:	441a      	add	r2, r3
 8016eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016ebe:	3307      	adds	r3, #7
 8016ec0:	7812      	ldrb	r2, [r2, #0]
 8016ec2:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8016ec4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8016ec8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8016ece:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8016ed2:	441a      	add	r2, r3
 8016ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8016ed8:	3306      	adds	r3, #6
 8016eda:	7812      	ldrb	r2, [r2, #0]
 8016edc:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8016ede:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8016ee2:	3320      	adds	r3, #32
 8016ee4:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  for (ctr = 0; ctr < 13; ctr++) {
 8016ee8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016eec:	3301      	adds	r3, #1
 8016eee:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8016ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8016ef6:	2b0c      	cmp	r3, #12
 8016ef8:	f77f ad56 	ble.w	80169a8 <jpeg_idct_13x13+0x5c0>
  }
}
 8016efc:	bf00      	nop
 8016efe:	bf00      	nop
 8016f00:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bc90      	pop	{r4, r7}
 8016f08:	4770      	bx	lr
 8016f0a:	bf00      	nop

08016f0c <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016f0c:	b490      	push	{r4, r7}
 8016f0e:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8016f12:	af00      	add	r7, sp, #0
 8016f14:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 8016f18:	f5a4 7409 	sub.w	r4, r4, #548	@ 0x224
 8016f1c:	6020      	str	r0, [r4, #0]
 8016f1e:	f507 700c 	add.w	r0, r7, #560	@ 0x230
 8016f22:	f5a0 700a 	sub.w	r0, r0, #552	@ 0x228
 8016f26:	6001      	str	r1, [r0, #0]
 8016f28:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8016f2c:	f5a1 710b 	sub.w	r1, r1, #556	@ 0x22c
 8016f30:	600a      	str	r2, [r1, #0]
 8016f32:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8016f36:	f5a2 720c 	sub.w	r2, r2, #560	@ 0x230
 8016f3a:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016f3c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8016f40:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8016f4a:	3380      	adds	r3, #128	@ 0x80
 8016f4c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  int workspace[8*14];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8016f50:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8016f54:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016f5e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8016f62:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016f6a:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  wsptr = workspace;
 8016f6e:	f107 0310 	add.w	r3, r7, #16
 8016f72:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8016f76:	2300      	movs	r3, #0
 8016f78:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8016f7c:	e278      	b.n	8017470 <jpeg_idct_14x14+0x564>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016f7e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8016f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f86:	461a      	mov	r2, r3
 8016f88:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	fb02 f303 	mul.w	r3, r2, r3
 8016f92:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z1 <<= CONST_BITS;
 8016f96:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8016f9a:	035b      	lsls	r3, r3, #13
 8016f9c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8016fa0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8016fa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8016fa8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016fac:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8016fb0:	3340      	adds	r3, #64	@ 0x40
 8016fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016fb6:	461a      	mov	r2, r3
 8016fb8:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8016fbc:	3380      	adds	r3, #128	@ 0x80
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	fb02 f303 	mul.w	r3, r2, r3
 8016fc4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8016fc8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8016fcc:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 8016fd0:	fb02 f303 	mul.w	r3, r2, r3
 8016fd4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8016fd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8016fdc:	f640 2212 	movw	r2, #2578	@ 0xa12
 8016fe0:	fb02 f303 	mul.w	r3, r2, r3
 8016fe4:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8016fe8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8016fec:	f641 4237 	movw	r2, #7223	@ 0x1c37
 8016ff0:	fb02 f303 	mul.w	r3, r2, r3
 8016ff4:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    tmp10 = z1 + z2;
 8016ff8:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8016ffc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017000:	4413      	add	r3, r2
 8017002:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    tmp11 = z1 + z3;
 8017006:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801700a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801700e:	4413      	add	r3, r2
 8017010:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    tmp12 = z1 - z4;
 8017014:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017018:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801701c:	1ad3      	subs	r3, r2, r3
 801701e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8017022:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8017026:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801702a:	441a      	add	r2, r3
 801702c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017030:	1ad3      	subs	r3, r2, r3
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017038:	1ad3      	subs	r3, r2, r3
 801703a:	12db      	asrs	r3, r3, #11
 801703c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8017040:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017044:	3320      	adds	r3, #32
 8017046:	f9b3 3000 	ldrsh.w	r3, [r3]
 801704a:	461a      	mov	r2, r3
 801704c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017050:	3340      	adds	r3, #64	@ 0x40
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	fb02 f303 	mul.w	r3, r2, r3
 8017058:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801705c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017060:	3360      	adds	r3, #96	@ 0x60
 8017062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017066:	461a      	mov	r2, r3
 8017068:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 801706c:	33c0      	adds	r3, #192	@ 0xc0
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	fb02 f303 	mul.w	r3, r2, r3
 8017074:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8017078:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801707c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017080:	4413      	add	r3, r2
 8017082:	f242 3262 	movw	r2, #9058	@ 0x2362
 8017086:	fb02 f303 	mul.w	r3, r2, r3
 801708a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801708e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8017092:	f640 02bd 	movw	r2, #2237	@ 0x8bd
 8017096:	fb02 f303 	mul.w	r3, r2, r3
 801709a:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801709e:	4413      	add	r3, r2
 80170a0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80170a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80170a8:	4aea      	ldr	r2, [pc, #936]	@ (8017454 <jpeg_idct_14x14+0x548>)
 80170aa:	fb02 f303 	mul.w	r3, r2, r3
 80170ae:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80170b2:	4413      	add	r3, r2
 80170b4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80170b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80170bc:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 80170c0:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80170c4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80170c8:	49e3      	ldr	r1, [pc, #908]	@ (8017458 <jpeg_idct_14x14+0x54c>)
 80170ca:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80170ce:	4413      	add	r3, r2
 80170d0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

    tmp20 = tmp10 + tmp13;
 80170d4:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80170d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80170dc:	4413      	add	r3, r2
 80170de:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
    tmp26 = tmp10 - tmp13;
 80170e2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80170e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80170ea:	1ad3      	subs	r3, r2, r3
 80170ec:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    tmp21 = tmp11 + tmp14;
 80170f0:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80170f4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80170f8:	4413      	add	r3, r2
 80170fa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp25 = tmp11 - tmp14;
 80170fe:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8017102:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8017106:	1ad3      	subs	r3, r2, r3
 8017108:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp22 = tmp12 + tmp15;
 801710c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8017110:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8017114:	4413      	add	r3, r2
 8017116:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp24 = tmp12 - tmp15;
 801711a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 801711e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8017122:	1ad3      	subs	r3, r2, r3
 8017124:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017128:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 801712c:	3310      	adds	r3, #16
 801712e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017132:	461a      	mov	r2, r3
 8017134:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017138:	3320      	adds	r3, #32
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	fb02 f303 	mul.w	r3, r2, r3
 8017140:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8017144:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017148:	3330      	adds	r3, #48	@ 0x30
 801714a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801714e:	461a      	mov	r2, r3
 8017150:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017154:	3360      	adds	r3, #96	@ 0x60
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	fb02 f303 	mul.w	r3, r2, r3
 801715c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8017160:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017164:	3350      	adds	r3, #80	@ 0x50
 8017166:	f9b3 3000 	ldrsh.w	r3, [r3]
 801716a:	461a      	mov	r2, r3
 801716c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017170:	33a0      	adds	r3, #160	@ 0xa0
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	fb02 f303 	mul.w	r3, r2, r3
 8017178:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801717c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017180:	3370      	adds	r3, #112	@ 0x70
 8017182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017186:	461a      	mov	r2, r3
 8017188:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 801718c:	33e0      	adds	r3, #224	@ 0xe0
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	fb02 f303 	mul.w	r3, r2, r3
 8017194:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    tmp13 = z4 << CONST_BITS;
 8017198:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801719c:	035b      	lsls	r3, r3, #13
 801719e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

    tmp14 = z1 + z3;
 80171a2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80171a6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80171aa:	4413      	add	r3, r2
 80171ac:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80171b0:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80171b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80171b8:	4413      	add	r3, r2
 80171ba:	f642 22b7 	movw	r2, #10935	@ 0x2ab7
 80171be:	fb02 f303 	mul.w	r3, r2, r3
 80171c2:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80171c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80171ca:	f242 6252 	movw	r2, #9810	@ 0x2652
 80171ce:	fb02 f303 	mul.w	r3, r2, r3
 80171d2:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80171d6:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80171da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80171de:	441a      	add	r2, r3
 80171e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80171e4:	441a      	add	r2, r3
 80171e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80171ea:	499c      	ldr	r1, [pc, #624]	@ (801745c <jpeg_idct_14x14+0x550>)
 80171ec:	fb01 f303 	mul.w	r3, r1, r3
 80171f0:	4413      	add	r3, r2
 80171f2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80171f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80171fa:	f641 0214 	movw	r2, #6164	@ 0x1814
 80171fe:	fb02 f303 	mul.w	r3, r2, r3
 8017202:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8017206:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801720a:	4a95      	ldr	r2, [pc, #596]	@ (8017460 <jpeg_idct_14x14+0x554>)
 801720c:	fb02 f303 	mul.w	r3, r2, r3
 8017210:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8017214:	4413      	add	r3, r2
 8017216:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    z1    -= z2;
 801721a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801721e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8017228:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801722c:	f640 62f2 	movw	r2, #3826	@ 0xef2
 8017230:	fb03 f202 	mul.w	r2, r3, r2
 8017234:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8017238:	1ad3      	subs	r3, r2, r3
 801723a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    tmp16 += tmp15;
 801723e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8017242:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8017246:	4413      	add	r3, r2
 8017248:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    z1    += z4;
 801724c:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017250:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017254:	4413      	add	r3, r2
 8017256:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801725a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 801725e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8017262:	4413      	add	r3, r2
 8017264:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
 8017268:	fb03 f202 	mul.w	r2, r3, r2
 801726c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8017270:	1ad3      	subs	r3, r2, r3
 8017272:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8017276:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801727a:	4a7a      	ldr	r2, [pc, #488]	@ (8017464 <jpeg_idct_14x14+0x558>)
 801727c:	fb03 f202 	mul.w	r2, r3, r2
 8017280:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017284:	4413      	add	r3, r2
 8017286:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801728a:	4413      	add	r3, r2
 801728c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8017290:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8017294:	4a74      	ldr	r2, [pc, #464]	@ (8017468 <jpeg_idct_14x14+0x55c>)
 8017296:	fb03 f202 	mul.w	r2, r3, r2
 801729a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801729e:	4413      	add	r3, r2
 80172a0:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80172a4:	4413      	add	r3, r2
 80172a6:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80172aa:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80172ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80172b2:	1ad3      	subs	r3, r2, r3
 80172b4:	f642 42f8 	movw	r2, #11512	@ 0x2cf8
 80172b8:	fb02 f303 	mul.w	r3, r2, r3
 80172bc:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80172c0:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80172c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80172c8:	441a      	add	r2, r3
 80172ca:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80172ce:	4967      	ldr	r1, [pc, #412]	@ (801746c <jpeg_idct_14x14+0x560>)
 80172d0:	fb01 f303 	mul.w	r3, r1, r3
 80172d4:	4413      	add	r3, r2
 80172d6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 80172da:	4413      	add	r3, r2
 80172dc:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80172e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80172e4:	f241 5299 	movw	r2, #5529	@ 0x1599
 80172e8:	fb03 f202 	mul.w	r2, r3, r2
 80172ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80172f0:	4413      	add	r3, r2
 80172f2:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 80172f6:	4413      	add	r3, r2
 80172f8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

    tmp13 = (z1 - z3) << PASS1_BITS;
 80172fc:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017300:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8017304:	1ad3      	subs	r3, r2, r3
 8017306:	009b      	lsls	r3, r3, #2
 8017308:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801730c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8017310:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8017314:	4413      	add	r3, r2
 8017316:	12da      	asrs	r2, r3, #11
 8017318:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801731c:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801731e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8017322:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8017326:	1ad2      	subs	r2, r2, r3
 8017328:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801732c:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8017330:	12d2      	asrs	r2, r2, #11
 8017332:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8017334:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8017338:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801733c:	441a      	add	r2, r3
 801733e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017342:	3320      	adds	r3, #32
 8017344:	12d2      	asrs	r2, r2, #11
 8017346:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8017348:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801734c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8017350:	1ad2      	subs	r2, r2, r3
 8017352:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017356:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801735a:	12d2      	asrs	r2, r2, #11
 801735c:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801735e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8017362:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8017366:	441a      	add	r2, r3
 8017368:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801736c:	3340      	adds	r3, #64	@ 0x40
 801736e:	12d2      	asrs	r2, r2, #11
 8017370:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8017372:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8017376:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801737a:	1ad2      	subs	r2, r2, r3
 801737c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017380:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8017384:	12d2      	asrs	r2, r2, #11
 8017386:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8017388:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801738c:	3360      	adds	r3, #96	@ 0x60
 801738e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8017392:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8017396:	440a      	add	r2, r1
 8017398:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 801739a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801739e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80173a2:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 80173a6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 80173aa:	1a8a      	subs	r2, r1, r2
 80173ac:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80173ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80173b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80173b6:	441a      	add	r2, r3
 80173b8:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80173bc:	3380      	adds	r3, #128	@ 0x80
 80173be:	12d2      	asrs	r2, r2, #11
 80173c0:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80173c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80173c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80173ca:	1ad2      	subs	r2, r2, r3
 80173cc:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80173d0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80173d4:	12d2      	asrs	r2, r2, #11
 80173d6:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80173d8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80173dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80173e0:	441a      	add	r2, r3
 80173e2:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80173e6:	33a0      	adds	r3, #160	@ 0xa0
 80173e8:	12d2      	asrs	r2, r2, #11
 80173ea:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80173ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80173f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80173f4:	1ad2      	subs	r2, r2, r3
 80173f6:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80173fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80173fe:	12d2      	asrs	r2, r2, #11
 8017400:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8017402:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8017406:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801740a:	441a      	add	r2, r3
 801740c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017410:	33c0      	adds	r3, #192	@ 0xc0
 8017412:	12d2      	asrs	r2, r2, #11
 8017414:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8017416:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801741a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801741e:	1ad2      	subs	r2, r2, r3
 8017420:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017424:	33e0      	adds	r3, #224	@ 0xe0
 8017426:	12d2      	asrs	r2, r2, #11
 8017428:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801742a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 801742e:	3301      	adds	r3, #1
 8017430:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8017434:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017438:	3302      	adds	r3, #2
 801743a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 801743e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017442:	3304      	adds	r3, #4
 8017444:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8017448:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801744c:	3304      	adds	r3, #4
 801744e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8017452:	e00d      	b.n	8017470 <jpeg_idct_14x14+0x564>
 8017454:	ffffc8fc 	.word	0xffffc8fc
 8017458:	ffffd3e1 	.word	0xffffd3e1
 801745c:	ffffdbf0 	.word	0xffffdbf0
 8017460:	ffffde0b 	.word	0xffffde0b
 8017464:	fffff26e 	.word	0xfffff26e
 8017468:	ffffb409 	.word	0xffffb409
 801746c:	ffffc9e6 	.word	0xffffc9e6
 8017470:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8017474:	2b07      	cmp	r3, #7
 8017476:	f77f ad82 	ble.w	8016f7e <jpeg_idct_14x14+0x72>
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 801747a:	f107 0310 	add.w	r3, r7, #16
 801747e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  for (ctr = 0; ctr < 14; ctr++) {
 8017482:	2300      	movs	r3, #0
 8017484:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8017488:	e284      	b.n	8017994 <jpeg_idct_14x14+0xa88>
    outptr = output_buf[ctr] + output_col;
 801748a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 801748e:	009b      	lsls	r3, r3, #2
 8017490:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8017494:	f5a2 720c 	sub.w	r2, r2, #560	@ 0x230
 8017498:	6812      	ldr	r2, [r2, #0]
 801749a:	4413      	add	r3, r2
 801749c:	681a      	ldr	r2, [r3, #0]
 801749e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80174a2:	4413      	add	r3, r2
 80174a4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80174a8:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	3310      	adds	r3, #16
 80174b0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z1 <<= CONST_BITS;
 80174b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80174b8:	035b      	lsls	r3, r3, #13
 80174ba:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z4 = (INT32) wsptr[4];
 80174be:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80174c2:	3310      	adds	r3, #16
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80174ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80174ce:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 80174d2:	fb02 f303 	mul.w	r3, r2, r3
 80174d6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80174da:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80174de:	f640 2212 	movw	r2, #2578	@ 0xa12
 80174e2:	fb02 f303 	mul.w	r3, r2, r3
 80174e6:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80174ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80174ee:	f641 4237 	movw	r2, #7223	@ 0x1c37
 80174f2:	fb02 f303 	mul.w	r3, r2, r3
 80174f6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    tmp10 = z1 + z2;
 80174fa:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80174fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017502:	4413      	add	r3, r2
 8017504:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    tmp11 = z1 + z3;
 8017508:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801750c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8017510:	4413      	add	r3, r2
 8017512:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    tmp12 = z1 - z4;
 8017516:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801751a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801751e:	1ad3      	subs	r3, r2, r3
 8017520:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8017524:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8017528:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801752c:	441a      	add	r2, r3
 801752e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017532:	1ad3      	subs	r3, r2, r3
 8017534:	005b      	lsls	r3, r3, #1
 8017536:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801753a:	1ad3      	subs	r3, r2, r3
 801753c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8

    z1 = (INT32) wsptr[2];
 8017540:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017544:	3308      	adds	r3, #8
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z2 = (INT32) wsptr[6];
 801754c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017550:	3318      	adds	r3, #24
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8017558:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801755c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017560:	4413      	add	r3, r2
 8017562:	f242 3262 	movw	r2, #9058	@ 0x2362
 8017566:	fb02 f303 	mul.w	r3, r2, r3
 801756a:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801756e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8017572:	f640 02bd 	movw	r2, #2237	@ 0x8bd
 8017576:	fb02 f303 	mul.w	r3, r2, r3
 801757a:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801757e:	4413      	add	r3, r2
 8017580:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8017584:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017588:	4af1      	ldr	r2, [pc, #964]	@ (8017950 <jpeg_idct_14x14+0xa44>)
 801758a:	fb02 f303 	mul.w	r3, r2, r3
 801758e:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8017592:	4413      	add	r3, r2
 8017594:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8017598:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801759c:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 80175a0:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80175a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80175a8:	49ea      	ldr	r1, [pc, #936]	@ (8017954 <jpeg_idct_14x14+0xa48>)
 80175aa:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80175ae:	4413      	add	r3, r2
 80175b0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

    tmp20 = tmp10 + tmp13;
 80175b4:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80175b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80175bc:	4413      	add	r3, r2
 80175be:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
    tmp26 = tmp10 - tmp13;
 80175c2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80175c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80175ca:	1ad3      	subs	r3, r2, r3
 80175cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    tmp21 = tmp11 + tmp14;
 80175d0:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80175d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80175d8:	4413      	add	r3, r2
 80175da:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    tmp25 = tmp11 - tmp14;
 80175de:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 80175e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80175e6:	1ad3      	subs	r3, r2, r3
 80175e8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp22 = tmp12 + tmp15;
 80175ec:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80175f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80175f4:	4413      	add	r3, r2
 80175f6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp24 = tmp12 - tmp15;
 80175fa:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80175fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8017602:	1ad3      	subs	r3, r2, r3
 8017604:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8017608:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801760c:	3304      	adds	r3, #4
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    z2 = (INT32) wsptr[3];
 8017614:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017618:	330c      	adds	r3, #12
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    z3 = (INT32) wsptr[5];
 8017620:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017624:	3314      	adds	r3, #20
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
    z4 = (INT32) wsptr[7];
 801762c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017630:	331c      	adds	r3, #28
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
    z4 <<= CONST_BITS;
 8017638:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801763c:	035b      	lsls	r3, r3, #13
 801763e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    tmp14 = z1 + z3;
 8017642:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017646:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801764a:	4413      	add	r3, r2
 801764c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8017650:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017654:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017658:	4413      	add	r3, r2
 801765a:	f642 22b7 	movw	r2, #10935	@ 0x2ab7
 801765e:	fb02 f303 	mul.w	r3, r2, r3
 8017662:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8017666:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801766a:	f242 6252 	movw	r2, #9810	@ 0x2652
 801766e:	fb02 f303 	mul.w	r3, r2, r3
 8017672:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8017676:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801767a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801767e:	441a      	add	r2, r3
 8017680:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017684:	441a      	add	r2, r3
 8017686:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801768a:	49b3      	ldr	r1, [pc, #716]	@ (8017958 <jpeg_idct_14x14+0xa4c>)
 801768c:	fb01 f303 	mul.w	r3, r1, r3
 8017690:	4413      	add	r3, r2
 8017692:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8017696:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801769a:	f641 0214 	movw	r2, #6164	@ 0x1814
 801769e:	fb02 f303 	mul.w	r3, r2, r3
 80176a2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80176a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80176aa:	4aac      	ldr	r2, [pc, #688]	@ (801795c <jpeg_idct_14x14+0xa50>)
 80176ac:	fb02 f303 	mul.w	r3, r2, r3
 80176b0:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 80176b4:	4413      	add	r3, r2
 80176b6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    z1    -= z2;
 80176ba:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80176be:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80176c2:	1ad3      	subs	r3, r2, r3
 80176c4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80176c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80176cc:	f640 62f2 	movw	r2, #3826	@ 0xef2
 80176d0:	fb03 f202 	mul.w	r2, r3, r2
 80176d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80176d8:	1ad3      	subs	r3, r2, r3
 80176da:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    tmp16 += tmp15;
 80176de:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80176e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80176e6:	4413      	add	r3, r2
 80176e8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80176ec:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80176f0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80176f4:	4413      	add	r3, r2
 80176f6:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
 80176fa:	fb03 f202 	mul.w	r2, r3, r2
 80176fe:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8017702:	1ad3      	subs	r3, r2, r3
 8017704:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8017708:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801770c:	4a94      	ldr	r2, [pc, #592]	@ (8017960 <jpeg_idct_14x14+0xa54>)
 801770e:	fb03 f202 	mul.w	r2, r3, r2
 8017712:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8017716:	4413      	add	r3, r2
 8017718:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801771c:	4413      	add	r3, r2
 801771e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8017722:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8017726:	4a8f      	ldr	r2, [pc, #572]	@ (8017964 <jpeg_idct_14x14+0xa58>)
 8017728:	fb03 f202 	mul.w	r2, r3, r2
 801772c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8017730:	4413      	add	r3, r2
 8017732:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8017736:	4413      	add	r3, r2
 8017738:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801773c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8017740:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017744:	1ad3      	subs	r3, r2, r3
 8017746:	f642 42f8 	movw	r2, #11512	@ 0x2cf8
 801774a:	fb02 f303 	mul.w	r3, r2, r3
 801774e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8017752:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8017756:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801775a:	441a      	add	r2, r3
 801775c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8017760:	4981      	ldr	r1, [pc, #516]	@ (8017968 <jpeg_idct_14x14+0xa5c>)
 8017762:	fb01 f303 	mul.w	r3, r1, r3
 8017766:	4413      	add	r3, r2
 8017768:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 801776c:	4413      	add	r3, r2
 801776e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8017772:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8017776:	f241 5299 	movw	r2, #5529	@ 0x1599
 801777a:	fb03 f202 	mul.w	r2, r3, r2
 801777e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8017782:	4413      	add	r3, r2
 8017784:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8017788:	4413      	add	r3, r2
 801778a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801778e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017792:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8017796:	1ad3      	subs	r3, r2, r3
 8017798:	035b      	lsls	r3, r3, #13
 801779a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801779e:	4413      	add	r3, r2
 80177a0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80177a4:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80177a8:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80177ac:	4413      	add	r3, r2
 80177ae:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80177b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80177b4:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80177b8:	4413      	add	r3, r2
 80177ba:	781a      	ldrb	r2, [r3, #0]
 80177bc:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80177c0:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80177c2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80177c6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80177ca:	1ad3      	subs	r3, r2, r3
 80177cc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80177ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80177d2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80177d6:	441a      	add	r2, r3
 80177d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80177dc:	330d      	adds	r3, #13
 80177de:	7812      	ldrb	r2, [r2, #0]
 80177e0:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80177e2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80177e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80177ea:	4413      	add	r3, r2
 80177ec:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80177ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80177f2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80177f6:	441a      	add	r2, r3
 80177f8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80177fc:	3301      	adds	r3, #1
 80177fe:	7812      	ldrb	r2, [r2, #0]
 8017800:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8017802:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8017806:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801780a:	1ad3      	subs	r3, r2, r3
 801780c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801780e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8017812:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017816:	441a      	add	r2, r3
 8017818:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801781c:	330c      	adds	r3, #12
 801781e:	7812      	ldrb	r2, [r2, #0]
 8017820:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8017822:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8017826:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801782a:	4413      	add	r3, r2
 801782c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801782e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8017832:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017836:	441a      	add	r2, r3
 8017838:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801783c:	3302      	adds	r3, #2
 801783e:	7812      	ldrb	r2, [r2, #0]
 8017840:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8017842:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8017846:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801784e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8017852:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017856:	441a      	add	r2, r3
 8017858:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801785c:	330b      	adds	r3, #11
 801785e:	7812      	ldrb	r2, [r2, #0]
 8017860:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8017862:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8017866:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801786a:	4413      	add	r3, r2
 801786c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801786e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8017872:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017876:	441a      	add	r2, r3
 8017878:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801787c:	3303      	adds	r3, #3
 801787e:	7812      	ldrb	r2, [r2, #0]
 8017880:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8017882:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8017886:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801788a:	1ad3      	subs	r3, r2, r3
 801788c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801788e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8017892:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017896:	441a      	add	r2, r3
 8017898:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801789c:	330a      	adds	r3, #10
 801789e:	7812      	ldrb	r2, [r2, #0]
 80178a0:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80178a2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80178a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80178aa:	4413      	add	r3, r2
 80178ac:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80178ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80178b2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80178b6:	441a      	add	r2, r3
 80178b8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80178bc:	3304      	adds	r3, #4
 80178be:	7812      	ldrb	r2, [r2, #0]
 80178c0:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80178c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80178c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80178ca:	1ad3      	subs	r3, r2, r3
 80178cc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80178ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80178d2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80178d6:	441a      	add	r2, r3
 80178d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80178dc:	3309      	adds	r3, #9
 80178de:	7812      	ldrb	r2, [r2, #0]
 80178e0:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80178e2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80178e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80178ea:	4413      	add	r3, r2
 80178ec:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80178ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80178f2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80178f6:	441a      	add	r2, r3
 80178f8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80178fc:	3305      	adds	r3, #5
 80178fe:	7812      	ldrb	r2, [r2, #0]
 8017900:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8017902:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8017906:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801790a:	1ad3      	subs	r3, r2, r3
 801790c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801790e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8017912:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017916:	441a      	add	r2, r3
 8017918:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801791c:	3308      	adds	r3, #8
 801791e:	7812      	ldrb	r2, [r2, #0]
 8017920:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8017922:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8017926:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801792a:	4413      	add	r3, r2
 801792c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801792e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8017932:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017936:	441a      	add	r2, r3
 8017938:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801793c:	3306      	adds	r3, #6
 801793e:	7812      	ldrb	r2, [r2, #0]
 8017940:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8017942:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8017946:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801794a:	1ad3      	subs	r3, r2, r3
 801794c:	149b      	asrs	r3, r3, #18
 801794e:	e00d      	b.n	801796c <jpeg_idct_14x14+0xa60>
 8017950:	ffffc8fc 	.word	0xffffc8fc
 8017954:	ffffd3e1 	.word	0xffffd3e1
 8017958:	ffffdbf0 	.word	0xffffdbf0
 801795c:	ffffde0b 	.word	0xffffde0b
 8017960:	fffff26e 	.word	0xfffff26e
 8017964:	ffffb409 	.word	0xffffb409
 8017968:	ffffc9e6 	.word	0xffffc9e6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801796c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8017970:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017974:	441a      	add	r2, r3
 8017976:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801797a:	3307      	adds	r3, #7
 801797c:	7812      	ldrb	r2, [r2, #0]
 801797e:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8017980:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017984:	3320      	adds	r3, #32
 8017986:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  for (ctr = 0; ctr < 14; ctr++) {
 801798a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 801798e:	3301      	adds	r3, #1
 8017990:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8017994:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8017998:	2b0d      	cmp	r3, #13
 801799a:	f77f ad76 	ble.w	801748a <jpeg_idct_14x14+0x57e>
  }
}
 801799e:	bf00      	nop
 80179a0:	bf00      	nop
 80179a2:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bc90      	pop	{r4, r7}
 80179aa:	4770      	bx	lr

080179ac <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80179ac:	b490      	push	{r4, r7}
 80179ae:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 80179b8:	f5a4 7413 	sub.w	r4, r4, #588	@ 0x24c
 80179bc:	6020      	str	r0, [r4, #0]
 80179be:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 80179c2:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 80179c6:	6001      	str	r1, [r0, #0]
 80179c8:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 80179cc:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 80179d0:	600a      	str	r2, [r1, #0]
 80179d2:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80179d6:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 80179da:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80179dc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80179e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80179ea:	3380      	adds	r3, #128	@ 0x80
 80179ec:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  int workspace[8*15];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80179f0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80179f4:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80179fe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8017a02:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017a0a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  wsptr = workspace;
 8017a0e:	f107 0314 	add.w	r3, r7, #20
 8017a12:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017a16:	2300      	movs	r3, #0
 8017a18:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8017a1c:	e28d      	b.n	8017f3a <jpeg_idct_15x15+0x58e>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8017a1e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a26:	461a      	mov	r2, r3
 8017a28:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	fb02 f303 	mul.w	r3, r2, r3
 8017a32:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z1 <<= CONST_BITS;
 8017a36:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8017a3a:	035b      	lsls	r3, r3, #13
 8017a3c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017a40:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8017a44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8017a48:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8017a4c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017a50:	3320      	adds	r3, #32
 8017a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a56:	461a      	mov	r2, r3
 8017a58:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017a5c:	3340      	adds	r3, #64	@ 0x40
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	fb02 f303 	mul.w	r3, r2, r3
 8017a64:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8017a68:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017a6c:	3340      	adds	r3, #64	@ 0x40
 8017a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a72:	461a      	mov	r2, r3
 8017a74:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017a78:	3380      	adds	r3, #128	@ 0x80
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	fb02 f303 	mul.w	r3, r2, r3
 8017a80:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8017a84:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017a88:	3360      	adds	r3, #96	@ 0x60
 8017a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a8e:	461a      	mov	r2, r3
 8017a90:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017a94:	33c0      	adds	r3, #192	@ 0xc0
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	fb02 f303 	mul.w	r3, r2, r3
 8017a9c:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8017aa0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017aa4:	f640 52fc 	movw	r2, #3580	@ 0xdfc
 8017aa8:	fb02 f303 	mul.w	r3, r2, r3
 8017aac:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8017ab0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017ab4:	f242 429d 	movw	r2, #9373	@ 0x249d
 8017ab8:	fb02 f303 	mul.w	r3, r2, r3
 8017abc:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

    tmp12 = z1 - tmp10;
 8017ac0:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017ac4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017ac8:	1ad3      	subs	r3, r2, r3
 8017aca:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    tmp13 = z1 + tmp11;
 8017ace:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017ad2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017ad6:	4413      	add	r3, r2
 8017ad8:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8017adc:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8017ae0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017ae4:	1ad3      	subs	r3, r2, r3
 8017ae6:	005b      	lsls	r3, r3, #1
 8017ae8:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017aec:	1ad3      	subs	r3, r2, r3
 8017aee:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c

    z4 = z2 - z3;
 8017af2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8017af6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8017afa:	1ad3      	subs	r3, r2, r3
 8017afc:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z3 += z2;
 8017b00:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8017b04:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017b08:	4413      	add	r3, r2
 8017b0a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8017b0e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8017b12:	f642 22ce 	movw	r2, #10958	@ 0x2ace
 8017b16:	fb02 f303 	mul.w	r3, r2, r3
 8017b1a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8017b1e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017b22:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 8017b26:	fb02 f303 	mul.w	r3, r2, r3
 8017b2a:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8017b2e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017b32:	f642 6213 	movw	r2, #11795	@ 0x2e13
 8017b36:	fb02 f303 	mul.w	r3, r2, r3
 8017b3a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

    tmp20 = tmp13 + tmp10 + tmp11;
 8017b3e:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8017b42:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017b46:	4413      	add	r3, r2
 8017b48:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8017b4c:	4413      	add	r3, r2
 8017b4e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8017b52:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8017b56:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017b5a:	1ad2      	subs	r2, r2, r3
 8017b5c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017b60:	4413      	add	r3, r2
 8017b62:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8017b66:	4413      	add	r3, r2
 8017b68:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218

    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8017b6c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8017b70:	f241 1282 	movw	r2, #4482	@ 0x1182
 8017b74:	fb02 f303 	mul.w	r3, r2, r3
 8017b78:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8017b7c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017b80:	f640 42c7 	movw	r2, #3271	@ 0xcc7
 8017b84:	fb02 f303 	mul.w	r3, r2, r3
 8017b88:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

    tmp25 = tmp13 - tmp10 - tmp11;
 8017b8c:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8017b90:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017b94:	1ad2      	subs	r2, r2, r3
 8017b96:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017b9a:	1ad3      	subs	r3, r2, r3
 8017b9c:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8017ba0:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8017ba4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017ba8:	441a      	add	r2, r3
 8017baa:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017bae:	1ad2      	subs	r2, r2, r3
 8017bb0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017bb4:	1ad3      	subs	r3, r2, r3
 8017bb6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8017bba:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8017bbe:	f641 124c 	movw	r2, #6476	@ 0x194c
 8017bc2:	fb02 f303 	mul.w	r3, r2, r3
 8017bc6:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8017bca:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017bce:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 8017bd2:	fb02 f303 	mul.w	r3, r2, r3
 8017bd6:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

    tmp21 = tmp12 + tmp10 + tmp11;
 8017bda:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8017bde:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017be2:	4413      	add	r3, r2
 8017be4:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8017be8:	4413      	add	r3, r2
 8017bea:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    tmp24 = tmp13 - tmp10 + tmp11;
 8017bee:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8017bf2:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017bf6:	1ad3      	subs	r3, r2, r3
 8017bf8:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8017bfc:	4413      	add	r3, r2
 8017bfe:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
    tmp11 += tmp11;
 8017c02:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017c06:	005b      	lsls	r3, r3, #1
 8017c08:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8017c0c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017c10:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017c14:	4413      	add	r3, r2
 8017c16:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8017c1a:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017c1e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017c22:	1ad2      	subs	r2, r2, r3
 8017c24:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017c28:	1ad3      	subs	r3, r2, r3
 8017c2a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017c2e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017c32:	3310      	adds	r3, #16
 8017c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c38:	461a      	mov	r2, r3
 8017c3a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017c3e:	3320      	adds	r3, #32
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	fb02 f303 	mul.w	r3, r2, r3
 8017c46:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8017c4a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017c4e:	3330      	adds	r3, #48	@ 0x30
 8017c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c54:	461a      	mov	r2, r3
 8017c56:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017c5a:	3360      	adds	r3, #96	@ 0x60
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	fb02 f303 	mul.w	r3, r2, r3
 8017c62:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8017c66:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017c6a:	3350      	adds	r3, #80	@ 0x50
 8017c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c70:	461a      	mov	r2, r3
 8017c72:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017c76:	33a0      	adds	r3, #160	@ 0xa0
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	fb02 f303 	mul.w	r3, r2, r3
 8017c7e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8017c82:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017c86:	f242 7231 	movw	r2, #10033	@ 0x2731
 8017c8a:	fb02 f303 	mul.w	r3, r2, r3
 8017c8e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8017c92:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017c96:	3370      	adds	r3, #112	@ 0x70
 8017c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c9c:	461a      	mov	r2, r3
 8017c9e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017ca2:	33e0      	adds	r3, #224	@ 0xe0
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	fb02 f303 	mul.w	r3, r2, r3
 8017caa:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

    tmp13 = z2 - z4;
 8017cae:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8017cb2:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017cb6:	1ad3      	subs	r3, r2, r3
 8017cb8:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8017cbc:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017cc0:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8017cc4:	4413      	add	r3, r2
 8017cc6:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 8017cca:	fb02 f303 	mul.w	r3, r2, r3
 8017cce:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8017cd2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8017cd6:	f241 0271 	movw	r2, #4209	@ 0x1071
 8017cda:	fb02 f303 	mul.w	r3, r2, r3
 8017cde:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8017ce2:	4413      	add	r3, r2
 8017ce4:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8017ce8:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8017cec:	4a99      	ldr	r2, [pc, #612]	@ (8017f54 <jpeg_idct_15x15+0x5a8>)
 8017cee:	fb02 f303 	mul.w	r3, r2, r3
 8017cf2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8017cf6:	4413      	add	r3, r2
 8017cf8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8017cfc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017d00:	4a95      	ldr	r2, [pc, #596]	@ (8017f58 <jpeg_idct_15x15+0x5ac>)
 8017d02:	fb02 f303 	mul.w	r3, r2, r3
 8017d06:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8017d0a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017d0e:	4a93      	ldr	r2, [pc, #588]	@ (8017f5c <jpeg_idct_15x15+0x5b0>)
 8017d10:	fb02 f303 	mul.w	r3, r2, r3
 8017d14:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    z2 = z1 - z4;
 8017d18:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017d1c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017d20:	1ad3      	subs	r3, r2, r3
 8017d22:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8017d26:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017d2a:	f642 5202 	movw	r2, #11522	@ 0x2d02
 8017d2e:	fb02 f303 	mul.w	r3, r2, r3
 8017d32:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8017d36:	4413      	add	r3, r2
 8017d38:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8017d3c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017d40:	f644 62a3 	movw	r2, #20131	@ 0x4ea3
 8017d44:	fb03 f202 	mul.w	r2, r3, r2
 8017d48:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017d4c:	441a      	add	r2, r3
 8017d4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8017d52:	1ad3      	subs	r3, r2, r3
 8017d54:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8017d58:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8017d5c:	4a80      	ldr	r2, [pc, #512]	@ (8017f60 <jpeg_idct_15x15+0x5b4>)
 8017d5e:	fb03 f202 	mul.w	r2, r3, r2
 8017d62:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017d66:	4413      	add	r3, r2
 8017d68:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8017d6c:	4413      	add	r3, r2
 8017d6e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8017d72:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017d76:	f242 7231 	movw	r2, #10033	@ 0x2731
 8017d7a:	fb03 f202 	mul.w	r2, r3, r2
 8017d7e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8017d82:	1ad3      	subs	r3, r2, r3
 8017d84:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8017d88:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017d8c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017d90:	4413      	add	r3, r2
 8017d92:	f241 2268 	movw	r2, #4712	@ 0x1268
 8017d96:	fb02 f303 	mul.w	r3, r2, r3
 8017d9a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8017d9e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8017da2:	f640 7239 	movw	r2, #3897	@ 0xf39
 8017da6:	fb03 f202 	mul.w	r2, r3, r2
 8017daa:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017dae:	441a      	add	r2, r3
 8017db0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8017db4:	1ad3      	subs	r3, r2, r3
 8017db6:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8017dba:	4413      	add	r3, r2
 8017dbc:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8017dc0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017dc4:	4a67      	ldr	r2, [pc, #412]	@ (8017f64 <jpeg_idct_15x15+0x5b8>)
 8017dc6:	fb03 f202 	mul.w	r2, r3, r2
 8017dca:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8017dce:	441a      	add	r2, r3
 8017dd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8017dd4:	4413      	add	r3, r2
 8017dd6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8017dda:	4413      	add	r3, r2
 8017ddc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8017de0:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017de4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017de8:	4413      	add	r3, r2
 8017dea:	12da      	asrs	r2, r3, #11
 8017dec:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017df0:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8017df2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8017df6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017dfa:	1ad2      	subs	r2, r2, r3
 8017dfc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e00:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8017e04:	12d2      	asrs	r2, r2, #11
 8017e06:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8017e08:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8017e0c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017e10:	441a      	add	r2, r3
 8017e12:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e16:	3320      	adds	r3, #32
 8017e18:	12d2      	asrs	r2, r2, #11
 8017e1a:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8017e1c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8017e20:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017e24:	1ad2      	subs	r2, r2, r3
 8017e26:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e2a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8017e2e:	12d2      	asrs	r2, r2, #11
 8017e30:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8017e32:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8017e36:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017e3a:	441a      	add	r2, r3
 8017e3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e40:	3340      	adds	r3, #64	@ 0x40
 8017e42:	12d2      	asrs	r2, r2, #11
 8017e44:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8017e46:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8017e4a:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8017e4e:	1ad2      	subs	r2, r2, r3
 8017e50:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e54:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8017e58:	12d2      	asrs	r2, r2, #11
 8017e5a:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8017e5c:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8017e60:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8017e64:	441a      	add	r2, r3
 8017e66:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e6a:	3360      	adds	r3, #96	@ 0x60
 8017e6c:	12d2      	asrs	r2, r2, #11
 8017e6e:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8017e70:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8017e74:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8017e78:	1ad2      	subs	r2, r2, r3
 8017e7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e7e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8017e82:	12d2      	asrs	r2, r2, #11
 8017e84:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8017e86:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8017e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8017e8e:	441a      	add	r2, r3
 8017e90:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017e94:	3380      	adds	r3, #128	@ 0x80
 8017e96:	12d2      	asrs	r2, r2, #11
 8017e98:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8017e9a:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8017e9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8017ea2:	1ad2      	subs	r2, r2, r3
 8017ea4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017ea8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8017eac:	12d2      	asrs	r2, r2, #11
 8017eae:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8017eb0:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8017eb8:	441a      	add	r2, r3
 8017eba:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017ebe:	33a0      	adds	r3, #160	@ 0xa0
 8017ec0:	12d2      	asrs	r2, r2, #11
 8017ec2:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8017ec4:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8017ec8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8017ecc:	1ad2      	subs	r2, r2, r3
 8017ece:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017ed2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8017ed6:	12d2      	asrs	r2, r2, #11
 8017ed8:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8017eda:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8017ede:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8017ee2:	441a      	add	r2, r3
 8017ee4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017ee8:	33c0      	adds	r3, #192	@ 0xc0
 8017eea:	12d2      	asrs	r2, r2, #11
 8017eec:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8017eee:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8017ef2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8017ef6:	1ad2      	subs	r2, r2, r3
 8017ef8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017efc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8017f00:	12d2      	asrs	r2, r2, #11
 8017f02:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8017f04:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017f08:	33e0      	adds	r3, #224	@ 0xe0
 8017f0a:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8017f0e:	12d2      	asrs	r2, r2, #11
 8017f10:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017f12:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8017f16:	3301      	adds	r3, #1
 8017f18:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8017f1c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8017f20:	3302      	adds	r3, #2
 8017f22:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8017f26:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017f2a:	3304      	adds	r3, #4
 8017f2c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8017f30:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017f34:	3304      	adds	r3, #4
 8017f36:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8017f3a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8017f3e:	2b07      	cmp	r3, #7
 8017f40:	f77f ad6d 	ble.w	8017a1e <jpeg_idct_15x15+0x72>
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8017f44:	f107 0314 	add.w	r3, r7, #20
 8017f48:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  for (ctr = 0; ctr < 15; ctr++) {
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8017f52:	e2ab      	b.n	80184ac <jpeg_idct_15x15+0xb00>
 8017f54:	ffffba5c 	.word	0xffffba5c
 8017f58:	ffffe566 	.word	0xffffe566
 8017f5c:	ffffd4f6 	.word	0xffffd4f6
 8017f60:	ffffdc67 	.word	0xffffdc67
 8017f64:	ffffe42f 	.word	0xffffe42f
    outptr = output_buf[ctr] + output_col;
 8017f68:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8017f6c:	009b      	lsls	r3, r3, #2
 8017f6e:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8017f72:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8017f76:	6812      	ldr	r2, [r2, #0]
 8017f78:	4413      	add	r3, r2
 8017f7a:	681a      	ldr	r2, [r3, #0]
 8017f7c:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8017f80:	4413      	add	r3, r2
 8017f82:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8017f86:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	3310      	adds	r3, #16
 8017f8e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z1 <<= CONST_BITS;
 8017f92:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8017f96:	035b      	lsls	r3, r3, #13
 8017f98:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c

    z2 = (INT32) wsptr[2];
 8017f9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017fa0:	3308      	adds	r3, #8
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z3 = (INT32) wsptr[4];
 8017fa8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017fac:	3310      	adds	r3, #16
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z4 = (INT32) wsptr[6];
 8017fb4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8017fb8:	3318      	adds	r3, #24
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8017fc0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017fc4:	f640 52fc 	movw	r2, #3580	@ 0xdfc
 8017fc8:	fb02 f303 	mul.w	r3, r2, r3
 8017fcc:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8017fd0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8017fd4:	f242 429d 	movw	r2, #9373	@ 0x249d
 8017fd8:	fb02 f303 	mul.w	r3, r2, r3
 8017fdc:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

    tmp12 = z1 - tmp10;
 8017fe0:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017fe4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8017fe8:	1ad3      	subs	r3, r2, r3
 8017fea:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    tmp13 = z1 + tmp11;
 8017fee:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8017ff2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8017ff6:	4413      	add	r3, r2
 8017ff8:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8017ffc:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8018000:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8018004:	1ad3      	subs	r3, r2, r3
 8018006:	005b      	lsls	r3, r3, #1
 8018008:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801800c:	1ad3      	subs	r3, r2, r3
 801800e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c

    z4 = z2 - z3;
 8018012:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018016:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801801a:	1ad3      	subs	r3, r2, r3
 801801c:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z3 += z2;
 8018020:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8018024:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018028:	4413      	add	r3, r2
 801802a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801802e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018032:	f642 22ce 	movw	r2, #10958	@ 0x2ace
 8018036:	fb02 f303 	mul.w	r3, r2, r3
 801803a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801803e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018042:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 8018046:	fb02 f303 	mul.w	r3, r2, r3
 801804a:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801804e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018052:	f642 6213 	movw	r2, #11795	@ 0x2e13
 8018056:	fb02 f303 	mul.w	r3, r2, r3
 801805a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

    tmp20 = tmp13 + tmp10 + tmp11;
 801805e:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8018062:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8018066:	4413      	add	r3, r2
 8018068:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801806c:	4413      	add	r3, r2
 801806e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8018072:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8018076:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 801807a:	1ad2      	subs	r2, r2, r3
 801807c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018080:	4413      	add	r3, r2
 8018082:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018086:	4413      	add	r3, r2
 8018088:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218

    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801808c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018090:	f241 1282 	movw	r2, #4482	@ 0x1182
 8018094:	fb02 f303 	mul.w	r3, r2, r3
 8018098:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801809c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80180a0:	f640 42c7 	movw	r2, #3271	@ 0xcc7
 80180a4:	fb02 f303 	mul.w	r3, r2, r3
 80180a8:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

    tmp25 = tmp13 - tmp10 - tmp11;
 80180ac:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 80180b0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80180b4:	1ad2      	subs	r2, r2, r3
 80180b6:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80180ba:	1ad3      	subs	r3, r2, r3
 80180bc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80180c0:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80180c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80180c8:	441a      	add	r2, r3
 80180ca:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80180ce:	1ad2      	subs	r2, r2, r3
 80180d0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80180d4:	1ad3      	subs	r3, r2, r3
 80180d6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80180da:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80180de:	f641 124c 	movw	r2, #6476	@ 0x194c
 80180e2:	fb02 f303 	mul.w	r3, r2, r3
 80180e6:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80180ea:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80180ee:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 80180f2:	fb02 f303 	mul.w	r3, r2, r3
 80180f6:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228

    tmp21 = tmp12 + tmp10 + tmp11;
 80180fa:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80180fe:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8018102:	4413      	add	r3, r2
 8018104:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8018108:	4413      	add	r3, r2
 801810a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    tmp24 = tmp13 - tmp10 + tmp11;
 801810e:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8018112:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8018116:	1ad3      	subs	r3, r2, r3
 8018118:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801811c:	4413      	add	r3, r2
 801811e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
    tmp11 += tmp11;
 8018122:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018126:	005b      	lsls	r3, r3, #1
 8018128:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801812c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8018130:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018134:	4413      	add	r3, r2
 8018136:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801813a:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801813e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018142:	1ad2      	subs	r2, r2, r3
 8018144:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018148:	1ad3      	subs	r3, r2, r3
 801814a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801814e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8018152:	3304      	adds	r3, #4
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z2 = (INT32) wsptr[3];
 801815a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801815e:	330c      	adds	r3, #12
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z4 = (INT32) wsptr[5];
 8018166:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801816a:	3314      	adds	r3, #20
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8018172:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018176:	f242 7231 	movw	r2, #10033	@ 0x2731
 801817a:	fb02 f303 	mul.w	r3, r2, r3
 801817e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z4 = (INT32) wsptr[7];
 8018182:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8018186:	331c      	adds	r3, #28
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

    tmp13 = z2 - z4;
 801818e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018192:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018196:	1ad3      	subs	r3, r2, r3
 8018198:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801819c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80181a0:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80181a4:	4413      	add	r3, r2
 80181a6:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 80181aa:	fb02 f303 	mul.w	r3, r2, r3
 80181ae:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80181b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80181b6:	f241 0271 	movw	r2, #4209	@ 0x1071
 80181ba:	fb02 f303 	mul.w	r3, r2, r3
 80181be:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80181c2:	4413      	add	r3, r2
 80181c4:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80181c8:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80181cc:	4abd      	ldr	r2, [pc, #756]	@ (80184c4 <jpeg_idct_15x15+0xb18>)
 80181ce:	fb02 f303 	mul.w	r3, r2, r3
 80181d2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80181d6:	4413      	add	r3, r2
 80181d8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80181dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80181e0:	4ab9      	ldr	r2, [pc, #740]	@ (80184c8 <jpeg_idct_15x15+0xb1c>)
 80181e2:	fb02 f303 	mul.w	r3, r2, r3
 80181e6:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80181ea:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80181ee:	4ab7      	ldr	r2, [pc, #732]	@ (80184cc <jpeg_idct_15x15+0xb20>)
 80181f0:	fb02 f303 	mul.w	r3, r2, r3
 80181f4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
    z2 = z1 - z4;
 80181f8:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80181fc:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018200:	1ad3      	subs	r3, r2, r3
 8018202:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8018206:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801820a:	f642 5202 	movw	r2, #11522	@ 0x2d02
 801820e:	fb02 f303 	mul.w	r3, r2, r3
 8018212:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8018216:	4413      	add	r3, r2
 8018218:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801821c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018220:	f644 62a3 	movw	r2, #20131	@ 0x4ea3
 8018224:	fb03 f202 	mul.w	r2, r3, r2
 8018228:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801822c:	441a      	add	r2, r3
 801822e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8018232:	1ad3      	subs	r3, r2, r3
 8018234:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8018238:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801823c:	4aa4      	ldr	r2, [pc, #656]	@ (80184d0 <jpeg_idct_15x15+0xb24>)
 801823e:	fb03 f202 	mul.w	r2, r3, r2
 8018242:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8018246:	4413      	add	r3, r2
 8018248:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801824c:	4413      	add	r3, r2
 801824e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8018252:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018256:	f242 7231 	movw	r2, #10033	@ 0x2731
 801825a:	fb03 f202 	mul.w	r2, r3, r2
 801825e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018262:	1ad3      	subs	r3, r2, r3
 8018264:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8018268:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801826c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018270:	4413      	add	r3, r2
 8018272:	f241 2268 	movw	r2, #4712	@ 0x1268
 8018276:	fb02 f303 	mul.w	r3, r2, r3
 801827a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801827e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018282:	f640 7239 	movw	r2, #3897	@ 0xf39
 8018286:	fb03 f202 	mul.w	r2, r3, r2
 801828a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801828e:	441a      	add	r2, r3
 8018290:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018294:	1ad3      	subs	r3, r2, r3
 8018296:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801829a:	4413      	add	r3, r2
 801829c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80182a0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80182a4:	4a8b      	ldr	r2, [pc, #556]	@ (80184d4 <jpeg_idct_15x15+0xb28>)
 80182a6:	fb03 f202 	mul.w	r2, r3, r2
 80182aa:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80182ae:	441a      	add	r2, r3
 80182b0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80182b4:	4413      	add	r3, r2
 80182b6:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80182ba:	4413      	add	r3, r2
 80182bc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80182c0:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80182c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80182c8:	4413      	add	r3, r2
 80182ca:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80182cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80182d0:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80182d4:	4413      	add	r3, r2
 80182d6:	781a      	ldrb	r2, [r3, #0]
 80182d8:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80182dc:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80182de:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80182e2:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80182e6:	1ad3      	subs	r3, r2, r3
 80182e8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80182ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80182ee:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80182f2:	441a      	add	r2, r3
 80182f4:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80182f8:	330e      	adds	r3, #14
 80182fa:	7812      	ldrb	r2, [r2, #0]
 80182fc:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80182fe:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8018302:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018306:	4413      	add	r3, r2
 8018308:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801830a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801830e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018312:	441a      	add	r2, r3
 8018314:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018318:	3301      	adds	r3, #1
 801831a:	7812      	ldrb	r2, [r2, #0]
 801831c:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801831e:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8018322:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018326:	1ad3      	subs	r3, r2, r3
 8018328:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801832a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801832e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018332:	441a      	add	r2, r3
 8018334:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018338:	330d      	adds	r3, #13
 801833a:	7812      	ldrb	r2, [r2, #0]
 801833c:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801833e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8018342:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8018346:	4413      	add	r3, r2
 8018348:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801834a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801834e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018352:	441a      	add	r2, r3
 8018354:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018358:	3302      	adds	r3, #2
 801835a:	7812      	ldrb	r2, [r2, #0]
 801835c:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801835e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8018362:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801836a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801836e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018372:	441a      	add	r2, r3
 8018374:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018378:	330c      	adds	r3, #12
 801837a:	7812      	ldrb	r2, [r2, #0]
 801837c:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801837e:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8018382:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8018386:	4413      	add	r3, r2
 8018388:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801838a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801838e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018392:	441a      	add	r2, r3
 8018394:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018398:	3303      	adds	r3, #3
 801839a:	7812      	ldrb	r2, [r2, #0]
 801839c:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801839e:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80183a2:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80183a6:	1ad3      	subs	r3, r2, r3
 80183a8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80183aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80183ae:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80183b2:	441a      	add	r2, r3
 80183b4:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80183b8:	330b      	adds	r3, #11
 80183ba:	7812      	ldrb	r2, [r2, #0]
 80183bc:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80183be:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80183c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80183c6:	4413      	add	r3, r2
 80183c8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80183ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80183ce:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80183d2:	441a      	add	r2, r3
 80183d4:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80183d8:	3304      	adds	r3, #4
 80183da:	7812      	ldrb	r2, [r2, #0]
 80183dc:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80183de:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80183e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80183e6:	1ad3      	subs	r3, r2, r3
 80183e8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80183ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80183ee:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80183f2:	441a      	add	r2, r3
 80183f4:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80183f8:	330a      	adds	r3, #10
 80183fa:	7812      	ldrb	r2, [r2, #0]
 80183fc:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80183fe:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8018402:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8018406:	4413      	add	r3, r2
 8018408:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801840a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801840e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018412:	441a      	add	r2, r3
 8018414:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018418:	3305      	adds	r3, #5
 801841a:	7812      	ldrb	r2, [r2, #0]
 801841c:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801841e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8018422:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8018426:	1ad3      	subs	r3, r2, r3
 8018428:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801842a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801842e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018432:	441a      	add	r2, r3
 8018434:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018438:	3309      	adds	r3, #9
 801843a:	7812      	ldrb	r2, [r2, #0]
 801843c:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801843e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018442:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8018446:	4413      	add	r3, r2
 8018448:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801844a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801844e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018452:	441a      	add	r2, r3
 8018454:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018458:	3306      	adds	r3, #6
 801845a:	7812      	ldrb	r2, [r2, #0]
 801845c:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801845e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018462:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8018466:	1ad3      	subs	r3, r2, r3
 8018468:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801846a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801846e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018472:	441a      	add	r2, r3
 8018474:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018478:	3308      	adds	r3, #8
 801847a:	7812      	ldrb	r2, [r2, #0]
 801847c:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 801847e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8018482:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018484:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8018488:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801848c:	441a      	add	r2, r3
 801848e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018492:	3307      	adds	r3, #7
 8018494:	7812      	ldrb	r2, [r2, #0]
 8018496:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8018498:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801849c:	3320      	adds	r3, #32
 801849e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
  for (ctr = 0; ctr < 15; ctr++) {
 80184a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80184a6:	3301      	adds	r3, #1
 80184a8:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 80184ac:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80184b0:	2b0e      	cmp	r3, #14
 80184b2:	f77f ad59 	ble.w	8017f68 <jpeg_idct_15x15+0x5bc>
  }
}
 80184b6:	bf00      	nop
 80184b8:	bf00      	nop
 80184ba:	f507 7716 	add.w	r7, r7, #600	@ 0x258
 80184be:	46bd      	mov	sp, r7
 80184c0:	bc90      	pop	{r4, r7}
 80184c2:	4770      	bx	lr
 80184c4:	ffffba5c 	.word	0xffffba5c
 80184c8:	ffffe566 	.word	0xffffe566
 80184cc:	ffffd4f6 	.word	0xffffd4f6
 80184d0:	ffffdc67 	.word	0xffffdc67
 80184d4:	ffffe42f 	.word	0xffffe42f

080184d8 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80184d8:	b490      	push	{r4, r7}
 80184da:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
 80184de:	af00      	add	r7, sp, #0
 80184e0:	f507 741e 	add.w	r4, r7, #632	@ 0x278
 80184e4:	f5a4 741b 	sub.w	r4, r4, #620	@ 0x26c
 80184e8:	6020      	str	r0, [r4, #0]
 80184ea:	f507 701e 	add.w	r0, r7, #632	@ 0x278
 80184ee:	f5a0 701c 	sub.w	r0, r0, #624	@ 0x270
 80184f2:	6001      	str	r1, [r0, #0]
 80184f4:	f507 711e 	add.w	r1, r7, #632	@ 0x278
 80184f8:	f5a1 711d 	sub.w	r1, r1, #628	@ 0x274
 80184fc:	600a      	str	r2, [r1, #0]
 80184fe:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 8018502:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8018506:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8018508:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801850c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8018516:	3380      	adds	r3, #128	@ 0x80
 8018518:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
  int workspace[8*16];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801851c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8018520:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801852a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801852e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018536:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
  wsptr = workspace;
 801853a:	f107 0310 	add.w	r3, r7, #16
 801853e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8018542:	2300      	movs	r3, #0
 8018544:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8018548:	e30a      	b.n	8018b60 <jpeg_idct_16x16+0x688>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801854a:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801854e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018552:	461a      	mov	r2, r3
 8018554:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	fb02 f303 	mul.w	r3, r2, r3
 801855e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp0 <<= CONST_BITS;
 8018562:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8018566:	035b      	lsls	r3, r3, #13
 8018568:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 801856c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8018570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8018574:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8018578:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801857c:	3340      	adds	r3, #64	@ 0x40
 801857e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018582:	461a      	mov	r2, r3
 8018584:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8018588:	3380      	adds	r3, #128	@ 0x80
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	fb02 f303 	mul.w	r3, r2, r3
 8018590:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8018594:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018598:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 801859c:	fb02 f303 	mul.w	r3, r2, r3
 80185a0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80185a4:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80185a8:	f241 1251 	movw	r2, #4433	@ 0x1151
 80185ac:	fb02 f303 	mul.w	r3, r2, r3
 80185b0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250

    tmp10 = tmp0 + tmp1;
 80185b4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80185b8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80185bc:	4413      	add	r3, r2
 80185be:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp11 = tmp0 - tmp1;
 80185c2:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80185c6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80185ca:	1ad3      	subs	r3, r2, r3
 80185cc:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp12 = tmp0 + tmp2;
 80185d0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80185d4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80185d8:	4413      	add	r3, r2
 80185da:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp13 = tmp0 - tmp2;
 80185de:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80185e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80185e6:	1ad3      	subs	r3, r2, r3
 80185e8:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80185ec:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80185f0:	3320      	adds	r3, #32
 80185f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185f6:	461a      	mov	r2, r3
 80185f8:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 80185fc:	3340      	adds	r3, #64	@ 0x40
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	fb02 f303 	mul.w	r3, r2, r3
 8018604:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8018608:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801860c:	3360      	adds	r3, #96	@ 0x60
 801860e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018612:	461a      	mov	r2, r3
 8018614:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8018618:	33c0      	adds	r3, #192	@ 0xc0
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	fb02 f303 	mul.w	r3, r2, r3
 8018620:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z3 = z1 - z2;
 8018624:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018628:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801862c:	1ad3      	subs	r3, r2, r3
 801862e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8018632:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018636:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 801863a:	fb02 f303 	mul.w	r3, r2, r3
 801863e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8018642:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018646:	f642 4263 	movw	r2, #11363	@ 0x2c63
 801864a:	fb02 f303 	mul.w	r3, r2, r3
 801864e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8018652:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018656:	f245 2203 	movw	r2, #20995	@ 0x5203
 801865a:	fb02 f303 	mul.w	r3, r2, r3
 801865e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018662:	4413      	add	r3, r2
 8018664:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8018668:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801866c:	f641 42cd 	movw	r2, #7373	@ 0x1ccd
 8018670:	fb02 f303 	mul.w	r3, r2, r3
 8018674:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8018678:	4413      	add	r3, r2
 801867a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801867e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018682:	4af4      	ldr	r2, [pc, #976]	@ (8018a54 <jpeg_idct_16x16+0x57c>)
 8018684:	fb02 f303 	mul.w	r3, r2, r3
 8018688:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801868c:	4413      	add	r3, r2
 801868e:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8018692:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018696:	4af0      	ldr	r2, [pc, #960]	@ (8018a58 <jpeg_idct_16x16+0x580>)
 8018698:	fb02 f303 	mul.w	r3, r2, r3
 801869c:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 80186a0:	4413      	add	r3, r2
 80186a2:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

    tmp20 = tmp10 + tmp0;
 80186a6:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80186aa:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80186ae:	4413      	add	r3, r2
 80186b0:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp27 = tmp10 - tmp0;
 80186b4:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80186b8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80186bc:	1ad3      	subs	r3, r2, r3
 80186be:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    tmp21 = tmp12 + tmp1;
 80186c2:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80186c6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80186ca:	4413      	add	r3, r2
 80186cc:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    tmp26 = tmp12 - tmp1;
 80186d0:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80186d4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80186d8:	1ad3      	subs	r3, r2, r3
 80186da:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp22 = tmp13 + tmp2;
 80186de:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80186e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80186e6:	4413      	add	r3, r2
 80186e8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    tmp25 = tmp13 - tmp2;
 80186ec:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80186f0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80186f4:	1ad3      	subs	r3, r2, r3
 80186f6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    tmp23 = tmp11 + tmp3;
 80186fa:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80186fe:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018702:	4413      	add	r3, r2
 8018704:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    tmp24 = tmp11 - tmp3;
 8018708:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801870c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018710:	1ad3      	subs	r3, r2, r3
 8018712:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8018716:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801871a:	3310      	adds	r3, #16
 801871c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018720:	461a      	mov	r2, r3
 8018722:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8018726:	3320      	adds	r3, #32
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	fb02 f303 	mul.w	r3, r2, r3
 801872e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8018732:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8018736:	3330      	adds	r3, #48	@ 0x30
 8018738:	f9b3 3000 	ldrsh.w	r3, [r3]
 801873c:	461a      	mov	r2, r3
 801873e:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8018742:	3360      	adds	r3, #96	@ 0x60
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	fb02 f303 	mul.w	r3, r2, r3
 801874a:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801874e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8018752:	3350      	adds	r3, #80	@ 0x50
 8018754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018758:	461a      	mov	r2, r3
 801875a:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801875e:	33a0      	adds	r3, #160	@ 0xa0
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	fb02 f303 	mul.w	r3, r2, r3
 8018766:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801876a:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801876e:	3370      	adds	r3, #112	@ 0x70
 8018770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018774:	461a      	mov	r2, r3
 8018776:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801877a:	33e0      	adds	r3, #224	@ 0xe0
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	fb02 f303 	mul.w	r3, r2, r3
 8018782:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

    tmp11 = z1 + z3;
 8018786:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 801878a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801878e:	4413      	add	r3, r2
 8018790:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8018794:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018798:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801879c:	4413      	add	r3, r2
 801879e:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 80187a2:	fb02 f303 	mul.w	r3, r2, r3
 80187a6:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80187aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80187ae:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 80187b2:	fb02 f303 	mul.w	r3, r2, r3
 80187b6:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80187ba:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80187be:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80187c2:	4413      	add	r3, r2
 80187c4:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 80187c8:	fb02 f303 	mul.w	r3, r2, r3
 80187cc:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80187d0:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80187d4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80187d8:	1ad3      	subs	r3, r2, r3
 80187da:	f641 42b6 	movw	r2, #7350	@ 0x1cb6
 80187de:	fb02 f303 	mul.w	r3, r2, r3
 80187e2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80187e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80187ea:	f241 5255 	movw	r2, #5461	@ 0x1555
 80187ee:	fb02 f303 	mul.w	r3, r2, r3
 80187f2:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80187f6:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80187fa:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80187fe:	1ad3      	subs	r3, r2, r3
 8018800:	f640 5223 	movw	r2, #3363	@ 0xd23
 8018804:	fb02 f303 	mul.w	r3, r2, r3
 8018808:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp0  = tmp1 + tmp2 + tmp3 -
 801880c:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8018810:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018814:	441a      	add	r2, r3
 8018816:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801881a:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801881c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018820:	498e      	ldr	r1, [pc, #568]	@ (8018a5c <jpeg_idct_16x16+0x584>)
 8018822:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8018826:	4413      	add	r3, r2
 8018828:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp13 = tmp10 + tmp11 + tmp12 -
 801882c:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8018830:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8018834:	441a      	add	r2, r3
 8018836:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801883a:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801883c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018840:	4987      	ldr	r1, [pc, #540]	@ (8018a60 <jpeg_idct_16x16+0x588>)
 8018842:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 8018846:	4413      	add	r3, r2
 8018848:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801884c:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8018850:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018854:	4413      	add	r3, r2
 8018856:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 801885a:	fb02 f303 	mul.w	r3, r2, r3
 801885e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8018862:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018866:	f240 224d 	movw	r2, #589	@ 0x24d
 801886a:	fb03 f202 	mul.w	r2, r3, r2
 801886e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018872:	4413      	add	r3, r2
 8018874:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8018878:	4413      	add	r3, r2
 801887a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801887e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018882:	4a78      	ldr	r2, [pc, #480]	@ (8018a64 <jpeg_idct_16x16+0x58c>)
 8018884:	fb03 f202 	mul.w	r2, r3, r2
 8018888:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801888c:	4413      	add	r3, r2
 801888e:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8018892:	4413      	add	r3, r2
 8018894:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8018898:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801889c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80188a0:	1ad3      	subs	r3, r2, r3
 80188a2:	f642 5209 	movw	r2, #11529	@ 0x2d09
 80188a6:	fb02 f303 	mul.w	r3, r2, r3
 80188aa:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80188ae:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80188b2:	4a6d      	ldr	r2, [pc, #436]	@ (8018a68 <jpeg_idct_16x16+0x590>)
 80188b4:	fb03 f202 	mul.w	r2, r3, r2
 80188b8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80188bc:	4413      	add	r3, r2
 80188be:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80188c2:	4413      	add	r3, r2
 80188c4:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80188c8:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80188cc:	f643 721a 	movw	r2, #16154	@ 0x3f1a
 80188d0:	fb03 f202 	mul.w	r2, r3, r2
 80188d4:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80188d8:	4413      	add	r3, r2
 80188da:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80188de:	4413      	add	r3, r2
 80188e0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    z2    += z4;
 80188e4:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 80188e8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80188ec:	4413      	add	r3, r2
 80188ee:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80188f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80188f6:	4a5d      	ldr	r2, [pc, #372]	@ (8018a6c <jpeg_idct_16x16+0x594>)
 80188f8:	fb02 f303 	mul.w	r3, r2, r3
 80188fc:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp1  += z1;
 8018900:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8018904:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018908:	4413      	add	r3, r2
 801890a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801890e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018912:	f242 2218 	movw	r2, #8728	@ 0x2218
 8018916:	fb03 f202 	mul.w	r2, r3, r2
 801891a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801891e:	4413      	add	r3, r2
 8018920:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8018924:	4413      	add	r3, r2
 8018926:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801892a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801892e:	4a50      	ldr	r2, [pc, #320]	@ (8018a70 <jpeg_idct_16x16+0x598>)
 8018930:	fb02 f303 	mul.w	r3, r2, r3
 8018934:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8018938:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801893c:	f246 4285 	movw	r2, #25733	@ 0x6485
 8018940:	fb03 f202 	mul.w	r2, r3, r2
 8018944:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018948:	4413      	add	r3, r2
 801894a:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 801894e:	4413      	add	r3, r2
 8018950:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp12 += z2;
 8018954:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018958:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801895c:	4413      	add	r3, r2
 801895e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8018962:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018966:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801896a:	4413      	add	r3, r2
 801896c:	4a41      	ldr	r2, [pc, #260]	@ (8018a74 <jpeg_idct_16x16+0x59c>)
 801896e:	fb02 f303 	mul.w	r3, r2, r3
 8018972:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    tmp2  += z2;
 8018976:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801897a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801897e:	4413      	add	r3, r2
 8018980:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3  += z2;
 8018984:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8018988:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801898c:	4413      	add	r3, r2
 801898e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8018992:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8018996:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801899a:	1ad3      	subs	r3, r2, r3
 801899c:	f640 5223 	movw	r2, #3363	@ 0xd23
 80189a0:	fb02 f303 	mul.w	r3, r2, r3
 80189a4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    tmp10 += z2;
 80189a8:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80189ac:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80189b0:	4413      	add	r3, r2
 80189b2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp11 += z2;
 80189b6:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80189ba:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80189be:	4413      	add	r3, r2
 80189c0:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80189c4:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80189c8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80189cc:	4413      	add	r3, r2
 80189ce:	12da      	asrs	r2, r3, #11
 80189d0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80189d4:	601a      	str	r2, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80189d6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80189da:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80189de:	1ad2      	subs	r2, r2, r3
 80189e0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80189e4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80189e8:	12d2      	asrs	r2, r2, #11
 80189ea:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80189ec:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80189f0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80189f4:	441a      	add	r2, r3
 80189f6:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80189fa:	3320      	adds	r3, #32
 80189fc:	12d2      	asrs	r2, r2, #11
 80189fe:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8018a00:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8018a04:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8018a08:	1ad2      	subs	r2, r2, r3
 8018a0a:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018a0e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8018a12:	12d2      	asrs	r2, r2, #11
 8018a14:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8018a16:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8018a1a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018a1e:	441a      	add	r2, r3
 8018a20:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018a24:	3340      	adds	r3, #64	@ 0x40
 8018a26:	12d2      	asrs	r2, r2, #11
 8018a28:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8018a2a:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8018a2e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018a32:	1ad2      	subs	r2, r2, r3
 8018a34:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018a38:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8018a3c:	12d2      	asrs	r2, r2, #11
 8018a3e:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8018a40:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8018a44:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018a48:	441a      	add	r2, r3
 8018a4a:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018a4e:	3360      	adds	r3, #96	@ 0x60
 8018a50:	12d2      	asrs	r2, r2, #11
 8018a52:	e011      	b.n	8018a78 <jpeg_idct_16x16+0x5a0>
 8018a54:	ffffecc2 	.word	0xffffecc2
 8018a58:	ffffefb0 	.word	0xffffefb0
 8018a5c:	ffffb6d6 	.word	0xffffb6d6
 8018a60:	ffffc542 	.word	0xffffc542
 8018a64:	ffffdbfa 	.word	0xffffdbfa
 8018a68:	ffffe77a 	.word	0xffffe77a
 8018a6c:	ffffeaab 	.word	0xffffeaab
 8018a70:	ffffd817 	.word	0xffffd817
 8018a74:	ffffd4b2 	.word	0xffffd4b2
 8018a78:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8018a7a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8018a7e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018a82:	1ad2      	subs	r2, r2, r3
 8018a84:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018a88:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8018a8c:	12d2      	asrs	r2, r2, #11
 8018a8e:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8018a90:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018a94:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8018a98:	441a      	add	r2, r3
 8018a9a:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018a9e:	3380      	adds	r3, #128	@ 0x80
 8018aa0:	12d2      	asrs	r2, r2, #11
 8018aa2:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8018aa4:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8018aa8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8018aac:	1ad2      	subs	r2, r2, r3
 8018aae:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018ab2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8018ab6:	12d2      	asrs	r2, r2, #11
 8018ab8:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8018aba:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8018abe:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8018ac2:	441a      	add	r2, r3
 8018ac4:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018ac8:	33a0      	adds	r3, #160	@ 0xa0
 8018aca:	12d2      	asrs	r2, r2, #11
 8018acc:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8018ace:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8018ad2:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8018ad6:	1ad2      	subs	r2, r2, r3
 8018ad8:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018adc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8018ae0:	12d2      	asrs	r2, r2, #11
 8018ae2:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8018ae4:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8018ae8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8018aec:	441a      	add	r2, r3
 8018aee:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018af2:	33c0      	adds	r3, #192	@ 0xc0
 8018af4:	12d2      	asrs	r2, r2, #11
 8018af6:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8018af8:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8018afc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8018b00:	1ad2      	subs	r2, r2, r3
 8018b02:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018b06:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8018b0a:	12d2      	asrs	r2, r2, #11
 8018b0c:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8018b0e:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8018b12:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018b16:	441a      	add	r2, r3
 8018b18:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018b1c:	33e0      	adds	r3, #224	@ 0xe0
 8018b1e:	12d2      	asrs	r2, r2, #11
 8018b20:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8018b22:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8018b26:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8018b2a:	1ad2      	subs	r2, r2, r3
 8018b2c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018b30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8018b34:	12d2      	asrs	r2, r2, #11
 8018b36:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8018b38:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8018b42:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8018b46:	3302      	adds	r3, #2
 8018b48:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8018b4c:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8018b50:	3304      	adds	r3, #4
 8018b52:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8018b56:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018b5a:	3304      	adds	r3, #4
 8018b5c:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8018b60:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8018b64:	2b07      	cmp	r3, #7
 8018b66:	f77f acf0 	ble.w	801854a <jpeg_idct_16x16+0x72>
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8018b6a:	f107 0310 	add.w	r3, r7, #16
 8018b6e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 8018b72:	2300      	movs	r3, #0
 8018b74:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8018b78:	e324      	b.n	80191c4 <jpeg_idct_16x16+0xcec>
    outptr = output_buf[ctr] + output_col;
 8018b7a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8018b7e:	009b      	lsls	r3, r3, #2
 8018b80:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 8018b84:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8018b88:	6812      	ldr	r2, [r2, #0]
 8018b8a:	4413      	add	r3, r2
 8018b8c:	681a      	ldr	r2, [r3, #0]
 8018b8e:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8018b92:	4413      	add	r3, r2
 8018b94:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8018b98:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	3310      	adds	r3, #16
 8018ba0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp0 <<= CONST_BITS;
 8018ba4:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8018ba8:	035b      	lsls	r3, r3, #13
 8018baa:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

    z1 = (INT32) wsptr[4];
 8018bae:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018bb2:	3310      	adds	r3, #16
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8018bba:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018bbe:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 8018bc2:	fb02 f303 	mul.w	r3, r2, r3
 8018bc6:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8018bca:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018bce:	f241 1251 	movw	r2, #4433	@ 0x1151
 8018bd2:	fb02 f303 	mul.w	r3, r2, r3
 8018bd6:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250

    tmp10 = tmp0 + tmp1;
 8018bda:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8018bde:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8018be2:	4413      	add	r3, r2
 8018be4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp11 = tmp0 - tmp1;
 8018be8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8018bec:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8018bf0:	1ad3      	subs	r3, r2, r3
 8018bf2:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp12 = tmp0 + tmp2;
 8018bf6:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8018bfa:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018bfe:	4413      	add	r3, r2
 8018c00:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp13 = tmp0 - tmp2;
 8018c04:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8018c08:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018c0c:	1ad3      	subs	r3, r2, r3
 8018c0e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240

    z1 = (INT32) wsptr[2];
 8018c12:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018c16:	3308      	adds	r3, #8
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    z2 = (INT32) wsptr[6];
 8018c1e:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018c22:	3318      	adds	r3, #24
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z3 = z1 - z2;
 8018c2a:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018c2e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018c32:	1ad3      	subs	r3, r2, r3
 8018c34:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8018c38:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018c3c:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 8018c40:	fb02 f303 	mul.w	r3, r2, r3
 8018c44:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8018c48:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018c4c:	f642 4263 	movw	r2, #11363	@ 0x2c63
 8018c50:	fb02 f303 	mul.w	r3, r2, r3
 8018c54:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8018c58:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018c5c:	f245 2203 	movw	r2, #20995	@ 0x5203
 8018c60:	fb02 f303 	mul.w	r3, r2, r3
 8018c64:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018c68:	4413      	add	r3, r2
 8018c6a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8018c6e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018c72:	f641 42cd 	movw	r2, #7373	@ 0x1ccd
 8018c76:	fb02 f303 	mul.w	r3, r2, r3
 8018c7a:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8018c7e:	4413      	add	r3, r2
 8018c80:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8018c84:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018c88:	4af4      	ldr	r2, [pc, #976]	@ (801905c <jpeg_idct_16x16+0xb84>)
 8018c8a:	fb02 f303 	mul.w	r3, r2, r3
 8018c8e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018c92:	4413      	add	r3, r2
 8018c94:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8018c98:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018c9c:	4af0      	ldr	r2, [pc, #960]	@ (8019060 <jpeg_idct_16x16+0xb88>)
 8018c9e:	fb02 f303 	mul.w	r3, r2, r3
 8018ca2:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8018ca6:	4413      	add	r3, r2
 8018ca8:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

    tmp20 = tmp10 + tmp0;
 8018cac:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8018cb0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8018cb4:	4413      	add	r3, r2
 8018cb6:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp27 = tmp10 - tmp0;
 8018cba:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8018cbe:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8018cc2:	1ad3      	subs	r3, r2, r3
 8018cc4:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    tmp21 = tmp12 + tmp1;
 8018cc8:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018ccc:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8018cd0:	4413      	add	r3, r2
 8018cd2:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    tmp26 = tmp12 - tmp1;
 8018cd6:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018cda:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8018cde:	1ad3      	subs	r3, r2, r3
 8018ce0:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp22 = tmp13 + tmp2;
 8018ce4:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8018ce8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018cec:	4413      	add	r3, r2
 8018cee:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    tmp25 = tmp13 - tmp2;
 8018cf2:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8018cf6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018cfa:	1ad3      	subs	r3, r2, r3
 8018cfc:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    tmp23 = tmp11 + tmp3;
 8018d00:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8018d04:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018d08:	4413      	add	r3, r2
 8018d0a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    tmp24 = tmp11 - tmp3;
 8018d0e:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8018d12:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018d16:	1ad3      	subs	r3, r2, r3
 8018d18:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8018d1c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018d20:	3304      	adds	r3, #4
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    z2 = (INT32) wsptr[3];
 8018d28:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018d2c:	330c      	adds	r3, #12
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z3 = (INT32) wsptr[5];
 8018d34:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018d38:	3314      	adds	r3, #20
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    z4 = (INT32) wsptr[7];
 8018d40:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8018d44:	331c      	adds	r3, #28
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

    tmp11 = z1 + z3;
 8018d4c:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018d50:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018d54:	4413      	add	r3, r2
 8018d56:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8018d5a:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018d5e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018d62:	4413      	add	r3, r2
 8018d64:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 8018d68:	fb02 f303 	mul.w	r3, r2, r3
 8018d6c:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8018d70:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8018d74:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 8018d78:	fb02 f303 	mul.w	r3, r2, r3
 8018d7c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8018d80:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018d84:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018d88:	4413      	add	r3, r2
 8018d8a:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 8018d8e:	fb02 f303 	mul.w	r3, r2, r3
 8018d92:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8018d96:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018d9a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018d9e:	1ad3      	subs	r3, r2, r3
 8018da0:	f641 42b6 	movw	r2, #7350	@ 0x1cb6
 8018da4:	fb02 f303 	mul.w	r3, r2, r3
 8018da8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8018dac:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8018db0:	f241 5255 	movw	r2, #5461	@ 0x1555
 8018db4:	fb02 f303 	mul.w	r3, r2, r3
 8018db8:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8018dbc:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8018dc0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018dc4:	1ad3      	subs	r3, r2, r3
 8018dc6:	f640 5223 	movw	r2, #3363	@ 0xd23
 8018dca:	fb02 f303 	mul.w	r3, r2, r3
 8018dce:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp0  = tmp1 + tmp2 + tmp3 -
 8018dd2:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8018dd6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018dda:	441a      	add	r2, r3
 8018ddc:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8018de0:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 8018de2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018de6:	499f      	ldr	r1, [pc, #636]	@ (8019064 <jpeg_idct_16x16+0xb8c>)
 8018de8:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8018dec:	4413      	add	r3, r2
 8018dee:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp13 = tmp10 + tmp11 + tmp12 -
 8018df2:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8018df6:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8018dfa:	441a      	add	r2, r3
 8018dfc:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8018e00:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 8018e02:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018e06:	4998      	ldr	r1, [pc, #608]	@ (8019068 <jpeg_idct_16x16+0xb90>)
 8018e08:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 8018e0c:	4413      	add	r3, r2
 8018e0e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8018e12:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8018e16:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018e1a:	4413      	add	r3, r2
 8018e1c:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8018e20:	fb02 f303 	mul.w	r3, r2, r3
 8018e24:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8018e28:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018e2c:	f240 224d 	movw	r2, #589	@ 0x24d
 8018e30:	fb03 f202 	mul.w	r2, r3, r2
 8018e34:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018e38:	4413      	add	r3, r2
 8018e3a:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8018e3e:	4413      	add	r3, r2
 8018e40:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8018e44:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018e48:	4a88      	ldr	r2, [pc, #544]	@ (801906c <jpeg_idct_16x16+0xb94>)
 8018e4a:	fb03 f202 	mul.w	r2, r3, r2
 8018e4e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018e52:	4413      	add	r3, r2
 8018e54:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8018e58:	4413      	add	r3, r2
 8018e5a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8018e5e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018e62:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018e66:	1ad3      	subs	r3, r2, r3
 8018e68:	f642 5209 	movw	r2, #11529	@ 0x2d09
 8018e6c:	fb02 f303 	mul.w	r3, r2, r3
 8018e70:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8018e74:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018e78:	4a7d      	ldr	r2, [pc, #500]	@ (8019070 <jpeg_idct_16x16+0xb98>)
 8018e7a:	fb03 f202 	mul.w	r2, r3, r2
 8018e7e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018e82:	4413      	add	r3, r2
 8018e84:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8018e88:	4413      	add	r3, r2
 8018e8a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8018e8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018e92:	f643 721a 	movw	r2, #16154	@ 0x3f1a
 8018e96:	fb03 f202 	mul.w	r2, r3, r2
 8018e9a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018e9e:	4413      	add	r3, r2
 8018ea0:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018ea4:	4413      	add	r3, r2
 8018ea6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    z2    += z4;
 8018eaa:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8018eae:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018eb2:	4413      	add	r3, r2
 8018eb4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8018eb8:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018ebc:	4a6d      	ldr	r2, [pc, #436]	@ (8019074 <jpeg_idct_16x16+0xb9c>)
 8018ebe:	fb02 f303 	mul.w	r3, r2, r3
 8018ec2:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    tmp1  += z1;
 8018ec6:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8018eca:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018ece:	4413      	add	r3, r2
 8018ed0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8018ed4:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018ed8:	f242 2218 	movw	r2, #8728	@ 0x2218
 8018edc:	fb03 f202 	mul.w	r2, r3, r2
 8018ee0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8018ee4:	4413      	add	r3, r2
 8018ee6:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8018eea:	4413      	add	r3, r2
 8018eec:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8018ef0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018ef4:	4a60      	ldr	r2, [pc, #384]	@ (8019078 <jpeg_idct_16x16+0xba0>)
 8018ef6:	fb02 f303 	mul.w	r3, r2, r3
 8018efa:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8018efe:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018f02:	f246 4285 	movw	r2, #25733	@ 0x6485
 8018f06:	fb03 f202 	mul.w	r2, r3, r2
 8018f0a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018f0e:	4413      	add	r3, r2
 8018f10:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8018f14:	4413      	add	r3, r2
 8018f16:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp12 += z2;
 8018f1a:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8018f1e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018f22:	4413      	add	r3, r2
 8018f24:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8018f28:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8018f2c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8018f30:	4413      	add	r3, r2
 8018f32:	4a52      	ldr	r2, [pc, #328]	@ (801907c <jpeg_idct_16x16+0xba4>)
 8018f34:	fb02 f303 	mul.w	r3, r2, r3
 8018f38:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    tmp2  += z2;
 8018f3c:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8018f40:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018f44:	4413      	add	r3, r2
 8018f46:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3  += z2;
 8018f4a:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8018f4e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018f52:	4413      	add	r3, r2
 8018f54:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8018f58:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8018f5c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8018f60:	1ad3      	subs	r3, r2, r3
 8018f62:	f640 5223 	movw	r2, #3363	@ 0xd23
 8018f66:	fb02 f303 	mul.w	r3, r2, r3
 8018f6a:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    tmp10 += z2;
 8018f6e:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8018f72:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018f76:	4413      	add	r3, r2
 8018f78:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp11 += z2;
 8018f7c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8018f80:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8018f84:	4413      	add	r3, r2
 8018f86:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8018f8a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8018f8e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8018f92:	4413      	add	r3, r2
 8018f94:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8018f9a:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8018f9e:	4413      	add	r3, r2
 8018fa0:	781a      	ldrb	r2, [r3, #0]
 8018fa2:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8018fa6:	701a      	strb	r2, [r3, #0]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8018fa8:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8018fac:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8018fb0:	1ad3      	subs	r3, r2, r3
 8018fb2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8018fb8:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8018fbc:	441a      	add	r2, r3
 8018fbe:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8018fc2:	330f      	adds	r3, #15
 8018fc4:	7812      	ldrb	r2, [r2, #0]
 8018fc6:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8018fc8:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8018fcc:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8018fd0:	4413      	add	r3, r2
 8018fd2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8018fd8:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8018fdc:	441a      	add	r2, r3
 8018fde:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8018fe2:	3301      	adds	r3, #1
 8018fe4:	7812      	ldrb	r2, [r2, #0]
 8018fe6:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8018fe8:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8018fec:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8018ff0:	1ad3      	subs	r3, r2, r3
 8018ff2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8018ff8:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8018ffc:	441a      	add	r2, r3
 8018ffe:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8019002:	330e      	adds	r3, #14
 8019004:	7812      	ldrb	r2, [r2, #0]
 8019006:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8019008:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801900c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8019010:	4413      	add	r3, r2
 8019012:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019014:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8019018:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801901c:	441a      	add	r2, r3
 801901e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8019022:	3302      	adds	r3, #2
 8019024:	7812      	ldrb	r2, [r2, #0]
 8019026:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8019028:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801902c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8019030:	1ad3      	subs	r3, r2, r3
 8019032:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019034:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8019038:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801903c:	441a      	add	r2, r3
 801903e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8019042:	330d      	adds	r3, #13
 8019044:	7812      	ldrb	r2, [r2, #0]
 8019046:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8019048:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801904c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8019050:	4413      	add	r3, r2
 8019052:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019058:	e012      	b.n	8019080 <jpeg_idct_16x16+0xba8>
 801905a:	bf00      	nop
 801905c:	ffffecc2 	.word	0xffffecc2
 8019060:	ffffefb0 	.word	0xffffefb0
 8019064:	ffffb6d6 	.word	0xffffb6d6
 8019068:	ffffc542 	.word	0xffffc542
 801906c:	ffffdbfa 	.word	0xffffdbfa
 8019070:	ffffe77a 	.word	0xffffe77a
 8019074:	ffffeaab 	.word	0xffffeaab
 8019078:	ffffd817 	.word	0xffffd817
 801907c:	ffffd4b2 	.word	0xffffd4b2
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8019080:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019084:	441a      	add	r2, r3
 8019086:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801908a:	3303      	adds	r3, #3
 801908c:	7812      	ldrb	r2, [r2, #0]
 801908e:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8019090:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019094:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8019098:	1ad3      	subs	r3, r2, r3
 801909a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801909c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80190a0:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 80190a4:	441a      	add	r2, r3
 80190a6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80190aa:	330c      	adds	r3, #12
 80190ac:	7812      	ldrb	r2, [r2, #0]
 80190ae:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80190b0:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80190b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80190b8:	4413      	add	r3, r2
 80190ba:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80190bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80190c0:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 80190c4:	441a      	add	r2, r3
 80190c6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80190ca:	3304      	adds	r3, #4
 80190cc:	7812      	ldrb	r2, [r2, #0]
 80190ce:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80190d0:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80190d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80190d8:	1ad3      	subs	r3, r2, r3
 80190da:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80190dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80190e0:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 80190e4:	441a      	add	r2, r3
 80190e6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80190ea:	330b      	adds	r3, #11
 80190ec:	7812      	ldrb	r2, [r2, #0]
 80190ee:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80190f0:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80190f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80190f8:	4413      	add	r3, r2
 80190fa:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80190fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8019100:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019104:	441a      	add	r2, r3
 8019106:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801910a:	3305      	adds	r3, #5
 801910c:	7812      	ldrb	r2, [r2, #0]
 801910e:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8019110:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8019114:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8019118:	1ad3      	subs	r3, r2, r3
 801911a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801911c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8019120:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019124:	441a      	add	r2, r3
 8019126:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801912a:	330a      	adds	r3, #10
 801912c:	7812      	ldrb	r2, [r2, #0]
 801912e:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8019130:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8019134:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8019138:	4413      	add	r3, r2
 801913a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801913c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8019140:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019144:	441a      	add	r2, r3
 8019146:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801914a:	3306      	adds	r3, #6
 801914c:	7812      	ldrb	r2, [r2, #0]
 801914e:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8019150:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8019154:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8019158:	1ad3      	subs	r3, r2, r3
 801915a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801915c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8019160:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019164:	441a      	add	r2, r3
 8019166:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801916a:	3309      	adds	r3, #9
 801916c:	7812      	ldrb	r2, [r2, #0]
 801916e:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8019170:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8019174:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8019178:	4413      	add	r3, r2
 801917a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801917c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8019180:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019184:	441a      	add	r2, r3
 8019186:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801918a:	3307      	adds	r3, #7
 801918c:	7812      	ldrb	r2, [r2, #0]
 801918e:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8019190:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8019194:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8019198:	1ad3      	subs	r3, r2, r3
 801919a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801919c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80191a0:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 80191a4:	441a      	add	r2, r3
 80191a6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80191aa:	3308      	adds	r3, #8
 80191ac:	7812      	ldrb	r2, [r2, #0]
 80191ae:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80191b0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 80191b4:	3320      	adds	r3, #32
 80191b6:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 80191ba:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80191be:	3301      	adds	r3, #1
 80191c0:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80191c4:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80191c8:	2b0f      	cmp	r3, #15
 80191ca:	f77f acd6 	ble.w	8018b7a <jpeg_idct_16x16+0x6a2>
  }
}
 80191ce:	bf00      	nop
 80191d0:	bf00      	nop
 80191d2:	f507 771e 	add.w	r7, r7, #632	@ 0x278
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bc90      	pop	{r4, r7}
 80191da:	4770      	bx	lr

080191dc <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80191dc:	b490      	push	{r4, r7}
 80191de:	b0e0      	sub	sp, #384	@ 0x180
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	f507 74c0 	add.w	r4, r7, #384	@ 0x180
 80191e6:	f5a4 74ba 	sub.w	r4, r4, #372	@ 0x174
 80191ea:	6020      	str	r0, [r4, #0]
 80191ec:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80191f0:	f5a0 70bc 	sub.w	r0, r0, #376	@ 0x178
 80191f4:	6001      	str	r1, [r0, #0]
 80191f6:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80191fa:	f5a1 71be 	sub.w	r1, r1, #380	@ 0x17c
 80191fe:	600a      	str	r2, [r1, #0]
 8019200:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8019204:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8019208:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801920a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 801920e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8019218:	3380      	adds	r3, #128	@ 0x80
 801921a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 801921e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8019222:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801922c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8019230:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019238:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
  wsptr = workspace;
 801923c:	f107 0314 	add.w	r3, r7, #20
 8019240:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8019244:	2308      	movs	r3, #8
 8019246:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801924a:	e238      	b.n	80196be <jpeg_idct_16x8+0x4e2>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801924c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8019250:	3310      	adds	r3, #16
 8019252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d175      	bne.n	8019346 <jpeg_idct_16x8+0x16a>
 801925a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801925e:	3320      	adds	r3, #32
 8019260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d16e      	bne.n	8019346 <jpeg_idct_16x8+0x16a>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8019268:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801926c:	3330      	adds	r3, #48	@ 0x30
 801926e:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8019272:	2b00      	cmp	r3, #0
 8019274:	d167      	bne.n	8019346 <jpeg_idct_16x8+0x16a>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8019276:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801927a:	3340      	adds	r3, #64	@ 0x40
 801927c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d160      	bne.n	8019346 <jpeg_idct_16x8+0x16a>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8019284:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8019288:	3350      	adds	r3, #80	@ 0x50
 801928a:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801928e:	2b00      	cmp	r3, #0
 8019290:	d159      	bne.n	8019346 <jpeg_idct_16x8+0x16a>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8019292:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8019296:	3360      	adds	r3, #96	@ 0x60
 8019298:	f9b3 3000 	ldrsh.w	r3, [r3]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d152      	bne.n	8019346 <jpeg_idct_16x8+0x16a>
	inptr[DCTSIZE*7] == 0) {
 80192a0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80192a4:	3370      	adds	r3, #112	@ 0x70
 80192a6:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d14b      	bne.n	8019346 <jpeg_idct_16x8+0x16a>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80192ae:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80192b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80192b6:	461a      	mov	r2, r3
 80192b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	fb02 f303 	mul.w	r3, r2, r3
 80192c2:	009b      	lsls	r3, r3, #2
 80192c4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
      
      wsptr[DCTSIZE*0] = dcval;
 80192c8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80192cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80192d0:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 80192d2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80192d6:	3320      	adds	r3, #32
 80192d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80192dc:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 80192de:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80192e2:	3340      	adds	r3, #64	@ 0x40
 80192e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80192e8:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 80192ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80192ee:	3360      	adds	r3, #96	@ 0x60
 80192f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80192f4:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 80192f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80192fa:	3380      	adds	r3, #128	@ 0x80
 80192fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019300:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 8019302:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019306:	33a0      	adds	r3, #160	@ 0xa0
 8019308:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801930c:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 801930e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019312:	33c0      	adds	r3, #192	@ 0xc0
 8019314:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019318:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 801931a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801931e:	33e0      	adds	r3, #224	@ 0xe0
 8019320:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8019324:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 8019326:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801932a:	3302      	adds	r3, #2
 801932c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
      quantptr++;
 8019330:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8019334:	3304      	adds	r3, #4
 8019336:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
      wsptr++;
 801933a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801933e:	3304      	adds	r3, #4
 8019340:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      continue;
 8019344:	e1b6      	b.n	80196b4 <jpeg_idct_16x8+0x4d8>
    }
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8019346:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801934a:	3320      	adds	r3, #32
 801934c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019350:	461a      	mov	r2, r3
 8019352:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8019356:	3340      	adds	r3, #64	@ 0x40
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	fb02 f303 	mul.w	r3, r2, r3
 801935e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8019362:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8019366:	3360      	adds	r3, #96	@ 0x60
 8019368:	f9b3 3000 	ldrsh.w	r3, [r3]
 801936c:	461a      	mov	r2, r3
 801936e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8019372:	33c0      	adds	r3, #192	@ 0xc0
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	fb02 f303 	mul.w	r3, r2, r3
 801937a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801937e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8019382:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8019386:	4413      	add	r3, r2
 8019388:	f241 1251 	movw	r2, #4433	@ 0x1151
 801938c:	fb02 f303 	mul.w	r3, r2, r3
 8019390:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8019394:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019398:	f641 027e 	movw	r2, #6270	@ 0x187e
 801939c:	fb02 f303 	mul.w	r3, r2, r3
 80193a0:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80193a4:	4413      	add	r3, r2
 80193a6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80193aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80193ae:	4aca      	ldr	r2, [pc, #808]	@ (80196d8 <jpeg_idct_16x8+0x4fc>)
 80193b0:	fb02 f303 	mul.w	r3, r2, r3
 80193b4:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80193b8:	4413      	add	r3, r2
 80193ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80193be:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80193c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193c6:	461a      	mov	r2, r3
 80193c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	fb02 f303 	mul.w	r3, r2, r3
 80193d2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80193d6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80193da:	3340      	adds	r3, #64	@ 0x40
 80193dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193e0:	461a      	mov	r2, r3
 80193e2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80193e6:	3380      	adds	r3, #128	@ 0x80
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	fb02 f303 	mul.w	r3, r2, r3
 80193ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z2 <<= CONST_BITS;
 80193f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80193f6:	035b      	lsls	r3, r3, #13
 80193f8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 <<= CONST_BITS;
 80193fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8019400:	035b      	lsls	r3, r3, #13
 8019402:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8019406:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801940a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801940e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    tmp0 = z2 + z3;
 8019412:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8019416:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801941a:	4413      	add	r3, r2
 801941c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp1 = z2 - z3;
 8019420:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8019424:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8019428:	1ad3      	subs	r3, r2, r3
 801942a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    
    tmp10 = tmp0 + tmp2;
 801942e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8019432:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8019436:	4413      	add	r3, r2
 8019438:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp13 = tmp0 - tmp2;
 801943c:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8019440:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8019444:	1ad3      	subs	r3, r2, r3
 8019446:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    tmp11 = tmp1 + tmp3;
 801944a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801944e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019452:	4413      	add	r3, r2
 8019454:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp12 = tmp1 - tmp3;
 8019458:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801945c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019460:	1ad3      	subs	r3, r2, r3
 8019462:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8019466:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801946a:	3370      	adds	r3, #112	@ 0x70
 801946c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019470:	461a      	mov	r2, r3
 8019472:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8019476:	33e0      	adds	r3, #224	@ 0xe0
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	fb02 f303 	mul.w	r3, r2, r3
 801947e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8019482:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8019486:	3350      	adds	r3, #80	@ 0x50
 8019488:	f9b3 3000 	ldrsh.w	r3, [r3]
 801948c:	461a      	mov	r2, r3
 801948e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8019492:	33a0      	adds	r3, #160	@ 0xa0
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	fb02 f303 	mul.w	r3, r2, r3
 801949a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801949e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80194a2:	3330      	adds	r3, #48	@ 0x30
 80194a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194a8:	461a      	mov	r2, r3
 80194aa:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80194ae:	3360      	adds	r3, #96	@ 0x60
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	fb02 f303 	mul.w	r3, r2, r3
 80194b6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80194ba:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80194be:	3310      	adds	r3, #16
 80194c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194c4:	461a      	mov	r2, r3
 80194c6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80194ca:	3320      	adds	r3, #32
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	fb02 f303 	mul.w	r3, r2, r3
 80194d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    
    z2 = tmp0 + tmp2;
 80194d6:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80194da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80194de:	4413      	add	r3, r2
 80194e0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 = tmp1 + tmp3;
 80194e4:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80194e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80194ec:	4413      	add	r3, r2
 80194ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80194f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80194f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80194fa:	4413      	add	r3, r2
 80194fc:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 8019500:	fb02 f303 	mul.w	r3, r2, r3
 8019504:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8019508:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801950c:	4a73      	ldr	r2, [pc, #460]	@ (80196dc <jpeg_idct_16x8+0x500>)
 801950e:	fb02 f303 	mul.w	r3, r2, r3
 8019512:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8019516:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801951a:	4a71      	ldr	r2, [pc, #452]	@ (80196e0 <jpeg_idct_16x8+0x504>)
 801951c:	fb02 f303 	mul.w	r3, r2, r3
 8019520:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z2 += z1;
 8019524:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8019528:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801952c:	4413      	add	r3, r2
 801952e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 += z1;
 8019532:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8019536:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801953a:	4413      	add	r3, r2
 801953c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8019540:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8019544:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019548:	4413      	add	r3, r2
 801954a:	4a66      	ldr	r2, [pc, #408]	@ (80196e4 <jpeg_idct_16x8+0x508>)
 801954c:	fb02 f303 	mul.w	r3, r2, r3
 8019550:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8019554:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8019558:	f640 128e 	movw	r2, #2446	@ 0x98e
 801955c:	fb02 f303 	mul.w	r3, r2, r3
 8019560:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8019564:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019568:	f243 020b 	movw	r2, #12299	@ 0x300b
 801956c:	fb02 f303 	mul.w	r3, r2, r3
 8019570:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp0 += z1 + z2;
 8019574:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8019578:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801957c:	4413      	add	r3, r2
 801957e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8019582:	4413      	add	r3, r2
 8019584:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp3 += z1 + z3;
 8019588:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801958c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8019590:	4413      	add	r3, r2
 8019592:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8019596:	4413      	add	r3, r2
 8019598:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801959c:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80195a0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80195a4:	4413      	add	r3, r2
 80195a6:	4a50      	ldr	r2, [pc, #320]	@ (80196e8 <jpeg_idct_16x8+0x50c>)
 80195a8:	fb02 f303 	mul.w	r3, r2, r3
 80195ac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 80195b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80195b4:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 80195b8:	fb02 f303 	mul.w	r3, r2, r3
 80195bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 80195c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80195c4:	f246 2254 	movw	r2, #25172	@ 0x6254
 80195c8:	fb02 f303 	mul.w	r3, r2, r3
 80195cc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp1 += z1 + z3;
 80195d0:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80195d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80195d8:	4413      	add	r3, r2
 80195da:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80195de:	4413      	add	r3, r2
 80195e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp2 += z1 + z2;
 80195e4:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80195e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80195ec:	4413      	add	r3, r2
 80195ee:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80195f2:	4413      	add	r3, r2
 80195f4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80195f8:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80195fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019600:	4413      	add	r3, r2
 8019602:	12da      	asrs	r2, r3, #11
 8019604:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019608:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801960a:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801960e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019612:	1ad2      	subs	r2, r2, r3
 8019614:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019618:	33e0      	adds	r3, #224	@ 0xe0
 801961a:	12d2      	asrs	r2, r2, #11
 801961c:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801961e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019622:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8019626:	441a      	add	r2, r3
 8019628:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801962c:	3320      	adds	r3, #32
 801962e:	12d2      	asrs	r2, r2, #11
 8019630:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8019632:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019636:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801963a:	1ad2      	subs	r2, r2, r3
 801963c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019640:	33c0      	adds	r3, #192	@ 0xc0
 8019642:	12d2      	asrs	r2, r2, #11
 8019644:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8019646:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801964a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801964e:	441a      	add	r2, r3
 8019650:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019654:	3340      	adds	r3, #64	@ 0x40
 8019656:	12d2      	asrs	r2, r2, #11
 8019658:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801965a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801965e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8019662:	1ad2      	subs	r2, r2, r3
 8019664:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019668:	33a0      	adds	r3, #160	@ 0xa0
 801966a:	12d2      	asrs	r2, r2, #11
 801966c:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801966e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8019672:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8019676:	441a      	add	r2, r3
 8019678:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801967c:	3360      	adds	r3, #96	@ 0x60
 801967e:	12d2      	asrs	r2, r2, #11
 8019680:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8019682:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8019686:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801968a:	1ad2      	subs	r2, r2, r3
 801968c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019690:	3380      	adds	r3, #128	@ 0x80
 8019692:	12d2      	asrs	r2, r2, #11
 8019694:	601a      	str	r2, [r3, #0]
    
    inptr++;			/* advance pointers to next column */
 8019696:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801969a:	3302      	adds	r3, #2
 801969c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    quantptr++;
 80196a0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80196a4:	3304      	adds	r3, #4
 80196a6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    wsptr++;
 80196aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80196ae:	3304      	adds	r3, #4
 80196b0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80196b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80196b8:	3b01      	subs	r3, #1
 80196ba:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80196be:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	f73f adc2 	bgt.w	801924c <jpeg_idct_16x8+0x70>
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 80196c8:	f107 0314 	add.w	r3, r7, #20
 80196cc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  for (ctr = 0; ctr < 8; ctr++) {
 80196d0:	2300      	movs	r3, #0
 80196d2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80196d6:	e32d      	b.n	8019d34 <jpeg_idct_16x8+0xb58>
 80196d8:	ffffc4df 	.word	0xffffc4df
 80196dc:	ffffc13b 	.word	0xffffc13b
 80196e0:	fffff384 	.word	0xfffff384
 80196e4:	ffffe333 	.word	0xffffe333
 80196e8:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 80196ec:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80196f0:	009b      	lsls	r3, r3, #2
 80196f2:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80196f6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80196fa:	6812      	ldr	r2, [r2, #0]
 80196fc:	4413      	add	r3, r2
 80196fe:	681a      	ldr	r2, [r3, #0]
 8019700:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8019704:	4413      	add	r3, r2
 8019706:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801970a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	3310      	adds	r3, #16
 8019712:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp0 <<= CONST_BITS;
 8019716:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801971a:	035b      	lsls	r3, r3, #13
 801971c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    z1 = (INT32) wsptr[4];
 8019720:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019724:	3310      	adds	r3, #16
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801972c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8019730:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 8019734:	fb02 f303 	mul.w	r3, r2, r3
 8019738:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801973c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8019740:	f241 1251 	movw	r2, #4433	@ 0x1151
 8019744:	fb02 f303 	mul.w	r3, r2, r3
 8019748:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

    tmp10 = tmp0 + tmp1;
 801974c:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8019750:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8019754:	4413      	add	r3, r2
 8019756:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp11 = tmp0 - tmp1;
 801975a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801975e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8019762:	1ad3      	subs	r3, r2, r3
 8019764:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp12 = tmp0 + tmp2;
 8019768:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801976c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8019770:	4413      	add	r3, r2
 8019772:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp13 = tmp0 - tmp2;
 8019776:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801977a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801977e:	1ad3      	subs	r3, r2, r3
 8019780:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

    z1 = (INT32) wsptr[2];
 8019784:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019788:	3308      	adds	r3, #8
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    z2 = (INT32) wsptr[6];
 8019790:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019794:	3318      	adds	r3, #24
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 = z1 - z2;
 801979c:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80197a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80197a4:	1ad3      	subs	r3, r2, r3
 80197a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80197aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80197ae:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 80197b2:	fb02 f303 	mul.w	r3, r2, r3
 80197b6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80197ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80197be:	f642 4263 	movw	r2, #11363	@ 0x2c63
 80197c2:	fb02 f303 	mul.w	r3, r2, r3
 80197c6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80197ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80197ce:	f245 2203 	movw	r2, #20995	@ 0x5203
 80197d2:	fb02 f303 	mul.w	r3, r2, r3
 80197d6:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80197da:	4413      	add	r3, r2
 80197dc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80197e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80197e4:	f641 42cd 	movw	r2, #7373	@ 0x1ccd
 80197e8:	fb02 f303 	mul.w	r3, r2, r3
 80197ec:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80197f0:	4413      	add	r3, r2
 80197f2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80197f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80197fa:	4af4      	ldr	r2, [pc, #976]	@ (8019bcc <jpeg_idct_16x8+0x9f0>)
 80197fc:	fb02 f303 	mul.w	r3, r2, r3
 8019800:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8019804:	4413      	add	r3, r2
 8019806:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801980a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801980e:	4af0      	ldr	r2, [pc, #960]	@ (8019bd0 <jpeg_idct_16x8+0x9f4>)
 8019810:	fb02 f303 	mul.w	r3, r2, r3
 8019814:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8019818:	4413      	add	r3, r2
 801981a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    tmp20 = tmp10 + tmp0;
 801981e:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8019822:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8019826:	4413      	add	r3, r2
 8019828:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp27 = tmp10 - tmp0;
 801982c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8019830:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8019834:	1ad3      	subs	r3, r2, r3
 8019836:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp21 = tmp12 + tmp1;
 801983a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801983e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8019842:	4413      	add	r3, r2
 8019844:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp26 = tmp12 - tmp1;
 8019848:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801984c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8019850:	1ad3      	subs	r3, r2, r3
 8019852:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    tmp22 = tmp13 + tmp2;
 8019856:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801985a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801985e:	4413      	add	r3, r2
 8019860:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp25 = tmp13 - tmp2;
 8019864:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8019868:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801986c:	1ad3      	subs	r3, r2, r3
 801986e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp23 = tmp11 + tmp3;
 8019872:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019876:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801987a:	4413      	add	r3, r2
 801987c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp24 = tmp11 - tmp3;
 8019880:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019884:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019888:	1ad3      	subs	r3, r2, r3
 801988a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801988e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019892:	3304      	adds	r3, #4
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    z2 = (INT32) wsptr[3];
 801989a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801989e:	330c      	adds	r3, #12
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z3 = (INT32) wsptr[5];
 80198a6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80198aa:	3314      	adds	r3, #20
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    z4 = (INT32) wsptr[7];
 80198b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80198b6:	331c      	adds	r3, #28
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    tmp11 = z1 + z3;
 80198be:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80198c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80198c6:	4413      	add	r3, r2
 80198c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80198cc:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80198d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80198d4:	4413      	add	r3, r2
 80198d6:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 80198da:	fb02 f303 	mul.w	r3, r2, r3
 80198de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80198e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80198e6:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 80198ea:	fb02 f303 	mul.w	r3, r2, r3
 80198ee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80198f2:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80198f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80198fa:	4413      	add	r3, r2
 80198fc:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 8019900:	fb02 f303 	mul.w	r3, r2, r3
 8019904:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8019908:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801990c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019910:	1ad3      	subs	r3, r2, r3
 8019912:	f641 42b6 	movw	r2, #7350	@ 0x1cb6
 8019916:	fb02 f303 	mul.w	r3, r2, r3
 801991a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801991e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019922:	f241 5255 	movw	r2, #5461	@ 0x1555
 8019926:	fb02 f303 	mul.w	r3, r2, r3
 801992a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801992e:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8019932:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019936:	1ad3      	subs	r3, r2, r3
 8019938:	f640 5223 	movw	r2, #3363	@ 0xd23
 801993c:	fb02 f303 	mul.w	r3, r2, r3
 8019940:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8019944:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8019948:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801994c:	441a      	add	r2, r3
 801994e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019952:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 8019954:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8019958:	499e      	ldr	r1, [pc, #632]	@ (8019bd4 <jpeg_idct_16x8+0x9f8>)
 801995a:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 801995e:	4413      	add	r3, r2
 8019960:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp13 = tmp10 + tmp11 + tmp12 -
 8019964:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8019968:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801996c:	441a      	add	r2, r3
 801996e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019972:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 8019974:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8019978:	4997      	ldr	r1, [pc, #604]	@ (8019bd8 <jpeg_idct_16x8+0x9fc>)
 801997a:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 801997e:	4413      	add	r3, r2
 8019980:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8019984:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8019988:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801998c:	4413      	add	r3, r2
 801998e:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 8019992:	fb02 f303 	mul.w	r3, r2, r3
 8019996:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801999a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801999e:	f240 224d 	movw	r2, #589	@ 0x24d
 80199a2:	fb03 f202 	mul.w	r2, r3, r2
 80199a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80199aa:	4413      	add	r3, r2
 80199ac:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80199b0:	4413      	add	r3, r2
 80199b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80199b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80199ba:	4a88      	ldr	r2, [pc, #544]	@ (8019bdc <jpeg_idct_16x8+0xa00>)
 80199bc:	fb03 f202 	mul.w	r2, r3, r2
 80199c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80199c4:	4413      	add	r3, r2
 80199c6:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80199ca:	4413      	add	r3, r2
 80199cc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80199d0:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80199d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80199d8:	1ad3      	subs	r3, r2, r3
 80199da:	f642 5209 	movw	r2, #11529	@ 0x2d09
 80199de:	fb02 f303 	mul.w	r3, r2, r3
 80199e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80199e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80199ea:	4a7d      	ldr	r2, [pc, #500]	@ (8019be0 <jpeg_idct_16x8+0xa04>)
 80199ec:	fb03 f202 	mul.w	r2, r3, r2
 80199f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80199f4:	4413      	add	r3, r2
 80199f6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80199fa:	4413      	add	r3, r2
 80199fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8019a00:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019a04:	f643 721a 	movw	r2, #16154	@ 0x3f1a
 8019a08:	fb03 f202 	mul.w	r2, r3, r2
 8019a0c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8019a10:	4413      	add	r3, r2
 8019a12:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8019a16:	4413      	add	r3, r2
 8019a18:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    z2    += z4;
 8019a1c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8019a20:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019a24:	4413      	add	r3, r2
 8019a26:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8019a2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8019be4 <jpeg_idct_16x8+0xa08>)
 8019a30:	fb02 f303 	mul.w	r3, r2, r3
 8019a34:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp1  += z1;
 8019a38:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8019a3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8019a40:	4413      	add	r3, r2
 8019a42:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8019a46:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019a4a:	f242 2218 	movw	r2, #8728	@ 0x2218
 8019a4e:	fb03 f202 	mul.w	r2, r3, r2
 8019a52:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8019a56:	4413      	add	r3, r2
 8019a58:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8019a5c:	4413      	add	r3, r2
 8019a5e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8019a62:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019a66:	4a60      	ldr	r2, [pc, #384]	@ (8019be8 <jpeg_idct_16x8+0xa0c>)
 8019a68:	fb02 f303 	mul.w	r3, r2, r3
 8019a6c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8019a70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019a74:	f246 4285 	movw	r2, #25733	@ 0x6485
 8019a78:	fb03 f202 	mul.w	r2, r3, r2
 8019a7c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019a80:	4413      	add	r3, r2
 8019a82:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8019a86:	4413      	add	r3, r2
 8019a88:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp12 += z2;
 8019a8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8019a90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019a94:	4413      	add	r3, r2
 8019a96:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8019a9a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8019a9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019aa2:	4413      	add	r3, r2
 8019aa4:	4a51      	ldr	r2, [pc, #324]	@ (8019bec <jpeg_idct_16x8+0xa10>)
 8019aa6:	fb02 f303 	mul.w	r3, r2, r3
 8019aaa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp2  += z2;
 8019aae:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8019ab2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019ab6:	4413      	add	r3, r2
 8019ab8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp3  += z2;
 8019abc:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8019ac0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019ac4:	4413      	add	r3, r2
 8019ac6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8019aca:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8019ace:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8019ad2:	1ad3      	subs	r3, r2, r3
 8019ad4:	f640 5223 	movw	r2, #3363	@ 0xd23
 8019ad8:	fb02 f303 	mul.w	r3, r2, r3
 8019adc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    tmp10 += z2;
 8019ae0:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8019ae4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019ae8:	4413      	add	r3, r2
 8019aea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    tmp11 += z2;
 8019aee:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019af2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8019af6:	4413      	add	r3, r2
 8019af8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8019afc:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019b00:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8019b04:	4413      	add	r3, r2
 8019b06:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8019b0c:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019b10:	4413      	add	r3, r2
 8019b12:	781a      	ldrb	r2, [r3, #0]
 8019b14:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019b18:	701a      	strb	r2, [r3, #0]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8019b1a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019b1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8019b22:	1ad3      	subs	r3, r2, r3
 8019b24:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8019b2a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019b2e:	441a      	add	r2, r3
 8019b30:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019b34:	330f      	adds	r3, #15
 8019b36:	7812      	ldrb	r2, [r2, #0]
 8019b38:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8019b3a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8019b3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8019b42:	4413      	add	r3, r2
 8019b44:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8019b4a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019b4e:	441a      	add	r2, r3
 8019b50:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019b54:	3301      	adds	r3, #1
 8019b56:	7812      	ldrb	r2, [r2, #0]
 8019b58:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8019b5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8019b5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8019b62:	1ad3      	subs	r3, r2, r3
 8019b64:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8019b6a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019b6e:	441a      	add	r2, r3
 8019b70:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019b74:	330e      	adds	r3, #14
 8019b76:	7812      	ldrb	r2, [r2, #0]
 8019b78:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8019b7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8019b7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8019b82:	4413      	add	r3, r2
 8019b84:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8019b8a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019b8e:	441a      	add	r2, r3
 8019b90:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019b94:	3302      	adds	r3, #2
 8019b96:	7812      	ldrb	r2, [r2, #0]
 8019b98:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8019b9a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8019b9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8019ba2:	1ad3      	subs	r3, r2, r3
 8019ba4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8019baa:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019bae:	441a      	add	r2, r3
 8019bb0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019bb4:	330d      	adds	r3, #13
 8019bb6:	7812      	ldrb	r2, [r2, #0]
 8019bb8:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8019bba:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8019bbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019bc2:	4413      	add	r3, r2
 8019bc4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019bca:	e011      	b.n	8019bf0 <jpeg_idct_16x8+0xa14>
 8019bcc:	ffffecc2 	.word	0xffffecc2
 8019bd0:	ffffefb0 	.word	0xffffefb0
 8019bd4:	ffffb6d6 	.word	0xffffb6d6
 8019bd8:	ffffc542 	.word	0xffffc542
 8019bdc:	ffffdbfa 	.word	0xffffdbfa
 8019be0:	ffffe77a 	.word	0xffffe77a
 8019be4:	ffffeaab 	.word	0xffffeaab
 8019be8:	ffffd817 	.word	0xffffd817
 8019bec:	ffffd4b2 	.word	0xffffd4b2
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8019bf0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019bf4:	441a      	add	r2, r3
 8019bf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019bfa:	3303      	adds	r3, #3
 8019bfc:	7812      	ldrb	r2, [r2, #0]
 8019bfe:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8019c00:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8019c04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019c08:	1ad3      	subs	r3, r2, r3
 8019c0a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8019c10:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019c14:	441a      	add	r2, r3
 8019c16:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019c1a:	330c      	adds	r3, #12
 8019c1c:	7812      	ldrb	r2, [r2, #0]
 8019c1e:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8019c20:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8019c24:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8019c28:	4413      	add	r3, r2
 8019c2a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8019c30:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019c34:	441a      	add	r2, r3
 8019c36:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019c3a:	3304      	adds	r3, #4
 8019c3c:	7812      	ldrb	r2, [r2, #0]
 8019c3e:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8019c40:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8019c44:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8019c48:	1ad3      	subs	r3, r2, r3
 8019c4a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8019c50:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019c54:	441a      	add	r2, r3
 8019c56:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019c5a:	330b      	adds	r3, #11
 8019c5c:	7812      	ldrb	r2, [r2, #0]
 8019c5e:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8019c60:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8019c64:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019c68:	4413      	add	r3, r2
 8019c6a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8019c70:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019c74:	441a      	add	r2, r3
 8019c76:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019c7a:	3305      	adds	r3, #5
 8019c7c:	7812      	ldrb	r2, [r2, #0]
 8019c7e:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8019c80:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8019c84:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019c88:	1ad3      	subs	r3, r2, r3
 8019c8a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8019c90:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019c94:	441a      	add	r2, r3
 8019c96:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019c9a:	330a      	adds	r3, #10
 8019c9c:	7812      	ldrb	r2, [r2, #0]
 8019c9e:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8019ca0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8019ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019ca8:	4413      	add	r3, r2
 8019caa:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8019cb0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019cb4:	441a      	add	r2, r3
 8019cb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019cba:	3306      	adds	r3, #6
 8019cbc:	7812      	ldrb	r2, [r2, #0]
 8019cbe:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8019cc0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8019cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019cc8:	1ad3      	subs	r3, r2, r3
 8019cca:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8019cd0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019cd4:	441a      	add	r2, r3
 8019cd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019cda:	3309      	adds	r3, #9
 8019cdc:	7812      	ldrb	r2, [r2, #0]
 8019cde:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8019ce0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8019ce4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019ce8:	4413      	add	r3, r2
 8019cea:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8019cf0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019cf4:	441a      	add	r2, r3
 8019cf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019cfa:	3307      	adds	r3, #7
 8019cfc:	7812      	ldrb	r2, [r2, #0]
 8019cfe:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8019d00:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8019d04:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019d08:	1ad3      	subs	r3, r2, r3
 8019d0a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8019d10:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8019d14:	441a      	add	r2, r3
 8019d16:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8019d1a:	3308      	adds	r3, #8
 8019d1c:	7812      	ldrb	r2, [r2, #0]
 8019d1e:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8019d20:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8019d24:	3320      	adds	r3, #32
 8019d26:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  for (ctr = 0; ctr < 8; ctr++) {
 8019d2a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8019d2e:	3301      	adds	r3, #1
 8019d30:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8019d34:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8019d38:	2b07      	cmp	r3, #7
 8019d3a:	f77f acd7 	ble.w	80196ec <jpeg_idct_16x8+0x510>
  }
}
 8019d3e:	bf00      	nop
 8019d40:	bf00      	nop
 8019d42:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bc90      	pop	{r4, r7}
 8019d4a:	4770      	bx	lr

08019d4c <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8019d4c:	b490      	push	{r4, r7}
 8019d4e:	b0d4      	sub	sp, #336	@ 0x150
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8019d56:	f5a4 74a2 	sub.w	r4, r4, #324	@ 0x144
 8019d5a:	6020      	str	r0, [r4, #0]
 8019d5c:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8019d60:	f5a0 70a4 	sub.w	r0, r0, #328	@ 0x148
 8019d64:	6001      	str	r1, [r0, #0]
 8019d66:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8019d6a:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 8019d6e:	600a      	str	r2, [r1, #0]
 8019d70:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8019d74:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8019d78:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8019d7a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8019d7e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8019d88:	3380      	adds	r3, #128	@ 0x80
 8019d8a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
 8019d8e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8019d92:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8019d9c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8019da0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019da8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  wsptr = workspace;
 8019dac:	f107 0310 	add.w	r3, r7, #16
 8019db0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8019db4:	2300      	movs	r3, #0
 8019db6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8019dba:	e17a      	b.n	801a0b2 <jpeg_idct_14x7+0x366>
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8019dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	fb02 f303 	mul.w	r3, r2, r3
 8019dd0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    tmp23 <<= CONST_BITS;
 8019dd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8019dd8:	035b      	lsls	r3, r3, #13
 8019dda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    /* Add fudge factor here for final descale. */
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8019dde:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8019de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8019de6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8019dea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019dee:	3320      	adds	r3, #32
 8019df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019df4:	461a      	mov	r2, r3
 8019df6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019dfa:	3340      	adds	r3, #64	@ 0x40
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	fb02 f303 	mul.w	r3, r2, r3
 8019e02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8019e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019e0a:	3340      	adds	r3, #64	@ 0x40
 8019e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e10:	461a      	mov	r2, r3
 8019e12:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019e16:	3380      	adds	r3, #128	@ 0x80
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	fb02 f303 	mul.w	r3, r2, r3
 8019e1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8019e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019e26:	3360      	adds	r3, #96	@ 0x60
 8019e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019e32:	33c0      	adds	r3, #192	@ 0xc0
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	fb02 f303 	mul.w	r3, r2, r3
 8019e3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8019e3e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8019e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019e46:	1ad3      	subs	r3, r2, r3
 8019e48:	f641 4237 	movw	r2, #7223	@ 0x1c37
 8019e4c:	fb02 f303 	mul.w	r3, r2, r3
 8019e50:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8019e54:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019e5c:	1ad3      	subs	r3, r2, r3
 8019e5e:	f640 2212 	movw	r2, #2578	@ 0xa12
 8019e62:	fb02 f303 	mul.w	r3, r2, r3
 8019e66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8019e6a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8019e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8019e72:	441a      	add	r2, r3
 8019e74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8019e78:	441a      	add	r2, r3
 8019e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019e7e:	4993      	ldr	r1, [pc, #588]	@ (801a0cc <jpeg_idct_14x7+0x380>)
 8019e80:	fb01 f303 	mul.w	r3, r1, r3
 8019e84:	4413      	add	r3, r2
 8019e86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp10 = z1 + z3;
 8019e8a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019e8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019e92:	4413      	add	r3, r2
 8019e94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    z2 -= tmp10;
 8019e98:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8019e9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8019ea0:	1ad3      	subs	r3, r2, r3
 8019ea2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8019ea6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8019eaa:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 8019eae:	fb02 f303 	mul.w	r3, r2, r3
 8019eb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8019eb6:	4413      	add	r3, r2
 8019eb8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8019ebc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019ec0:	f46f 721f 	mvn.w	r2, #636	@ 0x27c
 8019ec4:	fb03 f202 	mul.w	r2, r3, r2
 8019ec8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8019ecc:	4413      	add	r3, r2
 8019ece:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8019ed2:	4413      	add	r3, r2
 8019ed4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8019ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8019edc:	4a7c      	ldr	r2, [pc, #496]	@ (801a0d0 <jpeg_idct_14x7+0x384>)
 8019ede:	fb03 f202 	mul.w	r2, r3, r2
 8019ee2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8019ee6:	4413      	add	r3, r2
 8019ee8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8019eec:	4413      	add	r3, r2
 8019eee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8019ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019ef6:	f642 5241 	movw	r2, #11585	@ 0x2d41
 8019efa:	fb02 f303 	mul.w	r3, r2, r3
 8019efe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8019f02:	4413      	add	r3, r2
 8019f04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8019f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019f0c:	3310      	adds	r3, #16
 8019f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f12:	461a      	mov	r2, r3
 8019f14:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019f18:	3320      	adds	r3, #32
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	fb02 f303 	mul.w	r3, r2, r3
 8019f20:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8019f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019f28:	3330      	adds	r3, #48	@ 0x30
 8019f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f2e:	461a      	mov	r2, r3
 8019f30:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019f34:	3360      	adds	r3, #96	@ 0x60
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	fb02 f303 	mul.w	r3, r2, r3
 8019f3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8019f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8019f44:	3350      	adds	r3, #80	@ 0x50
 8019f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f4a:	461a      	mov	r2, r3
 8019f4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8019f50:	33a0      	adds	r3, #160	@ 0xa0
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	fb02 f303 	mul.w	r3, r2, r3
 8019f58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8019f5c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019f64:	4413      	add	r3, r2
 8019f66:	f641 52ef 	movw	r2, #7663	@ 0x1def
 8019f6a:	fb02 f303 	mul.w	r3, r2, r3
 8019f6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8019f72:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019f7a:	1ad3      	subs	r3, r2, r3
 8019f7c:	f240 5273 	movw	r2, #1395	@ 0x573
 8019f80:	fb02 f303 	mul.w	r3, r2, r3
 8019f84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp10 = tmp11 - tmp12;
 8019f88:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8019f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8019f90:	1ad3      	subs	r3, r2, r3
 8019f92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp11 += tmp12;
 8019f96:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8019f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8019f9e:	4413      	add	r3, r2
 8019fa0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8019fa4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8019fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019fac:	4413      	add	r3, r2
 8019fae:	4a49      	ldr	r2, [pc, #292]	@ (801a0d4 <jpeg_idct_14x7+0x388>)
 8019fb0:	fb02 f303 	mul.w	r3, r2, r3
 8019fb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp11 += tmp12;
 8019fb8:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8019fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8019fc0:	4413      	add	r3, r2
 8019fc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8019fc6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019fce:	4413      	add	r3, r2
 8019fd0:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 8019fd4:	fb02 f303 	mul.w	r3, r2, r3
 8019fd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    tmp10 += z2;
 8019fdc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8019fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019fe4:	4413      	add	r3, r2
 8019fe6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8019fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8019fee:	f643 32de 	movw	r2, #15326	@ 0x3bde
 8019ff2:	fb03 f202 	mul.w	r2, r3, r2
 8019ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8019ffa:	4413      	add	r3, r2
 8019ffc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801a000:	4413      	add	r3, r2
 801a002:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801a006:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a00a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a00e:	4413      	add	r3, r2
 801a010:	12da      	asrs	r2, r3, #11
 801a012:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a016:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801a018:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a01c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a020:	1ad2      	subs	r2, r2, r3
 801a022:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a026:	33c0      	adds	r3, #192	@ 0xc0
 801a028:	12d2      	asrs	r2, r2, #11
 801a02a:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801a02c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a030:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a034:	441a      	add	r2, r3
 801a036:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a03a:	3320      	adds	r3, #32
 801a03c:	12d2      	asrs	r2, r2, #11
 801a03e:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801a040:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a044:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a048:	1ad2      	subs	r2, r2, r3
 801a04a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a04e:	33a0      	adds	r3, #160	@ 0xa0
 801a050:	12d2      	asrs	r2, r2, #11
 801a052:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801a054:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801a058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a05c:	441a      	add	r2, r3
 801a05e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a062:	3340      	adds	r3, #64	@ 0x40
 801a064:	12d2      	asrs	r2, r2, #11
 801a066:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801a068:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801a06c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a070:	1ad2      	subs	r2, r2, r3
 801a072:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a076:	3380      	adds	r3, #128	@ 0x80
 801a078:	12d2      	asrs	r2, r2, #11
 801a07a:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801a07c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a080:	3360      	adds	r3, #96	@ 0x60
 801a082:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801a086:	12d2      	asrs	r2, r2, #11
 801a088:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801a08a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801a08e:	3301      	adds	r3, #1
 801a090:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801a094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801a098:	3302      	adds	r3, #2
 801a09a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 801a09e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801a0a2:	3304      	adds	r3, #4
 801a0a4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801a0a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a0ac:	3304      	adds	r3, #4
 801a0ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801a0b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801a0b6:	2b07      	cmp	r3, #7
 801a0b8:	f77f ae80 	ble.w	8019dbc <jpeg_idct_14x7+0x70>
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801a0bc:	f107 0310 	add.w	r3, r7, #16
 801a0c0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  for (ctr = 0; ctr < 7; ctr++) {
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801a0ca:	e28b      	b.n	801a5e4 <jpeg_idct_14x7+0x898>
 801a0cc:	ffffc515 	.word	0xffffc515
 801a0d0:	ffffb0f1 	.word	0xffffb0f1
 801a0d4:	ffffd3e1 	.word	0xffffd3e1
    outptr = output_buf[ctr] + output_col;
 801a0d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801a0dc:	009b      	lsls	r3, r3, #2
 801a0de:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 801a0e2:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 801a0e6:	6812      	ldr	r2, [r2, #0]
 801a0e8:	4413      	add	r3, r2
 801a0ea:	681a      	ldr	r2, [r3, #0]
 801a0ec:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 801a0f0:	4413      	add	r3, r2
 801a0f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801a0f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	3310      	adds	r3, #16
 801a0fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z1 <<= CONST_BITS;
 801a102:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801a106:	035b      	lsls	r3, r3, #13
 801a108:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z4 = (INT32) wsptr[4];
 801a10c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a110:	3310      	adds	r3, #16
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801a118:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a11c:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 801a120:	fb02 f303 	mul.w	r3, r2, r3
 801a124:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801a128:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a12c:	f640 2212 	movw	r2, #2578	@ 0xa12
 801a130:	fb02 f303 	mul.w	r3, r2, r3
 801a134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801a138:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a13c:	f641 4237 	movw	r2, #7223	@ 0x1c37
 801a140:	fb02 f303 	mul.w	r3, r2, r3
 801a144:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    tmp10 = z1 + z2;
 801a148:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a14c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a150:	4413      	add	r3, r2
 801a152:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp11 = z1 + z3;
 801a156:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a15a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801a15e:	4413      	add	r3, r2
 801a160:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp12 = z1 - z4;
 801a164:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a168:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a16c:	1ad3      	subs	r3, r2, r3
 801a16e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801a172:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 801a176:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801a17a:	441a      	add	r2, r3
 801a17c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a180:	1ad3      	subs	r3, r2, r3
 801a182:	005b      	lsls	r3, r3, #1
 801a184:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a188:	1ad3      	subs	r3, r2, r3
 801a18a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    z1 = (INT32) wsptr[2];
 801a18e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a192:	3308      	adds	r3, #8
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z2 = (INT32) wsptr[6];
 801a19a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a19e:	3318      	adds	r3, #24
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801a1a6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a1aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a1ae:	4413      	add	r3, r2
 801a1b0:	f242 3262 	movw	r2, #9058	@ 0x2362
 801a1b4:	fb02 f303 	mul.w	r3, r2, r3
 801a1b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801a1bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801a1c0:	f640 02bd 	movw	r2, #2237	@ 0x8bd
 801a1c4:	fb02 f303 	mul.w	r3, r2, r3
 801a1c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801a1cc:	4413      	add	r3, r2
 801a1ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801a1d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a1d6:	4af2      	ldr	r2, [pc, #968]	@ (801a5a0 <jpeg_idct_14x7+0x854>)
 801a1d8:	fb02 f303 	mul.w	r3, r2, r3
 801a1dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801a1e0:	4413      	add	r3, r2
 801a1e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801a1e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801a1ea:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 801a1ee:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801a1f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a1f6:	49eb      	ldr	r1, [pc, #940]	@ (801a5a4 <jpeg_idct_14x7+0x858>)
 801a1f8:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801a1fc:	4413      	add	r3, r2
 801a1fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    tmp20 = tmp10 + tmp13;
 801a202:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801a206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a20a:	4413      	add	r3, r2
 801a20c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp26 = tmp10 - tmp13;
 801a210:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801a214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a218:	1ad3      	subs	r3, r2, r3
 801a21a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp21 = tmp11 + tmp14;
 801a21e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801a222:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801a226:	4413      	add	r3, r2
 801a228:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp25 = tmp11 - tmp14;
 801a22c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801a230:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801a234:	1ad3      	subs	r3, r2, r3
 801a236:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp22 = tmp12 + tmp15;
 801a23a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801a23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a242:	4413      	add	r3, r2
 801a244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp24 = tmp12 - tmp15;
 801a248:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801a24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a250:	1ad3      	subs	r3, r2, r3
 801a252:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801a256:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a25a:	3304      	adds	r3, #4
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    z2 = (INT32) wsptr[3];
 801a262:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a266:	330c      	adds	r3, #12
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    z3 = (INT32) wsptr[5];
 801a26e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a272:	3314      	adds	r3, #20
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    z4 = (INT32) wsptr[7];
 801a27a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a27e:	331c      	adds	r3, #28
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    z4 <<= CONST_BITS;
 801a286:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a28a:	035b      	lsls	r3, r3, #13
 801a28c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    tmp14 = z1 + z3;
 801a290:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a294:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801a298:	4413      	add	r3, r2
 801a29a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801a29e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a2a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a2a6:	4413      	add	r3, r2
 801a2a8:	f642 22b7 	movw	r2, #10935	@ 0x2ab7
 801a2ac:	fb02 f303 	mul.w	r3, r2, r3
 801a2b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801a2b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801a2b8:	f242 6252 	movw	r2, #9810	@ 0x2652
 801a2bc:	fb02 f303 	mul.w	r3, r2, r3
 801a2c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801a2c4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801a2c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a2cc:	441a      	add	r2, r3
 801a2ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a2d2:	441a      	add	r2, r3
 801a2d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801a2d8:	49b3      	ldr	r1, [pc, #716]	@ (801a5a8 <jpeg_idct_14x7+0x85c>)
 801a2da:	fb01 f303 	mul.w	r3, r1, r3
 801a2de:	4413      	add	r3, r2
 801a2e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801a2e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801a2e8:	f641 0214 	movw	r2, #6164	@ 0x1814
 801a2ec:	fb02 f303 	mul.w	r3, r2, r3
 801a2f0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801a2f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801a2f8:	4aac      	ldr	r2, [pc, #688]	@ (801a5ac <jpeg_idct_14x7+0x860>)
 801a2fa:	fb02 f303 	mul.w	r3, r2, r3
 801a2fe:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801a302:	4413      	add	r3, r2
 801a304:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    z1    -= z2;
 801a308:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a30c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a310:	1ad3      	subs	r3, r2, r3
 801a312:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801a316:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801a31a:	f640 62f2 	movw	r2, #3826	@ 0xef2
 801a31e:	fb03 f202 	mul.w	r2, r3, r2
 801a322:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a326:	1ad3      	subs	r3, r2, r3
 801a328:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp16 += tmp15;
 801a32c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801a330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a334:	4413      	add	r3, r2
 801a336:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801a33a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 801a33e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801a342:	4413      	add	r3, r2
 801a344:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
 801a348:	fb03 f202 	mul.w	r2, r3, r2
 801a34c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a350:	1ad3      	subs	r3, r2, r3
 801a352:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801a356:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a35a:	4a95      	ldr	r2, [pc, #596]	@ (801a5b0 <jpeg_idct_14x7+0x864>)
 801a35c:	fb03 f202 	mul.w	r2, r3, r2
 801a360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a364:	4413      	add	r3, r2
 801a366:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801a36a:	4413      	add	r3, r2
 801a36c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801a370:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801a374:	4a8f      	ldr	r2, [pc, #572]	@ (801a5b4 <jpeg_idct_14x7+0x868>)
 801a376:	fb03 f202 	mul.w	r2, r3, r2
 801a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a37e:	4413      	add	r3, r2
 801a380:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801a384:	4413      	add	r3, r2
 801a386:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801a38a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801a38e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a392:	1ad3      	subs	r3, r2, r3
 801a394:	f642 42f8 	movw	r2, #11512	@ 0x2cf8
 801a398:	fb02 f303 	mul.w	r3, r2, r3
 801a39c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801a3a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801a3a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a3a8:	441a      	add	r2, r3
 801a3aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801a3ae:	4982      	ldr	r1, [pc, #520]	@ (801a5b8 <jpeg_idct_14x7+0x86c>)
 801a3b0:	fb01 f303 	mul.w	r3, r1, r3
 801a3b4:	4413      	add	r3, r2
 801a3b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801a3ba:	4413      	add	r3, r2
 801a3bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801a3c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a3c4:	f241 5299 	movw	r2, #5529	@ 0x1599
 801a3c8:	fb03 f202 	mul.w	r2, r3, r2
 801a3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a3d0:	4413      	add	r3, r2
 801a3d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801a3d6:	4413      	add	r3, r2
 801a3d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801a3dc:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801a3e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801a3e4:	1ad3      	subs	r3, r2, r3
 801a3e6:	035b      	lsls	r3, r3, #13
 801a3e8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801a3ec:	4413      	add	r3, r2
 801a3ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801a3f2:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a3f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a3fa:	4413      	add	r3, r2
 801a3fc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a3fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801a402:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a406:	4413      	add	r3, r2
 801a408:	781a      	ldrb	r2, [r3, #0]
 801a40a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a40e:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801a410:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a414:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a418:	1ad3      	subs	r3, r2, r3
 801a41a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a41c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801a420:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a424:	441a      	add	r2, r3
 801a426:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a42a:	330d      	adds	r3, #13
 801a42c:	7812      	ldrb	r2, [r2, #0]
 801a42e:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801a430:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a434:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a438:	4413      	add	r3, r2
 801a43a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a43c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801a440:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a444:	441a      	add	r2, r3
 801a446:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a44a:	3301      	adds	r3, #1
 801a44c:	7812      	ldrb	r2, [r2, #0]
 801a44e:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801a450:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a454:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a458:	1ad3      	subs	r3, r2, r3
 801a45a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a45c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801a460:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a464:	441a      	add	r2, r3
 801a466:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a46a:	330c      	adds	r3, #12
 801a46c:	7812      	ldrb	r2, [r2, #0]
 801a46e:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801a470:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801a474:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a478:	4413      	add	r3, r2
 801a47a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a47c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801a480:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a484:	441a      	add	r2, r3
 801a486:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a48a:	3302      	adds	r3, #2
 801a48c:	7812      	ldrb	r2, [r2, #0]
 801a48e:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801a490:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801a494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a498:	1ad3      	subs	r3, r2, r3
 801a49a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a49c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801a4a0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a4a4:	441a      	add	r2, r3
 801a4a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a4aa:	330b      	adds	r3, #11
 801a4ac:	7812      	ldrb	r2, [r2, #0]
 801a4ae:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801a4b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801a4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a4b8:	4413      	add	r3, r2
 801a4ba:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a4bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801a4c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a4c4:	441a      	add	r2, r3
 801a4c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a4ca:	3303      	adds	r3, #3
 801a4cc:	7812      	ldrb	r2, [r2, #0]
 801a4ce:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801a4d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801a4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a4d8:	1ad3      	subs	r3, r2, r3
 801a4da:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a4dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801a4e0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a4e4:	441a      	add	r2, r3
 801a4e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a4ea:	330a      	adds	r3, #10
 801a4ec:	7812      	ldrb	r2, [r2, #0]
 801a4ee:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801a4f0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801a4f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801a4f8:	4413      	add	r3, r2
 801a4fa:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a4fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801a500:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a504:	441a      	add	r2, r3
 801a506:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a50a:	3304      	adds	r3, #4
 801a50c:	7812      	ldrb	r2, [r2, #0]
 801a50e:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801a510:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801a514:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801a518:	1ad3      	subs	r3, r2, r3
 801a51a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a51c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801a520:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a524:	441a      	add	r2, r3
 801a526:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a52a:	3309      	adds	r3, #9
 801a52c:	7812      	ldrb	r2, [r2, #0]
 801a52e:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801a530:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a538:	4413      	add	r3, r2
 801a53a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a53c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801a540:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a544:	441a      	add	r2, r3
 801a546:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a54a:	3305      	adds	r3, #5
 801a54c:	7812      	ldrb	r2, [r2, #0]
 801a54e:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801a550:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a558:	1ad3      	subs	r3, r2, r3
 801a55a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a55c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801a560:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a564:	441a      	add	r2, r3
 801a566:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a56a:	3308      	adds	r3, #8
 801a56c:	7812      	ldrb	r2, [r2, #0]
 801a56e:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801a570:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801a574:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801a578:	4413      	add	r3, r2
 801a57a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a57c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801a580:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a584:	441a      	add	r2, r3
 801a586:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a58a:	3306      	adds	r3, #6
 801a58c:	7812      	ldrb	r2, [r2, #0]
 801a58e:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801a590:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801a594:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801a598:	1ad3      	subs	r3, r2, r3
 801a59a:	149b      	asrs	r3, r3, #18
 801a59c:	e00e      	b.n	801a5bc <jpeg_idct_14x7+0x870>
 801a59e:	bf00      	nop
 801a5a0:	ffffc8fc 	.word	0xffffc8fc
 801a5a4:	ffffd3e1 	.word	0xffffd3e1
 801a5a8:	ffffdbf0 	.word	0xffffdbf0
 801a5ac:	ffffde0b 	.word	0xffffde0b
 801a5b0:	fffff26e 	.word	0xfffff26e
 801a5b4:	ffffb409 	.word	0xffffb409
 801a5b8:	ffffc9e6 	.word	0xffffc9e6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a5bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801a5c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801a5c4:	441a      	add	r2, r3
 801a5c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801a5ca:	3307      	adds	r3, #7
 801a5cc:	7812      	ldrb	r2, [r2, #0]
 801a5ce:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801a5d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801a5d4:	3320      	adds	r3, #32
 801a5d6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  for (ctr = 0; ctr < 7; ctr++) {
 801a5da:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801a5de:	3301      	adds	r3, #1
 801a5e0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801a5e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801a5e8:	2b06      	cmp	r3, #6
 801a5ea:	f77f ad75 	ble.w	801a0d8 <jpeg_idct_14x7+0x38c>
  }
}
 801a5ee:	bf00      	nop
 801a5f0:	bf00      	nop
 801a5f2:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 801a5f6:	46bd      	mov	sp, r7
 801a5f8:	bc90      	pop	{r4, r7}
 801a5fa:	4770      	bx	lr

0801a5fc <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801a5fc:	b490      	push	{r4, r7}
 801a5fe:	b0ca      	sub	sp, #296	@ 0x128
 801a600:	af00      	add	r7, sp, #0
 801a602:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 801a606:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 801a60a:	6020      	str	r0, [r4, #0]
 801a60c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 801a610:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 801a614:	6001      	str	r1, [r0, #0]
 801a616:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 801a61a:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 801a61e:	600a      	str	r2, [r1, #0]
 801a620:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801a624:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 801a628:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801a62a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801a62e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801a638:	3380      	adds	r3, #128	@ 0x80
 801a63a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
 801a63e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801a642:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801a64c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801a650:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a658:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  wsptr = workspace;
 801a65c:	f107 0310 	add.w	r3, r7, #16
 801a660:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801a664:	2300      	movs	r3, #0
 801a666:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801a66a:	e105      	b.n	801a878 <jpeg_idct_12x6+0x27c>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801a66c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a670:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a674:	461a      	mov	r2, r3
 801a676:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	fb02 f303 	mul.w	r3, r2, r3
 801a680:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp10 <<= CONST_BITS;
 801a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a688:	035b      	lsls	r3, r3, #13
 801a68a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    /* Add fudge factor here for final descale. */
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801a68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801a696:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801a69a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a69e:	3340      	adds	r3, #64	@ 0x40
 801a6a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a6aa:	3380      	adds	r3, #128	@ 0x80
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	fb02 f303 	mul.w	r3, r2, r3
 801a6b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801a6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a6ba:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 801a6be:	fb02 f303 	mul.w	r3, r2, r3
 801a6c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp11 = tmp10 + tmp20;
 801a6c6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801a6ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801a6ce:	4413      	add	r3, r2
 801a6d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 801a6d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801a6d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801a6dc:	1ad2      	subs	r2, r2, r3
 801a6de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801a6e2:	1ad3      	subs	r3, r2, r3
 801a6e4:	12db      	asrs	r3, r3, #11
 801a6e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801a6ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a6ee:	3320      	adds	r3, #32
 801a6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6f4:	461a      	mov	r2, r3
 801a6f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a6fa:	3340      	adds	r3, #64	@ 0x40
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	fb02 f303 	mul.w	r3, r2, r3
 801a702:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801a706:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801a70a:	f242 7231 	movw	r2, #10033	@ 0x2731
 801a70e:	fb02 f303 	mul.w	r3, r2, r3
 801a712:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp20 = tmp11 + tmp10;
 801a716:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a71e:	4413      	add	r3, r2
 801a720:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp22 = tmp11 - tmp10;
 801a724:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a72c:	1ad3      	subs	r3, r2, r3
 801a72e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801a732:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a736:	3310      	adds	r3, #16
 801a738:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a73c:	461a      	mov	r2, r3
 801a73e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a742:	3320      	adds	r3, #32
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	fb02 f303 	mul.w	r3, r2, r3
 801a74a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801a74e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a752:	3330      	adds	r3, #48	@ 0x30
 801a754:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a758:	461a      	mov	r2, r3
 801a75a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a75e:	3360      	adds	r3, #96	@ 0x60
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	fb02 f303 	mul.w	r3, r2, r3
 801a766:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801a76a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a76e:	3350      	adds	r3, #80	@ 0x50
 801a770:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a774:	461a      	mov	r2, r3
 801a776:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a77a:	33a0      	adds	r3, #160	@ 0xa0
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	fb02 f303 	mul.w	r3, r2, r3
 801a782:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801a786:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a78e:	4413      	add	r3, r2
 801a790:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 801a794:	fb02 f303 	mul.w	r3, r2, r3
 801a798:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801a79c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a7a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a7a4:	4413      	add	r3, r2
 801a7a6:	035b      	lsls	r3, r3, #13
 801a7a8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a7ac:	4413      	add	r3, r2
 801a7ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801a7b2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801a7b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a7ba:	1ad3      	subs	r3, r2, r3
 801a7bc:	035b      	lsls	r3, r3, #13
 801a7be:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a7c2:	4413      	add	r3, r2
 801a7c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 801a7c8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a7cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a7d0:	1ad2      	subs	r2, r2, r3
 801a7d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a7d6:	1ad3      	subs	r3, r2, r3
 801a7d8:	009b      	lsls	r3, r3, #2
 801a7da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801a7de:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801a7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a7e6:	4413      	add	r3, r2
 801a7e8:	12da      	asrs	r2, r3, #11
 801a7ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a7ee:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801a7f0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a7f8:	1ad2      	subs	r2, r2, r3
 801a7fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a7fe:	33a0      	adds	r3, #160	@ 0xa0
 801a800:	12d2      	asrs	r2, r2, #11
 801a802:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801a804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a808:	3320      	adds	r3, #32
 801a80a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 801a80e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a812:	440a      	add	r2, r1
 801a814:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 801a816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a81a:	3380      	adds	r3, #128	@ 0x80
 801a81c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 801a820:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a824:	1a8a      	subs	r2, r1, r2
 801a826:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801a828:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801a82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a830:	441a      	add	r2, r3
 801a832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a836:	3340      	adds	r3, #64	@ 0x40
 801a838:	12d2      	asrs	r2, r2, #11
 801a83a:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801a83c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801a840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a844:	1ad2      	subs	r2, r2, r3
 801a846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a84a:	3360      	adds	r3, #96	@ 0x60
 801a84c:	12d2      	asrs	r2, r2, #11
 801a84e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801a850:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801a854:	3301      	adds	r3, #1
 801a856:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801a85a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801a85e:	3302      	adds	r3, #2
 801a860:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801a864:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801a868:	3304      	adds	r3, #4
 801a86a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 801a86e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a872:	3304      	adds	r3, #4
 801a874:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 801a878:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801a87c:	2b07      	cmp	r3, #7
 801a87e:	f77f aef5 	ble.w	801a66c <jpeg_idct_12x6+0x70>
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 801a882:	f107 0310 	add.w	r3, r7, #16
 801a886:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  for (ctr = 0; ctr < 6; ctr++) {
 801a88a:	2300      	movs	r3, #0
 801a88c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801a890:	e21d      	b.n	801acce <jpeg_idct_12x6+0x6d2>
    outptr = output_buf[ctr] + output_col;
 801a892:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801a896:	009b      	lsls	r3, r3, #2
 801a898:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801a89c:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 801a8a0:	6812      	ldr	r2, [r2, #0]
 801a8a2:	4413      	add	r3, r2
 801a8a4:	681a      	ldr	r2, [r3, #0]
 801a8a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801a8aa:	4413      	add	r3, r2
 801a8ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801a8b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	3310      	adds	r3, #16
 801a8b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    z3 <<= CONST_BITS;
 801a8bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801a8c0:	035b      	lsls	r3, r3, #13
 801a8c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    z4 = (INT32) wsptr[4];
 801a8c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a8ca:	3310      	adds	r3, #16
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801a8d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801a8d6:	f242 7231 	movw	r2, #10033	@ 0x2731
 801a8da:	fb02 f303 	mul.w	r3, r2, r3
 801a8de:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

    tmp10 = z3 + z4;
 801a8e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801a8e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801a8ea:	4413      	add	r3, r2
 801a8ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp11 = z3 - z4;
 801a8f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801a8f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801a8f8:	1ad3      	subs	r3, r2, r3
 801a8fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

    z1 = (INT32) wsptr[2];
 801a8fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a902:	3308      	adds	r3, #8
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801a90a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801a90e:	f642 32b6 	movw	r2, #11190	@ 0x2bb6
 801a912:	fb02 f303 	mul.w	r3, r2, r3
 801a916:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    z1 <<= CONST_BITS;
 801a91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801a91e:	035b      	lsls	r3, r3, #13
 801a920:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    z2 = (INT32) wsptr[6];
 801a924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a928:	3318      	adds	r3, #24
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z2 <<= CONST_BITS;
 801a930:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a934:	035b      	lsls	r3, r3, #13
 801a936:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

    tmp12 = z1 - z2;
 801a93a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a93e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a942:	1ad3      	subs	r3, r2, r3
 801a944:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    tmp21 = z3 + tmp12;
 801a948:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801a94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a950:	4413      	add	r3, r2
 801a952:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    tmp24 = z3 - tmp12;
 801a956:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801a95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a95e:	1ad3      	subs	r3, r2, r3
 801a960:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    tmp12 = z4 + z2;
 801a964:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a968:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a96c:	4413      	add	r3, r2
 801a96e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    tmp20 = tmp10 + tmp12;
 801a972:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801a976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a97a:	4413      	add	r3, r2
 801a97c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp25 = tmp10 - tmp12;
 801a980:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801a984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a988:	1ad3      	subs	r3, r2, r3
 801a98a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    tmp12 = z4 - z1 - z2;
 801a98e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801a996:	1ad2      	subs	r2, r2, r3
 801a998:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a99c:	1ad3      	subs	r3, r2, r3
 801a99e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    tmp22 = tmp11 + tmp12;
 801a9a2:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a9aa:	4413      	add	r3, r2
 801a9ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    tmp23 = tmp11 - tmp12;
 801a9b0:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801a9b8:	1ad3      	subs	r3, r2, r3
 801a9ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801a9be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a9c2:	3304      	adds	r3, #4
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    z2 = (INT32) wsptr[3];
 801a9ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a9ce:	330c      	adds	r3, #12
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z3 = (INT32) wsptr[5];
 801a9d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a9da:	3314      	adds	r3, #20
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    z4 = (INT32) wsptr[7];
 801a9e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801a9e6:	331c      	adds	r3, #28
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801a9ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801a9f2:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 801a9f6:	fb02 f303 	mul.w	r3, r2, r3
 801a9fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801a9fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801aa02:	4ab9      	ldr	r2, [pc, #740]	@ (801ace8 <jpeg_idct_12x6+0x6ec>)
 801aa04:	fb02 f303 	mul.w	r3, r2, r3
 801aa08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    tmp10 = z1 + z3;
 801aa0c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801aa10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801aa14:	4413      	add	r3, r2
 801aa16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801aa1a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801aa1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801aa22:	4413      	add	r3, r2
 801aa24:	f641 328d 	movw	r2, #7053	@ 0x1b8d
 801aa28:	fb02 f303 	mul.w	r3, r2, r3
 801aa2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801aa30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801aa34:	f640 025b 	movw	r2, #2139	@ 0x85b
 801aa38:	fb02 f303 	mul.w	r3, r2, r3
 801aa3c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801aa40:	4413      	add	r3, r2
 801aa42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801aa46:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801aa4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801aa4e:	18d1      	adds	r1, r2, r3
 801aa50:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801aa54:	4613      	mov	r3, r2
 801aa56:	00db      	lsls	r3, r3, #3
 801aa58:	4413      	add	r3, r2
 801aa5a:	021a      	lsls	r2, r3, #8
 801aa5c:	1ad3      	subs	r3, r2, r3
 801aa5e:	440b      	add	r3, r1
 801aa60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801aa64:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801aa68:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801aa6c:	4413      	add	r3, r2
 801aa6e:	4a9f      	ldr	r2, [pc, #636]	@ (801acec <jpeg_idct_12x6+0x6f0>)
 801aa70:	fb02 f303 	mul.w	r3, r2, r3
 801aa74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801aa78:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801aa7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801aa80:	441a      	add	r2, r3
 801aa82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801aa86:	499a      	ldr	r1, [pc, #616]	@ (801acf0 <jpeg_idct_12x6+0x6f4>)
 801aa88:	fb01 f303 	mul.w	r3, r1, r3
 801aa8c:	4413      	add	r3, r2
 801aa8e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801aa92:	4413      	add	r3, r2
 801aa94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801aa98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801aa9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801aaa0:	1ad2      	subs	r2, r2, r3
 801aaa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801aaa6:	f243 21c6 	movw	r1, #12998	@ 0x32c6
 801aaaa:	fb01 f303 	mul.w	r3, r1, r3
 801aaae:	4413      	add	r3, r2
 801aab0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801aab4:	4413      	add	r3, r2
 801aab6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801aaba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801aabe:	4a8d      	ldr	r2, [pc, #564]	@ (801acf4 <jpeg_idct_12x6+0x6f8>)
 801aac0:	fb03 f202 	mul.w	r2, r3, r2
 801aac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801aac8:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 801aaca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801aace:	498a      	ldr	r1, [pc, #552]	@ (801acf8 <jpeg_idct_12x6+0x6fc>)
 801aad0:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801aad4:	4413      	add	r3, r2
 801aad6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801aada:	4413      	add	r3, r2
 801aadc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

    z1 -= z4;
 801aae0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801aae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801aae8:	1ad3      	subs	r3, r2, r3
 801aaea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    z2 -= z3;
 801aaee:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801aaf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801aaf6:	1ad3      	subs	r3, r2, r3
 801aaf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801aafc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801ab00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801ab04:	4413      	add	r3, r2
 801ab06:	f241 1251 	movw	r2, #4433	@ 0x1151
 801ab0a:	fb02 f303 	mul.w	r3, r2, r3
 801ab0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801ab12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801ab16:	f641 027e 	movw	r2, #6270	@ 0x187e
 801ab1a:	fb02 f303 	mul.w	r3, r2, r3
 801ab1e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801ab22:	4413      	add	r3, r2
 801ab24:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801ab28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801ab2c:	4a73      	ldr	r2, [pc, #460]	@ (801acfc <jpeg_idct_12x6+0x700>)
 801ab2e:	fb02 f303 	mul.w	r3, r2, r3
 801ab32:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801ab36:	4413      	add	r3, r2
 801ab38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ab3c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801ab40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801ab44:	4413      	add	r3, r2
 801ab46:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ab48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ab4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ab50:	4413      	add	r3, r2
 801ab52:	781a      	ldrb	r2, [r3, #0]
 801ab54:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ab58:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801ab5a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801ab5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801ab62:	1ad3      	subs	r3, r2, r3
 801ab64:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ab66:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801ab6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ab6e:	441a      	add	r2, r3
 801ab70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ab74:	330b      	adds	r3, #11
 801ab76:	7812      	ldrb	r2, [r2, #0]
 801ab78:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801ab7a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801ab7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801ab82:	4413      	add	r3, r2
 801ab84:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ab86:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801ab8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ab8e:	441a      	add	r2, r3
 801ab90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ab94:	3301      	adds	r3, #1
 801ab96:	7812      	ldrb	r2, [r2, #0]
 801ab98:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801ab9a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801ab9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801aba2:	1ad3      	subs	r3, r2, r3
 801aba4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801aba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801abaa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801abae:	441a      	add	r2, r3
 801abb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801abb4:	330a      	adds	r3, #10
 801abb6:	7812      	ldrb	r2, [r2, #0]
 801abb8:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801abba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801abbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801abc2:	4413      	add	r3, r2
 801abc4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801abc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801abca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801abce:	441a      	add	r2, r3
 801abd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801abd4:	3302      	adds	r3, #2
 801abd6:	7812      	ldrb	r2, [r2, #0]
 801abd8:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801abda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801abde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801abe2:	1ad3      	subs	r3, r2, r3
 801abe4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801abe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801abea:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801abee:	441a      	add	r2, r3
 801abf0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801abf4:	3309      	adds	r3, #9
 801abf6:	7812      	ldrb	r2, [r2, #0]
 801abf8:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801abfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801abfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801ac02:	4413      	add	r3, r2
 801ac04:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac06:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801ac0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ac0e:	441a      	add	r2, r3
 801ac10:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ac14:	3303      	adds	r3, #3
 801ac16:	7812      	ldrb	r2, [r2, #0]
 801ac18:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801ac1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801ac1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801ac22:	1ad3      	subs	r3, r2, r3
 801ac24:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac26:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801ac2a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ac2e:	441a      	add	r2, r3
 801ac30:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ac34:	3308      	adds	r3, #8
 801ac36:	7812      	ldrb	r2, [r2, #0]
 801ac38:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801ac3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ac3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801ac42:	4413      	add	r3, r2
 801ac44:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac46:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801ac4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ac4e:	441a      	add	r2, r3
 801ac50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ac54:	3304      	adds	r3, #4
 801ac56:	7812      	ldrb	r2, [r2, #0]
 801ac58:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801ac5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801ac5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801ac62:	1ad3      	subs	r3, r2, r3
 801ac64:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac66:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801ac6a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ac6e:	441a      	add	r2, r3
 801ac70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ac74:	3307      	adds	r3, #7
 801ac76:	7812      	ldrb	r2, [r2, #0]
 801ac78:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801ac7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801ac7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801ac82:	4413      	add	r3, r2
 801ac84:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac86:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801ac8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801ac8e:	441a      	add	r2, r3
 801ac90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801ac94:	3305      	adds	r3, #5
 801ac96:	7812      	ldrb	r2, [r2, #0]
 801ac98:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801ac9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801ac9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801aca2:	1ad3      	subs	r3, r2, r3
 801aca4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801aca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801acaa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801acae:	441a      	add	r2, r3
 801acb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801acb4:	3306      	adds	r3, #6
 801acb6:	7812      	ldrb	r2, [r2, #0]
 801acb8:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801acba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801acbe:	3320      	adds	r3, #32
 801acc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  for (ctr = 0; ctr < 6; ctr++) {
 801acc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801acc8:	3301      	adds	r3, #1
 801acca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801acce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801acd2:	2b05      	cmp	r3, #5
 801acd4:	f77f addd 	ble.w	801a892 <jpeg_idct_12x6+0x296>
  }
}
 801acd8:	bf00      	nop
 801acda:	bf00      	nop
 801acdc:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bc90      	pop	{r4, r7}
 801ace4:	4770      	bx	lr
 801ace6:	bf00      	nop
 801ace8:	ffffeeaf 	.word	0xffffeeaf
 801acec:	ffffde8b 	.word	0xffffde8b
 801acf0:	ffffd0b0 	.word	0xffffd0b0
 801acf4:	ffffea5c 	.word	0xffffea5c
 801acf8:	ffffc08c 	.word	0xffffc08c
 801acfc:	ffffc4df 	.word	0xffffc4df

0801ad00 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801ad00:	b480      	push	{r7}
 801ad02:	b0c1      	sub	sp, #260	@ 0x104
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	60f8      	str	r0, [r7, #12]
 801ad08:	60b9      	str	r1, [r7, #8]
 801ad0a:	607a      	str	r2, [r7, #4]
 801ad0c:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 801ad10:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 801ad14:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801ad1c:	3380      	adds	r3, #128	@ 0x80
 801ad1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ad2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  wsptr = workspace;
 801ad30:	f107 0310 	add.w	r3, r7, #16
 801ad34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801ad38:	2300      	movs	r3, #0
 801ad3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801ad3e:	e0e3      	b.n	801af08 <jpeg_idct_10x5+0x208>
    /* Even part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801ad40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801ad44:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad48:	461a      	mov	r2, r3
 801ad4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	fb02 f303 	mul.w	r3, r2, r3
 801ad54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tmp12 <<= CONST_BITS;
 801ad58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801ad5c:	035b      	lsls	r3, r3, #13
 801ad5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801ad62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801ad66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801ad6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801ad6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801ad72:	3320      	adds	r3, #32
 801ad74:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad78:	461a      	mov	r2, r3
 801ad7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801ad7e:	3340      	adds	r3, #64	@ 0x40
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	fb02 f303 	mul.w	r3, r2, r3
 801ad86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801ad8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801ad8e:	3340      	adds	r3, #64	@ 0x40
 801ad90:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ad94:	461a      	mov	r2, r3
 801ad96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801ad9a:	3380      	adds	r3, #128	@ 0x80
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	fb02 f303 	mul.w	r3, r2, r3
 801ada2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801ada6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801adaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801adae:	4413      	add	r3, r2
 801adb0:	f641 124c 	movw	r2, #6476	@ 0x194c
 801adb4:	fb02 f303 	mul.w	r3, r2, r3
 801adb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801adbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801adc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801adc4:	1ad3      	subs	r3, r2, r3
 801adc6:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 801adca:	fb02 f303 	mul.w	r3, r2, r3
 801adce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    z3 = tmp12 + z2;
 801add2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801add6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801adda:	4413      	add	r3, r2
 801addc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp10 = z3 + z1;
 801ade0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801ade4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ade8:	4413      	add	r3, r2
 801adea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp11 = z3 - z1;
 801adee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801adf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801adf6:	1ad3      	subs	r3, r2, r3
 801adf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp12 -= z2 << 2;
 801adfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801ae00:	009b      	lsls	r3, r3, #2
 801ae02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801ae06:	1ad3      	subs	r3, r2, r3
 801ae08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801ae0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801ae10:	3310      	adds	r3, #16
 801ae12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae16:	461a      	mov	r2, r3
 801ae18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801ae1c:	3320      	adds	r3, #32
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	fb02 f303 	mul.w	r3, r2, r3
 801ae24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801ae28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801ae2c:	3330      	adds	r3, #48	@ 0x30
 801ae2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae32:	461a      	mov	r2, r3
 801ae34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801ae38:	3360      	adds	r3, #96	@ 0x60
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	fb02 f303 	mul.w	r3, r2, r3
 801ae40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801ae44:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801ae48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae4c:	4413      	add	r3, r2
 801ae4e:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 801ae52:	fb02 f303 	mul.w	r3, r2, r3
 801ae56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801ae5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801ae5e:	f241 0271 	movw	r2, #4209	@ 0x1071
 801ae62:	fb02 f303 	mul.w	r3, r2, r3
 801ae66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801ae6a:	4413      	add	r3, r2
 801ae6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 801ae70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801ae74:	4a2b      	ldr	r2, [pc, #172]	@ (801af24 <jpeg_idct_10x5+0x224>)
 801ae76:	fb02 f303 	mul.w	r3, r2, r3
 801ae7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801ae7e:	4413      	add	r3, r2
 801ae80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801ae84:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801ae88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801ae8c:	4413      	add	r3, r2
 801ae8e:	12da      	asrs	r2, r3, #11
 801ae90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801ae94:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 801ae96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801ae9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801ae9e:	1ad2      	subs	r2, r2, r3
 801aea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801aea4:	3380      	adds	r3, #128	@ 0x80
 801aea6:	12d2      	asrs	r2, r2, #11
 801aea8:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 801aeaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801aeae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801aeb2:	441a      	add	r2, r3
 801aeb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801aeb8:	3320      	adds	r3, #32
 801aeba:	12d2      	asrs	r2, r2, #11
 801aebc:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801aebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801aec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801aec6:	1ad2      	subs	r2, r2, r3
 801aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801aecc:	3360      	adds	r3, #96	@ 0x60
 801aece:	12d2      	asrs	r2, r2, #11
 801aed0:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 801aed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801aed6:	3340      	adds	r3, #64	@ 0x40
 801aed8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 801aedc:	12d2      	asrs	r2, r2, #11
 801aede:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801aee0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801aee4:	3301      	adds	r3, #1
 801aee6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801aeea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801aeee:	3302      	adds	r3, #2
 801aef0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801aef4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801aef8:	3304      	adds	r3, #4
 801aefa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801aefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801af02:	3304      	adds	r3, #4
 801af04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801af08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801af0c:	2b07      	cmp	r3, #7
 801af0e:	f77f af17 	ble.w	801ad40 <jpeg_idct_10x5+0x40>
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 801af12:	f107 0310 	add.w	r3, r7, #16
 801af16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  for (ctr = 0; ctr < 5; ctr++) {
 801af1a:	2300      	movs	r3, #0
 801af1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801af20:	e1d4      	b.n	801b2cc <jpeg_idct_10x5+0x5cc>
 801af22:	bf00      	nop
 801af24:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 801af28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801af2c:	009b      	lsls	r3, r3, #2
 801af2e:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 801af32:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 801af36:	6812      	ldr	r2, [r2, #0]
 801af38:	4413      	add	r3, r2
 801af3a:	681a      	ldr	r2, [r3, #0]
 801af3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801af40:	4413      	add	r3, r2
 801af42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801af46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	3310      	adds	r3, #16
 801af4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    z3 <<= CONST_BITS;
 801af52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801af56:	035b      	lsls	r3, r3, #13
 801af58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    z4 = (INT32) wsptr[4];
 801af5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801af60:	3310      	adds	r3, #16
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801af68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801af6c:	f242 429d 	movw	r2, #9373	@ 0x249d
 801af70:	fb02 f303 	mul.w	r3, r2, r3
 801af74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801af78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801af7c:	f640 52fc 	movw	r2, #3580	@ 0xdfc
 801af80:	fb02 f303 	mul.w	r3, r2, r3
 801af84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    tmp10 = z3 + z1;
 801af88:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801af8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801af90:	4413      	add	r3, r2
 801af92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp11 = z3 - z2;
 801af96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801af9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801af9e:	1ad3      	subs	r3, r2, r3
 801afa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801afa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801afa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801afac:	1ad3      	subs	r3, r2, r3
 801afae:	005b      	lsls	r3, r3, #1
 801afb0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801afb4:	1ad3      	subs	r3, r2, r3
 801afb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

    z2 = (INT32) wsptr[2];
 801afba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801afbe:	3308      	adds	r3, #8
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    z3 = (INT32) wsptr[6];
 801afc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801afca:	3318      	adds	r3, #24
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801afd2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801afd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801afda:	4413      	add	r3, r2
 801afdc:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 801afe0:	fb02 f303 	mul.w	r3, r2, r3
 801afe4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801afe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801afec:	f241 0271 	movw	r2, #4209	@ 0x1071
 801aff0:	fb02 f303 	mul.w	r3, r2, r3
 801aff4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801aff8:	4413      	add	r3, r2
 801affa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801affe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b002:	4ab9      	ldr	r2, [pc, #740]	@ (801b2e8 <jpeg_idct_10x5+0x5e8>)
 801b004:	fb02 f303 	mul.w	r3, r2, r3
 801b008:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801b00c:	4413      	add	r3, r2
 801b00e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    tmp20 = tmp10 + tmp12;
 801b012:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801b016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b01a:	4413      	add	r3, r2
 801b01c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    tmp24 = tmp10 - tmp12;
 801b020:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801b024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b028:	1ad3      	subs	r3, r2, r3
 801b02a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp21 = tmp11 + tmp13;
 801b02e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801b032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b036:	4413      	add	r3, r2
 801b038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp23 = tmp11 - tmp13;
 801b03c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801b040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b044:	1ad3      	subs	r3, r2, r3
 801b046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801b04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b04e:	3304      	adds	r3, #4
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    z2 = (INT32) wsptr[3];
 801b056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b05a:	330c      	adds	r3, #12
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    z3 = (INT32) wsptr[5];
 801b062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b066:	3314      	adds	r3, #20
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    z3 <<= CONST_BITS;
 801b06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b072:	035b      	lsls	r3, r3, #13
 801b074:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    z4 = (INT32) wsptr[7];
 801b078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b07c:	331c      	adds	r3, #28
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    tmp11 = z2 + z4;
 801b084:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801b088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b08c:	4413      	add	r3, r2
 801b08e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp13 = z2 - z4;
 801b092:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801b096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b09a:	1ad3      	subs	r3, r2, r3
 801b09c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801b0a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b0a4:	f640 12e3 	movw	r2, #2531	@ 0x9e3
 801b0a8:	fb02 f303 	mul.w	r3, r2, r3
 801b0ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801b0b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b0b4:	f641 626f 	movw	r2, #7791	@ 0x1e6f
 801b0b8:	fb02 f303 	mul.w	r3, r2, r3
 801b0bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    z4 = z3 + tmp12;
 801b0c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801b0c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b0c8:	4413      	add	r3, r2
 801b0ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801b0ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b0d2:	f642 42b3 	movw	r2, #11443	@ 0x2cb3
 801b0d6:	fb03 f202 	mul.w	r2, r3, r2
 801b0da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b0de:	4413      	add	r3, r2
 801b0e0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801b0e4:	4413      	add	r3, r2
 801b0e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801b0ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b0ee:	f240 7214 	movw	r2, #1812	@ 0x714
 801b0f2:	fb03 f202 	mul.w	r2, r3, r2
 801b0f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b0fa:	1ad3      	subs	r3, r2, r3
 801b0fc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801b100:	4413      	add	r3, r2
 801b102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801b106:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b10a:	f241 22cf 	movw	r2, #4815	@ 0x12cf
 801b10e:	fb02 f303 	mul.w	r3, r2, r3
 801b112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801b116:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801b11a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b11e:	1ad2      	subs	r2, r2, r3
 801b120:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b124:	031b      	lsls	r3, r3, #12
 801b126:	1ad3      	subs	r3, r2, r3
 801b128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801b12c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801b130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b134:	1ad3      	subs	r3, r2, r3
 801b136:	035a      	lsls	r2, r3, #13
 801b138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801b13c:	1ad3      	subs	r3, r2, r3
 801b13e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801b142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b146:	f642 0253 	movw	r2, #10323	@ 0x2853
 801b14a:	fb03 f202 	mul.w	r2, r3, r2
 801b14e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b152:	1ad2      	subs	r2, r2, r3
 801b154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b158:	1ad3      	subs	r3, r2, r3
 801b15a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801b15e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b162:	f241 428c 	movw	r2, #5260	@ 0x148c
 801b166:	fb03 f202 	mul.w	r2, r3, r2
 801b16a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b16e:	1ad3      	subs	r3, r2, r3
 801b170:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801b174:	4413      	add	r3, r2
 801b176:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801b17a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801b17e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b182:	4413      	add	r3, r2
 801b184:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b186:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801b18a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b18e:	4413      	add	r3, r2
 801b190:	781a      	ldrb	r2, [r3, #0]
 801b192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b196:	701a      	strb	r2, [r3, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801b198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 801b19c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b1a0:	1ad3      	subs	r3, r2, r3
 801b1a2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b1a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801b1a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b1ac:	441a      	add	r2, r3
 801b1ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b1b2:	3309      	adds	r3, #9
 801b1b4:	7812      	ldrb	r2, [r2, #0]
 801b1b6:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801b1b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b1bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b1c0:	4413      	add	r3, r2
 801b1c2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b1c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801b1c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b1cc:	441a      	add	r2, r3
 801b1ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b1d2:	3301      	adds	r3, #1
 801b1d4:	7812      	ldrb	r2, [r2, #0]
 801b1d6:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801b1d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b1dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b1e0:	1ad3      	subs	r3, r2, r3
 801b1e2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b1e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801b1e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b1ec:	441a      	add	r2, r3
 801b1ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b1f2:	3308      	adds	r3, #8
 801b1f4:	7812      	ldrb	r2, [r2, #0]
 801b1f6:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801b1f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 801b1fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b200:	4413      	add	r3, r2
 801b202:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b204:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801b208:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b20c:	441a      	add	r2, r3
 801b20e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b212:	3302      	adds	r3, #2
 801b214:	7812      	ldrb	r2, [r2, #0]
 801b216:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801b218:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 801b21c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b220:	1ad3      	subs	r3, r2, r3
 801b222:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b224:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801b228:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b22c:	441a      	add	r2, r3
 801b22e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b232:	3307      	adds	r3, #7
 801b234:	7812      	ldrb	r2, [r2, #0]
 801b236:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801b238:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b23c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b240:	4413      	add	r3, r2
 801b242:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b244:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801b248:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b24c:	441a      	add	r2, r3
 801b24e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b252:	3303      	adds	r3, #3
 801b254:	7812      	ldrb	r2, [r2, #0]
 801b256:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801b258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b25c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b260:	1ad3      	subs	r3, r2, r3
 801b262:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b264:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801b268:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b26c:	441a      	add	r2, r3
 801b26e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b272:	3306      	adds	r3, #6
 801b274:	7812      	ldrb	r2, [r2, #0]
 801b276:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801b278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b27c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b280:	4413      	add	r3, r2
 801b282:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b284:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801b288:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b28c:	441a      	add	r2, r3
 801b28e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b292:	3304      	adds	r3, #4
 801b294:	7812      	ldrb	r2, [r2, #0]
 801b296:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801b298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b29c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b2a0:	1ad3      	subs	r3, r2, r3
 801b2a2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b2a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801b2a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801b2ac:	441a      	add	r2, r3
 801b2ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b2b2:	3305      	adds	r3, #5
 801b2b4:	7812      	ldrb	r2, [r2, #0]
 801b2b6:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801b2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b2bc:	3320      	adds	r3, #32
 801b2be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  for (ctr = 0; ctr < 5; ctr++) {
 801b2c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801b2c6:	3301      	adds	r3, #1
 801b2c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801b2cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801b2d0:	2b04      	cmp	r3, #4
 801b2d2:	f77f ae29 	ble.w	801af28 <jpeg_idct_10x5+0x228>
  }
}
 801b2d6:	bf00      	nop
 801b2d8:	bf00      	nop
 801b2da:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e4:	4770      	bx	lr
 801b2e6:	bf00      	nop
 801b2e8:	ffffba5c 	.word	0xffffba5c

0801b2ec <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801b2ec:	b480      	push	{r7}
 801b2ee:	b0b7      	sub	sp, #220	@ 0xdc
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	60f8      	str	r0, [r7, #12]
 801b2f4:	60b9      	str	r1, [r7, #8]
 801b2f6:	607a      	str	r2, [r7, #4]
 801b2f8:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801b300:	3380      	adds	r3, #128	@ 0x80
 801b302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801b30c:	68bb      	ldr	r3, [r7, #8]
 801b30e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  wsptr = workspace;
 801b314:	f107 0314 	add.w	r3, r7, #20
 801b318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801b31c:	2300      	movs	r3, #0
 801b31e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b322:	e0a4      	b.n	801b46e <jpeg_idct_8x4+0x182>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801b324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b328:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b32c:	461a      	mov	r2, r3
 801b32e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	fb02 f303 	mul.w	r3, r2, r3
 801b338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801b33c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b340:	3320      	adds	r3, #32
 801b342:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b346:	461a      	mov	r2, r3
 801b348:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b34c:	3340      	adds	r3, #64	@ 0x40
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	fb02 f303 	mul.w	r3, r2, r3
 801b354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 801b358:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b35c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b360:	4413      	add	r3, r2
 801b362:	009b      	lsls	r3, r3, #2
 801b364:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 801b368:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b36c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b370:	1ad3      	subs	r3, r2, r3
 801b372:	009b      	lsls	r3, r3, #2
 801b374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801b378:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b37c:	3310      	adds	r3, #16
 801b37e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b382:	461a      	mov	r2, r3
 801b384:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b388:	3320      	adds	r3, #32
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	fb02 f303 	mul.w	r3, r2, r3
 801b390:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801b394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b398:	3330      	adds	r3, #48	@ 0x30
 801b39a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b39e:	461a      	mov	r2, r3
 801b3a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b3a4:	3360      	adds	r3, #96	@ 0x60
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	fb02 f303 	mul.w	r3, r2, r3
 801b3ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801b3b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b3b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b3b8:	4413      	add	r3, r2
 801b3ba:	f241 1251 	movw	r2, #4433	@ 0x1151
 801b3be:	fb02 f303 	mul.w	r3, r2, r3
 801b3c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801b3c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b3ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801b3ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801b3d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b3d6:	f641 027e 	movw	r2, #6270	@ 0x187e
 801b3da:	fb03 f202 	mul.w	r2, r3, r2
 801b3de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b3e2:	4413      	add	r3, r2
 801b3e4:	12db      	asrs	r3, r3, #11
 801b3e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801b3ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b3ee:	4a26      	ldr	r2, [pc, #152]	@ (801b488 <jpeg_idct_8x4+0x19c>)
 801b3f0:	fb03 f202 	mul.w	r2, r3, r2
 801b3f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b3f8:	4413      	add	r3, r2
 801b3fa:	12db      	asrs	r3, r3, #11
 801b3fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 801b400:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801b404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b408:	441a      	add	r2, r3
 801b40a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b40e:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) (tmp10 - tmp0);
 801b410:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b414:	3360      	adds	r3, #96	@ 0x60
 801b416:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801b41a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b41e:	1a8a      	subs	r2, r1, r2
 801b420:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801b422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b426:	3320      	adds	r3, #32
 801b428:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801b42c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b430:	440a      	add	r2, r1
 801b432:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 801b434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b438:	3340      	adds	r3, #64	@ 0x40
 801b43a:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801b43e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b442:	1a8a      	subs	r2, r1, r2
 801b444:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801b446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b44a:	3301      	adds	r3, #1
 801b44c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b454:	3302      	adds	r3, #2
 801b456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801b45a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b45e:	3304      	adds	r3, #4
 801b460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801b464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b468:	3304      	adds	r3, #4
 801b46a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801b46e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b472:	2b07      	cmp	r3, #7
 801b474:	f77f af56 	ble.w	801b324 <jpeg_idct_8x4+0x38>

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801b478:	f107 0314 	add.w	r3, r7, #20
 801b47c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  for (ctr = 0; ctr < 4; ctr++) {
 801b480:	2300      	movs	r3, #0
 801b482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b486:	e1a2      	b.n	801b7ce <jpeg_idct_8x4+0x4e2>
 801b488:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 801b48c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b490:	009b      	lsls	r3, r3, #2
 801b492:	683a      	ldr	r2, [r7, #0]
 801b494:	4413      	add	r3, r2
 801b496:	681a      	ldr	r2, [r3, #0]
 801b498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b49c:	4413      	add	r3, r2
 801b49e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
 801b4a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b4a6:	3308      	adds	r3, #8
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    z3 = (INT32) wsptr[6];
 801b4ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b4b2:	3318      	adds	r3, #24
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801b4ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b4be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b4c2:	4413      	add	r3, r2
 801b4c4:	f241 1251 	movw	r2, #4433	@ 0x1151
 801b4c8:	fb02 f303 	mul.w	r3, r2, r3
 801b4cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801b4d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b4d4:	f641 027e 	movw	r2, #6270	@ 0x187e
 801b4d8:	fb02 f303 	mul.w	r3, r2, r3
 801b4dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b4e0:	4413      	add	r3, r2
 801b4e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801b4e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b4ea:	4abf      	ldr	r2, [pc, #764]	@ (801b7e8 <jpeg_idct_8x4+0x4fc>)
 801b4ec:	fb02 f303 	mul.w	r3, r2, r3
 801b4f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b4f4:	4413      	add	r3, r2
 801b4f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    
    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801b4fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	3310      	adds	r3, #16
 801b502:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    z3 = (INT32) wsptr[4];
 801b506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b50a:	3310      	adds	r3, #16
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    
    tmp0 = (z2 + z3) << CONST_BITS;
 801b512:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b51a:	4413      	add	r3, r2
 801b51c:	035b      	lsls	r3, r3, #13
 801b51e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp1 = (z2 - z3) << CONST_BITS;
 801b522:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b52a:	1ad3      	subs	r3, r2, r3
 801b52c:	035b      	lsls	r3, r3, #13
 801b52e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    
    tmp10 = tmp0 + tmp2;
 801b532:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b536:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b53a:	4413      	add	r3, r2
 801b53c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    tmp13 = tmp0 - tmp2;
 801b540:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b548:	1ad3      	subs	r3, r2, r3
 801b54a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp11 = tmp1 + tmp3;
 801b54e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801b552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b556:	4413      	add	r3, r2
 801b558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp12 = tmp1 - tmp3;
 801b55c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801b560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b564:	1ad3      	subs	r3, r2, r3
 801b566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = (INT32) wsptr[7];
 801b56a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b56e:	331c      	adds	r3, #28
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp1 = (INT32) wsptr[5];
 801b576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b57a:	3314      	adds	r3, #20
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp2 = (INT32) wsptr[3];
 801b582:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b586:	330c      	adds	r3, #12
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp3 = (INT32) wsptr[1];
 801b58e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b592:	3304      	adds	r3, #4
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    z2 = tmp0 + tmp2;
 801b59a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b59e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b5a2:	4413      	add	r3, r2
 801b5a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    z3 = tmp1 + tmp3;
 801b5a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801b5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b5b0:	4413      	add	r3, r2
 801b5b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801b5b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b5ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b5be:	4413      	add	r3, r2
 801b5c0:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 801b5c4:	fb02 f303 	mul.w	r3, r2, r3
 801b5c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801b5cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b5d0:	4a86      	ldr	r2, [pc, #536]	@ (801b7ec <jpeg_idct_8x4+0x500>)
 801b5d2:	fb02 f303 	mul.w	r3, r2, r3
 801b5d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801b5da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b5de:	4a84      	ldr	r2, [pc, #528]	@ (801b7f0 <jpeg_idct_8x4+0x504>)
 801b5e0:	fb02 f303 	mul.w	r3, r2, r3
 801b5e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    z2 += z1;
 801b5e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801b5ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b5f0:	4413      	add	r3, r2
 801b5f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    z3 += z1;
 801b5f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801b5fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b5fe:	4413      	add	r3, r2
 801b600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801b604:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b60c:	4413      	add	r3, r2
 801b60e:	4a79      	ldr	r2, [pc, #484]	@ (801b7f4 <jpeg_idct_8x4+0x508>)
 801b610:	fb02 f303 	mul.w	r3, r2, r3
 801b614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801b618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b61c:	f640 128e 	movw	r2, #2446	@ 0x98e
 801b620:	fb02 f303 	mul.w	r3, r2, r3
 801b624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801b628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b62c:	f243 020b 	movw	r2, #12299	@ 0x300b
 801b630:	fb02 f303 	mul.w	r3, r2, r3
 801b634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    tmp0 += z1 + z2;
 801b638:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b63c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b640:	4413      	add	r3, r2
 801b642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801b646:	4413      	add	r3, r2
 801b648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    tmp3 += z1 + z3;
 801b64c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b654:	4413      	add	r3, r2
 801b656:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801b65a:	4413      	add	r3, r2
 801b65c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801b660:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801b664:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b668:	4413      	add	r3, r2
 801b66a:	4a63      	ldr	r2, [pc, #396]	@ (801b7f8 <jpeg_idct_8x4+0x50c>)
 801b66c:	fb02 f303 	mul.w	r3, r2, r3
 801b670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801b674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b678:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 801b67c:	fb02 f303 	mul.w	r3, r2, r3
 801b680:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801b684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b688:	f246 2254 	movw	r2, #25172	@ 0x6254
 801b68c:	fb02 f303 	mul.w	r3, r2, r3
 801b690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    tmp1 += z1 + z3;
 801b694:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801b69c:	4413      	add	r3, r2
 801b69e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801b6a2:	4413      	add	r3, r2
 801b6a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp2 += z1 + z2;
 801b6a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801b6ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801b6b0:	4413      	add	r3, r2
 801b6b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b6b6:	4413      	add	r3, r2
 801b6b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801b6bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801b6c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b6c4:	4413      	add	r3, r2
 801b6c6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b6c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801b6cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b6d0:	4413      	add	r3, r2
 801b6d2:	781a      	ldrb	r2, [r3, #0]
 801b6d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b6d8:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801b6da:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801b6de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801b6e2:	1ad3      	subs	r3, r2, r3
 801b6e4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b6e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801b6ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b6ee:	441a      	add	r2, r3
 801b6f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b6f4:	3307      	adds	r3, #7
 801b6f6:	7812      	ldrb	r2, [r2, #0]
 801b6f8:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801b6fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801b6fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b702:	4413      	add	r3, r2
 801b704:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b706:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801b70a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b70e:	441a      	add	r2, r3
 801b710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b714:	3301      	adds	r3, #1
 801b716:	7812      	ldrb	r2, [r2, #0]
 801b718:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801b71a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801b71e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b722:	1ad3      	subs	r3, r2, r3
 801b724:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b726:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801b72a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b72e:	441a      	add	r2, r3
 801b730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b734:	3306      	adds	r3, #6
 801b736:	7812      	ldrb	r2, [r2, #0]
 801b738:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801b73a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801b73e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b742:	4413      	add	r3, r2
 801b744:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b746:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801b74a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b74e:	441a      	add	r2, r3
 801b750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b754:	3302      	adds	r3, #2
 801b756:	7812      	ldrb	r2, [r2, #0]
 801b758:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801b75a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801b75e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b762:	1ad3      	subs	r3, r2, r3
 801b764:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b766:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801b76a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b76e:	441a      	add	r2, r3
 801b770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b774:	3305      	adds	r3, #5
 801b776:	7812      	ldrb	r2, [r2, #0]
 801b778:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801b77a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801b77e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b782:	4413      	add	r3, r2
 801b784:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b786:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801b78a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b78e:	441a      	add	r2, r3
 801b790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b794:	3303      	adds	r3, #3
 801b796:	7812      	ldrb	r2, [r2, #0]
 801b798:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801b79a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801b79e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801b7a2:	1ad3      	subs	r3, r2, r3
 801b7a4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b7a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801b7aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801b7ae:	441a      	add	r2, r3
 801b7b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b7b4:	3304      	adds	r3, #4
 801b7b6:	7812      	ldrb	r2, [r2, #0]
 801b7b8:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 801b7ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b7be:	3320      	adds	r3, #32
 801b7c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  for (ctr = 0; ctr < 4; ctr++) {
 801b7c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b7c8:	3301      	adds	r3, #1
 801b7ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b7ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b7d2:	2b03      	cmp	r3, #3
 801b7d4:	f77f ae5a 	ble.w	801b48c <jpeg_idct_8x4+0x1a0>
  }
}
 801b7d8:	bf00      	nop
 801b7da:	bf00      	nop
 801b7dc:	37dc      	adds	r7, #220	@ 0xdc
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e4:	4770      	bx	lr
 801b7e6:	bf00      	nop
 801b7e8:	ffffc4df 	.word	0xffffc4df
 801b7ec:	ffffc13b 	.word	0xffffc13b
 801b7f0:	fffff384 	.word	0xfffff384
 801b7f4:	ffffe333 	.word	0xffffe333
 801b7f8:	ffffadfd 	.word	0xffffadfd

0801b7fc <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801b7fc:	b480      	push	{r7}
 801b7fe:	b0a7      	sub	sp, #156	@ 0x9c
 801b800:	af00      	add	r7, sp, #0
 801b802:	60f8      	str	r0, [r7, #12]
 801b804:	60b9      	str	r1, [r7, #8]
 801b806:	607a      	str	r2, [r7, #4]
 801b808:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801b810:	3380      	adds	r3, #128	@ 0x80
 801b812:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801b81c:	68bb      	ldr	r3, [r7, #8]
 801b81e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  wsptr = workspace;
 801b824:	f107 0314 	add.w	r3, r7, #20
 801b828:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801b82c:	2300      	movs	r3, #0
 801b82e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801b832:	e06a      	b.n	801b90a <jpeg_idct_6x3+0x10e>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801b834:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801b838:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b83c:	461a      	mov	r2, r3
 801b83e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	fb02 f303 	mul.w	r3, r2, r3
 801b848:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp0 <<= CONST_BITS;
 801b84a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b84c:	035b      	lsls	r3, r3, #13
 801b84e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801b850:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801b856:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801b858:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801b85c:	3320      	adds	r3, #32
 801b85e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b862:	461a      	mov	r2, r3
 801b864:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801b868:	3340      	adds	r3, #64	@ 0x40
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	fb02 f303 	mul.w	r3, r2, r3
 801b870:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801b872:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b874:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 801b878:	fb02 f303 	mul.w	r3, r2, r3
 801b87c:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp10 = tmp0 + tmp12;
 801b87e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b882:	4413      	add	r3, r2
 801b884:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp2 = tmp0 - tmp12 - tmp12;
 801b886:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b88a:	1ad2      	subs	r2, r2, r3
 801b88c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b88e:	1ad3      	subs	r3, r2, r3
 801b890:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801b892:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801b896:	3310      	adds	r3, #16
 801b898:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b89c:	461a      	mov	r2, r3
 801b89e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801b8a2:	3320      	adds	r3, #32
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	fb02 f303 	mul.w	r3, r2, r3
 801b8aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801b8ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b8ae:	f242 7231 	movw	r2, #10033	@ 0x2731
 801b8b2:	fb02 f303 	mul.w	r3, r2, r3
 801b8b6:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801b8b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801b8ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b8bc:	4413      	add	r3, r2
 801b8be:	12da      	asrs	r2, r3, #11
 801b8c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b8c4:	601a      	str	r2, [r3, #0]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801b8c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801b8c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b8ca:	1ad2      	subs	r2, r2, r3
 801b8cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b8d0:	3330      	adds	r3, #48	@ 0x30
 801b8d2:	12d2      	asrs	r2, r2, #11
 801b8d4:	601a      	str	r2, [r3, #0]
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801b8d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b8da:	3318      	adds	r3, #24
 801b8dc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801b8de:	12d2      	asrs	r2, r2, #11
 801b8e0:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801b8e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b8e6:	3301      	adds	r3, #1
 801b8e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801b8ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801b8f0:	3302      	adds	r3, #2
 801b8f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801b8f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801b8fa:	3304      	adds	r3, #4
 801b8fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801b900:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b904:	3304      	adds	r3, #4
 801b906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801b90a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b90e:	2b05      	cmp	r3, #5
 801b910:	dd90      	ble.n	801b834 <jpeg_idct_6x3+0x38>
  }
  
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 801b912:	f107 0314 	add.w	r3, r7, #20
 801b916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  for (ctr = 0; ctr < 3; ctr++) {
 801b91a:	2300      	movs	r3, #0
 801b91c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801b920:	e0c3      	b.n	801baaa <jpeg_idct_6x3+0x2ae>
    outptr = output_buf[ctr] + output_col;
 801b922:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b926:	009b      	lsls	r3, r3, #2
 801b928:	683a      	ldr	r2, [r7, #0]
 801b92a:	4413      	add	r3, r2
 801b92c:	681a      	ldr	r2, [r3, #0]
 801b92e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b932:	4413      	add	r3, r2
 801b934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801b938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	3310      	adds	r3, #16
 801b940:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp0 <<= CONST_BITS;
 801b942:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b944:	035b      	lsls	r3, r3, #13
 801b946:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp2 = (INT32) wsptr[4];
 801b948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b94c:	3310      	adds	r3, #16
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801b952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b954:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 801b958:	fb02 f303 	mul.w	r3, r2, r3
 801b95c:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp1 = tmp0 + tmp10;
 801b95e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b962:	4413      	add	r3, r2
 801b964:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp11 = tmp0 - tmp10 - tmp10;
 801b966:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b968:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b96a:	1ad2      	subs	r2, r2, r3
 801b96c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b96e:	1ad3      	subs	r3, r2, r3
 801b970:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp10 = (INT32) wsptr[2];
 801b972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b976:	3308      	adds	r3, #8
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801b97c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b97e:	f242 7231 	movw	r2, #10033	@ 0x2731
 801b982:	fb02 f303 	mul.w	r3, r2, r3
 801b986:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp10 = tmp1 + tmp0;
 801b988:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801b98a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b98c:	4413      	add	r3, r2
 801b98e:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp12 = tmp1 - tmp0;
 801b990:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801b992:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b994:	1ad3      	subs	r3, r2, r3
 801b996:	66bb      	str	r3, [r7, #104]	@ 0x68

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801b998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b99c:	3304      	adds	r3, #4
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	667b      	str	r3, [r7, #100]	@ 0x64
    z2 = (INT32) wsptr[3];
 801b9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b9a6:	330c      	adds	r3, #12
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	663b      	str	r3, [r7, #96]	@ 0x60
    z3 = (INT32) wsptr[5];
 801b9ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801b9b0:	3314      	adds	r3, #20
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801b9b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801b9b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b9ba:	4413      	add	r3, r2
 801b9bc:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 801b9c0:	fb02 f303 	mul.w	r3, r2, r3
 801b9c4:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801b9c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801b9c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b9ca:	4413      	add	r3, r2
 801b9cc:	035b      	lsls	r3, r3, #13
 801b9ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801b9d0:	4413      	add	r3, r2
 801b9d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801b9d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b9d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b9d8:	1ad3      	subs	r3, r2, r3
 801b9da:	035b      	lsls	r3, r3, #13
 801b9dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801b9de:	4413      	add	r3, r2
 801b9e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801b9e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801b9e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b9e6:	1ad2      	subs	r2, r2, r3
 801b9e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b9ea:	1ad3      	subs	r3, r2, r3
 801b9ec:	035b      	lsls	r3, r3, #13
 801b9ee:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801b9f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801b9f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b9f4:	4413      	add	r3, r2
 801b9f6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b9f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801b9fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ba00:	4413      	add	r3, r2
 801ba02:	781a      	ldrb	r2, [r3, #0]
 801ba04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ba08:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801ba0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801ba0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ba0e:	1ad3      	subs	r3, r2, r3
 801ba10:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ba12:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801ba16:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ba1a:	441a      	add	r2, r3
 801ba1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ba20:	3305      	adds	r3, #5
 801ba22:	7812      	ldrb	r2, [r2, #0]
 801ba24:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801ba26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801ba28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ba2a:	4413      	add	r3, r2
 801ba2c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ba2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801ba32:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ba36:	441a      	add	r2, r3
 801ba38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ba3c:	3301      	adds	r3, #1
 801ba3e:	7812      	ldrb	r2, [r2, #0]
 801ba40:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801ba42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801ba44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ba46:	1ad3      	subs	r3, r2, r3
 801ba48:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ba4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801ba4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ba52:	441a      	add	r2, r3
 801ba54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ba58:	3304      	adds	r3, #4
 801ba5a:	7812      	ldrb	r2, [r2, #0]
 801ba5c:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801ba5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ba60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ba62:	4413      	add	r3, r2
 801ba64:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ba66:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801ba6a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ba6e:	441a      	add	r2, r3
 801ba70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ba74:	3302      	adds	r3, #2
 801ba76:	7812      	ldrb	r2, [r2, #0]
 801ba78:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801ba7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ba7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ba7e:	1ad3      	subs	r3, r2, r3
 801ba80:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ba82:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801ba86:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ba8a:	441a      	add	r2, r3
 801ba8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ba90:	3303      	adds	r3, #3
 801ba92:	7812      	ldrb	r2, [r2, #0]
 801ba94:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 801ba96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801ba9a:	3318      	adds	r3, #24
 801ba9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  for (ctr = 0; ctr < 3; ctr++) {
 801baa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801baa4:	3301      	adds	r3, #1
 801baa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801baaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801baae:	2b02      	cmp	r3, #2
 801bab0:	f77f af37 	ble.w	801b922 <jpeg_idct_6x3+0x126>
  }
}
 801bab4:	bf00      	nop
 801bab6:	bf00      	nop
 801bab8:	379c      	adds	r7, #156	@ 0x9c
 801baba:	46bd      	mov	sp, r7
 801babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bac0:	4770      	bx	lr
	...

0801bac4 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801bac4:	b480      	push	{r7}
 801bac6:	b09b      	sub	sp, #108	@ 0x6c
 801bac8:	af00      	add	r7, sp, #0
 801baca:	60f8      	str	r0, [r7, #12]
 801bacc:	60b9      	str	r1, [r7, #8]
 801bace:	607a      	str	r2, [r7, #4]
 801bad0:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801bad8:	3380      	adds	r3, #128	@ 0x80
 801bada:	657b      	str	r3, [r7, #84]	@ 0x54
  INT32 workspace[4*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	667b      	str	r3, [r7, #100]	@ 0x64
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801bae0:	68bb      	ldr	r3, [r7, #8]
 801bae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bae4:	663b      	str	r3, [r7, #96]	@ 0x60
  wsptr = workspace;
 801bae6:	f107 0314 	add.w	r3, r7, #20
 801baea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801baec:	2300      	movs	r3, #0
 801baee:	65bb      	str	r3, [r7, #88]	@ 0x58
 801baf0:	e02a      	b.n	801bb48 <jpeg_idct_4x2+0x84>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801baf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801baf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801baf8:	461a      	mov	r2, r3
 801bafa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	fb02 f303 	mul.w	r3, r2, r3
 801bb02:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801bb04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb06:	3310      	adds	r3, #16
 801bb08:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb0c:	461a      	mov	r2, r3
 801bb0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bb10:	3320      	adds	r3, #32
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	fb02 f303 	mul.w	r3, r2, r3
 801bb18:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 801bb1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bb1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb1e:	441a      	add	r2, r3
 801bb20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb22:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = tmp10 - tmp0;
 801bb24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb26:	3310      	adds	r3, #16
 801bb28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801bb2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801bb2c:	1a8a      	subs	r2, r1, r2
 801bb2e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801bb30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bb32:	3301      	adds	r3, #1
 801bb34:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bb36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bb38:	3302      	adds	r3, #2
 801bb3a:	667b      	str	r3, [r7, #100]	@ 0x64
 801bb3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bb3e:	3304      	adds	r3, #4
 801bb40:	663b      	str	r3, [r7, #96]	@ 0x60
 801bb42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb44:	3304      	adds	r3, #4
 801bb46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bb48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bb4a:	2b03      	cmp	r3, #3
 801bb4c:	ddd1      	ble.n	801baf2 <jpeg_idct_4x2+0x2e>

  /* Pass 2: process 2 rows from work array, store into output array.
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  wsptr = workspace;
 801bb4e:	f107 0314 	add.w	r3, r7, #20
 801bb52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 2; ctr++) {
 801bb54:	2300      	movs	r3, #0
 801bb56:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bb58:	e06a      	b.n	801bc30 <jpeg_idct_4x2+0x16c>
    outptr = output_buf[ctr] + output_col;
 801bb5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bb5c:	009b      	lsls	r3, r3, #2
 801bb5e:	683a      	ldr	r2, [r7, #0]
 801bb60:	4413      	add	r3, r2
 801bb62:	681a      	ldr	r2, [r3, #0]
 801bb64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801bb66:	4413      	add	r3, r2
 801bb68:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = wsptr[0] + (ONE << 2);
 801bb6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	3304      	adds	r3, #4
 801bb70:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp2 = wsptr[2];
 801bb72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb74:	689b      	ldr	r3, [r3, #8]
 801bb76:	64bb      	str	r3, [r7, #72]	@ 0x48

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801bb78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801bb7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bb7c:	4413      	add	r3, r2
 801bb7e:	035b      	lsls	r3, r3, #13
 801bb80:	647b      	str	r3, [r7, #68]	@ 0x44
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801bb82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801bb84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bb86:	1ad3      	subs	r3, r2, r3
 801bb88:	035b      	lsls	r3, r3, #13
 801bb8a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
 801bb8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb8e:	685b      	ldr	r3, [r3, #4]
 801bb90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    z3 = wsptr[3];
 801bb92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb94:	68db      	ldr	r3, [r3, #12]
 801bb96:	63bb      	str	r3, [r7, #56]	@ 0x38

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801bb98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bb9c:	4413      	add	r3, r2
 801bb9e:	f241 1251 	movw	r2, #4433	@ 0x1151
 801bba2:	fb02 f303 	mul.w	r3, r2, r3
 801bba6:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801bba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bbaa:	f641 027e 	movw	r2, #6270	@ 0x187e
 801bbae:	fb02 f303 	mul.w	r3, r2, r3
 801bbb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bbb4:	4413      	add	r3, r2
 801bbb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801bbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bbba:	4a22      	ldr	r2, [pc, #136]	@ (801bc44 <jpeg_idct_4x2+0x180>)
 801bbbc:	fb02 f303 	mul.w	r3, r2, r3
 801bbc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bbc2:	4413      	add	r3, r2
 801bbc4:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801bbc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bbc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bbca:	4413      	add	r3, r2
 801bbcc:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801bbce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801bbd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bbd4:	4413      	add	r3, r2
 801bbd6:	781a      	ldrb	r2, [r3, #0]
 801bbd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bbda:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801bbdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bbde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bbe0:	1ad3      	subs	r3, r2, r3
 801bbe2:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801bbe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801bbe8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bbea:	441a      	add	r2, r3
 801bbec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bbee:	3303      	adds	r3, #3
 801bbf0:	7812      	ldrb	r2, [r2, #0]
 801bbf2:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801bbf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801bbf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bbf8:	4413      	add	r3, r2
 801bbfa:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801bbfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801bc00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bc02:	441a      	add	r2, r3
 801bc04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bc06:	3301      	adds	r3, #1
 801bc08:	7812      	ldrb	r2, [r2, #0]
 801bc0a:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801bc0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801bc0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bc10:	1ad3      	subs	r3, r2, r3
 801bc12:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801bc14:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801bc18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bc1a:	441a      	add	r2, r3
 801bc1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bc1e:	3302      	adds	r3, #2
 801bc20:	7812      	ldrb	r2, [r2, #0]
 801bc22:	701a      	strb	r2, [r3, #0]

    wsptr += 4;		/* advance pointer to next row */
 801bc24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bc26:	3310      	adds	r3, #16
 801bc28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 2; ctr++) {
 801bc2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bc2c:	3301      	adds	r3, #1
 801bc2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bc30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bc32:	2b01      	cmp	r3, #1
 801bc34:	dd91      	ble.n	801bb5a <jpeg_idct_4x2+0x96>
  }
}
 801bc36:	bf00      	nop
 801bc38:	bf00      	nop
 801bc3a:	376c      	adds	r7, #108	@ 0x6c
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc42:	4770      	bx	lr
 801bc44:	ffffc4df 	.word	0xffffc4df

0801bc48 <jpeg_idct_2x1>:

GLOBAL(void)
jpeg_idct_2x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801bc48:	b480      	push	{r7}
 801bc4a:	b08b      	sub	sp, #44	@ 0x2c
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	60f8      	str	r0, [r7, #12]
 801bc50:	60b9      	str	r1, [r7, #8]
 801bc52:	607a      	str	r2, [r7, #4]
 801bc54:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp10;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801bc5c:	3380      	adds	r3, #128	@ 0x80
 801bc5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801bc60:	68bb      	ldr	r3, [r7, #8]
 801bc62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bc64:	623b      	str	r3, [r7, #32]
  outptr = output_buf[0] + output_col;
 801bc66:	683b      	ldr	r3, [r7, #0]
 801bc68:	681a      	ldr	r2, [r3, #0]
 801bc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc6c:	4413      	add	r3, r2
 801bc6e:	61fb      	str	r3, [r7, #28]

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc76:	461a      	mov	r2, r3
 801bc78:	6a3b      	ldr	r3, [r7, #32]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	fb02 f303 	mul.w	r3, r2, r3
 801bc80:	61bb      	str	r3, [r7, #24]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;
 801bc82:	69bb      	ldr	r3, [r7, #24]
 801bc84:	3304      	adds	r3, #4
 801bc86:	61bb      	str	r3, [r7, #24]

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	3302      	adds	r3, #2
 801bc8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc90:	461a      	mov	r2, r3
 801bc92:	6a3b      	ldr	r3, [r7, #32]
 801bc94:	3304      	adds	r3, #4
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	fb02 f303 	mul.w	r3, r2, r3
 801bc9c:	617b      	str	r3, [r7, #20]

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801bc9e:	69ba      	ldr	r2, [r7, #24]
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	4413      	add	r3, r2
 801bca4:	10db      	asrs	r3, r3, #3
 801bca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bcaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bcac:	4413      	add	r3, r2
 801bcae:	781a      	ldrb	r2, [r3, #0]
 801bcb0:	69fb      	ldr	r3, [r7, #28]
 801bcb2:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 801bcb4:	69ba      	ldr	r2, [r7, #24]
 801bcb6:	697b      	ldr	r3, [r7, #20]
 801bcb8:	1ad3      	subs	r3, r2, r3
 801bcba:	10db      	asrs	r3, r3, #3
 801bcbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bcc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bcc2:	441a      	add	r2, r3
 801bcc4:	69fb      	ldr	r3, [r7, #28]
 801bcc6:	3301      	adds	r3, #1
 801bcc8:	7812      	ldrb	r2, [r2, #0]
 801bcca:	701a      	strb	r2, [r3, #0]
}
 801bccc:	bf00      	nop
 801bcce:	372c      	adds	r7, #44	@ 0x2c
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcd6:	4770      	bx	lr

0801bcd8 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801bcd8:	b490      	push	{r4, r7}
 801bcda:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
 801bcde:	af00      	add	r7, sp, #0
 801bce0:	f507 741e 	add.w	r4, r7, #632	@ 0x278
 801bce4:	f5a4 741b 	sub.w	r4, r4, #620	@ 0x26c
 801bce8:	6020      	str	r0, [r4, #0]
 801bcea:	f507 701e 	add.w	r0, r7, #632	@ 0x278
 801bcee:	f5a0 701c 	sub.w	r0, r0, #624	@ 0x270
 801bcf2:	6001      	str	r1, [r0, #0]
 801bcf4:	f507 711e 	add.w	r1, r7, #632	@ 0x278
 801bcf8:	f5a1 711d 	sub.w	r1, r1, #628	@ 0x274
 801bcfc:	600a      	str	r2, [r1, #0]
 801bcfe:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 801bd02:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 801bd06:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801bd08:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801bd0c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801bd16:	3380      	adds	r3, #128	@ 0x80
 801bd18:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
 801bd1c:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801bd20:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801bd2a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 801bd2e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bd36:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
  wsptr = workspace;
 801bd3a:	f107 0310 	add.w	r3, r7, #16
 801bd3e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801bd42:	2300      	movs	r3, #0
 801bd44:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801bd48:	e30a      	b.n	801c360 <jpeg_idct_8x16+0x688>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801bd4a:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801bd4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd52:	461a      	mov	r2, r3
 801bd54:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	fb02 f303 	mul.w	r3, r2, r3
 801bd5e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp0 <<= CONST_BITS;
 801bd62:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801bd66:	035b      	lsls	r3, r3, #13
 801bd68:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801bd6c:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801bd70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801bd74:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801bd78:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801bd7c:	3340      	adds	r3, #64	@ 0x40
 801bd7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd82:	461a      	mov	r2, r3
 801bd84:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801bd88:	3380      	adds	r3, #128	@ 0x80
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	fb02 f303 	mul.w	r3, r2, r3
 801bd90:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801bd94:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801bd98:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 801bd9c:	fb02 f303 	mul.w	r3, r2, r3
 801bda0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801bda4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801bda8:	f241 1251 	movw	r2, #4433	@ 0x1151
 801bdac:	fb02 f303 	mul.w	r3, r2, r3
 801bdb0:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250

    tmp10 = tmp0 + tmp1;
 801bdb4:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801bdb8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801bdbc:	4413      	add	r3, r2
 801bdbe:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    tmp11 = tmp0 - tmp1;
 801bdc2:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801bdc6:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801bdca:	1ad3      	subs	r3, r2, r3
 801bdcc:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp12 = tmp0 + tmp2;
 801bdd0:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801bdd4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801bdd8:	4413      	add	r3, r2
 801bdda:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    tmp13 = tmp0 - tmp2;
 801bdde:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801bde2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801bde6:	1ad3      	subs	r3, r2, r3
 801bde8:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801bdec:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801bdf0:	3320      	adds	r3, #32
 801bdf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801bdfc:	3340      	adds	r3, #64	@ 0x40
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	fb02 f303 	mul.w	r3, r2, r3
 801be04:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801be08:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801be0c:	3360      	adds	r3, #96	@ 0x60
 801be0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be12:	461a      	mov	r2, r3
 801be14:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801be18:	33c0      	adds	r3, #192	@ 0xc0
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	fb02 f303 	mul.w	r3, r2, r3
 801be20:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z3 = z1 - z2;
 801be24:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801be28:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801be2c:	1ad3      	subs	r3, r2, r3
 801be2e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801be32:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801be36:	f640 02d4 	movw	r2, #2260	@ 0x8d4
 801be3a:	fb02 f303 	mul.w	r3, r2, r3
 801be3e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801be42:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801be46:	f642 4263 	movw	r2, #11363	@ 0x2c63
 801be4a:	fb02 f303 	mul.w	r3, r2, r3
 801be4e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801be52:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801be56:	f245 2203 	movw	r2, #20995	@ 0x5203
 801be5a:	fb02 f303 	mul.w	r3, r2, r3
 801be5e:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 801be62:	4413      	add	r3, r2
 801be64:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801be68:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801be6c:	f641 42cd 	movw	r2, #7373	@ 0x1ccd
 801be70:	fb02 f303 	mul.w	r3, r2, r3
 801be74:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 801be78:	4413      	add	r3, r2
 801be7a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801be7e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801be82:	4af4      	ldr	r2, [pc, #976]	@ (801c254 <jpeg_idct_8x16+0x57c>)
 801be84:	fb02 f303 	mul.w	r3, r2, r3
 801be88:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 801be8c:	4413      	add	r3, r2
 801be8e:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801be92:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801be96:	4af0      	ldr	r2, [pc, #960]	@ (801c258 <jpeg_idct_8x16+0x580>)
 801be98:	fb02 f303 	mul.w	r3, r2, r3
 801be9c:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 801bea0:	4413      	add	r3, r2
 801bea2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

    tmp20 = tmp10 + tmp0;
 801bea6:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801beaa:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801beae:	4413      	add	r3, r2
 801beb0:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
    tmp27 = tmp10 - tmp0;
 801beb4:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801beb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801bebc:	1ad3      	subs	r3, r2, r3
 801bebe:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    tmp21 = tmp12 + tmp1;
 801bec2:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801bec6:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801beca:	4413      	add	r3, r2
 801becc:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
    tmp26 = tmp12 - tmp1;
 801bed0:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801bed4:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801bed8:	1ad3      	subs	r3, r2, r3
 801beda:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    tmp22 = tmp13 + tmp2;
 801bede:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801bee2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801bee6:	4413      	add	r3, r2
 801bee8:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    tmp25 = tmp13 - tmp2;
 801beec:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801bef0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801bef4:	1ad3      	subs	r3, r2, r3
 801bef6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    tmp23 = tmp11 + tmp3;
 801befa:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801befe:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801bf02:	4413      	add	r3, r2
 801bf04:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    tmp24 = tmp11 - tmp3;
 801bf08:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801bf0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801bf10:	1ad3      	subs	r3, r2, r3
 801bf12:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801bf16:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801bf1a:	3310      	adds	r3, #16
 801bf1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf20:	461a      	mov	r2, r3
 801bf22:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801bf26:	3320      	adds	r3, #32
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	fb02 f303 	mul.w	r3, r2, r3
 801bf2e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801bf32:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801bf36:	3330      	adds	r3, #48	@ 0x30
 801bf38:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf3c:	461a      	mov	r2, r3
 801bf3e:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801bf42:	3360      	adds	r3, #96	@ 0x60
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	fb02 f303 	mul.w	r3, r2, r3
 801bf4a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801bf4e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801bf52:	3350      	adds	r3, #80	@ 0x50
 801bf54:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf58:	461a      	mov	r2, r3
 801bf5a:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801bf5e:	33a0      	adds	r3, #160	@ 0xa0
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	fb02 f303 	mul.w	r3, r2, r3
 801bf66:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801bf6a:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801bf6e:	3370      	adds	r3, #112	@ 0x70
 801bf70:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bf74:	461a      	mov	r2, r3
 801bf76:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801bf7a:	33e0      	adds	r3, #224	@ 0xe0
 801bf7c:	681b      	ldr	r3, [r3, #0]
 801bf7e:	fb02 f303 	mul.w	r3, r2, r3
 801bf82:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

    tmp11 = z1 + z3;
 801bf86:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801bf8a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801bf8e:	4413      	add	r3, r2
 801bf90:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801bf94:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801bf98:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801bf9c:	4413      	add	r3, r2
 801bf9e:	f642 324e 	movw	r2, #11086	@ 0x2b4e
 801bfa2:	fb02 f303 	mul.w	r3, r2, r3
 801bfa6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801bfaa:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801bfae:	f242 72e9 	movw	r2, #10217	@ 0x27e9
 801bfb2:	fb02 f303 	mul.w	r3, r2, r3
 801bfb6:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801bfba:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801bfbe:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801bfc2:	4413      	add	r3, r2
 801bfc4:	f242 22fc 	movw	r2, #8956	@ 0x22fc
 801bfc8:	fb02 f303 	mul.w	r3, r2, r3
 801bfcc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801bfd0:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801bfd4:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801bfd8:	1ad3      	subs	r3, r2, r3
 801bfda:	f641 42b6 	movw	r2, #7350	@ 0x1cb6
 801bfde:	fb02 f303 	mul.w	r3, r2, r3
 801bfe2:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801bfe6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801bfea:	f241 5255 	movw	r2, #5461	@ 0x1555
 801bfee:	fb02 f303 	mul.w	r3, r2, r3
 801bff2:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801bff6:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801bffa:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801bffe:	1ad3      	subs	r3, r2, r3
 801c000:	f640 5223 	movw	r2, #3363	@ 0xd23
 801c004:	fb02 f303 	mul.w	r3, r2, r3
 801c008:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    tmp0  = tmp1 + tmp2 + tmp3 -
 801c00c:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c010:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c014:	441a      	add	r2, r3
 801c016:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c01a:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801c01c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c020:	498e      	ldr	r1, [pc, #568]	@ (801c25c <jpeg_idct_8x16+0x584>)
 801c022:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 801c026:	4413      	add	r3, r2
 801c028:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp13 = tmp10 + tmp11 + tmp12 -
 801c02c:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801c030:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801c034:	441a      	add	r2, r3
 801c036:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801c03a:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801c03c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c040:	4987      	ldr	r1, [pc, #540]	@ (801c260 <jpeg_idct_8x16+0x588>)
 801c042:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 801c046:	4413      	add	r3, r2
 801c048:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801c04c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c050:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c054:	4413      	add	r3, r2
 801c056:	f44f 628e 	mov.w	r2, #1136	@ 0x470
 801c05a:	fb02 f303 	mul.w	r3, r2, r3
 801c05e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801c062:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c066:	f240 224d 	movw	r2, #589	@ 0x24d
 801c06a:	fb03 f202 	mul.w	r2, r3, r2
 801c06e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c072:	4413      	add	r3, r2
 801c074:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c078:	4413      	add	r3, r2
 801c07a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801c07e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c082:	4a78      	ldr	r2, [pc, #480]	@ (801c264 <jpeg_idct_8x16+0x58c>)
 801c084:	fb03 f202 	mul.w	r2, r3, r2
 801c088:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c08c:	4413      	add	r3, r2
 801c08e:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801c092:	4413      	add	r3, r2
 801c094:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801c098:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 801c09c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c0a0:	1ad3      	subs	r3, r2, r3
 801c0a2:	f642 5209 	movw	r2, #11529	@ 0x2d09
 801c0a6:	fb02 f303 	mul.w	r3, r2, r3
 801c0aa:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801c0ae:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c0b2:	4a6d      	ldr	r2, [pc, #436]	@ (801c268 <jpeg_idct_8x16+0x590>)
 801c0b4:	fb03 f202 	mul.w	r2, r3, r2
 801c0b8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c0bc:	4413      	add	r3, r2
 801c0be:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801c0c2:	4413      	add	r3, r2
 801c0c4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801c0c8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c0cc:	f643 721a 	movw	r2, #16154	@ 0x3f1a
 801c0d0:	fb03 f202 	mul.w	r2, r3, r2
 801c0d4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c0d8:	4413      	add	r3, r2
 801c0da:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801c0de:	4413      	add	r3, r2
 801c0e0:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z2    += z4;
 801c0e4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c0e8:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801c0ec:	4413      	add	r3, r2
 801c0ee:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801c0f2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c0f6:	4a5d      	ldr	r2, [pc, #372]	@ (801c26c <jpeg_idct_8x16+0x594>)
 801c0f8:	fb02 f303 	mul.w	r3, r2, r3
 801c0fc:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp1  += z1;
 801c100:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c104:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c108:	4413      	add	r3, r2
 801c10a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801c10e:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801c112:	f242 2218 	movw	r2, #8728	@ 0x2218
 801c116:	fb03 f202 	mul.w	r2, r3, r2
 801c11a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c11e:	4413      	add	r3, r2
 801c120:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 801c124:	4413      	add	r3, r2
 801c126:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801c12a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c12e:	4a50      	ldr	r2, [pc, #320]	@ (801c270 <jpeg_idct_8x16+0x598>)
 801c130:	fb02 f303 	mul.w	r3, r2, r3
 801c134:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801c138:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801c13c:	f246 4285 	movw	r2, #25733	@ 0x6485
 801c140:	fb03 f202 	mul.w	r2, r3, r2
 801c144:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c148:	4413      	add	r3, r2
 801c14a:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801c14e:	4413      	add	r3, r2
 801c150:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    tmp12 += z2;
 801c154:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801c158:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c15c:	4413      	add	r3, r2
 801c15e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801c162:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 801c166:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801c16a:	4413      	add	r3, r2
 801c16c:	4a41      	ldr	r2, [pc, #260]	@ (801c274 <jpeg_idct_8x16+0x59c>)
 801c16e:	fb02 f303 	mul.w	r3, r2, r3
 801c172:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp2  += z2;
 801c176:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801c17a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c17e:	4413      	add	r3, r2
 801c180:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3  += z2;
 801c184:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 801c188:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c18c:	4413      	add	r3, r2
 801c18e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801c192:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 801c196:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c19a:	1ad3      	subs	r3, r2, r3
 801c19c:	f640 5223 	movw	r2, #3363	@ 0xd23
 801c1a0:	fb02 f303 	mul.w	r3, r2, r3
 801c1a4:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    tmp10 += z2;
 801c1a8:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801c1ac:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c1b0:	4413      	add	r3, r2
 801c1b2:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    tmp11 += z2;
 801c1b6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801c1ba:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c1be:	4413      	add	r3, r2
 801c1c0:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801c1c4:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 801c1c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801c1cc:	4413      	add	r3, r2
 801c1ce:	12da      	asrs	r2, r3, #11
 801c1d0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c1d4:	601a      	str	r2, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801c1d6:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 801c1da:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801c1de:	1ad2      	subs	r2, r2, r3
 801c1e0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c1e4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 801c1e8:	12d2      	asrs	r2, r2, #11
 801c1ea:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801c1ec:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801c1f0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801c1f4:	441a      	add	r2, r3
 801c1f6:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c1fa:	3320      	adds	r3, #32
 801c1fc:	12d2      	asrs	r2, r2, #11
 801c1fe:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801c200:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801c204:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801c208:	1ad2      	subs	r2, r2, r3
 801c20a:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c20e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 801c212:	12d2      	asrs	r2, r2, #11
 801c214:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801c216:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801c21a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c21e:	441a      	add	r2, r3
 801c220:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c224:	3340      	adds	r3, #64	@ 0x40
 801c226:	12d2      	asrs	r2, r2, #11
 801c228:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801c22a:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801c22e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c232:	1ad2      	subs	r2, r2, r3
 801c234:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c238:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 801c23c:	12d2      	asrs	r2, r2, #11
 801c23e:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801c240:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801c244:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c248:	441a      	add	r2, r3
 801c24a:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c24e:	3360      	adds	r3, #96	@ 0x60
 801c250:	12d2      	asrs	r2, r2, #11
 801c252:	e011      	b.n	801c278 <jpeg_idct_8x16+0x5a0>
 801c254:	ffffecc2 	.word	0xffffecc2
 801c258:	ffffefb0 	.word	0xffffefb0
 801c25c:	ffffb6d6 	.word	0xffffb6d6
 801c260:	ffffc542 	.word	0xffffc542
 801c264:	ffffdbfa 	.word	0xffffdbfa
 801c268:	ffffe77a 	.word	0xffffe77a
 801c26c:	ffffeaab 	.word	0xffffeaab
 801c270:	ffffd817 	.word	0xffffd817
 801c274:	ffffd4b2 	.word	0xffffd4b2
 801c278:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801c27a:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801c27e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c282:	1ad2      	subs	r2, r2, r3
 801c284:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c288:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801c28c:	12d2      	asrs	r2, r2, #11
 801c28e:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 801c290:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801c294:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 801c298:	441a      	add	r2, r3
 801c29a:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c29e:	3380      	adds	r3, #128	@ 0x80
 801c2a0:	12d2      	asrs	r2, r2, #11
 801c2a2:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 801c2a4:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801c2a8:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 801c2ac:	1ad2      	subs	r2, r2, r3
 801c2ae:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c2b2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 801c2b6:	12d2      	asrs	r2, r2, #11
 801c2b8:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801c2ba:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 801c2be:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801c2c2:	441a      	add	r2, r3
 801c2c4:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c2c8:	33a0      	adds	r3, #160	@ 0xa0
 801c2ca:	12d2      	asrs	r2, r2, #11
 801c2cc:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801c2ce:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 801c2d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801c2d6:	1ad2      	subs	r2, r2, r3
 801c2d8:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c2dc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 801c2e0:	12d2      	asrs	r2, r2, #11
 801c2e2:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801c2e4:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801c2e8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801c2ec:	441a      	add	r2, r3
 801c2ee:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c2f2:	33c0      	adds	r3, #192	@ 0xc0
 801c2f4:	12d2      	asrs	r2, r2, #11
 801c2f6:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801c2f8:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801c2fc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 801c300:	1ad2      	subs	r2, r2, r3
 801c302:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c306:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801c30a:	12d2      	asrs	r2, r2, #11
 801c30c:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801c30e:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801c312:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801c316:	441a      	add	r2, r3
 801c318:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c31c:	33e0      	adds	r3, #224	@ 0xe0
 801c31e:	12d2      	asrs	r2, r2, #11
 801c320:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801c322:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801c326:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801c32a:	1ad2      	subs	r2, r2, r3
 801c32c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c330:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801c334:	12d2      	asrs	r2, r2, #11
 801c336:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801c338:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801c33c:	3301      	adds	r3, #1
 801c33e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801c342:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801c346:	3302      	adds	r3, #2
 801c348:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 801c34c:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 801c350:	3304      	adds	r3, #4
 801c352:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 801c356:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c35a:	3304      	adds	r3, #4
 801c35c:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 801c360:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801c364:	2b07      	cmp	r3, #7
 801c366:	f77f acf0 	ble.w	801bd4a <jpeg_idct_8x16+0x72>
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801c36a:	f107 0310 	add.w	r3, r7, #16
 801c36e:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 801c372:	2300      	movs	r3, #0
 801c374:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801c378:	e1a4      	b.n	801c6c4 <jpeg_idct_8x16+0x9ec>
    outptr = output_buf[ctr] + output_col;
 801c37a:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801c37e:	009b      	lsls	r3, r3, #2
 801c380:	f507 721e 	add.w	r2, r7, #632	@ 0x278
 801c384:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 801c388:	6812      	ldr	r2, [r2, #0]
 801c38a:	4413      	add	r3, r2
 801c38c:	681a      	ldr	r2, [r3, #0]
 801c38e:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 801c392:	4413      	add	r3, r2
 801c394:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
 801c398:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c39c:	3308      	adds	r3, #8
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z3 = (INT32) wsptr[6];
 801c3a4:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c3a8:	3318      	adds	r3, #24
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801c3b0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c3b4:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c3b8:	4413      	add	r3, r2
 801c3ba:	f241 1251 	movw	r2, #4433	@ 0x1151
 801c3be:	fb02 f303 	mul.w	r3, r2, r3
 801c3c2:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801c3c6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c3ca:	f641 027e 	movw	r2, #6270	@ 0x187e
 801c3ce:	fb02 f303 	mul.w	r3, r2, r3
 801c3d2:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801c3d6:	4413      	add	r3, r2
 801c3d8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801c3dc:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c3e0:	4abe      	ldr	r2, [pc, #760]	@ (801c6dc <jpeg_idct_8x16+0xa04>)
 801c3e2:	fb02 f303 	mul.w	r3, r2, r3
 801c3e6:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801c3ea:	4413      	add	r3, r2
 801c3ec:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    
    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801c3f0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	3310      	adds	r3, #16
 801c3f8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z3 = (INT32) wsptr[4];
 801c3fc:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c400:	3310      	adds	r3, #16
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    
    tmp0 = (z2 + z3) << CONST_BITS;
 801c408:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c40c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c410:	4413      	add	r3, r2
 801c412:	035b      	lsls	r3, r3, #13
 801c414:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp1 = (z2 - z3) << CONST_BITS;
 801c418:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c41c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c420:	1ad3      	subs	r3, r2, r3
 801c422:	035b      	lsls	r3, r3, #13
 801c424:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    
    tmp10 = tmp0 + tmp2;
 801c428:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801c42c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c430:	4413      	add	r3, r2
 801c432:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    tmp13 = tmp0 - tmp2;
 801c436:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801c43a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c43e:	1ad3      	subs	r3, r2, r3
 801c440:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    tmp11 = tmp1 + tmp3;
 801c444:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c448:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c44c:	4413      	add	r3, r2
 801c44e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    tmp12 = tmp1 - tmp3;
 801c452:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c456:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c45a:	1ad3      	subs	r3, r2, r3
 801c45c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = (INT32) wsptr[7];
 801c460:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c464:	331c      	adds	r3, #28
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp1 = (INT32) wsptr[5];
 801c46c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c470:	3314      	adds	r3, #20
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp2 = (INT32) wsptr[3];
 801c478:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c47c:	330c      	adds	r3, #12
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp3 = (INT32) wsptr[1];
 801c484:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c488:	3304      	adds	r3, #4
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    
    z2 = tmp0 + tmp2;
 801c490:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801c494:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c498:	4413      	add	r3, r2
 801c49a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z3 = tmp1 + tmp3;
 801c49e:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c4a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c4a6:	4413      	add	r3, r2
 801c4a8:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801c4ac:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c4b0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c4b4:	4413      	add	r3, r2
 801c4b6:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 801c4ba:	fb02 f303 	mul.w	r3, r2, r3
 801c4be:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801c4c2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c4c6:	4a86      	ldr	r2, [pc, #536]	@ (801c6e0 <jpeg_idct_8x16+0xa08>)
 801c4c8:	fb02 f303 	mul.w	r3, r2, r3
 801c4cc:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801c4d0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c4d4:	4a83      	ldr	r2, [pc, #524]	@ (801c6e4 <jpeg_idct_8x16+0xa0c>)
 801c4d6:	fb02 f303 	mul.w	r3, r2, r3
 801c4da:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
    z2 += z1;
 801c4de:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801c4e2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c4e6:	4413      	add	r3, r2
 801c4e8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    z3 += z1;
 801c4ec:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 801c4f0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801c4f4:	4413      	add	r3, r2
 801c4f6:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801c4fa:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801c4fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c502:	4413      	add	r3, r2
 801c504:	4a78      	ldr	r2, [pc, #480]	@ (801c6e8 <jpeg_idct_8x16+0xa10>)
 801c506:	fb02 f303 	mul.w	r3, r2, r3
 801c50a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801c50e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801c512:	f640 128e 	movw	r2, #2446	@ 0x98e
 801c516:	fb02 f303 	mul.w	r3, r2, r3
 801c51a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801c51e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c522:	f243 020b 	movw	r2, #12299	@ 0x300b
 801c526:	fb02 f303 	mul.w	r3, r2, r3
 801c52a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    tmp0 += z1 + z2;
 801c52e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801c532:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c536:	4413      	add	r3, r2
 801c538:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801c53c:	4413      	add	r3, r2
 801c53e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
    tmp3 += z1 + z3;
 801c542:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801c546:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c54a:	4413      	add	r3, r2
 801c54c:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 801c550:	4413      	add	r3, r2
 801c552:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801c556:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c55a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c55e:	4413      	add	r3, r2
 801c560:	4a62      	ldr	r2, [pc, #392]	@ (801c6ec <jpeg_idct_8x16+0xa14>)
 801c562:	fb02 f303 	mul.w	r3, r2, r3
 801c566:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801c56a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801c56e:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 801c572:	fb02 f303 	mul.w	r3, r2, r3
 801c576:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801c57a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c57e:	f246 2254 	movw	r2, #25172	@ 0x6254
 801c582:	fb02 f303 	mul.w	r3, r2, r3
 801c586:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    tmp1 += z1 + z3;
 801c58a:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801c58e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801c592:	4413      	add	r3, r2
 801c594:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 801c598:	4413      	add	r3, r2
 801c59a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
    tmp2 += z1 + z2;
 801c59e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 801c5a2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801c5a6:	4413      	add	r3, r2
 801c5a8:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801c5ac:	4413      	add	r3, r2
 801c5ae:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801c5b2:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801c5b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c5ba:	4413      	add	r3, r2
 801c5bc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c5be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801c5c2:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c5c6:	4413      	add	r3, r2
 801c5c8:	781a      	ldrb	r2, [r3, #0]
 801c5ca:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c5ce:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801c5d0:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801c5d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801c5d8:	1ad3      	subs	r3, r2, r3
 801c5da:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c5dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801c5e0:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c5e4:	441a      	add	r2, r3
 801c5e6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c5ea:	3307      	adds	r3, #7
 801c5ec:	7812      	ldrb	r2, [r2, #0]
 801c5ee:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801c5f0:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801c5f4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c5f8:	4413      	add	r3, r2
 801c5fa:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c5fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801c600:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c604:	441a      	add	r2, r3
 801c606:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c60a:	3301      	adds	r3, #1
 801c60c:	7812      	ldrb	r2, [r2, #0]
 801c60e:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801c610:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801c614:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801c618:	1ad3      	subs	r3, r2, r3
 801c61a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c61c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801c620:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c624:	441a      	add	r2, r3
 801c626:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c62a:	3306      	adds	r3, #6
 801c62c:	7812      	ldrb	r2, [r2, #0]
 801c62e:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801c630:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801c634:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801c638:	4413      	add	r3, r2
 801c63a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c63c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801c640:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c644:	441a      	add	r2, r3
 801c646:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c64a:	3302      	adds	r3, #2
 801c64c:	7812      	ldrb	r2, [r2, #0]
 801c64e:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801c650:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801c654:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 801c658:	1ad3      	subs	r3, r2, r3
 801c65a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c65c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801c660:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c664:	441a      	add	r2, r3
 801c666:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c66a:	3305      	adds	r3, #5
 801c66c:	7812      	ldrb	r2, [r2, #0]
 801c66e:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801c670:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801c674:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801c678:	4413      	add	r3, r2
 801c67a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c67c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801c680:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c684:	441a      	add	r2, r3
 801c686:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c68a:	3303      	adds	r3, #3
 801c68c:	7812      	ldrb	r2, [r2, #0]
 801c68e:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801c690:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 801c694:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 801c698:	1ad3      	subs	r3, r2, r3
 801c69a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801c69c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801c6a0:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 801c6a4:	441a      	add	r2, r3
 801c6a6:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801c6aa:	3304      	adds	r3, #4
 801c6ac:	7812      	ldrb	r2, [r2, #0]
 801c6ae:	701a      	strb	r2, [r3, #0]
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 801c6b0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 801c6b4:	3320      	adds	r3, #32
 801c6b6:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 801c6ba:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801c6be:	3301      	adds	r3, #1
 801c6c0:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801c6c4:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801c6c8:	2b0f      	cmp	r3, #15
 801c6ca:	f77f ae56 	ble.w	801c37a <jpeg_idct_8x16+0x6a2>
  }
}
 801c6ce:	bf00      	nop
 801c6d0:	bf00      	nop
 801c6d2:	f507 771e 	add.w	r7, r7, #632	@ 0x278
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bc90      	pop	{r4, r7}
 801c6da:	4770      	bx	lr
 801c6dc:	ffffc4df 	.word	0xffffc4df
 801c6e0:	ffffc13b 	.word	0xffffc13b
 801c6e4:	fffff384 	.word	0xfffff384
 801c6e8:	ffffe333 	.word	0xffffe333
 801c6ec:	ffffadfd 	.word	0xffffadfd

0801c6f0 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801c6f0:	b490      	push	{r4, r7}
 801c6f2:	b0fe      	sub	sp, #504	@ 0x1f8
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	f507 74fc 	add.w	r4, r7, #504	@ 0x1f8
 801c6fa:	f5a4 74f6 	sub.w	r4, r4, #492	@ 0x1ec
 801c6fe:	6020      	str	r0, [r4, #0]
 801c700:	f507 70fc 	add.w	r0, r7, #504	@ 0x1f8
 801c704:	f5a0 70f8 	sub.w	r0, r0, #496	@ 0x1f0
 801c708:	6001      	str	r1, [r0, #0]
 801c70a:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 801c70e:	f5a1 71fa 	sub.w	r1, r1, #500	@ 0x1f4
 801c712:	600a      	str	r2, [r1, #0]
 801c714:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 801c718:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 801c71c:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801c71e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 801c722:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801c72c:	3380      	adds	r3, #128	@ 0x80
 801c72e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
 801c732:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 801c736:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801c740:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 801c744:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c74c:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  wsptr = workspace;
 801c750:	f107 0310 	add.w	r3, r7, #16
 801c754:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801c758:	2300      	movs	r3, #0
 801c75a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801c75e:	e267      	b.n	801cc30 <jpeg_idct_7x14+0x540>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801c760:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c764:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c768:	461a      	mov	r2, r3
 801c76a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	fb02 f303 	mul.w	r3, r2, r3
 801c774:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    z1 <<= CONST_BITS;
 801c778:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801c77c:	035b      	lsls	r3, r3, #13
 801c77e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801c782:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801c786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801c78a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801c78e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c792:	3340      	adds	r3, #64	@ 0x40
 801c794:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c798:	461a      	mov	r2, r3
 801c79a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c79e:	3380      	adds	r3, #128	@ 0x80
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	fb02 f303 	mul.w	r3, r2, r3
 801c7a6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801c7aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801c7ae:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 801c7b2:	fb02 f303 	mul.w	r3, r2, r3
 801c7b6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801c7ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801c7be:	f640 2212 	movw	r2, #2578	@ 0xa12
 801c7c2:	fb02 f303 	mul.w	r3, r2, r3
 801c7c6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801c7ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801c7ce:	f641 4237 	movw	r2, #7223	@ 0x1c37
 801c7d2:	fb02 f303 	mul.w	r3, r2, r3
 801c7d6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    tmp10 = z1 + z2;
 801c7da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c7de:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801c7e2:	4413      	add	r3, r2
 801c7e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp11 = z1 + z3;
 801c7e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c7ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801c7f0:	4413      	add	r3, r2
 801c7f2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    tmp12 = z1 - z4;
 801c7f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c7fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801c7fe:	1ad3      	subs	r3, r2, r3
 801c800:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801c804:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 801c808:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801c80c:	441a      	add	r2, r3
 801c80e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801c812:	1ad3      	subs	r3, r2, r3
 801c814:	005b      	lsls	r3, r3, #1
 801c816:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c81a:	1ad3      	subs	r3, r2, r3
 801c81c:	12db      	asrs	r3, r3, #11
 801c81e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801c822:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c826:	3320      	adds	r3, #32
 801c828:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c82c:	461a      	mov	r2, r3
 801c82e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c832:	3340      	adds	r3, #64	@ 0x40
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	fb02 f303 	mul.w	r3, r2, r3
 801c83a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801c83e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c842:	3360      	adds	r3, #96	@ 0x60
 801c844:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c848:	461a      	mov	r2, r3
 801c84a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c84e:	33c0      	adds	r3, #192	@ 0xc0
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	fb02 f303 	mul.w	r3, r2, r3
 801c856:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801c85a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c85e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801c862:	4413      	add	r3, r2
 801c864:	f242 3262 	movw	r2, #9058	@ 0x2362
 801c868:	fb02 f303 	mul.w	r3, r2, r3
 801c86c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801c870:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801c874:	f640 02bd 	movw	r2, #2237	@ 0x8bd
 801c878:	fb02 f303 	mul.w	r3, r2, r3
 801c87c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801c880:	4413      	add	r3, r2
 801c882:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801c886:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801c88a:	4af0      	ldr	r2, [pc, #960]	@ (801cc4c <jpeg_idct_7x14+0x55c>)
 801c88c:	fb02 f303 	mul.w	r3, r2, r3
 801c890:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801c894:	4413      	add	r3, r2
 801c896:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801c89a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801c89e:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 801c8a2:	fb03 f202 	mul.w	r2, r3, r2
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801c8a6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801c8aa:	49e9      	ldr	r1, [pc, #932]	@ (801cc50 <jpeg_idct_7x14+0x560>)
 801c8ac:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801c8b0:	4413      	add	r3, r2
 801c8b2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    tmp20 = tmp10 + tmp13;
 801c8b6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801c8ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801c8be:	4413      	add	r3, r2
 801c8c0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    tmp26 = tmp10 - tmp13;
 801c8c4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801c8c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801c8cc:	1ad3      	subs	r3, r2, r3
 801c8ce:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    tmp21 = tmp11 + tmp14;
 801c8d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801c8d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801c8da:	4413      	add	r3, r2
 801c8dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp25 = tmp11 - tmp14;
 801c8e0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801c8e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801c8e8:	1ad3      	subs	r3, r2, r3
 801c8ea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    tmp22 = tmp12 + tmp15;
 801c8ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801c8f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801c8f6:	4413      	add	r3, r2
 801c8f8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    tmp24 = tmp12 - tmp15;
 801c8fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801c900:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801c904:	1ad3      	subs	r3, r2, r3
 801c906:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801c90a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c90e:	3310      	adds	r3, #16
 801c910:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c914:	461a      	mov	r2, r3
 801c916:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c91a:	3320      	adds	r3, #32
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	fb02 f303 	mul.w	r3, r2, r3
 801c922:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801c926:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c92a:	3330      	adds	r3, #48	@ 0x30
 801c92c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c930:	461a      	mov	r2, r3
 801c932:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c936:	3360      	adds	r3, #96	@ 0x60
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	fb02 f303 	mul.w	r3, r2, r3
 801c93e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801c942:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c946:	3350      	adds	r3, #80	@ 0x50
 801c948:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c94c:	461a      	mov	r2, r3
 801c94e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c952:	33a0      	adds	r3, #160	@ 0xa0
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	fb02 f303 	mul.w	r3, r2, r3
 801c95a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801c95e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801c962:	3370      	adds	r3, #112	@ 0x70
 801c964:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c968:	461a      	mov	r2, r3
 801c96a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801c96e:	33e0      	adds	r3, #224	@ 0xe0
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	fb02 f303 	mul.w	r3, r2, r3
 801c976:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp13 = z4 << CONST_BITS;
 801c97a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801c97e:	035b      	lsls	r3, r3, #13
 801c980:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

    tmp14 = z1 + z3;
 801c984:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c988:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801c98c:	4413      	add	r3, r2
 801c98e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801c992:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801c996:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801c99a:	4413      	add	r3, r2
 801c99c:	f642 22b7 	movw	r2, #10935	@ 0x2ab7
 801c9a0:	fb02 f303 	mul.w	r3, r2, r3
 801c9a4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801c9a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801c9ac:	f242 6252 	movw	r2, #9810	@ 0x2652
 801c9b0:	fb02 f303 	mul.w	r3, r2, r3
 801c9b4:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801c9b8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801c9bc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801c9c0:	441a      	add	r2, r3
 801c9c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801c9c6:	441a      	add	r2, r3
 801c9c8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801c9cc:	49a1      	ldr	r1, [pc, #644]	@ (801cc54 <jpeg_idct_7x14+0x564>)
 801c9ce:	fb01 f303 	mul.w	r3, r1, r3
 801c9d2:	4413      	add	r3, r2
 801c9d4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801c9d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801c9dc:	f641 0214 	movw	r2, #6164	@ 0x1814
 801c9e0:	fb02 f303 	mul.w	r3, r2, r3
 801c9e4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801c9e8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801c9ec:	4a9a      	ldr	r2, [pc, #616]	@ (801cc58 <jpeg_idct_7x14+0x568>)
 801c9ee:	fb02 f303 	mul.w	r3, r2, r3
 801c9f2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 801c9f6:	4413      	add	r3, r2
 801c9f8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    z1    -= z2;
 801c9fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801ca00:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801ca04:	1ad3      	subs	r3, r2, r3
 801ca06:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801ca0a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801ca0e:	f640 62f2 	movw	r2, #3826	@ 0xef2
 801ca12:	fb03 f202 	mul.w	r2, r3, r2
 801ca16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801ca1a:	1ad3      	subs	r3, r2, r3
 801ca1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    tmp16 += tmp15;
 801ca20:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801ca24:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801ca28:	4413      	add	r3, r2
 801ca2a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
    z1    += z4;
 801ca2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801ca32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801ca36:	4413      	add	r3, r2
 801ca38:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801ca3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 801ca40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801ca44:	4413      	add	r3, r2
 801ca46:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
 801ca4a:	fb03 f202 	mul.w	r2, r3, r2
 801ca4e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801ca52:	1ad3      	subs	r3, r2, r3
 801ca54:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801ca58:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801ca5c:	4a7f      	ldr	r2, [pc, #508]	@ (801cc5c <jpeg_idct_7x14+0x56c>)
 801ca5e:	fb03 f202 	mul.w	r2, r3, r2
 801ca62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801ca66:	4413      	add	r3, r2
 801ca68:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801ca6c:	4413      	add	r3, r2
 801ca6e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801ca72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801ca76:	4a7a      	ldr	r2, [pc, #488]	@ (801cc60 <jpeg_idct_7x14+0x570>)
 801ca78:	fb03 f202 	mul.w	r2, r3, r2
 801ca7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801ca80:	4413      	add	r3, r2
 801ca82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801ca86:	4413      	add	r3, r2
 801ca88:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801ca8c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801ca90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801ca94:	1ad3      	subs	r3, r2, r3
 801ca96:	f642 42f8 	movw	r2, #11512	@ 0x2cf8
 801ca9a:	fb02 f303 	mul.w	r3, r2, r3
 801ca9e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801caa2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801caa6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801caaa:	441a      	add	r2, r3
 801caac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801cab0:	496c      	ldr	r1, [pc, #432]	@ (801cc64 <jpeg_idct_7x14+0x574>)
 801cab2:	fb01 f303 	mul.w	r3, r1, r3
 801cab6:	4413      	add	r3, r2
 801cab8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 801cabc:	4413      	add	r3, r2
 801cabe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801cac2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801cac6:	f241 5299 	movw	r2, #5529	@ 0x1599
 801caca:	fb03 f202 	mul.w	r2, r3, r2
 801cace:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801cad2:	4413      	add	r3, r2
 801cad4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801cad8:	4413      	add	r3, r2
 801cada:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    tmp13 = (z1 - z3) << PASS1_BITS;
 801cade:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801cae2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801cae6:	1ad3      	subs	r3, r2, r3
 801cae8:	009b      	lsls	r3, r3, #2
 801caea:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801caee:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801caf2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801caf6:	4413      	add	r3, r2
 801caf8:	12da      	asrs	r2, r3, #11
 801cafa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cafe:	601a      	str	r2, [r3, #0]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801cb00:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801cb04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801cb08:	1ad2      	subs	r2, r2, r3
 801cb0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb0e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 801cb12:	12d2      	asrs	r2, r2, #11
 801cb14:	601a      	str	r2, [r3, #0]
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801cb16:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 801cb1a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801cb1e:	441a      	add	r2, r3
 801cb20:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb24:	331c      	adds	r3, #28
 801cb26:	12d2      	asrs	r2, r2, #11
 801cb28:	601a      	str	r2, [r3, #0]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801cb2a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 801cb2e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801cb32:	1ad2      	subs	r2, r2, r3
 801cb34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801cb3c:	12d2      	asrs	r2, r2, #11
 801cb3e:	601a      	str	r2, [r3, #0]
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801cb40:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801cb44:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801cb48:	441a      	add	r2, r3
 801cb4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb4e:	3338      	adds	r3, #56	@ 0x38
 801cb50:	12d2      	asrs	r2, r2, #11
 801cb52:	601a      	str	r2, [r3, #0]
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801cb54:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801cb58:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801cb5c:	1ad2      	subs	r2, r2, r3
 801cb5e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb62:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 801cb66:	12d2      	asrs	r2, r2, #11
 801cb68:	601a      	str	r2, [r3, #0]
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 801cb6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb6e:	3354      	adds	r3, #84	@ 0x54
 801cb70:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 801cb74:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 801cb78:	440a      	add	r2, r1
 801cb7a:	601a      	str	r2, [r3, #0]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801cb7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb80:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 801cb84:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 801cb88:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 801cb8c:	1a8a      	subs	r2, r1, r2
 801cb8e:	601a      	str	r2, [r3, #0]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801cb90:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 801cb94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801cb98:	441a      	add	r2, r3
 801cb9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cb9e:	3370      	adds	r3, #112	@ 0x70
 801cba0:	12d2      	asrs	r2, r2, #11
 801cba2:	601a      	str	r2, [r3, #0]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801cba4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 801cba8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 801cbac:	1ad2      	subs	r2, r2, r3
 801cbae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cbb2:	33fc      	adds	r3, #252	@ 0xfc
 801cbb4:	12d2      	asrs	r2, r2, #11
 801cbb6:	601a      	str	r2, [r3, #0]
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801cbb8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801cbbc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801cbc0:	441a      	add	r2, r3
 801cbc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cbc6:	338c      	adds	r3, #140	@ 0x8c
 801cbc8:	12d2      	asrs	r2, r2, #11
 801cbca:	601a      	str	r2, [r3, #0]
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801cbcc:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801cbd0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801cbd4:	1ad2      	subs	r2, r2, r3
 801cbd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cbda:	33e0      	adds	r3, #224	@ 0xe0
 801cbdc:	12d2      	asrs	r2, r2, #11
 801cbde:	601a      	str	r2, [r3, #0]
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801cbe0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801cbe4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801cbe8:	441a      	add	r2, r3
 801cbea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cbee:	33a8      	adds	r3, #168	@ 0xa8
 801cbf0:	12d2      	asrs	r2, r2, #11
 801cbf2:	601a      	str	r2, [r3, #0]
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801cbf4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 801cbf8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 801cbfc:	1ad2      	subs	r2, r2, r3
 801cbfe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cc02:	33c4      	adds	r3, #196	@ 0xc4
 801cc04:	12d2      	asrs	r2, r2, #11
 801cc06:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801cc08:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 801cc0c:	3301      	adds	r3, #1
 801cc0e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801cc12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 801cc16:	3302      	adds	r3, #2
 801cc18:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 801cc1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 801cc20:	3304      	adds	r3, #4
 801cc22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 801cc26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cc2a:	3304      	adds	r3, #4
 801cc2c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 801cc30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 801cc34:	2b06      	cmp	r3, #6
 801cc36:	f77f ad93 	ble.w	801c760 <jpeg_idct_7x14+0x70>
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 801cc3a:	f107 0310 	add.w	r3, r7, #16
 801cc3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  for (ctr = 0; ctr < 14; ctr++) {
 801cc42:	2300      	movs	r3, #0
 801cc44:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801cc48:	e17c      	b.n	801cf44 <jpeg_idct_7x14+0x854>
 801cc4a:	bf00      	nop
 801cc4c:	ffffc8fc 	.word	0xffffc8fc
 801cc50:	ffffd3e1 	.word	0xffffd3e1
 801cc54:	ffffdbf0 	.word	0xffffdbf0
 801cc58:	ffffde0b 	.word	0xffffde0b
 801cc5c:	fffff26e 	.word	0xfffff26e
 801cc60:	ffffb409 	.word	0xffffb409
 801cc64:	ffffc9e6 	.word	0xffffc9e6
    outptr = output_buf[ctr] + output_col;
 801cc68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 801cc6c:	009b      	lsls	r3, r3, #2
 801cc6e:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 801cc72:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 801cc76:	6812      	ldr	r2, [r2, #0]
 801cc78:	4413      	add	r3, r2
 801cc7a:	681a      	ldr	r2, [r3, #0]
 801cc7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801cc80:	4413      	add	r3, r2
 801cc82:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801cc86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	3310      	adds	r3, #16
 801cc8e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    tmp23 <<= CONST_BITS;
 801cc92:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 801cc96:	035b      	lsls	r3, r3, #13
 801cc98:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc

    z1 = (INT32) wsptr[2];
 801cc9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cca0:	3308      	adds	r3, #8
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    z2 = (INT32) wsptr[4];
 801cca8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801ccac:	3310      	adds	r3, #16
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    z3 = (INT32) wsptr[6];
 801ccb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801ccb8:	3318      	adds	r3, #24
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801ccc0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 801ccc4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801ccc8:	1ad3      	subs	r3, r2, r3
 801ccca:	f641 4237 	movw	r2, #7223	@ 0x1c37
 801ccce:	fb02 f303 	mul.w	r3, r2, r3
 801ccd2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801ccd6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801ccda:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801ccde:	1ad3      	subs	r3, r2, r3
 801cce0:	f640 2212 	movw	r2, #2578	@ 0xa12
 801cce4:	fb02 f303 	mul.w	r3, r2, r3
 801cce8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801ccec:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801ccf0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801ccf4:	441a      	add	r2, r3
 801ccf6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 801ccfa:	441a      	add	r2, r3
 801ccfc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801cd00:	4996      	ldr	r1, [pc, #600]	@ (801cf5c <jpeg_idct_7x14+0x86c>)
 801cd02:	fb01 f303 	mul.w	r3, r1, r3
 801cd06:	4413      	add	r3, r2
 801cd08:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    tmp10 = z1 + z3;
 801cd0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801cd10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801cd14:	4413      	add	r3, r2
 801cd16:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    z2 -= tmp10;
 801cd1a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 801cd1e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801cd22:	1ad3      	subs	r3, r2, r3
 801cd24:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801cd28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801cd2c:	f642 02c6 	movw	r2, #10438	@ 0x28c6
 801cd30:	fb02 f303 	mul.w	r3, r2, r3
 801cd34:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 801cd38:	4413      	add	r3, r2
 801cd3a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801cd3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801cd42:	f46f 721f 	mvn.w	r2, #636	@ 0x27c
 801cd46:	fb03 f202 	mul.w	r2, r3, r2
 801cd4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801cd4e:	4413      	add	r3, r2
 801cd50:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801cd54:	4413      	add	r3, r2
 801cd56:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801cd5a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 801cd5e:	4a80      	ldr	r2, [pc, #512]	@ (801cf60 <jpeg_idct_7x14+0x870>)
 801cd60:	fb03 f202 	mul.w	r2, r3, r2
 801cd64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801cd68:	4413      	add	r3, r2
 801cd6a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801cd6e:	4413      	add	r3, r2
 801cd70:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801cd74:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801cd78:	f642 5241 	movw	r2, #11585	@ 0x2d41
 801cd7c:	fb02 f303 	mul.w	r3, r2, r3
 801cd80:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 801cd84:	4413      	add	r3, r2
 801cd86:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801cd8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cd8e:	3304      	adds	r3, #4
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    z2 = (INT32) wsptr[3];
 801cd96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cd9a:	330c      	adds	r3, #12
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    z3 = (INT32) wsptr[5];
 801cda2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cda6:	3314      	adds	r3, #20
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801cdae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801cdb2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801cdb6:	4413      	add	r3, r2
 801cdb8:	f641 52ef 	movw	r2, #7663	@ 0x1def
 801cdbc:	fb02 f303 	mul.w	r3, r2, r3
 801cdc0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801cdc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801cdc8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801cdcc:	1ad3      	subs	r3, r2, r3
 801cdce:	f240 5273 	movw	r2, #1395	@ 0x573
 801cdd2:	fb02 f303 	mul.w	r3, r2, r3
 801cdd6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    tmp10 = tmp11 - tmp12;
 801cdda:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801cdde:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801cde2:	1ad3      	subs	r3, r2, r3
 801cde4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp11 += tmp12;
 801cde8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801cdec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801cdf0:	4413      	add	r3, r2
 801cdf2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801cdf6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 801cdfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801cdfe:	4413      	add	r3, r2
 801ce00:	4a58      	ldr	r2, [pc, #352]	@ (801cf64 <jpeg_idct_7x14+0x874>)
 801ce02:	fb02 f303 	mul.w	r3, r2, r3
 801ce06:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    tmp11 += tmp12;
 801ce0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 801ce0e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801ce12:	4413      	add	r3, r2
 801ce14:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801ce18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801ce1c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801ce20:	4413      	add	r3, r2
 801ce22:	f241 32a3 	movw	r2, #5027	@ 0x13a3
 801ce26:	fb02 f303 	mul.w	r3, r2, r3
 801ce2a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
    tmp10 += z2;
 801ce2e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801ce32:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801ce36:	4413      	add	r3, r2
 801ce38:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801ce3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801ce40:	f643 32de 	movw	r2, #15326	@ 0x3bde
 801ce44:	fb03 f202 	mul.w	r2, r3, r2
 801ce48:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801ce4c:	4413      	add	r3, r2
 801ce4e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801ce52:	4413      	add	r3, r2
 801ce54:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ce58:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801ce5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801ce60:	4413      	add	r3, r2
 801ce62:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ce64:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ce68:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801ce6c:	4413      	add	r3, r2
 801ce6e:	781a      	ldrb	r2, [r3, #0]
 801ce70:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801ce74:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801ce76:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801ce7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801ce7e:	1ad3      	subs	r3, r2, r3
 801ce80:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ce82:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801ce86:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801ce8a:	441a      	add	r2, r3
 801ce8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801ce90:	3306      	adds	r3, #6
 801ce92:	7812      	ldrb	r2, [r2, #0]
 801ce94:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801ce96:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 801ce9a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801ce9e:	4413      	add	r3, r2
 801cea0:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801cea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801cea6:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801ceaa:	441a      	add	r2, r3
 801ceac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801ceb0:	3301      	adds	r3, #1
 801ceb2:	7812      	ldrb	r2, [r2, #0]
 801ceb4:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801ceb6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 801ceba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801cebe:	1ad3      	subs	r3, r2, r3
 801cec0:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801cec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801cec6:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801ceca:	441a      	add	r2, r3
 801cecc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801ced0:	3305      	adds	r3, #5
 801ced2:	7812      	ldrb	r2, [r2, #0]
 801ced4:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801ced6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801ceda:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801cede:	4413      	add	r3, r2
 801cee0:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801cee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801cee6:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801ceea:	441a      	add	r2, r3
 801ceec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801cef0:	3302      	adds	r3, #2
 801cef2:	7812      	ldrb	r2, [r2, #0]
 801cef4:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801cef6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801cefa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801cefe:	1ad3      	subs	r3, r2, r3
 801cf00:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801cf02:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801cf06:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801cf0a:	441a      	add	r2, r3
 801cf0c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801cf10:	3304      	adds	r3, #4
 801cf12:	7812      	ldrb	r2, [r2, #0]
 801cf14:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801cf16:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 801cf1a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801cf1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801cf20:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801cf24:	441a      	add	r2, r3
 801cf26:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801cf2a:	3303      	adds	r3, #3
 801cf2c:	7812      	ldrb	r2, [r2, #0]
 801cf2e:	701a      	strb	r2, [r3, #0]

    wsptr += 7;		/* advance pointer to next row */
 801cf30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 801cf34:	331c      	adds	r3, #28
 801cf36:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  for (ctr = 0; ctr < 14; ctr++) {
 801cf3a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 801cf3e:	3301      	adds	r3, #1
 801cf40:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801cf44:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 801cf48:	2b0d      	cmp	r3, #13
 801cf4a:	f77f ae8d 	ble.w	801cc68 <jpeg_idct_7x14+0x578>
  }
}
 801cf4e:	bf00      	nop
 801cf50:	bf00      	nop
 801cf52:	f507 77fc 	add.w	r7, r7, #504	@ 0x1f8
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bc90      	pop	{r4, r7}
 801cf5a:	4770      	bx	lr
 801cf5c:	ffffc515 	.word	0xffffc515
 801cf60:	ffffb0f1 	.word	0xffffb0f1
 801cf64:	ffffd3e1 	.word	0xffffd3e1

0801cf68 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801cf68:	b490      	push	{r4, r7}
 801cf6a:	b0e2      	sub	sp, #392	@ 0x188
 801cf6c:	af00      	add	r7, sp, #0
 801cf6e:	f507 74c4 	add.w	r4, r7, #392	@ 0x188
 801cf72:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 801cf76:	6020      	str	r0, [r4, #0]
 801cf78:	f507 70c4 	add.w	r0, r7, #392	@ 0x188
 801cf7c:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 801cf80:	6001      	str	r1, [r0, #0]
 801cf82:	f507 71c4 	add.w	r1, r7, #392	@ 0x188
 801cf86:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 801cf8a:	600a      	str	r2, [r1, #0]
 801cf8c:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 801cf90:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 801cf94:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801cf96:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 801cf9a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801cfa4:	3380      	adds	r3, #128	@ 0x80
 801cfa6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
 801cfaa:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 801cfae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801cfb8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 801cfbc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801cfc4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  wsptr = workspace;
 801cfc8:	f107 0310 	add.w	r3, r7, #16
 801cfcc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801cfd0:	2300      	movs	r3, #0
 801cfd2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801cfd6:	e215      	b.n	801d404 <jpeg_idct_6x12+0x49c>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801cfd8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801cfdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cfe0:	461a      	mov	r2, r3
 801cfe2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	fb02 f303 	mul.w	r3, r2, r3
 801cfec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    z3 <<= CONST_BITS;
 801cff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801cff4:	035b      	lsls	r3, r3, #13
 801cff6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801cffa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801cffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d002:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801d006:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d00a:	3340      	adds	r3, #64	@ 0x40
 801d00c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d010:	461a      	mov	r2, r3
 801d012:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d016:	3380      	adds	r3, #128	@ 0x80
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	fb02 f303 	mul.w	r3, r2, r3
 801d01e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801d022:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d026:	f242 7231 	movw	r2, #10033	@ 0x2731
 801d02a:	fb02 f303 	mul.w	r3, r2, r3
 801d02e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

    tmp10 = z3 + z4;
 801d032:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d036:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d03a:	4413      	add	r3, r2
 801d03c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    tmp11 = z3 - z4;
 801d040:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d044:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d048:	1ad3      	subs	r3, r2, r3
 801d04a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801d04e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d052:	3320      	adds	r3, #32
 801d054:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d058:	461a      	mov	r2, r3
 801d05a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d05e:	3340      	adds	r3, #64	@ 0x40
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	fb02 f303 	mul.w	r3, r2, r3
 801d066:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801d06a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801d06e:	f642 32b6 	movw	r2, #11190	@ 0x2bb6
 801d072:	fb02 f303 	mul.w	r3, r2, r3
 801d076:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    z1 <<= CONST_BITS;
 801d07a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801d07e:	035b      	lsls	r3, r3, #13
 801d080:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801d084:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d088:	3360      	adds	r3, #96	@ 0x60
 801d08a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d08e:	461a      	mov	r2, r3
 801d090:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d094:	33c0      	adds	r3, #192	@ 0xc0
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	fb02 f303 	mul.w	r3, r2, r3
 801d09c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    z2 <<= CONST_BITS;
 801d0a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d0a4:	035b      	lsls	r3, r3, #13
 801d0a6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    tmp12 = z1 - z2;
 801d0aa:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d0ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d0b2:	1ad3      	subs	r3, r2, r3
 801d0b4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

    tmp21 = z3 + tmp12;
 801d0b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d0bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d0c0:	4413      	add	r3, r2
 801d0c2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp24 = z3 - tmp12;
 801d0c6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d0ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d0ce:	1ad3      	subs	r3, r2, r3
 801d0d0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    tmp12 = z4 + z2;
 801d0d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801d0d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d0dc:	4413      	add	r3, r2
 801d0de:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

    tmp20 = tmp10 + tmp12;
 801d0e2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 801d0e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d0ea:	4413      	add	r3, r2
 801d0ec:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp25 = tmp10 - tmp12;
 801d0f0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 801d0f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d0f8:	1ad3      	subs	r3, r2, r3
 801d0fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    tmp12 = z4 - z1 - z2;
 801d0fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801d102:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801d106:	1ad2      	subs	r2, r2, r3
 801d108:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d10c:	1ad3      	subs	r3, r2, r3
 801d10e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168

    tmp22 = tmp11 + tmp12;
 801d112:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801d116:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d11a:	4413      	add	r3, r2
 801d11c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    tmp23 = tmp11 - tmp12;
 801d120:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801d124:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d128:	1ad3      	subs	r3, r2, r3
 801d12a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801d12e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d132:	3310      	adds	r3, #16
 801d134:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d138:	461a      	mov	r2, r3
 801d13a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d13e:	3320      	adds	r3, #32
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	fb02 f303 	mul.w	r3, r2, r3
 801d146:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801d14a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d14e:	3330      	adds	r3, #48	@ 0x30
 801d150:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d154:	461a      	mov	r2, r3
 801d156:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d15a:	3360      	adds	r3, #96	@ 0x60
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	fb02 f303 	mul.w	r3, r2, r3
 801d162:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801d166:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d16a:	3350      	adds	r3, #80	@ 0x50
 801d16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d170:	461a      	mov	r2, r3
 801d172:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d176:	33a0      	adds	r3, #160	@ 0xa0
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	fb02 f303 	mul.w	r3, r2, r3
 801d17e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801d182:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d186:	3370      	adds	r3, #112	@ 0x70
 801d188:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d18c:	461a      	mov	r2, r3
 801d18e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d192:	33e0      	adds	r3, #224	@ 0xe0
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	fb02 f303 	mul.w	r3, r2, r3
 801d19a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801d19e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d1a2:	f642 12cf 	movw	r2, #10703	@ 0x29cf
 801d1a6:	fb02 f303 	mul.w	r3, r2, r3
 801d1aa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801d1ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d1b2:	4a9b      	ldr	r2, [pc, #620]	@ (801d420 <jpeg_idct_6x12+0x4b8>)
 801d1b4:	fb02 f303 	mul.w	r3, r2, r3
 801d1b8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    tmp10 = z1 + z3;
 801d1bc:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d1c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801d1c4:	4413      	add	r3, r2
 801d1c6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801d1ca:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 801d1ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d1d2:	4413      	add	r3, r2
 801d1d4:	f641 328d 	movw	r2, #7053	@ 0x1b8d
 801d1d8:	fb02 f303 	mul.w	r3, r2, r3
 801d1dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801d1e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d1e4:	f640 025b 	movw	r2, #2139	@ 0x85b
 801d1e8:	fb02 f303 	mul.w	r3, r2, r3
 801d1ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801d1f0:	4413      	add	r3, r2
 801d1f2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801d1f6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801d1fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801d1fe:	18d1      	adds	r1, r2, r3
 801d200:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d204:	4613      	mov	r3, r2
 801d206:	00db      	lsls	r3, r3, #3
 801d208:	4413      	add	r3, r2
 801d20a:	021a      	lsls	r2, r3, #8
 801d20c:	1ad3      	subs	r3, r2, r3
 801d20e:	440b      	add	r3, r1
 801d210:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801d214:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d218:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d21c:	4413      	add	r3, r2
 801d21e:	4a81      	ldr	r2, [pc, #516]	@ (801d424 <jpeg_idct_6x12+0x4bc>)
 801d220:	fb02 f303 	mul.w	r3, r2, r3
 801d224:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801d228:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801d22c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801d230:	441a      	add	r2, r3
 801d232:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801d236:	497c      	ldr	r1, [pc, #496]	@ (801d428 <jpeg_idct_6x12+0x4c0>)
 801d238:	fb01 f303 	mul.w	r3, r1, r3
 801d23c:	4413      	add	r3, r2
 801d23e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801d242:	4413      	add	r3, r2
 801d244:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801d248:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801d24c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801d250:	1ad2      	subs	r2, r2, r3
 801d252:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d256:	f243 21c6 	movw	r1, #12998	@ 0x32c6
 801d25a:	fb01 f303 	mul.w	r3, r1, r3
 801d25e:	4413      	add	r3, r2
 801d260:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801d264:	4413      	add	r3, r2
 801d266:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801d26a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801d26e:	4a6f      	ldr	r2, [pc, #444]	@ (801d42c <jpeg_idct_6x12+0x4c4>)
 801d270:	fb03 f202 	mul.w	r2, r3, r2
 801d274:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801d278:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 801d27a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d27e:	496c      	ldr	r1, [pc, #432]	@ (801d430 <jpeg_idct_6x12+0x4c8>)
 801d280:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801d284:	4413      	add	r3, r2
 801d286:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801d28a:	4413      	add	r3, r2
 801d28c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

    z1 -= z4;
 801d290:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d294:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801d298:	1ad3      	subs	r3, r2, r3
 801d29a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    z2 -= z3;
 801d29e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801d2a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801d2a6:	1ad3      	subs	r3, r2, r3
 801d2a8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801d2ac:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d2b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d2b4:	4413      	add	r3, r2
 801d2b6:	f241 1251 	movw	r2, #4433	@ 0x1151
 801d2ba:	fb02 f303 	mul.w	r3, r2, r3
 801d2be:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801d2c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801d2c6:	f641 027e 	movw	r2, #6270	@ 0x187e
 801d2ca:	fb02 f303 	mul.w	r3, r2, r3
 801d2ce:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d2d2:	4413      	add	r3, r2
 801d2d4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801d2d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d2dc:	4a55      	ldr	r2, [pc, #340]	@ (801d434 <jpeg_idct_6x12+0x4cc>)
 801d2de:	fb02 f303 	mul.w	r3, r2, r3
 801d2e2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d2e6:	4413      	add	r3, r2
 801d2e8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801d2ec:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801d2f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d2f4:	4413      	add	r3, r2
 801d2f6:	12da      	asrs	r2, r3, #11
 801d2f8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d2fc:	601a      	str	r2, [r3, #0]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801d2fe:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801d302:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d306:	1ad2      	subs	r2, r2, r3
 801d308:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d30c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801d310:	12d2      	asrs	r2, r2, #11
 801d312:	601a      	str	r2, [r3, #0]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801d314:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801d318:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801d31c:	441a      	add	r2, r3
 801d31e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d322:	3318      	adds	r3, #24
 801d324:	12d2      	asrs	r2, r2, #11
 801d326:	601a      	str	r2, [r3, #0]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801d328:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801d32c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801d330:	1ad2      	subs	r2, r2, r3
 801d332:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d336:	33f0      	adds	r3, #240	@ 0xf0
 801d338:	12d2      	asrs	r2, r2, #11
 801d33a:	601a      	str	r2, [r3, #0]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801d33c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801d340:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d344:	441a      	add	r2, r3
 801d346:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d34a:	3330      	adds	r3, #48	@ 0x30
 801d34c:	12d2      	asrs	r2, r2, #11
 801d34e:	601a      	str	r2, [r3, #0]
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801d350:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801d354:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d358:	1ad2      	subs	r2, r2, r3
 801d35a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d35e:	33d8      	adds	r3, #216	@ 0xd8
 801d360:	12d2      	asrs	r2, r2, #11
 801d362:	601a      	str	r2, [r3, #0]
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801d364:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801d368:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801d36c:	441a      	add	r2, r3
 801d36e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d372:	3348      	adds	r3, #72	@ 0x48
 801d374:	12d2      	asrs	r2, r2, #11
 801d376:	601a      	str	r2, [r3, #0]
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801d378:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801d37c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801d380:	1ad2      	subs	r2, r2, r3
 801d382:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d386:	33c0      	adds	r3, #192	@ 0xc0
 801d388:	12d2      	asrs	r2, r2, #11
 801d38a:	601a      	str	r2, [r3, #0]
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801d38c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 801d390:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801d394:	441a      	add	r2, r3
 801d396:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d39a:	3360      	adds	r3, #96	@ 0x60
 801d39c:	12d2      	asrs	r2, r2, #11
 801d39e:	601a      	str	r2, [r3, #0]
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801d3a0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 801d3a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801d3a8:	1ad2      	subs	r2, r2, r3
 801d3aa:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d3ae:	33a8      	adds	r3, #168	@ 0xa8
 801d3b0:	12d2      	asrs	r2, r2, #11
 801d3b2:	601a      	str	r2, [r3, #0]
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801d3b4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801d3b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801d3bc:	441a      	add	r2, r3
 801d3be:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d3c2:	3378      	adds	r3, #120	@ 0x78
 801d3c4:	12d2      	asrs	r2, r2, #11
 801d3c6:	601a      	str	r2, [r3, #0]
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801d3c8:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801d3cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801d3d0:	1ad2      	subs	r2, r2, r3
 801d3d2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d3d6:	3390      	adds	r3, #144	@ 0x90
 801d3d8:	12d2      	asrs	r2, r2, #11
 801d3da:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801d3dc:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801d3e0:	3301      	adds	r3, #1
 801d3e2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801d3e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 801d3ea:	3302      	adds	r3, #2
 801d3ec:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 801d3f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801d3f4:	3304      	adds	r3, #4
 801d3f6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 801d3fa:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d3fe:	3304      	adds	r3, #4
 801d400:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 801d404:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801d408:	2b05      	cmp	r3, #5
 801d40a:	f77f ade5 	ble.w	801cfd8 <jpeg_idct_6x12+0x70>
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 801d40e:	f107 0310 	add.w	r3, r7, #16
 801d412:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
  for (ctr = 0; ctr < 12; ctr++) {
 801d416:	2300      	movs	r3, #0
 801d418:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801d41c:	e108      	b.n	801d630 <jpeg_idct_6x12+0x6c8>
 801d41e:	bf00      	nop
 801d420:	ffffeeaf 	.word	0xffffeeaf
 801d424:	ffffde8b 	.word	0xffffde8b
 801d428:	ffffd0b0 	.word	0xffffd0b0
 801d42c:	ffffea5c 	.word	0xffffea5c
 801d430:	ffffc08c 	.word	0xffffc08c
 801d434:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 801d438:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801d43c:	009b      	lsls	r3, r3, #2
 801d43e:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 801d442:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 801d446:	6812      	ldr	r2, [r2, #0]
 801d448:	4413      	add	r3, r2
 801d44a:	681a      	ldr	r2, [r3, #0]
 801d44c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 801d450:	4413      	add	r3, r2
 801d452:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801d456:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	3310      	adds	r3, #16
 801d45e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    tmp10 <<= CONST_BITS;
 801d462:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d466:	035b      	lsls	r3, r3, #13
 801d468:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    tmp12 = (INT32) wsptr[4];
 801d46c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d470:	3310      	adds	r3, #16
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801d478:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d47c:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 801d480:	fb02 f303 	mul.w	r3, r2, r3
 801d484:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp11 = tmp10 + tmp20;
 801d488:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 801d48c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801d490:	4413      	add	r3, r2
 801d492:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp21 = tmp10 - tmp20 - tmp20;
 801d496:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 801d49a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801d49e:	1ad2      	subs	r2, r2, r3
 801d4a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801d4a4:	1ad3      	subs	r3, r2, r3
 801d4a6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    tmp20 = (INT32) wsptr[2];
 801d4aa:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d4ae:	3308      	adds	r3, #8
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801d4b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 801d4ba:	f242 7231 	movw	r2, #10033	@ 0x2731
 801d4be:	fb02 f303 	mul.w	r3, r2, r3
 801d4c2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    tmp20 = tmp11 + tmp10;
 801d4c6:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801d4ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d4ce:	4413      	add	r3, r2
 801d4d0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    tmp22 = tmp11 - tmp10;
 801d4d4:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801d4d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d4dc:	1ad3      	subs	r3, r2, r3
 801d4de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801d4e2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d4e6:	3304      	adds	r3, #4
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    z2 = (INT32) wsptr[3];
 801d4ee:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d4f2:	330c      	adds	r3, #12
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    z3 = (INT32) wsptr[5];
 801d4fa:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d4fe:	3314      	adds	r3, #20
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801d506:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d50a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801d50e:	4413      	add	r3, r2
 801d510:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 801d514:	fb02 f303 	mul.w	r3, r2, r3
 801d518:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801d51c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d520:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d524:	4413      	add	r3, r2
 801d526:	035b      	lsls	r3, r3, #13
 801d528:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801d52c:	4413      	add	r3, r2
 801d52e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801d532:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801d536:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d53a:	1ad3      	subs	r3, r2, r3
 801d53c:	035b      	lsls	r3, r3, #13
 801d53e:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 801d542:	4413      	add	r3, r2
 801d544:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 801d548:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 801d54c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801d550:	1ad2      	subs	r2, r2, r3
 801d552:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 801d556:	1ad3      	subs	r3, r2, r3
 801d558:	035b      	lsls	r3, r3, #13
 801d55a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801d55e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801d562:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d566:	4413      	add	r3, r2
 801d568:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801d56a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801d56e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801d572:	4413      	add	r3, r2
 801d574:	781a      	ldrb	r2, [r3, #0]
 801d576:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801d57a:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801d57c:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801d580:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801d584:	1ad3      	subs	r3, r2, r3
 801d586:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801d588:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801d58c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801d590:	441a      	add	r2, r3
 801d592:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801d596:	3305      	adds	r3, #5
 801d598:	7812      	ldrb	r2, [r2, #0]
 801d59a:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801d59c:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801d5a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801d5a4:	4413      	add	r3, r2
 801d5a6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801d5a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801d5ac:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801d5b0:	441a      	add	r2, r3
 801d5b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801d5b6:	3301      	adds	r3, #1
 801d5b8:	7812      	ldrb	r2, [r2, #0]
 801d5ba:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801d5bc:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801d5c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801d5c4:	1ad3      	subs	r3, r2, r3
 801d5c6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801d5c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801d5cc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801d5d0:	441a      	add	r2, r3
 801d5d2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801d5d6:	3304      	adds	r3, #4
 801d5d8:	7812      	ldrb	r2, [r2, #0]
 801d5da:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801d5dc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801d5e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d5e4:	4413      	add	r3, r2
 801d5e6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801d5e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801d5ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801d5f0:	441a      	add	r2, r3
 801d5f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801d5f6:	3302      	adds	r3, #2
 801d5f8:	7812      	ldrb	r2, [r2, #0]
 801d5fa:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801d5fc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801d600:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 801d604:	1ad3      	subs	r3, r2, r3
 801d606:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801d608:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801d60c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 801d610:	441a      	add	r2, r3
 801d612:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801d616:	3303      	adds	r3, #3
 801d618:	7812      	ldrb	r2, [r2, #0]
 801d61a:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 801d61c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801d620:	3318      	adds	r3, #24
 801d622:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
  for (ctr = 0; ctr < 12; ctr++) {
 801d626:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801d62a:	3301      	adds	r3, #1
 801d62c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801d630:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 801d634:	2b0b      	cmp	r3, #11
 801d636:	f77f aeff 	ble.w	801d438 <jpeg_idct_6x12+0x4d0>
  }
}
 801d63a:	bf00      	nop
 801d63c:	bf00      	nop
 801d63e:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 801d642:	46bd      	mov	sp, r7
 801d644:	bc90      	pop	{r4, r7}
 801d646:	4770      	bx	lr

0801d648 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801d648:	b490      	push	{r4, r7}
 801d64a:	b0cc      	sub	sp, #304	@ 0x130
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 801d652:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 801d656:	6020      	str	r0, [r4, #0]
 801d658:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 801d65c:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 801d660:	6001      	str	r1, [r0, #0]
 801d662:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 801d666:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 801d66a:	600a      	str	r2, [r1, #0]
 801d66c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801d670:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801d674:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801d676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801d67a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801d684:	3380      	adds	r3, #128	@ 0x80
 801d686:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
 801d68a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801d68e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801d698:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801d69c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d6a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  wsptr = workspace;
 801d6a8:	f107 0314 	add.w	r3, r7, #20
 801d6ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 801d6b6:	e1d3      	b.n	801da60 <jpeg_idct_5x10+0x418>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801d6b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d6bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d6c0:	461a      	mov	r2, r3
 801d6c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	fb02 f303 	mul.w	r3, r2, r3
 801d6cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    z3 <<= CONST_BITS;
 801d6d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801d6d4:	035b      	lsls	r3, r3, #13
 801d6d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801d6da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801d6de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d6e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801d6e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d6ea:	3340      	adds	r3, #64	@ 0x40
 801d6ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d6f0:	461a      	mov	r2, r3
 801d6f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d6f6:	3380      	adds	r3, #128	@ 0x80
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	fb02 f303 	mul.w	r3, r2, r3
 801d6fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801d702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801d706:	f242 429d 	movw	r2, #9373	@ 0x249d
 801d70a:	fb02 f303 	mul.w	r3, r2, r3
 801d70e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801d712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801d716:	f640 52fc 	movw	r2, #3580	@ 0xdfc
 801d71a:	fb02 f303 	mul.w	r3, r2, r3
 801d71e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    tmp10 = z3 + z1;
 801d722:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801d726:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801d72a:	4413      	add	r3, r2
 801d72c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp11 = z3 - z2;
 801d730:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801d734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d738:	1ad3      	subs	r3, r2, r3
 801d73a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801d73e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801d742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d746:	1ad3      	subs	r3, r2, r3
 801d748:	005b      	lsls	r3, r3, #1
 801d74a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801d74e:	1ad3      	subs	r3, r2, r3
 801d750:	12db      	asrs	r3, r3, #11
 801d752:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801d756:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d75a:	3320      	adds	r3, #32
 801d75c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d760:	461a      	mov	r2, r3
 801d762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d766:	3340      	adds	r3, #64	@ 0x40
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	fb02 f303 	mul.w	r3, r2, r3
 801d76e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801d772:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d776:	3360      	adds	r3, #96	@ 0x60
 801d778:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d77c:	461a      	mov	r2, r3
 801d77e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d782:	33c0      	adds	r3, #192	@ 0xc0
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	fb02 f303 	mul.w	r3, r2, r3
 801d78a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801d78e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801d792:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801d796:	4413      	add	r3, r2
 801d798:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 801d79c:	fb02 f303 	mul.w	r3, r2, r3
 801d7a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801d7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d7a8:	f241 0271 	movw	r2, #4209	@ 0x1071
 801d7ac:	fb02 f303 	mul.w	r3, r2, r3
 801d7b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801d7b4:	4413      	add	r3, r2
 801d7b6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801d7ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801d7be:	4aaf      	ldr	r2, [pc, #700]	@ (801da7c <jpeg_idct_5x10+0x434>)
 801d7c0:	fb02 f303 	mul.w	r3, r2, r3
 801d7c4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801d7c8:	4413      	add	r3, r2
 801d7ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    tmp20 = tmp10 + tmp12;
 801d7ce:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801d7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7d6:	4413      	add	r3, r2
 801d7d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    tmp24 = tmp10 - tmp12;
 801d7dc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801d7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7e4:	1ad3      	subs	r3, r2, r3
 801d7e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    tmp21 = tmp11 + tmp13;
 801d7ea:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801d7ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801d7f2:	4413      	add	r3, r2
 801d7f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    tmp23 = tmp11 - tmp13;
 801d7f8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801d7fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801d800:	1ad3      	subs	r3, r2, r3
 801d802:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801d806:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d80a:	3310      	adds	r3, #16
 801d80c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d810:	461a      	mov	r2, r3
 801d812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d816:	3320      	adds	r3, #32
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	fb02 f303 	mul.w	r3, r2, r3
 801d81e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801d822:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d826:	3330      	adds	r3, #48	@ 0x30
 801d828:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d82c:	461a      	mov	r2, r3
 801d82e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d832:	3360      	adds	r3, #96	@ 0x60
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	fb02 f303 	mul.w	r3, r2, r3
 801d83a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801d83e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d842:	3350      	adds	r3, #80	@ 0x50
 801d844:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d848:	461a      	mov	r2, r3
 801d84a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d84e:	33a0      	adds	r3, #160	@ 0xa0
 801d850:	681b      	ldr	r3, [r3, #0]
 801d852:	fb02 f303 	mul.w	r3, r2, r3
 801d856:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801d85a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801d85e:	3370      	adds	r3, #112	@ 0x70
 801d860:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d864:	461a      	mov	r2, r3
 801d866:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801d86a:	33e0      	adds	r3, #224	@ 0xe0
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	fb02 f303 	mul.w	r3, r2, r3
 801d872:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    tmp11 = z2 + z4;
 801d876:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801d87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801d87e:	4413      	add	r3, r2
 801d880:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp13 = z2 - z4;
 801d884:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801d888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801d88c:	1ad3      	subs	r3, r2, r3
 801d88e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801d892:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801d896:	f640 12e3 	movw	r2, #2531	@ 0x9e3
 801d89a:	fb02 f303 	mul.w	r3, r2, r3
 801d89e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    z5 = z3 << CONST_BITS;
 801d8a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801d8a6:	035b      	lsls	r3, r3, #13
 801d8a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801d8ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801d8b0:	f641 626f 	movw	r2, #7791	@ 0x1e6f
 801d8b4:	fb02 f303 	mul.w	r3, r2, r3
 801d8b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    z4 = z5 + tmp12;
 801d8bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801d8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8c4:	4413      	add	r3, r2
 801d8c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801d8ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801d8ce:	f642 42b3 	movw	r2, #11443	@ 0x2cb3
 801d8d2:	fb03 f202 	mul.w	r2, r3, r2
 801d8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d8da:	4413      	add	r3, r2
 801d8dc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801d8e0:	4413      	add	r3, r2
 801d8e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801d8e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801d8ea:	f240 7214 	movw	r2, #1812	@ 0x714
 801d8ee:	fb03 f202 	mul.w	r2, r3, r2
 801d8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d8f6:	1ad3      	subs	r3, r2, r3
 801d8f8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801d8fc:	4413      	add	r3, r2
 801d8fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801d902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801d906:	f241 22cf 	movw	r2, #4815	@ 0x12cf
 801d90a:	fb02 f303 	mul.w	r3, r2, r3
 801d90e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801d912:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801d916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d91a:	1ad2      	subs	r2, r2, r3
 801d91c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801d920:	031b      	lsls	r3, r3, #12
 801d922:	1ad3      	subs	r3, r2, r3
 801d924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801d928:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801d92c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801d930:	1ad2      	subs	r2, r2, r3
 801d932:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801d936:	1ad3      	subs	r3, r2, r3
 801d938:	009b      	lsls	r3, r3, #2
 801d93a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801d93e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801d942:	f642 0253 	movw	r2, #10323	@ 0x2853
 801d946:	fb03 f202 	mul.w	r2, r3, r2
 801d94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d94e:	1ad2      	subs	r2, r2, r3
 801d950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801d954:	1ad3      	subs	r3, r2, r3
 801d956:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801d95a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801d95e:	f241 428c 	movw	r2, #5260	@ 0x148c
 801d962:	fb03 f202 	mul.w	r2, r3, r2
 801d966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801d96a:	1ad3      	subs	r3, r2, r3
 801d96c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801d970:	4413      	add	r3, r2
 801d972:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801d976:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801d97a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801d97e:	4413      	add	r3, r2
 801d980:	12da      	asrs	r2, r3, #11
 801d982:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801d986:	601a      	str	r2, [r3, #0]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801d988:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 801d98c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801d990:	1ad2      	subs	r2, r2, r3
 801d992:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801d996:	33b4      	adds	r3, #180	@ 0xb4
 801d998:	12d2      	asrs	r2, r2, #11
 801d99a:	601a      	str	r2, [r3, #0]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801d99c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801d9a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801d9a4:	441a      	add	r2, r3
 801d9a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801d9aa:	3314      	adds	r3, #20
 801d9ac:	12d2      	asrs	r2, r2, #11
 801d9ae:	601a      	str	r2, [r3, #0]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801d9b0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801d9b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801d9b8:	1ad2      	subs	r2, r2, r3
 801d9ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801d9be:	33a0      	adds	r3, #160	@ 0xa0
 801d9c0:	12d2      	asrs	r2, r2, #11
 801d9c2:	601a      	str	r2, [r3, #0]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801d9c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801d9c8:	3328      	adds	r3, #40	@ 0x28
 801d9ca:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 801d9ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801d9d2:	440a      	add	r2, r1
 801d9d4:	601a      	str	r2, [r3, #0]
    wsptr[5*7] = (int) (tmp22 - tmp12);
 801d9d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801d9da:	338c      	adds	r3, #140	@ 0x8c
 801d9dc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 801d9e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801d9e4:	1a8a      	subs	r2, r1, r2
 801d9e6:	601a      	str	r2, [r3, #0]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801d9e8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801d9ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801d9f0:	441a      	add	r2, r3
 801d9f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801d9f6:	333c      	adds	r3, #60	@ 0x3c
 801d9f8:	12d2      	asrs	r2, r2, #11
 801d9fa:	601a      	str	r2, [r3, #0]
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801d9fc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801da00:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801da04:	1ad2      	subs	r2, r2, r3
 801da06:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801da0a:	3378      	adds	r3, #120	@ 0x78
 801da0c:	12d2      	asrs	r2, r2, #11
 801da0e:	601a      	str	r2, [r3, #0]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801da10:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801da14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801da18:	441a      	add	r2, r3
 801da1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801da1e:	3350      	adds	r3, #80	@ 0x50
 801da20:	12d2      	asrs	r2, r2, #11
 801da22:	601a      	str	r2, [r3, #0]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801da24:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801da28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801da2c:	1ad2      	subs	r2, r2, r3
 801da2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801da32:	3364      	adds	r3, #100	@ 0x64
 801da34:	12d2      	asrs	r2, r2, #11
 801da36:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801da38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801da3c:	3301      	adds	r3, #1
 801da3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 801da42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801da46:	3302      	adds	r3, #2
 801da48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801da4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801da50:	3304      	adds	r3, #4
 801da52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801da56:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801da5a:	3304      	adds	r3, #4
 801da5c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801da60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801da64:	2b04      	cmp	r3, #4
 801da66:	f77f ae27 	ble.w	801d6b8 <jpeg_idct_5x10+0x70>
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 801da6a:	f107 0314 	add.w	r3, r7, #20
 801da6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  for (ctr = 0; ctr < 10; ctr++) {
 801da72:	2300      	movs	r3, #0
 801da74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 801da78:	e0dd      	b.n	801dc36 <jpeg_idct_5x10+0x5ee>
 801da7a:	bf00      	nop
 801da7c:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 801da80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801da84:	009b      	lsls	r3, r3, #2
 801da86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801da8a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801da8e:	6812      	ldr	r2, [r2, #0]
 801da90:	4413      	add	r3, r2
 801da92:	681a      	ldr	r2, [r3, #0]
 801da94:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801da98:	4413      	add	r3, r2
 801da9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801da9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	3310      	adds	r3, #16
 801daa6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp12 <<= CONST_BITS;
 801daaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daae:	035b      	lsls	r3, r3, #13
 801dab0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    tmp13 = (INT32) wsptr[2];
 801dab4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801dab8:	3308      	adds	r3, #8
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp14 = (INT32) wsptr[4];
 801dac0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801dac4:	3310      	adds	r3, #16
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801dacc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801dad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801dad4:	4413      	add	r3, r2
 801dad6:	f641 124c 	movw	r2, #6476	@ 0x194c
 801dada:	fb02 f303 	mul.w	r3, r2, r3
 801dade:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801dae2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801dae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801daea:	1ad3      	subs	r3, r2, r3
 801daec:	f44f 6235 	mov.w	r2, #2896	@ 0xb50
 801daf0:	fb02 f303 	mul.w	r3, r2, r3
 801daf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    z3 = tmp12 + z2;
 801daf8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801dafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801db00:	4413      	add	r3, r2
 801db02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    tmp10 = z3 + z1;
 801db06:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801db0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801db0e:	4413      	add	r3, r2
 801db10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    tmp11 = z3 - z1;
 801db14:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801db18:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801db1c:	1ad3      	subs	r3, r2, r3
 801db1e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    tmp12 -= z2 << 2;
 801db22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801db26:	009b      	lsls	r3, r3, #2
 801db28:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801db2c:	1ad3      	subs	r3, r2, r3
 801db2e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    /* Odd part */

    z2 = (INT32) wsptr[1];
 801db32:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801db36:	3304      	adds	r3, #4
 801db38:	681b      	ldr	r3, [r3, #0]
 801db3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    z3 = (INT32) wsptr[3];
 801db3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801db42:	330c      	adds	r3, #12
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801db4a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801db4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801db52:	4413      	add	r3, r2
 801db54:	f641 229a 	movw	r2, #6810	@ 0x1a9a
 801db58:	fb02 f303 	mul.w	r3, r2, r3
 801db5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801db60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801db64:	f241 0271 	movw	r2, #4209	@ 0x1071
 801db68:	fb02 f303 	mul.w	r3, r2, r3
 801db6c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801db70:	4413      	add	r3, r2
 801db72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 801db76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801db7a:	4a35      	ldr	r2, [pc, #212]	@ (801dc50 <jpeg_idct_5x10+0x608>)
 801db7c:	fb02 f303 	mul.w	r3, r2, r3
 801db80:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801db84:	4413      	add	r3, r2
 801db86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801db8a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801db8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801db92:	4413      	add	r3, r2
 801db94:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801db96:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801db9a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801db9e:	4413      	add	r3, r2
 801dba0:	781a      	ldrb	r2, [r3, #0]
 801dba2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801dba6:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 801dba8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801dbac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801dbb0:	1ad3      	subs	r3, r2, r3
 801dbb2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801dbb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 801dbb8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801dbbc:	441a      	add	r2, r3
 801dbbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801dbc2:	3304      	adds	r3, #4
 801dbc4:	7812      	ldrb	r2, [r2, #0]
 801dbc6:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801dbc8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801dbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801dbd0:	4413      	add	r3, r2
 801dbd2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801dbd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801dbd8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801dbdc:	441a      	add	r2, r3
 801dbde:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801dbe2:	3301      	adds	r3, #1
 801dbe4:	7812      	ldrb	r2, [r2, #0]
 801dbe6:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801dbe8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 801dbec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801dbf0:	1ad3      	subs	r3, r2, r3
 801dbf2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801dbf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801dbf8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801dbfc:	441a      	add	r2, r3
 801dbfe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801dc02:	3303      	adds	r3, #3
 801dc04:	7812      	ldrb	r2, [r2, #0]
 801dc06:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801dc08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc0c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801dc0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801dc12:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801dc16:	441a      	add	r2, r3
 801dc18:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801dc1c:	3302      	adds	r3, #2
 801dc1e:	7812      	ldrb	r2, [r2, #0]
 801dc20:	701a      	strb	r2, [r3, #0]

    wsptr += 5;		/* advance pointer to next row */
 801dc22:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801dc26:	3314      	adds	r3, #20
 801dc28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  for (ctr = 0; ctr < 10; ctr++) {
 801dc2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dc30:	3301      	adds	r3, #1
 801dc32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 801dc36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801dc3a:	2b09      	cmp	r3, #9
 801dc3c:	f77f af20 	ble.w	801da80 <jpeg_idct_5x10+0x438>
  }
}
 801dc40:	bf00      	nop
 801dc42:	bf00      	nop
 801dc44:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801dc48:	46bd      	mov	sp, r7
 801dc4a:	bc90      	pop	{r4, r7}
 801dc4c:	4770      	bx	lr
 801dc4e:	bf00      	nop
 801dc50:	ffffba5c 	.word	0xffffba5c

0801dc54 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801dc54:	b480      	push	{r7}
 801dc56:	b0b7      	sub	sp, #220	@ 0xdc
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	60f8      	str	r0, [r7, #12]
 801dc5c:	60b9      	str	r1, [r7, #8]
 801dc5e:	607a      	str	r2, [r7, #4]
 801dc60:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801dc68:	3380      	adds	r3, #128	@ 0x80
 801dc6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801dc74:	68bb      	ldr	r3, [r7, #8]
 801dc76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dc78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  wsptr = workspace;
 801dc7c:	f107 0310 	add.w	r3, r7, #16
 801dc80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  for (ctr = 4; ctr > 0; ctr--) {
 801dc84:	2304      	movs	r3, #4
 801dc86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801dc8a:	e238      	b.n	801e0fe <jpeg_idct_4x8+0x4aa>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801dc8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dc90:	3310      	adds	r3, #16
 801dc92:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d175      	bne.n	801dd86 <jpeg_idct_4x8+0x132>
 801dc9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dc9e:	3320      	adds	r3, #32
 801dca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dca4:	2b00      	cmp	r3, #0
 801dca6:	d16e      	bne.n	801dd86 <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801dca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dcac:	3330      	adds	r3, #48	@ 0x30
 801dcae:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d167      	bne.n	801dd86 <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801dcb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dcba:	3340      	adds	r3, #64	@ 0x40
 801dcbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d160      	bne.n	801dd86 <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801dcc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dcc8:	3350      	adds	r3, #80	@ 0x50
 801dcca:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d159      	bne.n	801dd86 <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801dcd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dcd6:	3360      	adds	r3, #96	@ 0x60
 801dcd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d152      	bne.n	801dd86 <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*7] == 0) {
 801dce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dce4:	3370      	adds	r3, #112	@ 0x70
 801dce6:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d14b      	bne.n	801dd86 <jpeg_idct_4x8+0x132>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801dcee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dcf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dcf6:	461a      	mov	r2, r3
 801dcf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	fb02 f303 	mul.w	r3, r2, r3
 801dd02:	009b      	lsls	r3, r3, #2
 801dd04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

      wsptr[4*0] = dcval;
 801dd08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd10:	601a      	str	r2, [r3, #0]
      wsptr[4*1] = dcval;
 801dd12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd16:	3310      	adds	r3, #16
 801dd18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd1c:	601a      	str	r2, [r3, #0]
      wsptr[4*2] = dcval;
 801dd1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd22:	3320      	adds	r3, #32
 801dd24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd28:	601a      	str	r2, [r3, #0]
      wsptr[4*3] = dcval;
 801dd2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd2e:	3330      	adds	r3, #48	@ 0x30
 801dd30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd34:	601a      	str	r2, [r3, #0]
      wsptr[4*4] = dcval;
 801dd36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd3a:	3340      	adds	r3, #64	@ 0x40
 801dd3c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd40:	601a      	str	r2, [r3, #0]
      wsptr[4*5] = dcval;
 801dd42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd46:	3350      	adds	r3, #80	@ 0x50
 801dd48:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd4c:	601a      	str	r2, [r3, #0]
      wsptr[4*6] = dcval;
 801dd4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd52:	3360      	adds	r3, #96	@ 0x60
 801dd54:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd58:	601a      	str	r2, [r3, #0]
      wsptr[4*7] = dcval;
 801dd5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd5e:	3370      	adds	r3, #112	@ 0x70
 801dd60:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801dd64:	601a      	str	r2, [r3, #0]

      inptr++;			/* advance pointers to next column */
 801dd66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dd6a:	3302      	adds	r3, #2
 801dd6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      quantptr++;
 801dd70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801dd74:	3304      	adds	r3, #4
 801dd76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      wsptr++;
 801dd7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801dd7e:	3304      	adds	r3, #4
 801dd80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
      continue;
 801dd84:	e1b6      	b.n	801e0f4 <jpeg_idct_4x8+0x4a0>
    }

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801dd86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dd8a:	3320      	adds	r3, #32
 801dd8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dd90:	461a      	mov	r2, r3
 801dd92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801dd96:	3340      	adds	r3, #64	@ 0x40
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	fb02 f303 	mul.w	r3, r2, r3
 801dd9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801dda2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dda6:	3360      	adds	r3, #96	@ 0x60
 801dda8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ddac:	461a      	mov	r2, r3
 801ddae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801ddb2:	33c0      	adds	r3, #192	@ 0xc0
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	fb02 f303 	mul.w	r3, r2, r3
 801ddba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801ddbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801ddc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801ddc6:	4413      	add	r3, r2
 801ddc8:	f241 1251 	movw	r2, #4433	@ 0x1151
 801ddcc:	fb02 f303 	mul.w	r3, r2, r3
 801ddd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801ddd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ddd8:	f641 027e 	movw	r2, #6270	@ 0x187e
 801dddc:	fb02 f303 	mul.w	r3, r2, r3
 801dde0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801dde4:	4413      	add	r3, r2
 801dde6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801ddea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801ddee:	4aca      	ldr	r2, [pc, #808]	@ (801e118 <jpeg_idct_4x8+0x4c4>)
 801ddf0:	fb02 f303 	mul.w	r3, r2, r3
 801ddf4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801ddf8:	4413      	add	r3, r2
 801ddfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801ddfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801de02:	f9b3 3000 	ldrsh.w	r3, [r3]
 801de06:	461a      	mov	r2, r3
 801de08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	fb02 f303 	mul.w	r3, r2, r3
 801de12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801de16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801de1a:	3340      	adds	r3, #64	@ 0x40
 801de1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801de20:	461a      	mov	r2, r3
 801de22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801de26:	3380      	adds	r3, #128	@ 0x80
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	fb02 f303 	mul.w	r3, r2, r3
 801de2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    z2 <<= CONST_BITS;
 801de32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801de36:	035b      	lsls	r3, r3, #13
 801de38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z3 <<= CONST_BITS;
 801de3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801de40:	035b      	lsls	r3, r3, #13
 801de42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 801de46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801de4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801de4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    tmp0 = z2 + z3;
 801de52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801de56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801de5a:	4413      	add	r3, r2
 801de5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = z2 - z3;
 801de60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801de64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801de68:	1ad3      	subs	r3, r2, r3
 801de6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    
    tmp10 = tmp0 + tmp2;
 801de6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801de72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801de76:	4413      	add	r3, r2
 801de78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp13 = tmp0 - tmp2;
 801de7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801de80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801de84:	1ad3      	subs	r3, r2, r3
 801de86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    tmp11 = tmp1 + tmp3;
 801de8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801de8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801de92:	4413      	add	r3, r2
 801de94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    tmp12 = tmp1 - tmp3;
 801de98:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801de9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dea0:	1ad3      	subs	r3, r2, r3
 801dea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801dea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801deaa:	3370      	adds	r3, #112	@ 0x70
 801deac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801deb0:	461a      	mov	r2, r3
 801deb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801deb6:	33e0      	adds	r3, #224	@ 0xe0
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	fb02 f303 	mul.w	r3, r2, r3
 801debe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801dec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dec6:	3350      	adds	r3, #80	@ 0x50
 801dec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801decc:	461a      	mov	r2, r3
 801dece:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801ded2:	33a0      	adds	r3, #160	@ 0xa0
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	fb02 f303 	mul.w	r3, r2, r3
 801deda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801dede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801dee2:	3330      	adds	r3, #48	@ 0x30
 801dee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dee8:	461a      	mov	r2, r3
 801deea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801deee:	3360      	adds	r3, #96	@ 0x60
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	fb02 f303 	mul.w	r3, r2, r3
 801def6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801defa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801defe:	3310      	adds	r3, #16
 801df00:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df04:	461a      	mov	r2, r3
 801df06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801df0a:	3320      	adds	r3, #32
 801df0c:	681b      	ldr	r3, [r3, #0]
 801df0e:	fb02 f303 	mul.w	r3, r2, r3
 801df12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    z2 = tmp0 + tmp2;
 801df16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801df1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801df1e:	4413      	add	r3, r2
 801df20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z3 = tmp1 + tmp3;
 801df24:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801df28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801df2c:	4413      	add	r3, r2
 801df2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801df32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801df36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801df3a:	4413      	add	r3, r2
 801df3c:	f242 52a1 	movw	r2, #9633	@ 0x25a1
 801df40:	fb02 f303 	mul.w	r3, r2, r3
 801df44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801df48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801df4c:	4a73      	ldr	r2, [pc, #460]	@ (801e11c <jpeg_idct_4x8+0x4c8>)
 801df4e:	fb02 f303 	mul.w	r3, r2, r3
 801df52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801df56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801df5a:	4a71      	ldr	r2, [pc, #452]	@ (801e120 <jpeg_idct_4x8+0x4cc>)
 801df5c:	fb02 f303 	mul.w	r3, r2, r3
 801df60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    z2 += z1;
 801df64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801df68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801df6c:	4413      	add	r3, r2
 801df6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z3 += z1;
 801df72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801df76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801df7a:	4413      	add	r3, r2
 801df7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801df80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801df84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801df88:	4413      	add	r3, r2
 801df8a:	4a66      	ldr	r2, [pc, #408]	@ (801e124 <jpeg_idct_4x8+0x4d0>)
 801df8c:	fb02 f303 	mul.w	r3, r2, r3
 801df90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801df94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801df98:	f640 128e 	movw	r2, #2446	@ 0x98e
 801df9c:	fb02 f303 	mul.w	r3, r2, r3
 801dfa0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801dfa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dfa8:	f243 020b 	movw	r2, #12299	@ 0x300b
 801dfac:	fb02 f303 	mul.w	r3, r2, r3
 801dfb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tmp0 += z1 + z2;
 801dfb4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801dfb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801dfbc:	4413      	add	r3, r2
 801dfbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801dfc2:	4413      	add	r3, r2
 801dfc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp3 += z1 + z3;
 801dfc8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801dfcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801dfd0:	4413      	add	r3, r2
 801dfd2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801dfd6:	4413      	add	r3, r2
 801dfd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801dfdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801dfe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801dfe4:	4413      	add	r3, r2
 801dfe6:	4a50      	ldr	r2, [pc, #320]	@ (801e128 <jpeg_idct_4x8+0x4d4>)
 801dfe8:	fb02 f303 	mul.w	r3, r2, r3
 801dfec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801dff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801dff4:	f244 12b3 	movw	r2, #16819	@ 0x41b3
 801dff8:	fb02 f303 	mul.w	r3, r2, r3
 801dffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801e000:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e004:	f246 2254 	movw	r2, #25172	@ 0x6254
 801e008:	fb02 f303 	mul.w	r3, r2, r3
 801e00c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    tmp1 += z1 + z3;
 801e010:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801e014:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801e018:	4413      	add	r3, r2
 801e01a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801e01e:	4413      	add	r3, r2
 801e020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tmp2 += z1 + z2;
 801e024:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801e028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e02c:	4413      	add	r3, r2
 801e02e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801e032:	4413      	add	r3, r2
 801e034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801e038:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801e03c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801e040:	4413      	add	r3, r2
 801e042:	12da      	asrs	r2, r3, #11
 801e044:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e048:	601a      	str	r2, [r3, #0]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801e04a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801e04e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801e052:	1ad2      	subs	r2, r2, r3
 801e054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e058:	3370      	adds	r3, #112	@ 0x70
 801e05a:	12d2      	asrs	r2, r2, #11
 801e05c:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801e05e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801e062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e066:	441a      	add	r2, r3
 801e068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e06c:	3310      	adds	r3, #16
 801e06e:	12d2      	asrs	r2, r2, #11
 801e070:	601a      	str	r2, [r3, #0]
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801e072:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801e076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e07a:	1ad2      	subs	r2, r2, r3
 801e07c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e080:	3360      	adds	r3, #96	@ 0x60
 801e082:	12d2      	asrs	r2, r2, #11
 801e084:	601a      	str	r2, [r3, #0]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801e086:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801e08a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801e08e:	441a      	add	r2, r3
 801e090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e094:	3320      	adds	r3, #32
 801e096:	12d2      	asrs	r2, r2, #11
 801e098:	601a      	str	r2, [r3, #0]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801e09a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801e09e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801e0a2:	1ad2      	subs	r2, r2, r3
 801e0a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e0a8:	3350      	adds	r3, #80	@ 0x50
 801e0aa:	12d2      	asrs	r2, r2, #11
 801e0ac:	601a      	str	r2, [r3, #0]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801e0ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801e0b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801e0b6:	441a      	add	r2, r3
 801e0b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e0bc:	3330      	adds	r3, #48	@ 0x30
 801e0be:	12d2      	asrs	r2, r2, #11
 801e0c0:	601a      	str	r2, [r3, #0]
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801e0c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801e0c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801e0ca:	1ad2      	subs	r2, r2, r3
 801e0cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e0d0:	3340      	adds	r3, #64	@ 0x40
 801e0d2:	12d2      	asrs	r2, r2, #11
 801e0d4:	601a      	str	r2, [r3, #0]

    inptr++;			/* advance pointers to next column */
 801e0d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801e0da:	3302      	adds	r3, #2
 801e0dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    quantptr++;
 801e0e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801e0e4:	3304      	adds	r3, #4
 801e0e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    wsptr++;
 801e0ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e0ee:	3304      	adds	r3, #4
 801e0f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  for (ctr = 4; ctr > 0; ctr--) {
 801e0f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801e0f8:	3b01      	subs	r3, #1
 801e0fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e0fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801e102:	2b00      	cmp	r3, #0
 801e104:	f73f adc2 	bgt.w	801dc8c <jpeg_idct_4x8+0x38>
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801e108:	f107 0310 	add.w	r3, r7, #16
 801e10c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  for (ctr = 0; ctr < 8; ctr++) {
 801e110:	2300      	movs	r3, #0
 801e112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e116:	e0a5      	b.n	801e264 <jpeg_idct_4x8+0x610>
 801e118:	ffffc4df 	.word	0xffffc4df
 801e11c:	ffffc13b 	.word	0xffffc13b
 801e120:	fffff384 	.word	0xfffff384
 801e124:	ffffe333 	.word	0xffffe333
 801e128:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 801e12c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801e130:	009b      	lsls	r3, r3, #2
 801e132:	683a      	ldr	r2, [r7, #0]
 801e134:	4413      	add	r3, r2
 801e136:	681a      	ldr	r2, [r3, #0]
 801e138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801e13c:	4413      	add	r3, r2
 801e13e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801e142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	3310      	adds	r3, #16
 801e14a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp2 = (INT32) wsptr[2];
 801e14e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e152:	3308      	adds	r3, #8
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801e15a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801e15e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e162:	4413      	add	r3, r2
 801e164:	035b      	lsls	r3, r3, #13
 801e166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801e16a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801e16e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e172:	1ad3      	subs	r3, r2, r3
 801e174:	035b      	lsls	r3, r3, #13
 801e176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
 801e17a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e17e:	3304      	adds	r3, #4
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    z3 = (INT32) wsptr[3];
 801e186:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e18a:	330c      	adds	r3, #12
 801e18c:	681b      	ldr	r3, [r3, #0]
 801e18e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801e192:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801e196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801e19a:	4413      	add	r3, r2
 801e19c:	f241 1251 	movw	r2, #4433	@ 0x1151
 801e1a0:	fb02 f303 	mul.w	r3, r2, r3
 801e1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801e1a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e1ac:	f641 027e 	movw	r2, #6270	@ 0x187e
 801e1b0:	fb02 f303 	mul.w	r3, r2, r3
 801e1b4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801e1b8:	4413      	add	r3, r2
 801e1ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801e1be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801e1c2:	4a2e      	ldr	r2, [pc, #184]	@ (801e27c <jpeg_idct_4x8+0x628>)
 801e1c4:	fb02 f303 	mul.w	r3, r2, r3
 801e1c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801e1cc:	4413      	add	r3, r2
 801e1ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801e1d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801e1d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801e1da:	4413      	add	r3, r2
 801e1dc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e1de:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801e1e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801e1e6:	4413      	add	r3, r2
 801e1e8:	781a      	ldrb	r2, [r3, #0]
 801e1ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801e1ee:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801e1f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801e1f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801e1f8:	1ad3      	subs	r3, r2, r3
 801e1fa:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e1fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801e200:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801e204:	441a      	add	r2, r3
 801e206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801e20a:	3303      	adds	r3, #3
 801e20c:	7812      	ldrb	r2, [r2, #0]
 801e20e:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801e210:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801e214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e218:	4413      	add	r3, r2
 801e21a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e21c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801e220:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801e224:	441a      	add	r2, r3
 801e226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801e22a:	3301      	adds	r3, #1
 801e22c:	7812      	ldrb	r2, [r2, #0]
 801e22e:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801e230:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801e234:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801e238:	1ad3      	subs	r3, r2, r3
 801e23a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e23c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801e240:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801e244:	441a      	add	r2, r3
 801e246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801e24a:	3302      	adds	r3, #2
 801e24c:	7812      	ldrb	r2, [r2, #0]
 801e24e:	701a      	strb	r2, [r3, #0]
    
    wsptr += 4;		/* advance pointer to next row */
 801e250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e254:	3310      	adds	r3, #16
 801e256:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  for (ctr = 0; ctr < 8; ctr++) {
 801e25a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801e25e:	3301      	adds	r3, #1
 801e260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801e268:	2b07      	cmp	r3, #7
 801e26a:	f77f af5f 	ble.w	801e12c <jpeg_idct_4x8+0x4d8>
  }
}
 801e26e:	bf00      	nop
 801e270:	bf00      	nop
 801e272:	37dc      	adds	r7, #220	@ 0xdc
 801e274:	46bd      	mov	sp, r7
 801e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e27a:	4770      	bx	lr
 801e27c:	ffffc4df 	.word	0xffffc4df

0801e280 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801e280:	b480      	push	{r7}
 801e282:	b0a7      	sub	sp, #156	@ 0x9c
 801e284:	af00      	add	r7, sp, #0
 801e286:	60f8      	str	r0, [r7, #12]
 801e288:	60b9      	str	r1, [r7, #8]
 801e28a:	607a      	str	r2, [r7, #4]
 801e28c:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801e28e:	68fb      	ldr	r3, [r7, #12]
 801e290:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801e294:	3380      	adds	r3, #128	@ 0x80
 801e296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801e2a0:	68bb      	ldr	r3, [r7, #8]
 801e2a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  wsptr = workspace;
 801e2a8:	f107 0314 	add.w	r3, r7, #20
 801e2ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e2b6:	e0cf      	b.n	801e458 <jpeg_idct_3x6+0x1d8>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801e2b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801e2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e2c0:	461a      	mov	r2, r3
 801e2c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	fb02 f303 	mul.w	r3, r2, r3
 801e2cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp0 <<= CONST_BITS;
 801e2ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e2d0:	035b      	lsls	r3, r3, #13
 801e2d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801e2d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e2d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801e2da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801e2dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801e2e0:	3340      	adds	r3, #64	@ 0x40
 801e2e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e2e6:	461a      	mov	r2, r3
 801e2e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801e2ec:	3380      	adds	r3, #128	@ 0x80
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	fb02 f303 	mul.w	r3, r2, r3
 801e2f4:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801e2f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e2f8:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 801e2fc:	fb02 f303 	mul.w	r3, r2, r3
 801e300:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp1 = tmp0 + tmp10;
 801e302:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801e304:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e306:	4413      	add	r3, r2
 801e308:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 801e30a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801e30c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e30e:	1ad2      	subs	r2, r2, r3
 801e310:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e312:	1ad3      	subs	r3, r2, r3
 801e314:	12db      	asrs	r3, r3, #11
 801e316:	66bb      	str	r3, [r7, #104]	@ 0x68
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801e318:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801e31c:	3320      	adds	r3, #32
 801e31e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e322:	461a      	mov	r2, r3
 801e324:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801e328:	3340      	adds	r3, #64	@ 0x40
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	fb02 f303 	mul.w	r3, r2, r3
 801e330:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801e332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e334:	f242 7231 	movw	r2, #10033	@ 0x2731
 801e338:	fb02 f303 	mul.w	r3, r2, r3
 801e33c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp10 = tmp1 + tmp0;
 801e33e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e340:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e342:	4413      	add	r3, r2
 801e344:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp12 = tmp1 - tmp0;
 801e346:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e348:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e34a:	1ad3      	subs	r3, r2, r3
 801e34c:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801e34e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801e352:	3310      	adds	r3, #16
 801e354:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e358:	461a      	mov	r2, r3
 801e35a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801e35e:	3320      	adds	r3, #32
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	fb02 f303 	mul.w	r3, r2, r3
 801e366:	667b      	str	r3, [r7, #100]	@ 0x64
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801e368:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801e36c:	3330      	adds	r3, #48	@ 0x30
 801e36e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e372:	461a      	mov	r2, r3
 801e374:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801e378:	3360      	adds	r3, #96	@ 0x60
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	fb02 f303 	mul.w	r3, r2, r3
 801e380:	663b      	str	r3, [r7, #96]	@ 0x60
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801e382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801e386:	3350      	adds	r3, #80	@ 0x50
 801e388:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e38c:	461a      	mov	r2, r3
 801e38e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801e392:	33a0      	adds	r3, #160	@ 0xa0
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	fb02 f303 	mul.w	r3, r2, r3
 801e39a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801e39c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801e39e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e3a0:	4413      	add	r3, r2
 801e3a2:	f640 32b6 	movw	r2, #2998	@ 0xbb6
 801e3a6:	fb02 f303 	mul.w	r3, r2, r3
 801e3aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801e3ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801e3ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e3b0:	4413      	add	r3, r2
 801e3b2:	035b      	lsls	r3, r3, #13
 801e3b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e3b6:	4413      	add	r3, r2
 801e3b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801e3ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801e3bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e3be:	1ad3      	subs	r3, r2, r3
 801e3c0:	035b      	lsls	r3, r3, #13
 801e3c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e3c4:	4413      	add	r3, r2
 801e3c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801e3c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801e3ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e3cc:	1ad2      	subs	r2, r2, r3
 801e3ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e3d0:	1ad3      	subs	r3, r2, r3
 801e3d2:	009b      	lsls	r3, r3, #2
 801e3d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801e3d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801e3d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e3da:	4413      	add	r3, r2
 801e3dc:	12da      	asrs	r2, r3, #11
 801e3de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e3e2:	601a      	str	r2, [r3, #0]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801e3e4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801e3e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e3e8:	1ad2      	subs	r2, r2, r3
 801e3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e3ee:	333c      	adds	r3, #60	@ 0x3c
 801e3f0:	12d2      	asrs	r2, r2, #11
 801e3f2:	601a      	str	r2, [r3, #0]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 801e3f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e3f8:	330c      	adds	r3, #12
 801e3fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801e3fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e3fe:	440a      	add	r2, r1
 801e400:	601a      	str	r2, [r3, #0]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 801e402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e406:	3330      	adds	r3, #48	@ 0x30
 801e408:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801e40a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801e40c:	1a8a      	subs	r2, r1, r2
 801e40e:	601a      	str	r2, [r3, #0]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801e410:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801e412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e414:	441a      	add	r2, r3
 801e416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e41a:	3318      	adds	r3, #24
 801e41c:	12d2      	asrs	r2, r2, #11
 801e41e:	601a      	str	r2, [r3, #0]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801e420:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801e422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e424:	1ad2      	subs	r2, r2, r3
 801e426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e42a:	3324      	adds	r3, #36	@ 0x24
 801e42c:	12d2      	asrs	r2, r2, #11
 801e42e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801e430:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801e434:	3301      	adds	r3, #1
 801e436:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e43a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801e43e:	3302      	adds	r3, #2
 801e440:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e444:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801e448:	3304      	adds	r3, #4
 801e44a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e44e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e452:	3304      	adds	r3, #4
 801e454:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801e45c:	2b02      	cmp	r3, #2
 801e45e:	f77f af2b 	ble.w	801e2b8 <jpeg_idct_3x6+0x38>
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 801e462:	f107 0314 	add.w	r3, r7, #20
 801e466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  for (ctr = 0; ctr < 6; ctr++) {
 801e46a:	2300      	movs	r3, #0
 801e46c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e470:	e063      	b.n	801e53a <jpeg_idct_3x6+0x2ba>
    outptr = output_buf[ctr] + output_col;
 801e472:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801e476:	009b      	lsls	r3, r3, #2
 801e478:	683a      	ldr	r2, [r7, #0]
 801e47a:	4413      	add	r3, r2
 801e47c:	681a      	ldr	r2, [r3, #0]
 801e47e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e482:	4413      	add	r3, r2
 801e484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801e488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	3310      	adds	r3, #16
 801e490:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp0 <<= CONST_BITS;
 801e492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e494:	035b      	lsls	r3, r3, #13
 801e496:	67fb      	str	r3, [r7, #124]	@ 0x7c
    tmp2 = (INT32) wsptr[2];
 801e498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e49c:	3308      	adds	r3, #8
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801e4a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e4a4:	f241 62a1 	movw	r2, #5793	@ 0x16a1
 801e4a8:	fb02 f303 	mul.w	r3, r2, r3
 801e4ac:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp10 = tmp0 + tmp12;
 801e4ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801e4b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e4b2:	4413      	add	r3, r2
 801e4b4:	673b      	str	r3, [r7, #112]	@ 0x70
    tmp2 = tmp0 - tmp12 - tmp12;
 801e4b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801e4b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e4ba:	1ad2      	subs	r2, r2, r3
 801e4bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e4be:	1ad3      	subs	r3, r2, r3
 801e4c0:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
 801e4c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e4c6:	3304      	adds	r3, #4
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	677b      	str	r3, [r7, #116]	@ 0x74
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801e4cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e4ce:	f242 7231 	movw	r2, #10033	@ 0x2731
 801e4d2:	fb02 f303 	mul.w	r3, r2, r3
 801e4d6:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801e4d8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801e4da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e4dc:	4413      	add	r3, r2
 801e4de:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e4e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801e4e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801e4e8:	4413      	add	r3, r2
 801e4ea:	781a      	ldrb	r2, [r3, #0]
 801e4ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801e4f0:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801e4f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801e4f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801e4f6:	1ad3      	subs	r3, r2, r3
 801e4f8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e4fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801e4fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801e502:	441a      	add	r2, r3
 801e504:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801e508:	3302      	adds	r3, #2
 801e50a:	7812      	ldrb	r2, [r2, #0]
 801e50c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801e50e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801e510:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e512:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801e516:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801e51a:	441a      	add	r2, r3
 801e51c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801e520:	3301      	adds	r3, #1
 801e522:	7812      	ldrb	r2, [r2, #0]
 801e524:	701a      	strb	r2, [r3, #0]

    wsptr += 3;		/* advance pointer to next row */
 801e526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e52a:	330c      	adds	r3, #12
 801e52c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  for (ctr = 0; ctr < 6; ctr++) {
 801e530:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801e534:	3301      	adds	r3, #1
 801e536:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e53a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801e53e:	2b05      	cmp	r3, #5
 801e540:	dd97      	ble.n	801e472 <jpeg_idct_3x6+0x1f2>
  }
}
 801e542:	bf00      	nop
 801e544:	bf00      	nop
 801e546:	379c      	adds	r7, #156	@ 0x9c
 801e548:	46bd      	mov	sp, r7
 801e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e54e:	4770      	bx	lr

0801e550 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801e550:	b480      	push	{r7}
 801e552:	b09b      	sub	sp, #108	@ 0x6c
 801e554:	af00      	add	r7, sp, #0
 801e556:	60f8      	str	r0, [r7, #12]
 801e558:	60b9      	str	r1, [r7, #8]
 801e55a:	607a      	str	r2, [r7, #4]
 801e55c:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801e564:	3380      	adds	r3, #128	@ 0x80
 801e566:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	667b      	str	r3, [r7, #100]	@ 0x64
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801e56c:	68bb      	ldr	r3, [r7, #8]
 801e56e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e570:	663b      	str	r3, [r7, #96]	@ 0x60
  wsptr = workspace;
 801e572:	f107 0314 	add.w	r3, r7, #20
 801e576:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801e578:	2300      	movs	r3, #0
 801e57a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e57c:	e06d      	b.n	801e65a <jpeg_idct_2x4+0x10a>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801e57e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e580:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e584:	461a      	mov	r2, r3
 801e586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	fb02 f303 	mul.w	r3, r2, r3
 801e58e:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801e590:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e592:	3320      	adds	r3, #32
 801e594:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e598:	461a      	mov	r2, r3
 801e59a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e59c:	3340      	adds	r3, #64	@ 0x40
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	fb02 f303 	mul.w	r3, r2, r3
 801e5a4:	647b      	str	r3, [r7, #68]	@ 0x44

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801e5a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e5a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e5aa:	4413      	add	r3, r2
 801e5ac:	035b      	lsls	r3, r3, #13
 801e5ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801e5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e5b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e5b4:	1ad3      	subs	r3, r2, r3
 801e5b6:	035b      	lsls	r3, r3, #13
 801e5b8:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801e5ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e5bc:	3310      	adds	r3, #16
 801e5be:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5c2:	461a      	mov	r2, r3
 801e5c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e5c6:	3320      	adds	r3, #32
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	fb02 f303 	mul.w	r3, r2, r3
 801e5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801e5d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e5d2:	3330      	adds	r3, #48	@ 0x30
 801e5d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e5d8:	461a      	mov	r2, r3
 801e5da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e5dc:	3360      	adds	r3, #96	@ 0x60
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	fb02 f303 	mul.w	r3, r2, r3
 801e5e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801e5e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e5ea:	4413      	add	r3, r2
 801e5ec:	f241 1251 	movw	r2, #4433	@ 0x1151
 801e5f0:	fb02 f303 	mul.w	r3, r2, r3
 801e5f4:	637b      	str	r3, [r7, #52]	@ 0x34
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801e5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e5f8:	f641 027e 	movw	r2, #6270	@ 0x187e
 801e5fc:	fb02 f303 	mul.w	r3, r2, r3
 801e600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e602:	4413      	add	r3, r2
 801e604:	64bb      	str	r3, [r7, #72]	@ 0x48
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801e606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e608:	4a34      	ldr	r2, [pc, #208]	@ (801e6dc <jpeg_idct_2x4+0x18c>)
 801e60a:	fb02 f303 	mul.w	r3, r2, r3
 801e60e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e610:	4413      	add	r3, r2
 801e612:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 801e614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e618:	441a      	add	r2, r3
 801e61a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e61c:	601a      	str	r2, [r3, #0]
    wsptr[2*3] = tmp10 - tmp0;
 801e61e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e620:	3318      	adds	r3, #24
 801e622:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801e624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e626:	1a8a      	subs	r2, r1, r2
 801e628:	601a      	str	r2, [r3, #0]
    wsptr[2*1] = tmp12 + tmp2;
 801e62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e62c:	3308      	adds	r3, #8
 801e62e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e632:	440a      	add	r2, r1
 801e634:	601a      	str	r2, [r3, #0]
    wsptr[2*2] = tmp12 - tmp2;
 801e636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e638:	3310      	adds	r3, #16
 801e63a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e63c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801e63e:	1a8a      	subs	r2, r1, r2
 801e640:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801e642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e644:	3301      	adds	r3, #1
 801e646:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e64a:	3302      	adds	r3, #2
 801e64c:	667b      	str	r3, [r7, #100]	@ 0x64
 801e64e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e650:	3304      	adds	r3, #4
 801e652:	663b      	str	r3, [r7, #96]	@ 0x60
 801e654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e656:	3304      	adds	r3, #4
 801e658:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e65a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e65c:	2b01      	cmp	r3, #1
 801e65e:	dd8e      	ble.n	801e57e <jpeg_idct_2x4+0x2e>
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 801e660:	f107 0314 	add.w	r3, r7, #20
 801e664:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 4; ctr++) {
 801e666:	2300      	movs	r3, #0
 801e668:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e66a:	e02c      	b.n	801e6c6 <jpeg_idct_2x4+0x176>
    outptr = output_buf[ctr] + output_col;
 801e66c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e66e:	009b      	lsls	r3, r3, #2
 801e670:	683a      	ldr	r2, [r7, #0]
 801e672:	4413      	add	r3, r2
 801e674:	681a      	ldr	r2, [r3, #0]
 801e676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e678:	4413      	add	r3, r2
 801e67a:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801e67c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 801e684:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Odd part */

    tmp0 = wsptr[1];
 801e686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e688:	685b      	ldr	r3, [r3, #4]
 801e68a:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801e68c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e68e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e690:	4413      	add	r3, r2
 801e692:	141b      	asrs	r3, r3, #16
			    & RANGE_MASK];
 801e694:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801e698:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e69a:	4413      	add	r3, r2
 801e69c:	781a      	ldrb	r2, [r3, #0]
 801e69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e6a0:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801e6a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e6a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e6a6:	1ad3      	subs	r3, r2, r3
 801e6a8:	141b      	asrs	r3, r3, #16
			    & RANGE_MASK];
 801e6aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801e6ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e6b0:	441a      	add	r2, r3
 801e6b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e6b4:	3301      	adds	r3, #1
 801e6b6:	7812      	ldrb	r2, [r2, #0]
 801e6b8:	701a      	strb	r2, [r3, #0]

    wsptr += 2;		/* advance pointer to next row */
 801e6ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e6bc:	3308      	adds	r3, #8
 801e6be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (ctr = 0; ctr < 4; ctr++) {
 801e6c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e6c2:	3301      	adds	r3, #1
 801e6c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e6c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e6c8:	2b03      	cmp	r3, #3
 801e6ca:	ddcf      	ble.n	801e66c <jpeg_idct_2x4+0x11c>
  }
}
 801e6cc:	bf00      	nop
 801e6ce:	bf00      	nop
 801e6d0:	376c      	adds	r7, #108	@ 0x6c
 801e6d2:	46bd      	mov	sp, r7
 801e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6d8:	4770      	bx	lr
 801e6da:	bf00      	nop
 801e6dc:	ffffc4df 	.word	0xffffc4df

0801e6e0 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801e6e0:	b480      	push	{r7}
 801e6e2:	b089      	sub	sp, #36	@ 0x24
 801e6e4:	af00      	add	r7, sp, #0
 801e6e6:	60f8      	str	r0, [r7, #12]
 801e6e8:	60b9      	str	r1, [r7, #8]
 801e6ea:	607a      	str	r2, [r7, #4]
 801e6ec:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp10;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801e6f4:	3380      	adds	r3, #128	@ 0x80
 801e6f6:	61fb      	str	r3, [r7, #28]
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801e6f8:	68bb      	ldr	r3, [r7, #8]
 801e6fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e6fc:	61bb      	str	r3, [r7, #24]

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e704:	461a      	mov	r2, r3
 801e706:	69bb      	ldr	r3, [r7, #24]
 801e708:	681b      	ldr	r3, [r3, #0]
 801e70a:	fb02 f303 	mul.w	r3, r2, r3
 801e70e:	617b      	str	r3, [r7, #20]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;
 801e710:	697b      	ldr	r3, [r7, #20]
 801e712:	3304      	adds	r3, #4
 801e714:	617b      	str	r3, [r7, #20]

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	3310      	adds	r3, #16
 801e71a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e71e:	461a      	mov	r2, r3
 801e720:	69bb      	ldr	r3, [r7, #24]
 801e722:	3320      	adds	r3, #32
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	fb02 f303 	mul.w	r3, r2, r3
 801e72a:	613b      	str	r3, [r7, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801e72c:	697a      	ldr	r2, [r7, #20]
 801e72e:	693b      	ldr	r3, [r7, #16]
 801e730:	4413      	add	r3, r2
 801e732:	10db      	asrs	r3, r3, #3
					  & RANGE_MASK];
 801e734:	f3c3 0309 	ubfx	r3, r3, #0, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801e738:	69fa      	ldr	r2, [r7, #28]
 801e73a:	441a      	add	r2, r3
 801e73c:	683b      	ldr	r3, [r7, #0]
 801e73e:	6819      	ldr	r1, [r3, #0]
 801e740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e742:	440b      	add	r3, r1
 801e744:	7812      	ldrb	r2, [r2, #0]
 801e746:	701a      	strb	r2, [r3, #0]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 801e748:	697a      	ldr	r2, [r7, #20]
 801e74a:	693b      	ldr	r3, [r7, #16]
 801e74c:	1ad3      	subs	r3, r2, r3
 801e74e:	10db      	asrs	r3, r3, #3
					  & RANGE_MASK];
 801e750:	f3c3 0309 	ubfx	r3, r3, #0, #10
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 801e754:	69fa      	ldr	r2, [r7, #28]
 801e756:	441a      	add	r2, r3
 801e758:	683b      	ldr	r3, [r7, #0]
 801e75a:	3304      	adds	r3, #4
 801e75c:	6819      	ldr	r1, [r3, #0]
 801e75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e760:	440b      	add	r3, r1
 801e762:	7812      	ldrb	r2, [r2, #0]
 801e764:	701a      	strb	r2, [r3, #0]
}
 801e766:	bf00      	nop
 801e768:	3724      	adds	r7, #36	@ 0x24
 801e76a:	46bd      	mov	sp, r7
 801e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e770:	4770      	bx	lr

0801e772 <out_of_memory>:

LOCAL(void)
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
 801e772:	b580      	push	{r7, lr}
 801e774:	b082      	sub	sp, #8
 801e776:	af00      	add	r7, sp, #0
 801e778:	6078      	str	r0, [r7, #4]
 801e77a:	6039      	str	r1, [r7, #0]
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	2238      	movs	r2, #56	@ 0x38
 801e782:	615a      	str	r2, [r3, #20]
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	683a      	ldr	r2, [r7, #0]
 801e78a:	619a      	str	r2, [r3, #24]
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	6878      	ldr	r0, [r7, #4]
 801e794:	4798      	blx	r3
}
 801e796:	bf00      	nop
 801e798:	3708      	adds	r7, #8
 801e79a:	46bd      	mov	sp, r7
 801e79c:	bd80      	pop	{r7, pc}
	...

0801e7a0 <alloc_small>:


METHODDEF(void *)
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
 801e7a0:	b580      	push	{r7, lr}
 801e7a2:	b08c      	sub	sp, #48	@ 0x30
 801e7a4:	af00      	add	r7, sp, #0
 801e7a6:	60f8      	str	r0, [r7, #12]
 801e7a8:	60b9      	str	r1, [r7, #8]
 801e7aa:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801e7ac:	68fb      	ldr	r3, [r7, #12]
 801e7ae:	685b      	ldr	r3, [r3, #4]
 801e7b0:	623b      	str	r3, [r7, #32]
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801e7b8:	4293      	cmp	r3, r2
 801e7ba:	d903      	bls.n	801e7c4 <alloc_small+0x24>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 801e7bc:	2101      	movs	r1, #1
 801e7be:	68f8      	ldr	r0, [r7, #12]
 801e7c0:	f7ff ffd7 	bl	801e772 <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	f003 0307 	and.w	r3, r3, #7
 801e7ca:	61fb      	str	r3, [r7, #28]
  if (odd_bytes > 0)
 801e7cc:	69fb      	ldr	r3, [r7, #28]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d004      	beq.n	801e7dc <alloc_small+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801e7d2:	687a      	ldr	r2, [r7, #4]
 801e7d4:	69fb      	ldr	r3, [r7, #28]
 801e7d6:	1ad3      	subs	r3, r2, r3
 801e7d8:	3308      	adds	r3, #8
 801e7da:	607b      	str	r3, [r7, #4]

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801e7dc:	68bb      	ldr	r3, [r7, #8]
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	db02      	blt.n	801e7e8 <alloc_small+0x48>
 801e7e2:	68bb      	ldr	r3, [r7, #8]
 801e7e4:	2b01      	cmp	r3, #1
 801e7e6:	dd0c      	ble.n	801e802 <alloc_small+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	220f      	movs	r2, #15
 801e7ee:	615a      	str	r2, [r3, #20]
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	68ba      	ldr	r2, [r7, #8]
 801e7f6:	619a      	str	r2, [r3, #24]
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	68f8      	ldr	r0, [r7, #12]
 801e800:	4798      	blx	r3
  prev_hdr_ptr = NULL;
 801e802:	2300      	movs	r3, #0
 801e804:	62bb      	str	r3, [r7, #40]	@ 0x28
  hdr_ptr = mem->small_list[pool_id];
 801e806:	6a3a      	ldr	r2, [r7, #32]
 801e808:	68bb      	ldr	r3, [r7, #8]
 801e80a:	330c      	adds	r3, #12
 801e80c:	009b      	lsls	r3, r3, #2
 801e80e:	4413      	add	r3, r2
 801e810:	685b      	ldr	r3, [r3, #4]
 801e812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (hdr_ptr != NULL) {
 801e814:	e009      	b.n	801e82a <alloc_small+0x8a>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 801e816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e818:	689b      	ldr	r3, [r3, #8]
 801e81a:	687a      	ldr	r2, [r7, #4]
 801e81c:	429a      	cmp	r2, r3
 801e81e:	d908      	bls.n	801e832 <alloc_small+0x92>
      break;			/* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
 801e820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e822:	62bb      	str	r3, [r7, #40]	@ 0x28
    hdr_ptr = hdr_ptr->hdr.next;
 801e824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (hdr_ptr != NULL) {
 801e82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d1f2      	bne.n	801e816 <alloc_small+0x76>
 801e830:	e000      	b.n	801e834 <alloc_small+0x94>
      break;			/* found pool with enough space */
 801e832:	bf00      	nop
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
 801e834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e836:	2b00      	cmp	r3, #0
 801e838:	d154      	bne.n	801e8e4 <alloc_small+0x144>
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	3310      	adds	r3, #16
 801e83e:	61bb      	str	r3, [r7, #24]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 801e840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e842:	2b00      	cmp	r3, #0
 801e844:	d105      	bne.n	801e852 <alloc_small+0xb2>
      slop = first_pool_slop[pool_id];
 801e846:	4a34      	ldr	r2, [pc, #208]	@ (801e918 <alloc_small+0x178>)
 801e848:	68bb      	ldr	r3, [r7, #8]
 801e84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e84e:	627b      	str	r3, [r7, #36]	@ 0x24
 801e850:	e004      	b.n	801e85c <alloc_small+0xbc>
    else
      slop = extra_pool_slop[pool_id];
 801e852:	4a32      	ldr	r2, [pc, #200]	@ (801e91c <alloc_small+0x17c>)
 801e854:	68bb      	ldr	r3, [r7, #8]
 801e856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e85a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 801e85c:	69bb      	ldr	r3, [r7, #24]
 801e85e:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 801e862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e864:	429a      	cmp	r2, r3
 801e866:	d903      	bls.n	801e870 <alloc_small+0xd0>
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 801e868:	69bb      	ldr	r3, [r7, #24]
 801e86a:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 801e86e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 801e870:	69ba      	ldr	r2, [r7, #24]
 801e872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e874:	4413      	add	r3, r2
 801e876:	4619      	mov	r1, r3
 801e878:	68f8      	ldr	r0, [r7, #12]
 801e87a:	f000 feff 	bl	801f67c <jpeg_get_small>
 801e87e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if (hdr_ptr != NULL)
 801e880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e882:	2b00      	cmp	r3, #0
 801e884:	d10a      	bne.n	801e89c <alloc_small+0xfc>
	break;
      slop /= 2;
 801e886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e888:	085b      	lsrs	r3, r3, #1
 801e88a:	627b      	str	r3, [r7, #36]	@ 0x24
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 801e88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e88e:	2b31      	cmp	r3, #49	@ 0x31
 801e890:	d8ee      	bhi.n	801e870 <alloc_small+0xd0>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 801e892:	2102      	movs	r1, #2
 801e894:	68f8      	ldr	r0, [r7, #12]
 801e896:	f7ff ff6c 	bl	801e772 <out_of_memory>
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 801e89a:	e7e9      	b.n	801e870 <alloc_small+0xd0>
	break;
 801e89c:	bf00      	nop
    }
    mem->total_space_allocated += min_request + slop;
 801e89e:	6a3b      	ldr	r3, [r7, #32]
 801e8a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e8a2:	4619      	mov	r1, r3
 801e8a4:	69ba      	ldr	r2, [r7, #24]
 801e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8a8:	4413      	add	r3, r2
 801e8aa:	440b      	add	r3, r1
 801e8ac:	461a      	mov	r2, r3
 801e8ae:	6a3b      	ldr	r3, [r7, #32]
 801e8b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
 801e8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8b4:	2200      	movs	r2, #0
 801e8b6:	601a      	str	r2, [r3, #0]
    hdr_ptr->hdr.bytes_used = 0;
 801e8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	605a      	str	r2, [r3, #4]
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 801e8be:	687a      	ldr	r2, [r7, #4]
 801e8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8c2:	441a      	add	r2, r3
 801e8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8c6:	609a      	str	r2, [r3, #8]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 801e8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	d107      	bne.n	801e8de <alloc_small+0x13e>
      mem->small_list[pool_id] = hdr_ptr;
 801e8ce:	6a3a      	ldr	r2, [r7, #32]
 801e8d0:	68bb      	ldr	r3, [r7, #8]
 801e8d2:	330c      	adds	r3, #12
 801e8d4:	009b      	lsls	r3, r3, #2
 801e8d6:	4413      	add	r3, r2
 801e8d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e8da:	605a      	str	r2, [r3, #4]
 801e8dc:	e002      	b.n	801e8e4 <alloc_small+0x144>
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
 801e8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e8e2:	601a      	str	r2, [r3, #0]
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
 801e8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8e6:	3310      	adds	r3, #16
 801e8e8:	617b      	str	r3, [r7, #20]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801e8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8ec:	685b      	ldr	r3, [r3, #4]
 801e8ee:	697a      	ldr	r2, [r7, #20]
 801e8f0:	4413      	add	r3, r2
 801e8f2:	617b      	str	r3, [r7, #20]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 801e8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8f6:	685a      	ldr	r2, [r3, #4]
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	441a      	add	r2, r3
 801e8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8fe:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 801e900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e902:	689a      	ldr	r2, [r3, #8]
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	1ad2      	subs	r2, r2, r3
 801e908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e90a:	609a      	str	r2, [r3, #8]

  return (void *) data_ptr;
 801e90c:	697b      	ldr	r3, [r7, #20]
}
 801e90e:	4618      	mov	r0, r3
 801e910:	3730      	adds	r7, #48	@ 0x30
 801e912:	46bd      	mov	sp, r7
 801e914:	bd80      	pop	{r7, pc}
 801e916:	bf00      	nop
 801e918:	080242f4 	.word	0x080242f4
 801e91c:	080242fc 	.word	0x080242fc

0801e920 <alloc_large>:
 */

METHODDEF(void FAR *)
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
 801e920:	b580      	push	{r7, lr}
 801e922:	b088      	sub	sp, #32
 801e924:	af00      	add	r7, sp, #0
 801e926:	60f8      	str	r0, [r7, #12]
 801e928:	60b9      	str	r1, [r7, #8]
 801e92a:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	685b      	ldr	r3, [r3, #4]
 801e930:	61fb      	str	r3, [r7, #28]
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801e938:	4293      	cmp	r3, r2
 801e93a:	d903      	bls.n	801e944 <alloc_large+0x24>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 801e93c:	2103      	movs	r1, #3
 801e93e:	68f8      	ldr	r0, [r7, #12]
 801e940:	f7ff ff17 	bl	801e772 <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	f003 0307 	and.w	r3, r3, #7
 801e94a:	61bb      	str	r3, [r7, #24]
  if (odd_bytes > 0)
 801e94c:	69bb      	ldr	r3, [r7, #24]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d004      	beq.n	801e95c <alloc_large+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801e952:	687a      	ldr	r2, [r7, #4]
 801e954:	69bb      	ldr	r3, [r7, #24]
 801e956:	1ad3      	subs	r3, r2, r3
 801e958:	3308      	adds	r3, #8
 801e95a:	607b      	str	r3, [r7, #4]

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801e95c:	68bb      	ldr	r3, [r7, #8]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	db02      	blt.n	801e968 <alloc_large+0x48>
 801e962:	68bb      	ldr	r3, [r7, #8]
 801e964:	2b01      	cmp	r3, #1
 801e966:	dd0c      	ble.n	801e982 <alloc_large+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801e968:	68fb      	ldr	r3, [r7, #12]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	220f      	movs	r2, #15
 801e96e:	615a      	str	r2, [r3, #20]
 801e970:	68fb      	ldr	r3, [r7, #12]
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	68ba      	ldr	r2, [r7, #8]
 801e976:	619a      	str	r2, [r3, #24]
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	68f8      	ldr	r0, [r7, #12]
 801e980:	4798      	blx	r3

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	3310      	adds	r3, #16
 801e986:	4619      	mov	r1, r3
 801e988:	68f8      	ldr	r0, [r7, #12]
 801e98a:	f000 fe91 	bl	801f6b0 <jpeg_get_large>
 801e98e:	6178      	str	r0, [r7, #20]
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
 801e990:	697b      	ldr	r3, [r7, #20]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d103      	bne.n	801e99e <alloc_large+0x7e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 801e996:	2104      	movs	r1, #4
 801e998:	68f8      	ldr	r0, [r7, #12]
 801e99a:	f7ff feea 	bl	801e772 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 801e99e:	69fb      	ldr	r3, [r7, #28]
 801e9a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e9a2:	461a      	mov	r2, r3
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	4413      	add	r3, r2
 801e9a8:	3310      	adds	r3, #16
 801e9aa:	461a      	mov	r2, r3
 801e9ac:	69fb      	ldr	r3, [r7, #28]
 801e9ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 801e9b0:	69fa      	ldr	r2, [r7, #28]
 801e9b2:	68bb      	ldr	r3, [r7, #8]
 801e9b4:	330e      	adds	r3, #14
 801e9b6:	009b      	lsls	r3, r3, #2
 801e9b8:	4413      	add	r3, r2
 801e9ba:	685a      	ldr	r2, [r3, #4]
 801e9bc:	697b      	ldr	r3, [r7, #20]
 801e9be:	601a      	str	r2, [r3, #0]
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
 801e9c0:	697b      	ldr	r3, [r7, #20]
 801e9c2:	687a      	ldr	r2, [r7, #4]
 801e9c4:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left = 0;
 801e9c6:	697b      	ldr	r3, [r7, #20]
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	609a      	str	r2, [r3, #8]
  mem->large_list[pool_id] = hdr_ptr;
 801e9cc:	69fa      	ldr	r2, [r7, #28]
 801e9ce:	68bb      	ldr	r3, [r7, #8]
 801e9d0:	330e      	adds	r3, #14
 801e9d2:	009b      	lsls	r3, r3, #2
 801e9d4:	4413      	add	r3, r2
 801e9d6:	697a      	ldr	r2, [r7, #20]
 801e9d8:	605a      	str	r2, [r3, #4]

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
 801e9da:	697b      	ldr	r3, [r7, #20]
 801e9dc:	3310      	adds	r3, #16
}
 801e9de:	4618      	mov	r0, r3
 801e9e0:	3720      	adds	r7, #32
 801e9e2:	46bd      	mov	sp, r7
 801e9e4:	bd80      	pop	{r7, pc}

0801e9e6 <alloc_sarray>:

METHODDEF(JSAMPARRAY)
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
 801e9e6:	b580      	push	{r7, lr}
 801e9e8:	b08c      	sub	sp, #48	@ 0x30
 801e9ea:	af00      	add	r7, sp, #0
 801e9ec:	60f8      	str	r0, [r7, #12]
 801e9ee:	60b9      	str	r1, [r7, #8]
 801e9f0:	607a      	str	r2, [r7, #4]
 801e9f2:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801e9f4:	68fb      	ldr	r3, [r7, #12]
 801e9f6:	685b      	ldr	r3, [r3, #4]
 801e9f8:	61fb      	str	r3, [r7, #28]
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 801e9fa:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	fbb2 f3f3 	udiv	r3, r2, r3
 801ea04:	61bb      	str	r3, [r7, #24]
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
 801ea06:	69bb      	ldr	r3, [r7, #24]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	dc08      	bgt.n	801ea1e <alloc_sarray+0x38>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	2248      	movs	r2, #72	@ 0x48
 801ea12:	615a      	str	r2, [r3, #20]
 801ea14:	68fb      	ldr	r3, [r7, #12]
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	68f8      	ldr	r0, [r7, #12]
 801ea1c:	4798      	blx	r3
  if (ltemp < (long) numrows)
 801ea1e:	683b      	ldr	r3, [r7, #0]
 801ea20:	69ba      	ldr	r2, [r7, #24]
 801ea22:	429a      	cmp	r2, r3
 801ea24:	da02      	bge.n	801ea2c <alloc_sarray+0x46>
    rowsperchunk = (JDIMENSION) ltemp;
 801ea26:	69bb      	ldr	r3, [r7, #24]
 801ea28:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ea2a:	e001      	b.n	801ea30 <alloc_sarray+0x4a>
  else
    rowsperchunk = numrows;
 801ea2c:	683b      	ldr	r3, [r7, #0]
 801ea2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  mem->last_rowsperchunk = rowsperchunk;
 801ea30:	69fb      	ldr	r3, [r7, #28]
 801ea32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ea34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 801ea36:	683b      	ldr	r3, [r7, #0]
 801ea38:	009b      	lsls	r3, r3, #2
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 801ea3a:	461a      	mov	r2, r3
 801ea3c:	68b9      	ldr	r1, [r7, #8]
 801ea3e:	68f8      	ldr	r0, [r7, #12]
 801ea40:	f7ff feae 	bl	801e7a0 <alloc_small>
 801ea44:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 801ea46:	2300      	movs	r3, #0
 801ea48:	627b      	str	r3, [r7, #36]	@ 0x24
  while (currow < numrows) {
 801ea4a:	e026      	b.n	801ea9a <alloc_sarray+0xb4>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801ea4c:	683a      	ldr	r2, [r7, #0]
 801ea4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea50:	1ad3      	subs	r3, r2, r3
 801ea52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ea54:	4293      	cmp	r3, r2
 801ea56:	bf28      	it	cs
 801ea58:	4613      	movcs	r3, r2
 801ea5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801ea5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ea5e:	687a      	ldr	r2, [r7, #4]
 801ea60:	fb02 f303 	mul.w	r3, r2, r3
 801ea64:	461a      	mov	r2, r3
 801ea66:	68b9      	ldr	r1, [r7, #8]
 801ea68:	68f8      	ldr	r0, [r7, #12]
 801ea6a:	f7ff ff59 	bl	801e920 <alloc_large>
 801ea6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
 801ea70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ea72:	623b      	str	r3, [r7, #32]
 801ea74:	e00e      	b.n	801ea94 <alloc_sarray+0xae>
      result[currow++] = workspace;
 801ea76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea78:	1c5a      	adds	r2, r3, #1
 801ea7a:	627a      	str	r2, [r7, #36]	@ 0x24
 801ea7c:	009b      	lsls	r3, r3, #2
 801ea7e:	697a      	ldr	r2, [r7, #20]
 801ea80:	4413      	add	r3, r2
 801ea82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ea84:	601a      	str	r2, [r3, #0]
      workspace += samplesperrow;
 801ea86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	4413      	add	r3, r2
 801ea8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 801ea8e:	6a3b      	ldr	r3, [r7, #32]
 801ea90:	3b01      	subs	r3, #1
 801ea92:	623b      	str	r3, [r7, #32]
 801ea94:	6a3b      	ldr	r3, [r7, #32]
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d1ed      	bne.n	801ea76 <alloc_sarray+0x90>
  while (currow < numrows) {
 801ea9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ea9c:	683b      	ldr	r3, [r7, #0]
 801ea9e:	429a      	cmp	r2, r3
 801eaa0:	d3d4      	bcc.n	801ea4c <alloc_sarray+0x66>
    }
  }

  return result;
 801eaa2:	697b      	ldr	r3, [r7, #20]
}
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	3730      	adds	r7, #48	@ 0x30
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	bd80      	pop	{r7, pc}

0801eaac <alloc_barray>:

METHODDEF(JBLOCKARRAY)
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
 801eaac:	b580      	push	{r7, lr}
 801eaae:	b08c      	sub	sp, #48	@ 0x30
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	60f8      	str	r0, [r7, #12]
 801eab4:	60b9      	str	r1, [r7, #8]
 801eab6:	607a      	str	r2, [r7, #4]
 801eab8:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801eaba:	68fb      	ldr	r3, [r7, #12]
 801eabc:	685b      	ldr	r3, [r3, #4]
 801eabe:	61fb      	str	r3, [r7, #28]
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	01db      	lsls	r3, r3, #7
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 801eac4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801eac8:	fbb2 f3f3 	udiv	r3, r2, r3
 801eacc:	61bb      	str	r3, [r7, #24]
  if (ltemp <= 0)
 801eace:	69bb      	ldr	r3, [r7, #24]
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	dc08      	bgt.n	801eae6 <alloc_barray+0x3a>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801ead4:	68fb      	ldr	r3, [r7, #12]
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	2248      	movs	r2, #72	@ 0x48
 801eada:	615a      	str	r2, [r3, #20]
 801eadc:	68fb      	ldr	r3, [r7, #12]
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	681b      	ldr	r3, [r3, #0]
 801eae2:	68f8      	ldr	r0, [r7, #12]
 801eae4:	4798      	blx	r3
  if (ltemp < (long) numrows)
 801eae6:	683b      	ldr	r3, [r7, #0]
 801eae8:	69ba      	ldr	r2, [r7, #24]
 801eaea:	429a      	cmp	r2, r3
 801eaec:	da02      	bge.n	801eaf4 <alloc_barray+0x48>
    rowsperchunk = (JDIMENSION) ltemp;
 801eaee:	69bb      	ldr	r3, [r7, #24]
 801eaf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801eaf2:	e001      	b.n	801eaf8 <alloc_barray+0x4c>
  else
    rowsperchunk = numrows;
 801eaf4:	683b      	ldr	r3, [r7, #0]
 801eaf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  mem->last_rowsperchunk = rowsperchunk;
 801eaf8:	69fb      	ldr	r3, [r7, #28]
 801eafa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801eafc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 801eafe:	683b      	ldr	r3, [r7, #0]
 801eb00:	009b      	lsls	r3, r3, #2
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 801eb02:	461a      	mov	r2, r3
 801eb04:	68b9      	ldr	r1, [r7, #8]
 801eb06:	68f8      	ldr	r0, [r7, #12]
 801eb08:	f7ff fe4a 	bl	801e7a0 <alloc_small>
 801eb0c:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 801eb0e:	2300      	movs	r3, #0
 801eb10:	627b      	str	r3, [r7, #36]	@ 0x24
  while (currow < numrows) {
 801eb12:	e028      	b.n	801eb66 <alloc_barray+0xba>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801eb14:	683a      	ldr	r2, [r7, #0]
 801eb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb18:	1ad3      	subs	r3, r2, r3
 801eb1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801eb1c:	4293      	cmp	r3, r2
 801eb1e:	bf28      	it	cs
 801eb20:	4613      	movcs	r3, r2
 801eb22:	62bb      	str	r3, [r7, #40]	@ 0x28
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 801eb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb26:	687a      	ldr	r2, [r7, #4]
 801eb28:	fb02 f303 	mul.w	r3, r2, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 801eb2c:	01db      	lsls	r3, r3, #7
 801eb2e:	461a      	mov	r2, r3
 801eb30:	68b9      	ldr	r1, [r7, #8]
 801eb32:	68f8      	ldr	r0, [r7, #12]
 801eb34:	f7ff fef4 	bl	801e920 <alloc_large>
 801eb38:	62f8      	str	r0, [r7, #44]	@ 0x2c
		  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
 801eb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb3c:	623b      	str	r3, [r7, #32]
 801eb3e:	e00f      	b.n	801eb60 <alloc_barray+0xb4>
      result[currow++] = workspace;
 801eb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb42:	1c5a      	adds	r2, r3, #1
 801eb44:	627a      	str	r2, [r7, #36]	@ 0x24
 801eb46:	009b      	lsls	r3, r3, #2
 801eb48:	697a      	ldr	r2, [r7, #20]
 801eb4a:	4413      	add	r3, r2
 801eb4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801eb4e:	601a      	str	r2, [r3, #0]
      workspace += blocksperrow;
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	01db      	lsls	r3, r3, #7
 801eb54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801eb56:	4413      	add	r3, r2
 801eb58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 801eb5a:	6a3b      	ldr	r3, [r7, #32]
 801eb5c:	3b01      	subs	r3, #1
 801eb5e:	623b      	str	r3, [r7, #32]
 801eb60:	6a3b      	ldr	r3, [r7, #32]
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d1ec      	bne.n	801eb40 <alloc_barray+0x94>
  while (currow < numrows) {
 801eb66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801eb68:	683b      	ldr	r3, [r7, #0]
 801eb6a:	429a      	cmp	r2, r3
 801eb6c:	d3d2      	bcc.n	801eb14 <alloc_barray+0x68>
    }
  }

  return result;
 801eb6e:	697b      	ldr	r3, [r7, #20]
}
 801eb70:	4618      	mov	r0, r3
 801eb72:	3730      	adds	r7, #48	@ 0x30
 801eb74:	46bd      	mov	sp, r7
 801eb76:	bd80      	pop	{r7, pc}

0801eb78 <request_virt_sarray>:
METHODDEF(jvirt_sarray_ptr)
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
 801eb78:	b580      	push	{r7, lr}
 801eb7a:	b086      	sub	sp, #24
 801eb7c:	af00      	add	r7, sp, #0
 801eb7e:	60f8      	str	r0, [r7, #12]
 801eb80:	60b9      	str	r1, [r7, #8]
 801eb82:	607a      	str	r2, [r7, #4]
 801eb84:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	685b      	ldr	r3, [r3, #4]
 801eb8a:	617b      	str	r3, [r7, #20]
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 801eb8c:	68bb      	ldr	r3, [r7, #8]
 801eb8e:	2b01      	cmp	r3, #1
 801eb90:	d00c      	beq.n	801ebac <request_virt_sarray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801eb92:	68fb      	ldr	r3, [r7, #12]
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	220f      	movs	r2, #15
 801eb98:	615a      	str	r2, [r3, #20]
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	68ba      	ldr	r2, [r7, #8]
 801eba0:	619a      	str	r2, [r3, #24]
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	68f8      	ldr	r0, [r7, #12]
 801ebaa:	4798      	blx	r3

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 801ebac:	223c      	movs	r2, #60	@ 0x3c
 801ebae:	68b9      	ldr	r1, [r7, #8]
 801ebb0:	68f8      	ldr	r0, [r7, #12]
 801ebb2:	f7ff fdf5 	bl	801e7a0 <alloc_small>
 801ebb6:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 801ebb8:	693b      	ldr	r3, [r7, #16]
 801ebba:	2200      	movs	r2, #0
 801ebbc:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 801ebbe:	693b      	ldr	r3, [r7, #16]
 801ebc0:	6a3a      	ldr	r2, [r7, #32]
 801ebc2:	605a      	str	r2, [r3, #4]
  result->samplesperrow = samplesperrow;
 801ebc4:	693b      	ldr	r3, [r7, #16]
 801ebc6:	683a      	ldr	r2, [r7, #0]
 801ebc8:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 801ebca:	693b      	ldr	r3, [r7, #16]
 801ebcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ebce:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 801ebd0:	693b      	ldr	r3, [r7, #16]
 801ebd2:	687a      	ldr	r2, [r7, #4]
 801ebd4:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801ebd6:	693b      	ldr	r3, [r7, #16]
 801ebd8:	2200      	movs	r2, #0
 801ebda:	629a      	str	r2, [r3, #40]	@ 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ebe0:	693b      	ldr	r3, [r7, #16]
 801ebe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  mem->virt_sarray_list = result;
 801ebe4:	697b      	ldr	r3, [r7, #20]
 801ebe6:	693a      	ldr	r2, [r7, #16]
 801ebe8:	645a      	str	r2, [r3, #68]	@ 0x44

  return result;
 801ebea:	693b      	ldr	r3, [r7, #16]
}
 801ebec:	4618      	mov	r0, r3
 801ebee:	3718      	adds	r7, #24
 801ebf0:	46bd      	mov	sp, r7
 801ebf2:	bd80      	pop	{r7, pc}

0801ebf4 <request_virt_barray>:
METHODDEF(jvirt_barray_ptr)
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
 801ebf4:	b580      	push	{r7, lr}
 801ebf6:	b086      	sub	sp, #24
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	60f8      	str	r0, [r7, #12]
 801ebfc:	60b9      	str	r1, [r7, #8]
 801ebfe:	607a      	str	r2, [r7, #4]
 801ec00:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	685b      	ldr	r3, [r3, #4]
 801ec06:	617b      	str	r3, [r7, #20]
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 801ec08:	68bb      	ldr	r3, [r7, #8]
 801ec0a:	2b01      	cmp	r3, #1
 801ec0c:	d00c      	beq.n	801ec28 <request_virt_barray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	220f      	movs	r2, #15
 801ec14:	615a      	str	r2, [r3, #20]
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	68ba      	ldr	r2, [r7, #8]
 801ec1c:	619a      	str	r2, [r3, #24]
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	68f8      	ldr	r0, [r7, #12]
 801ec26:	4798      	blx	r3

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 801ec28:	223c      	movs	r2, #60	@ 0x3c
 801ec2a:	68b9      	ldr	r1, [r7, #8]
 801ec2c:	68f8      	ldr	r0, [r7, #12]
 801ec2e:	f7ff fdb7 	bl	801e7a0 <alloc_small>
 801ec32:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 801ec34:	693b      	ldr	r3, [r7, #16]
 801ec36:	2200      	movs	r2, #0
 801ec38:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 801ec3a:	693b      	ldr	r3, [r7, #16]
 801ec3c:	6a3a      	ldr	r2, [r7, #32]
 801ec3e:	605a      	str	r2, [r3, #4]
  result->blocksperrow = blocksperrow;
 801ec40:	693b      	ldr	r3, [r7, #16]
 801ec42:	683a      	ldr	r2, [r7, #0]
 801ec44:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 801ec46:	693b      	ldr	r3, [r7, #16]
 801ec48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec4a:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 801ec4c:	693b      	ldr	r3, [r7, #16]
 801ec4e:	687a      	ldr	r2, [r7, #4]
 801ec50:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801ec52:	693b      	ldr	r3, [r7, #16]
 801ec54:	2200      	movs	r2, #0
 801ec56:	629a      	str	r2, [r3, #40]	@ 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801ec58:	697b      	ldr	r3, [r7, #20]
 801ec5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801ec5c:	693b      	ldr	r3, [r7, #16]
 801ec5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  mem->virt_barray_list = result;
 801ec60:	697b      	ldr	r3, [r7, #20]
 801ec62:	693a      	ldr	r2, [r7, #16]
 801ec64:	649a      	str	r2, [r3, #72]	@ 0x48

  return result;
 801ec66:	693b      	ldr	r3, [r7, #16]
}
 801ec68:	4618      	mov	r0, r3
 801ec6a:	3718      	adds	r7, #24
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bd80      	pop	{r7, pc}

0801ec70 <realize_virt_arrays>:


METHODDEF(void)
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
 801ec70:	b580      	push	{r7, lr}
 801ec72:	b08a      	sub	sp, #40	@ 0x28
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	685b      	ldr	r3, [r3, #4]
 801ec7c:	613b      	str	r3, [r7, #16]

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
 801ec7e:	2300      	movs	r3, #0
 801ec80:	627b      	str	r3, [r7, #36]	@ 0x24
  maximum_space = 0;
 801ec82:	2300      	movs	r3, #0
 801ec84:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801ec86:	693b      	ldr	r3, [r7, #16]
 801ec88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ec8a:	61bb      	str	r3, [r7, #24]
 801ec8c:	e01c      	b.n	801ecc8 <realize_virt_arrays+0x58>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801ec8e:	69bb      	ldr	r3, [r7, #24]
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d115      	bne.n	801ecc2 <realize_virt_arrays+0x52>
      space_per_minheight += (long) sptr->maxaccess *
 801ec96:	69bb      	ldr	r3, [r7, #24]
 801ec98:	68db      	ldr	r3, [r3, #12]
 801ec9a:	461a      	mov	r2, r3
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801ec9c:	69bb      	ldr	r3, [r7, #24]
 801ec9e:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) sptr->maxaccess *
 801eca0:	fb02 f303 	mul.w	r3, r2, r3
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801eca4:	461a      	mov	r2, r3
      space_per_minheight += (long) sptr->maxaccess *
 801eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eca8:	4413      	add	r3, r2
 801ecaa:	627b      	str	r3, [r7, #36]	@ 0x24
      maximum_space += (long) sptr->rows_in_array *
 801ecac:	69bb      	ldr	r3, [r7, #24]
 801ecae:	685b      	ldr	r3, [r3, #4]
 801ecb0:	461a      	mov	r2, r3
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801ecb2:	69bb      	ldr	r3, [r7, #24]
 801ecb4:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) sptr->rows_in_array *
 801ecb6:	fb02 f303 	mul.w	r3, r2, r3
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801ecba:	461a      	mov	r2, r3
      maximum_space += (long) sptr->rows_in_array *
 801ecbc:	6a3b      	ldr	r3, [r7, #32]
 801ecbe:	4413      	add	r3, r2
 801ecc0:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801ecc2:	69bb      	ldr	r3, [r7, #24]
 801ecc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ecc6:	61bb      	str	r3, [r7, #24]
 801ecc8:	69bb      	ldr	r3, [r7, #24]
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d1df      	bne.n	801ec8e <realize_virt_arrays+0x1e>
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801ecce:	693b      	ldr	r3, [r7, #16]
 801ecd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ecd2:	617b      	str	r3, [r7, #20]
 801ecd4:	e01c      	b.n	801ed10 <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801ecd6:	697b      	ldr	r3, [r7, #20]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d115      	bne.n	801ed0a <realize_virt_arrays+0x9a>
      space_per_minheight += (long) bptr->maxaccess *
 801ecde:	697b      	ldr	r3, [r7, #20]
 801ece0:	68db      	ldr	r3, [r3, #12]
 801ece2:	461a      	mov	r2, r3
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801ece4:	697b      	ldr	r3, [r7, #20]
 801ece6:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) bptr->maxaccess *
 801ece8:	fb02 f303 	mul.w	r3, r2, r3
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801ecec:	01da      	lsls	r2, r3, #7
      space_per_minheight += (long) bptr->maxaccess *
 801ecee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecf0:	4413      	add	r3, r2
 801ecf2:	627b      	str	r3, [r7, #36]	@ 0x24
      maximum_space += (long) bptr->rows_in_array *
 801ecf4:	697b      	ldr	r3, [r7, #20]
 801ecf6:	685b      	ldr	r3, [r3, #4]
 801ecf8:	461a      	mov	r2, r3
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801ecfa:	697b      	ldr	r3, [r7, #20]
 801ecfc:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) bptr->rows_in_array *
 801ecfe:	fb02 f303 	mul.w	r3, r2, r3
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801ed02:	01da      	lsls	r2, r3, #7
      maximum_space += (long) bptr->rows_in_array *
 801ed04:	6a3b      	ldr	r3, [r7, #32]
 801ed06:	4413      	add	r3, r2
 801ed08:	623b      	str	r3, [r7, #32]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801ed0a:	697b      	ldr	r3, [r7, #20]
 801ed0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed0e:	617b      	str	r3, [r7, #20]
 801ed10:	697b      	ldr	r3, [r7, #20]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d1df      	bne.n	801ecd6 <realize_virt_arrays+0x66>
    }
  }

  if (space_per_minheight <= 0)
 801ed16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	f340 80bd 	ble.w	801ee98 <realize_virt_arrays+0x228>
    return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 801ed1e:	693b      	ldr	r3, [r7, #16]
 801ed20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ed22:	6a3a      	ldr	r2, [r7, #32]
 801ed24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ed26:	6878      	ldr	r0, [r7, #4]
 801ed28:	f000 fcdc 	bl	801f6e4 <jpeg_mem_available>
 801ed2c:	60f8      	str	r0, [r7, #12]

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
 801ed2e:	68fa      	ldr	r2, [r7, #12]
 801ed30:	6a3b      	ldr	r3, [r7, #32]
 801ed32:	429a      	cmp	r2, r3
 801ed34:	db02      	blt.n	801ed3c <realize_virt_arrays+0xcc>
    max_minheights = 1000000000L;
 801ed36:	4b5a      	ldr	r3, [pc, #360]	@ (801eea0 <realize_virt_arrays+0x230>)
 801ed38:	61fb      	str	r3, [r7, #28]
 801ed3a:	e009      	b.n	801ed50 <realize_virt_arrays+0xe0>
  else {
    max_minheights = avail_mem / space_per_minheight;
 801ed3c:	68fa      	ldr	r2, [r7, #12]
 801ed3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed40:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed44:	61fb      	str	r3, [r7, #28]
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_minheights <= 0)
 801ed46:	69fb      	ldr	r3, [r7, #28]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	dc01      	bgt.n	801ed50 <realize_virt_arrays+0xe0>
      max_minheights = 1;
 801ed4c:	2301      	movs	r3, #1
 801ed4e:	61fb      	str	r3, [r7, #28]
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801ed50:	693b      	ldr	r3, [r7, #16]
 801ed52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ed54:	61bb      	str	r3, [r7, #24]
 801ed56:	e049      	b.n	801edec <realize_virt_arrays+0x17c>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801ed58:	69bb      	ldr	r3, [r7, #24]
 801ed5a:	681b      	ldr	r3, [r3, #0]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d142      	bne.n	801ede6 <realize_virt_arrays+0x176>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 801ed60:	69bb      	ldr	r3, [r7, #24]
 801ed62:	685b      	ldr	r3, [r3, #4]
 801ed64:	3b01      	subs	r3, #1
 801ed66:	461a      	mov	r2, r3
 801ed68:	69bb      	ldr	r3, [r7, #24]
 801ed6a:	68db      	ldr	r3, [r3, #12]
 801ed6c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ed70:	3301      	adds	r3, #1
 801ed72:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 801ed74:	68ba      	ldr	r2, [r7, #8]
 801ed76:	69fb      	ldr	r3, [r7, #28]
 801ed78:	429a      	cmp	r2, r3
 801ed7a:	dc04      	bgt.n	801ed86 <realize_virt_arrays+0x116>
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
 801ed7c:	69bb      	ldr	r3, [r7, #24]
 801ed7e:	685a      	ldr	r2, [r3, #4]
 801ed80:	69bb      	ldr	r3, [r7, #24]
 801ed82:	611a      	str	r2, [r3, #16]
 801ed84:	e017      	b.n	801edb6 <realize_virt_arrays+0x146>
      } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801ed86:	69bb      	ldr	r3, [r7, #24]
 801ed88:	68db      	ldr	r3, [r3, #12]
 801ed8a:	69fa      	ldr	r2, [r7, #28]
 801ed8c:	fb03 f202 	mul.w	r2, r3, r2
 801ed90:	69bb      	ldr	r3, [r7, #24]
 801ed92:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801ed94:	69bb      	ldr	r3, [r7, #24]
 801ed96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
				(long) sptr->rows_in_array *
 801ed9a:	69bb      	ldr	r3, [r7, #24]
 801ed9c:	685b      	ldr	r3, [r3, #4]
 801ed9e:	461a      	mov	r2, r3
				(long) sptr->samplesperrow *
 801eda0:	69bb      	ldr	r3, [r7, #24]
 801eda2:	689b      	ldr	r3, [r3, #8]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801eda4:	fb02 f303 	mul.w	r3, r2, r3
 801eda8:	461a      	mov	r2, r3
 801edaa:	6878      	ldr	r0, [r7, #4]
 801edac:	f000 fca8 	bl	801f700 <jpeg_open_backing_store>
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
 801edb0:	69bb      	ldr	r3, [r7, #24]
 801edb2:	2201      	movs	r2, #1
 801edb4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801edb6:	69bb      	ldr	r3, [r7, #24]
 801edb8:	689a      	ldr	r2, [r3, #8]
 801edba:	69bb      	ldr	r3, [r7, #24]
 801edbc:	691b      	ldr	r3, [r3, #16]
 801edbe:	2101      	movs	r1, #1
 801edc0:	6878      	ldr	r0, [r7, #4]
 801edc2:	f7ff fe10 	bl	801e9e6 <alloc_sarray>
 801edc6:	4602      	mov	r2, r0
 801edc8:	69bb      	ldr	r3, [r7, #24]
 801edca:	601a      	str	r2, [r3, #0]
				      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
 801edcc:	693b      	ldr	r3, [r7, #16]
 801edce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801edd0:	69bb      	ldr	r3, [r7, #24]
 801edd2:	615a      	str	r2, [r3, #20]
      sptr->cur_start_row = 0;
 801edd4:	69bb      	ldr	r3, [r7, #24]
 801edd6:	2200      	movs	r2, #0
 801edd8:	619a      	str	r2, [r3, #24]
      sptr->first_undef_row = 0;
 801edda:	69bb      	ldr	r3, [r7, #24]
 801eddc:	2200      	movs	r2, #0
 801edde:	61da      	str	r2, [r3, #28]
      sptr->dirty = FALSE;
 801ede0:	69bb      	ldr	r3, [r7, #24]
 801ede2:	2200      	movs	r2, #0
 801ede4:	625a      	str	r2, [r3, #36]	@ 0x24
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801ede6:	69bb      	ldr	r3, [r7, #24]
 801ede8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edea:	61bb      	str	r3, [r7, #24]
 801edec:	69bb      	ldr	r3, [r7, #24]
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d1b2      	bne.n	801ed58 <realize_virt_arrays+0xe8>
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801edf2:	693b      	ldr	r3, [r7, #16]
 801edf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801edf6:	617b      	str	r3, [r7, #20]
 801edf8:	e04a      	b.n	801ee90 <realize_virt_arrays+0x220>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801edfa:	697b      	ldr	r3, [r7, #20]
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d143      	bne.n	801ee8a <realize_virt_arrays+0x21a>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 801ee02:	697b      	ldr	r3, [r7, #20]
 801ee04:	685b      	ldr	r3, [r3, #4]
 801ee06:	3b01      	subs	r3, #1
 801ee08:	461a      	mov	r2, r3
 801ee0a:	697b      	ldr	r3, [r7, #20]
 801ee0c:	68db      	ldr	r3, [r3, #12]
 801ee0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ee12:	3301      	adds	r3, #1
 801ee14:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 801ee16:	68ba      	ldr	r2, [r7, #8]
 801ee18:	69fb      	ldr	r3, [r7, #28]
 801ee1a:	429a      	cmp	r2, r3
 801ee1c:	dc04      	bgt.n	801ee28 <realize_virt_arrays+0x1b8>
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
 801ee1e:	697b      	ldr	r3, [r7, #20]
 801ee20:	685a      	ldr	r2, [r3, #4]
 801ee22:	697b      	ldr	r3, [r7, #20]
 801ee24:	611a      	str	r2, [r3, #16]
 801ee26:	e018      	b.n	801ee5a <realize_virt_arrays+0x1ea>
      } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 801ee28:	697b      	ldr	r3, [r7, #20]
 801ee2a:	68db      	ldr	r3, [r3, #12]
 801ee2c:	69fa      	ldr	r2, [r7, #28]
 801ee2e:	fb03 f202 	mul.w	r2, r3, r2
 801ee32:	697b      	ldr	r3, [r7, #20]
 801ee34:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801ee36:	697b      	ldr	r3, [r7, #20]
 801ee38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
				(long) bptr->rows_in_array *
 801ee3c:	697b      	ldr	r3, [r7, #20]
 801ee3e:	685b      	ldr	r3, [r3, #4]
 801ee40:	461a      	mov	r2, r3
				(long) bptr->blocksperrow *
 801ee42:	697b      	ldr	r3, [r7, #20]
 801ee44:	689b      	ldr	r3, [r3, #8]
				(long) bptr->rows_in_array *
 801ee46:	fb02 f303 	mul.w	r3, r2, r3
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801ee4a:	01db      	lsls	r3, r3, #7
 801ee4c:	461a      	mov	r2, r3
 801ee4e:	6878      	ldr	r0, [r7, #4]
 801ee50:	f000 fc56 	bl	801f700 <jpeg_open_backing_store>
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
 801ee54:	697b      	ldr	r3, [r7, #20]
 801ee56:	2201      	movs	r2, #1
 801ee58:	629a      	str	r2, [r3, #40]	@ 0x28
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 801ee5a:	697b      	ldr	r3, [r7, #20]
 801ee5c:	689a      	ldr	r2, [r3, #8]
 801ee5e:	697b      	ldr	r3, [r7, #20]
 801ee60:	691b      	ldr	r3, [r3, #16]
 801ee62:	2101      	movs	r1, #1
 801ee64:	6878      	ldr	r0, [r7, #4]
 801ee66:	f7ff fe21 	bl	801eaac <alloc_barray>
 801ee6a:	4602      	mov	r2, r0
 801ee6c:	697b      	ldr	r3, [r7, #20]
 801ee6e:	601a      	str	r2, [r3, #0]
				      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
 801ee70:	693b      	ldr	r3, [r7, #16]
 801ee72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ee74:	697b      	ldr	r3, [r7, #20]
 801ee76:	615a      	str	r2, [r3, #20]
      bptr->cur_start_row = 0;
 801ee78:	697b      	ldr	r3, [r7, #20]
 801ee7a:	2200      	movs	r2, #0
 801ee7c:	619a      	str	r2, [r3, #24]
      bptr->first_undef_row = 0;
 801ee7e:	697b      	ldr	r3, [r7, #20]
 801ee80:	2200      	movs	r2, #0
 801ee82:	61da      	str	r2, [r3, #28]
      bptr->dirty = FALSE;
 801ee84:	697b      	ldr	r3, [r7, #20]
 801ee86:	2200      	movs	r2, #0
 801ee88:	625a      	str	r2, [r3, #36]	@ 0x24
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801ee8a:	697b      	ldr	r3, [r7, #20]
 801ee8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee8e:	617b      	str	r3, [r7, #20]
 801ee90:	697b      	ldr	r3, [r7, #20]
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d1b1      	bne.n	801edfa <realize_virt_arrays+0x18a>
 801ee96:	e000      	b.n	801ee9a <realize_virt_arrays+0x22a>
    return;			/* no unrealized arrays, no work */
 801ee98:	bf00      	nop
    }
  }
}
 801ee9a:	3728      	adds	r7, #40	@ 0x28
 801ee9c:	46bd      	mov	sp, r7
 801ee9e:	bd80      	pop	{r7, pc}
 801eea0:	3b9aca00 	.word	0x3b9aca00

0801eea4 <do_sarray_io>:


LOCAL(void)
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
 801eea4:	b590      	push	{r4, r7, lr}
 801eea6:	b08d      	sub	sp, #52	@ 0x34
 801eea8:	af02      	add	r7, sp, #8
 801eeaa:	60f8      	str	r0, [r7, #12]
 801eeac:	60b9      	str	r1, [r7, #8]
 801eeae:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801eeb0:	68bb      	ldr	r3, [r7, #8]
 801eeb2:	689b      	ldr	r3, [r3, #8]
 801eeb4:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 801eeb6:	68bb      	ldr	r3, [r7, #8]
 801eeb8:	699b      	ldr	r3, [r3, #24]
 801eeba:	69fa      	ldr	r2, [r7, #28]
 801eebc:	fb02 f303 	mul.w	r3, r2, r3
 801eec0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801eec2:	2300      	movs	r3, #0
 801eec4:	623b      	str	r3, [r7, #32]
 801eec6:	e059      	b.n	801ef7c <do_sarray_io+0xd8>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801eec8:	68bb      	ldr	r3, [r7, #8]
 801eeca:	691b      	ldr	r3, [r3, #16]
 801eecc:	461a      	mov	r2, r3
 801eece:	6a3b      	ldr	r3, [r7, #32]
 801eed0:	1ad3      	subs	r3, r2, r3
 801eed2:	68ba      	ldr	r2, [r7, #8]
 801eed4:	6952      	ldr	r2, [r2, #20]
 801eed6:	4293      	cmp	r3, r2
 801eed8:	bfa8      	it	ge
 801eeda:	4613      	movge	r3, r2
 801eedc:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 801eede:	68bb      	ldr	r3, [r7, #8]
 801eee0:	699b      	ldr	r3, [r3, #24]
 801eee2:	461a      	mov	r2, r3
 801eee4:	6a3b      	ldr	r3, [r7, #32]
 801eee6:	4413      	add	r3, r2
 801eee8:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801eeea:	68bb      	ldr	r3, [r7, #8]
 801eeec:	69db      	ldr	r3, [r3, #28]
 801eeee:	461a      	mov	r2, r3
 801eef0:	697b      	ldr	r3, [r7, #20]
 801eef2:	1ad3      	subs	r3, r2, r3
 801eef4:	69ba      	ldr	r2, [r7, #24]
 801eef6:	4293      	cmp	r3, r2
 801eef8:	bfa8      	it	ge
 801eefa:	4613      	movge	r3, r2
 801eefc:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801eefe:	68bb      	ldr	r3, [r7, #8]
 801ef00:	685b      	ldr	r3, [r3, #4]
 801ef02:	461a      	mov	r2, r3
 801ef04:	697b      	ldr	r3, [r7, #20]
 801ef06:	1ad3      	subs	r3, r2, r3
 801ef08:	69ba      	ldr	r2, [r7, #24]
 801ef0a:	4293      	cmp	r3, r2
 801ef0c:	bfa8      	it	ge
 801ef0e:	4613      	movge	r3, r2
 801ef10:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 801ef12:	69bb      	ldr	r3, [r7, #24]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	dd38      	ble.n	801ef8a <do_sarray_io+0xe6>
      break;
    byte_count = rows * bytesperrow;
 801ef18:	69bb      	ldr	r3, [r7, #24]
 801ef1a:	69fa      	ldr	r2, [r7, #28]
 801ef1c:	fb02 f303 	mul.w	r3, r2, r3
 801ef20:	613b      	str	r3, [r7, #16]
    if (writing)
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	d010      	beq.n	801ef4a <do_sarray_io+0xa6>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801ef28:	68bb      	ldr	r3, [r7, #8]
 801ef2a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801ef2c:	68bb      	ldr	r3, [r7, #8]
 801ef2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					    (void FAR *) ptr->mem_buffer[i],
 801ef32:	68bb      	ldr	r3, [r7, #8]
 801ef34:	681a      	ldr	r2, [r3, #0]
 801ef36:	6a3b      	ldr	r3, [r7, #32]
 801ef38:	009b      	lsls	r3, r3, #2
 801ef3a:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801ef3c:	681a      	ldr	r2, [r3, #0]
 801ef3e:	693b      	ldr	r3, [r7, #16]
 801ef40:	9300      	str	r3, [sp, #0]
 801ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef44:	68f8      	ldr	r0, [r7, #12]
 801ef46:	47a0      	blx	r4
 801ef48:	e00f      	b.n	801ef6a <do_sarray_io+0xc6>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801ef4a:	68bb      	ldr	r3, [r7, #8]
 801ef4c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 801ef4e:	68bb      	ldr	r3, [r7, #8]
 801ef50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					   (void FAR *) ptr->mem_buffer[i],
 801ef54:	68bb      	ldr	r3, [r7, #8]
 801ef56:	681a      	ldr	r2, [r3, #0]
 801ef58:	6a3b      	ldr	r3, [r7, #32]
 801ef5a:	009b      	lsls	r3, r3, #2
 801ef5c:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801ef5e:	681a      	ldr	r2, [r3, #0]
 801ef60:	693b      	ldr	r3, [r7, #16]
 801ef62:	9300      	str	r3, [sp, #0]
 801ef64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef66:	68f8      	ldr	r0, [r7, #12]
 801ef68:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 801ef6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ef6c:	693b      	ldr	r3, [r7, #16]
 801ef6e:	4413      	add	r3, r2
 801ef70:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801ef72:	68bb      	ldr	r3, [r7, #8]
 801ef74:	695a      	ldr	r2, [r3, #20]
 801ef76:	6a3b      	ldr	r3, [r7, #32]
 801ef78:	4413      	add	r3, r2
 801ef7a:	623b      	str	r3, [r7, #32]
 801ef7c:	68bb      	ldr	r3, [r7, #8]
 801ef7e:	691b      	ldr	r3, [r3, #16]
 801ef80:	461a      	mov	r2, r3
 801ef82:	6a3b      	ldr	r3, [r7, #32]
 801ef84:	4293      	cmp	r3, r2
 801ef86:	db9f      	blt.n	801eec8 <do_sarray_io+0x24>
  }
}
 801ef88:	e000      	b.n	801ef8c <do_sarray_io+0xe8>
      break;
 801ef8a:	bf00      	nop
}
 801ef8c:	bf00      	nop
 801ef8e:	372c      	adds	r7, #44	@ 0x2c
 801ef90:	46bd      	mov	sp, r7
 801ef92:	bd90      	pop	{r4, r7, pc}

0801ef94 <do_barray_io>:


LOCAL(void)
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
 801ef94:	b590      	push	{r4, r7, lr}
 801ef96:	b08d      	sub	sp, #52	@ 0x34
 801ef98:	af02      	add	r7, sp, #8
 801ef9a:	60f8      	str	r0, [r7, #12]
 801ef9c:	60b9      	str	r1, [r7, #8]
 801ef9e:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801efa0:	68bb      	ldr	r3, [r7, #8]
 801efa2:	689b      	ldr	r3, [r3, #8]
 801efa4:	01db      	lsls	r3, r3, #7
 801efa6:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 801efa8:	68bb      	ldr	r3, [r7, #8]
 801efaa:	699b      	ldr	r3, [r3, #24]
 801efac:	69fa      	ldr	r2, [r7, #28]
 801efae:	fb02 f303 	mul.w	r3, r2, r3
 801efb2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801efb4:	2300      	movs	r3, #0
 801efb6:	623b      	str	r3, [r7, #32]
 801efb8:	e059      	b.n	801f06e <do_barray_io+0xda>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801efba:	68bb      	ldr	r3, [r7, #8]
 801efbc:	691b      	ldr	r3, [r3, #16]
 801efbe:	461a      	mov	r2, r3
 801efc0:	6a3b      	ldr	r3, [r7, #32]
 801efc2:	1ad3      	subs	r3, r2, r3
 801efc4:	68ba      	ldr	r2, [r7, #8]
 801efc6:	6952      	ldr	r2, [r2, #20]
 801efc8:	4293      	cmp	r3, r2
 801efca:	bfa8      	it	ge
 801efcc:	4613      	movge	r3, r2
 801efce:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 801efd0:	68bb      	ldr	r3, [r7, #8]
 801efd2:	699b      	ldr	r3, [r3, #24]
 801efd4:	461a      	mov	r2, r3
 801efd6:	6a3b      	ldr	r3, [r7, #32]
 801efd8:	4413      	add	r3, r2
 801efda:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801efdc:	68bb      	ldr	r3, [r7, #8]
 801efde:	69db      	ldr	r3, [r3, #28]
 801efe0:	461a      	mov	r2, r3
 801efe2:	697b      	ldr	r3, [r7, #20]
 801efe4:	1ad3      	subs	r3, r2, r3
 801efe6:	69ba      	ldr	r2, [r7, #24]
 801efe8:	4293      	cmp	r3, r2
 801efea:	bfa8      	it	ge
 801efec:	4613      	movge	r3, r2
 801efee:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801eff0:	68bb      	ldr	r3, [r7, #8]
 801eff2:	685b      	ldr	r3, [r3, #4]
 801eff4:	461a      	mov	r2, r3
 801eff6:	697b      	ldr	r3, [r7, #20]
 801eff8:	1ad3      	subs	r3, r2, r3
 801effa:	69ba      	ldr	r2, [r7, #24]
 801effc:	4293      	cmp	r3, r2
 801effe:	bfa8      	it	ge
 801f000:	4613      	movge	r3, r2
 801f002:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 801f004:	69bb      	ldr	r3, [r7, #24]
 801f006:	2b00      	cmp	r3, #0
 801f008:	dd38      	ble.n	801f07c <do_barray_io+0xe8>
      break;
    byte_count = rows * bytesperrow;
 801f00a:	69bb      	ldr	r3, [r7, #24]
 801f00c:	69fa      	ldr	r2, [r7, #28]
 801f00e:	fb02 f303 	mul.w	r3, r2, r3
 801f012:	613b      	str	r3, [r7, #16]
    if (writing)
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d010      	beq.n	801f03c <do_barray_io+0xa8>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801f01a:	68bb      	ldr	r3, [r7, #8]
 801f01c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801f01e:	68bb      	ldr	r3, [r7, #8]
 801f020:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					    (void FAR *) ptr->mem_buffer[i],
 801f024:	68bb      	ldr	r3, [r7, #8]
 801f026:	681a      	ldr	r2, [r3, #0]
 801f028:	6a3b      	ldr	r3, [r7, #32]
 801f02a:	009b      	lsls	r3, r3, #2
 801f02c:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801f02e:	681a      	ldr	r2, [r3, #0]
 801f030:	693b      	ldr	r3, [r7, #16]
 801f032:	9300      	str	r3, [sp, #0]
 801f034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f036:	68f8      	ldr	r0, [r7, #12]
 801f038:	47a0      	blx	r4
 801f03a:	e00f      	b.n	801f05c <do_barray_io+0xc8>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801f03c:	68bb      	ldr	r3, [r7, #8]
 801f03e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 801f040:	68bb      	ldr	r3, [r7, #8]
 801f042:	f103 0130 	add.w	r1, r3, #48	@ 0x30
					   (void FAR *) ptr->mem_buffer[i],
 801f046:	68bb      	ldr	r3, [r7, #8]
 801f048:	681a      	ldr	r2, [r3, #0]
 801f04a:	6a3b      	ldr	r3, [r7, #32]
 801f04c:	009b      	lsls	r3, r3, #2
 801f04e:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801f050:	681a      	ldr	r2, [r3, #0]
 801f052:	693b      	ldr	r3, [r7, #16]
 801f054:	9300      	str	r3, [sp, #0]
 801f056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f058:	68f8      	ldr	r0, [r7, #12]
 801f05a:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 801f05c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f05e:	693b      	ldr	r3, [r7, #16]
 801f060:	4413      	add	r3, r2
 801f062:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801f064:	68bb      	ldr	r3, [r7, #8]
 801f066:	695a      	ldr	r2, [r3, #20]
 801f068:	6a3b      	ldr	r3, [r7, #32]
 801f06a:	4413      	add	r3, r2
 801f06c:	623b      	str	r3, [r7, #32]
 801f06e:	68bb      	ldr	r3, [r7, #8]
 801f070:	691b      	ldr	r3, [r3, #16]
 801f072:	461a      	mov	r2, r3
 801f074:	6a3b      	ldr	r3, [r7, #32]
 801f076:	4293      	cmp	r3, r2
 801f078:	db9f      	blt.n	801efba <do_barray_io+0x26>
  }
}
 801f07a:	e000      	b.n	801f07e <do_barray_io+0xea>
      break;
 801f07c:	bf00      	nop
}
 801f07e:	bf00      	nop
 801f080:	372c      	adds	r7, #44	@ 0x2c
 801f082:	46bd      	mov	sp, r7
 801f084:	bd90      	pop	{r4, r7, pc}

0801f086 <access_virt_sarray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 801f086:	b580      	push	{r7, lr}
 801f088:	b088      	sub	sp, #32
 801f08a:	af00      	add	r7, sp, #0
 801f08c:	60f8      	str	r0, [r7, #12]
 801f08e:	60b9      	str	r1, [r7, #8]
 801f090:	607a      	str	r2, [r7, #4]
 801f092:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 801f094:	687a      	ldr	r2, [r7, #4]
 801f096:	683b      	ldr	r3, [r7, #0]
 801f098:	4413      	add	r3, r2
 801f09a:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801f09c:	68bb      	ldr	r3, [r7, #8]
 801f09e:	685b      	ldr	r3, [r3, #4]
 801f0a0:	697a      	ldr	r2, [r7, #20]
 801f0a2:	429a      	cmp	r2, r3
 801f0a4:	d808      	bhi.n	801f0b8 <access_virt_sarray+0x32>
 801f0a6:	68bb      	ldr	r3, [r7, #8]
 801f0a8:	68db      	ldr	r3, [r3, #12]
 801f0aa:	683a      	ldr	r2, [r7, #0]
 801f0ac:	429a      	cmp	r2, r3
 801f0ae:	d803      	bhi.n	801f0b8 <access_virt_sarray+0x32>
      ptr->mem_buffer == NULL)
 801f0b0:	68bb      	ldr	r3, [r7, #8]
 801f0b2:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	d108      	bne.n	801f0ca <access_virt_sarray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801f0b8:	68fb      	ldr	r3, [r7, #12]
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	2217      	movs	r2, #23
 801f0be:	615a      	str	r2, [r3, #20]
 801f0c0:	68fb      	ldr	r3, [r7, #12]
 801f0c2:	681b      	ldr	r3, [r3, #0]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	68f8      	ldr	r0, [r7, #12]
 801f0c8:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 801f0ca:	68bb      	ldr	r3, [r7, #8]
 801f0cc:	699b      	ldr	r3, [r3, #24]
 801f0ce:	687a      	ldr	r2, [r7, #4]
 801f0d0:	429a      	cmp	r2, r3
 801f0d2:	d307      	bcc.n	801f0e4 <access_virt_sarray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801f0d4:	68bb      	ldr	r3, [r7, #8]
 801f0d6:	699a      	ldr	r2, [r3, #24]
 801f0d8:	68bb      	ldr	r3, [r7, #8]
 801f0da:	691b      	ldr	r3, [r3, #16]
 801f0dc:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801f0de:	697a      	ldr	r2, [r7, #20]
 801f0e0:	429a      	cmp	r2, r3
 801f0e2:	d933      	bls.n	801f14c <access_virt_sarray+0xc6>
    if (! ptr->b_s_open)
 801f0e4:	68bb      	ldr	r3, [r7, #8]
 801f0e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d108      	bne.n	801f0fe <access_virt_sarray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801f0ec:	68fb      	ldr	r3, [r7, #12]
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	2247      	movs	r2, #71	@ 0x47
 801f0f2:	615a      	str	r2, [r3, #20]
 801f0f4:	68fb      	ldr	r3, [r7, #12]
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	68f8      	ldr	r0, [r7, #12]
 801f0fc:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 801f0fe:	68bb      	ldr	r3, [r7, #8]
 801f100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f102:	2b00      	cmp	r3, #0
 801f104:	d007      	beq.n	801f116 <access_virt_sarray+0x90>
      do_sarray_io(cinfo, ptr, TRUE);
 801f106:	2201      	movs	r2, #1
 801f108:	68b9      	ldr	r1, [r7, #8]
 801f10a:	68f8      	ldr	r0, [r7, #12]
 801f10c:	f7ff feca 	bl	801eea4 <do_sarray_io>
      ptr->dirty = FALSE;
 801f110:	68bb      	ldr	r3, [r7, #8]
 801f112:	2200      	movs	r2, #0
 801f114:	625a      	str	r2, [r3, #36]	@ 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 801f116:	68bb      	ldr	r3, [r7, #8]
 801f118:	699b      	ldr	r3, [r3, #24]
 801f11a:	687a      	ldr	r2, [r7, #4]
 801f11c:	429a      	cmp	r2, r3
 801f11e:	d903      	bls.n	801f128 <access_virt_sarray+0xa2>
      ptr->cur_start_row = start_row;
 801f120:	68bb      	ldr	r3, [r7, #8]
 801f122:	687a      	ldr	r2, [r7, #4]
 801f124:	619a      	str	r2, [r3, #24]
 801f126:	e00c      	b.n	801f142 <access_virt_sarray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801f128:	697b      	ldr	r3, [r7, #20]
 801f12a:	68ba      	ldr	r2, [r7, #8]
 801f12c:	6912      	ldr	r2, [r2, #16]
 801f12e:	1a9b      	subs	r3, r3, r2
 801f130:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 801f132:	69bb      	ldr	r3, [r7, #24]
 801f134:	2b00      	cmp	r3, #0
 801f136:	da01      	bge.n	801f13c <access_virt_sarray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 801f138:	2300      	movs	r3, #0
 801f13a:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 801f13c:	69ba      	ldr	r2, [r7, #24]
 801f13e:	68bb      	ldr	r3, [r7, #8]
 801f140:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_sarray_io(cinfo, ptr, FALSE);
 801f142:	2200      	movs	r2, #0
 801f144:	68b9      	ldr	r1, [r7, #8]
 801f146:	68f8      	ldr	r0, [r7, #12]
 801f148:	f7ff feac 	bl	801eea4 <do_sarray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 801f14c:	68bb      	ldr	r3, [r7, #8]
 801f14e:	69db      	ldr	r3, [r3, #28]
 801f150:	697a      	ldr	r2, [r7, #20]
 801f152:	429a      	cmp	r2, r3
 801f154:	d94d      	bls.n	801f1f2 <access_virt_sarray+0x16c>
    if (ptr->first_undef_row < start_row) {
 801f156:	68bb      	ldr	r3, [r7, #8]
 801f158:	69db      	ldr	r3, [r3, #28]
 801f15a:	687a      	ldr	r2, [r7, #4]
 801f15c:	429a      	cmp	r2, r3
 801f15e:	d90e      	bls.n	801f17e <access_virt_sarray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 801f160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f162:	2b00      	cmp	r3, #0
 801f164:	d008      	beq.n	801f178 <access_virt_sarray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801f166:	68fb      	ldr	r3, [r7, #12]
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	2217      	movs	r2, #23
 801f16c:	615a      	str	r2, [r3, #20]
 801f16e:	68fb      	ldr	r3, [r7, #12]
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	68f8      	ldr	r0, [r7, #12]
 801f176:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	61fb      	str	r3, [r7, #28]
 801f17c:	e002      	b.n	801f184 <access_virt_sarray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 801f17e:	68bb      	ldr	r3, [r7, #8]
 801f180:	69db      	ldr	r3, [r3, #28]
 801f182:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 801f184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f186:	2b00      	cmp	r3, #0
 801f188:	d002      	beq.n	801f190 <access_virt_sarray+0x10a>
      ptr->first_undef_row = end_row;
 801f18a:	68bb      	ldr	r3, [r7, #8]
 801f18c:	697a      	ldr	r2, [r7, #20]
 801f18e:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 801f190:	68bb      	ldr	r3, [r7, #8]
 801f192:	6a1b      	ldr	r3, [r3, #32]
 801f194:	2b00      	cmp	r3, #0
 801f196:	d020      	beq.n	801f1da <access_virt_sarray+0x154>
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801f198:	68bb      	ldr	r3, [r7, #8]
 801f19a:	689b      	ldr	r3, [r3, #8]
 801f19c:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801f19e:	68bb      	ldr	r3, [r7, #8]
 801f1a0:	699b      	ldr	r3, [r3, #24]
 801f1a2:	69fa      	ldr	r2, [r7, #28]
 801f1a4:	1ad3      	subs	r3, r2, r3
 801f1a6:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 801f1a8:	68bb      	ldr	r3, [r7, #8]
 801f1aa:	699b      	ldr	r3, [r3, #24]
 801f1ac:	697a      	ldr	r2, [r7, #20]
 801f1ae:	1ad3      	subs	r3, r2, r3
 801f1b0:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 801f1b2:	e00d      	b.n	801f1d0 <access_virt_sarray+0x14a>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801f1b4:	68bb      	ldr	r3, [r7, #8]
 801f1b6:	681a      	ldr	r2, [r3, #0]
 801f1b8:	69fb      	ldr	r3, [r7, #28]
 801f1ba:	009b      	lsls	r3, r3, #2
 801f1bc:	4413      	add	r3, r2
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	693a      	ldr	r2, [r7, #16]
 801f1c2:	2100      	movs	r1, #0
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	f002 fec3 	bl	8021f50 <memset>
	undef_row++;
 801f1ca:	69fb      	ldr	r3, [r7, #28]
 801f1cc:	3301      	adds	r3, #1
 801f1ce:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 801f1d0:	69fa      	ldr	r2, [r7, #28]
 801f1d2:	697b      	ldr	r3, [r7, #20]
 801f1d4:	429a      	cmp	r2, r3
 801f1d6:	d3ed      	bcc.n	801f1b4 <access_virt_sarray+0x12e>
 801f1d8:	e00b      	b.n	801f1f2 <access_virt_sarray+0x16c>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 801f1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d108      	bne.n	801f1f2 <access_virt_sarray+0x16c>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	2217      	movs	r2, #23
 801f1e6:	615a      	str	r2, [r3, #20]
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	68f8      	ldr	r0, [r7, #12]
 801f1f0:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 801f1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d002      	beq.n	801f1fe <access_virt_sarray+0x178>
    ptr->dirty = TRUE;
 801f1f8:	68bb      	ldr	r3, [r7, #8]
 801f1fa:	2201      	movs	r2, #1
 801f1fc:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801f1fe:	68bb      	ldr	r3, [r7, #8]
 801f200:	681a      	ldr	r2, [r3, #0]
 801f202:	68bb      	ldr	r3, [r7, #8]
 801f204:	699b      	ldr	r3, [r3, #24]
 801f206:	6879      	ldr	r1, [r7, #4]
 801f208:	1acb      	subs	r3, r1, r3
 801f20a:	009b      	lsls	r3, r3, #2
 801f20c:	4413      	add	r3, r2
}
 801f20e:	4618      	mov	r0, r3
 801f210:	3720      	adds	r7, #32
 801f212:	46bd      	mov	sp, r7
 801f214:	bd80      	pop	{r7, pc}

0801f216 <access_virt_barray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 801f216:	b580      	push	{r7, lr}
 801f218:	b088      	sub	sp, #32
 801f21a:	af00      	add	r7, sp, #0
 801f21c:	60f8      	str	r0, [r7, #12]
 801f21e:	60b9      	str	r1, [r7, #8]
 801f220:	607a      	str	r2, [r7, #4]
 801f222:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 801f224:	687a      	ldr	r2, [r7, #4]
 801f226:	683b      	ldr	r3, [r7, #0]
 801f228:	4413      	add	r3, r2
 801f22a:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801f22c:	68bb      	ldr	r3, [r7, #8]
 801f22e:	685b      	ldr	r3, [r3, #4]
 801f230:	697a      	ldr	r2, [r7, #20]
 801f232:	429a      	cmp	r2, r3
 801f234:	d808      	bhi.n	801f248 <access_virt_barray+0x32>
 801f236:	68bb      	ldr	r3, [r7, #8]
 801f238:	68db      	ldr	r3, [r3, #12]
 801f23a:	683a      	ldr	r2, [r7, #0]
 801f23c:	429a      	cmp	r2, r3
 801f23e:	d803      	bhi.n	801f248 <access_virt_barray+0x32>
      ptr->mem_buffer == NULL)
 801f240:	68bb      	ldr	r3, [r7, #8]
 801f242:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801f244:	2b00      	cmp	r3, #0
 801f246:	d108      	bne.n	801f25a <access_virt_barray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801f248:	68fb      	ldr	r3, [r7, #12]
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	2217      	movs	r2, #23
 801f24e:	615a      	str	r2, [r3, #20]
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	68f8      	ldr	r0, [r7, #12]
 801f258:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 801f25a:	68bb      	ldr	r3, [r7, #8]
 801f25c:	699b      	ldr	r3, [r3, #24]
 801f25e:	687a      	ldr	r2, [r7, #4]
 801f260:	429a      	cmp	r2, r3
 801f262:	d307      	bcc.n	801f274 <access_virt_barray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801f264:	68bb      	ldr	r3, [r7, #8]
 801f266:	699a      	ldr	r2, [r3, #24]
 801f268:	68bb      	ldr	r3, [r7, #8]
 801f26a:	691b      	ldr	r3, [r3, #16]
 801f26c:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801f26e:	697a      	ldr	r2, [r7, #20]
 801f270:	429a      	cmp	r2, r3
 801f272:	d933      	bls.n	801f2dc <access_virt_barray+0xc6>
    if (! ptr->b_s_open)
 801f274:	68bb      	ldr	r3, [r7, #8]
 801f276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d108      	bne.n	801f28e <access_virt_barray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801f27c:	68fb      	ldr	r3, [r7, #12]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	2247      	movs	r2, #71	@ 0x47
 801f282:	615a      	str	r2, [r3, #20]
 801f284:	68fb      	ldr	r3, [r7, #12]
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	68f8      	ldr	r0, [r7, #12]
 801f28c:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 801f28e:	68bb      	ldr	r3, [r7, #8]
 801f290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f292:	2b00      	cmp	r3, #0
 801f294:	d007      	beq.n	801f2a6 <access_virt_barray+0x90>
      do_barray_io(cinfo, ptr, TRUE);
 801f296:	2201      	movs	r2, #1
 801f298:	68b9      	ldr	r1, [r7, #8]
 801f29a:	68f8      	ldr	r0, [r7, #12]
 801f29c:	f7ff fe7a 	bl	801ef94 <do_barray_io>
      ptr->dirty = FALSE;
 801f2a0:	68bb      	ldr	r3, [r7, #8]
 801f2a2:	2200      	movs	r2, #0
 801f2a4:	625a      	str	r2, [r3, #36]	@ 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 801f2a6:	68bb      	ldr	r3, [r7, #8]
 801f2a8:	699b      	ldr	r3, [r3, #24]
 801f2aa:	687a      	ldr	r2, [r7, #4]
 801f2ac:	429a      	cmp	r2, r3
 801f2ae:	d903      	bls.n	801f2b8 <access_virt_barray+0xa2>
      ptr->cur_start_row = start_row;
 801f2b0:	68bb      	ldr	r3, [r7, #8]
 801f2b2:	687a      	ldr	r2, [r7, #4]
 801f2b4:	619a      	str	r2, [r3, #24]
 801f2b6:	e00c      	b.n	801f2d2 <access_virt_barray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801f2b8:	697b      	ldr	r3, [r7, #20]
 801f2ba:	68ba      	ldr	r2, [r7, #8]
 801f2bc:	6912      	ldr	r2, [r2, #16]
 801f2be:	1a9b      	subs	r3, r3, r2
 801f2c0:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 801f2c2:	69bb      	ldr	r3, [r7, #24]
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	da01      	bge.n	801f2cc <access_virt_barray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 801f2c8:	2300      	movs	r3, #0
 801f2ca:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 801f2cc:	69ba      	ldr	r2, [r7, #24]
 801f2ce:	68bb      	ldr	r3, [r7, #8]
 801f2d0:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_barray_io(cinfo, ptr, FALSE);
 801f2d2:	2200      	movs	r2, #0
 801f2d4:	68b9      	ldr	r1, [r7, #8]
 801f2d6:	68f8      	ldr	r0, [r7, #12]
 801f2d8:	f7ff fe5c 	bl	801ef94 <do_barray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 801f2dc:	68bb      	ldr	r3, [r7, #8]
 801f2de:	69db      	ldr	r3, [r3, #28]
 801f2e0:	697a      	ldr	r2, [r7, #20]
 801f2e2:	429a      	cmp	r2, r3
 801f2e4:	d94e      	bls.n	801f384 <access_virt_barray+0x16e>
    if (ptr->first_undef_row < start_row) {
 801f2e6:	68bb      	ldr	r3, [r7, #8]
 801f2e8:	69db      	ldr	r3, [r3, #28]
 801f2ea:	687a      	ldr	r2, [r7, #4]
 801f2ec:	429a      	cmp	r2, r3
 801f2ee:	d90e      	bls.n	801f30e <access_virt_barray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 801f2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d008      	beq.n	801f308 <access_virt_barray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	681b      	ldr	r3, [r3, #0]
 801f2fa:	2217      	movs	r2, #23
 801f2fc:	615a      	str	r2, [r3, #20]
 801f2fe:	68fb      	ldr	r3, [r7, #12]
 801f300:	681b      	ldr	r3, [r3, #0]
 801f302:	681b      	ldr	r3, [r3, #0]
 801f304:	68f8      	ldr	r0, [r7, #12]
 801f306:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	61fb      	str	r3, [r7, #28]
 801f30c:	e002      	b.n	801f314 <access_virt_barray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 801f30e:	68bb      	ldr	r3, [r7, #8]
 801f310:	69db      	ldr	r3, [r3, #28]
 801f312:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 801f314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f316:	2b00      	cmp	r3, #0
 801f318:	d002      	beq.n	801f320 <access_virt_barray+0x10a>
      ptr->first_undef_row = end_row;
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	697a      	ldr	r2, [r7, #20]
 801f31e:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 801f320:	68bb      	ldr	r3, [r7, #8]
 801f322:	6a1b      	ldr	r3, [r3, #32]
 801f324:	2b00      	cmp	r3, #0
 801f326:	d021      	beq.n	801f36c <access_virt_barray+0x156>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801f328:	68bb      	ldr	r3, [r7, #8]
 801f32a:	689b      	ldr	r3, [r3, #8]
 801f32c:	01db      	lsls	r3, r3, #7
 801f32e:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801f330:	68bb      	ldr	r3, [r7, #8]
 801f332:	699b      	ldr	r3, [r3, #24]
 801f334:	69fa      	ldr	r2, [r7, #28]
 801f336:	1ad3      	subs	r3, r2, r3
 801f338:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 801f33a:	68bb      	ldr	r3, [r7, #8]
 801f33c:	699b      	ldr	r3, [r3, #24]
 801f33e:	697a      	ldr	r2, [r7, #20]
 801f340:	1ad3      	subs	r3, r2, r3
 801f342:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 801f344:	e00d      	b.n	801f362 <access_virt_barray+0x14c>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801f346:	68bb      	ldr	r3, [r7, #8]
 801f348:	681a      	ldr	r2, [r3, #0]
 801f34a:	69fb      	ldr	r3, [r7, #28]
 801f34c:	009b      	lsls	r3, r3, #2
 801f34e:	4413      	add	r3, r2
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	693a      	ldr	r2, [r7, #16]
 801f354:	2100      	movs	r1, #0
 801f356:	4618      	mov	r0, r3
 801f358:	f002 fdfa 	bl	8021f50 <memset>
	undef_row++;
 801f35c:	69fb      	ldr	r3, [r7, #28]
 801f35e:	3301      	adds	r3, #1
 801f360:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 801f362:	69fa      	ldr	r2, [r7, #28]
 801f364:	697b      	ldr	r3, [r7, #20]
 801f366:	429a      	cmp	r2, r3
 801f368:	d3ed      	bcc.n	801f346 <access_virt_barray+0x130>
 801f36a:	e00b      	b.n	801f384 <access_virt_barray+0x16e>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 801f36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f36e:	2b00      	cmp	r3, #0
 801f370:	d108      	bne.n	801f384 <access_virt_barray+0x16e>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	681b      	ldr	r3, [r3, #0]
 801f376:	2217      	movs	r2, #23
 801f378:	615a      	str	r2, [r3, #20]
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	68f8      	ldr	r0, [r7, #12]
 801f382:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 801f384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f386:	2b00      	cmp	r3, #0
 801f388:	d002      	beq.n	801f390 <access_virt_barray+0x17a>
    ptr->dirty = TRUE;
 801f38a:	68bb      	ldr	r3, [r7, #8]
 801f38c:	2201      	movs	r2, #1
 801f38e:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801f390:	68bb      	ldr	r3, [r7, #8]
 801f392:	681a      	ldr	r2, [r3, #0]
 801f394:	68bb      	ldr	r3, [r7, #8]
 801f396:	699b      	ldr	r3, [r3, #24]
 801f398:	6879      	ldr	r1, [r7, #4]
 801f39a:	1acb      	subs	r3, r1, r3
 801f39c:	009b      	lsls	r3, r3, #2
 801f39e:	4413      	add	r3, r2
}
 801f3a0:	4618      	mov	r0, r3
 801f3a2:	3720      	adds	r7, #32
 801f3a4:	46bd      	mov	sp, r7
 801f3a6:	bd80      	pop	{r7, pc}

0801f3a8 <free_pool>:
 * Release all objects belonging to a specified pool.
 */

METHODDEF(void)
free_pool (j_common_ptr cinfo, int pool_id)
{
 801f3a8:	b580      	push	{r7, lr}
 801f3aa:	b08a      	sub	sp, #40	@ 0x28
 801f3ac:	af00      	add	r7, sp, #0
 801f3ae:	6078      	str	r0, [r7, #4]
 801f3b0:	6039      	str	r1, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801f3b2:	687b      	ldr	r3, [r7, #4]
 801f3b4:	685b      	ldr	r3, [r3, #4]
 801f3b6:	617b      	str	r3, [r7, #20]
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801f3b8:	683b      	ldr	r3, [r7, #0]
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	db02      	blt.n	801f3c4 <free_pool+0x1c>
 801f3be:	683b      	ldr	r3, [r7, #0]
 801f3c0:	2b01      	cmp	r3, #1
 801f3c2:	dd0c      	ble.n	801f3de <free_pool+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	220f      	movs	r2, #15
 801f3ca:	615a      	str	r2, [r3, #20]
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	683a      	ldr	r2, [r7, #0]
 801f3d2:	619a      	str	r2, [r3, #24]
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	6878      	ldr	r0, [r7, #4]
 801f3dc:	4798      	blx	r3
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
 801f3de:	683b      	ldr	r3, [r7, #0]
 801f3e0:	2b01      	cmp	r3, #1
 801f3e2:	d135      	bne.n	801f450 <free_pool+0xa8>
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801f3e4:	697b      	ldr	r3, [r7, #20]
 801f3e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f3e8:	61fb      	str	r3, [r7, #28]
 801f3ea:	e010      	b.n	801f40e <free_pool+0x66>
      if (sptr->b_s_open) {	/* there may be no backing store */
 801f3ec:	69fb      	ldr	r3, [r7, #28]
 801f3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	d009      	beq.n	801f408 <free_pool+0x60>
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 801f3f4:	69fb      	ldr	r3, [r7, #28]
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	629a      	str	r2, [r3, #40]	@ 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 801f3fa:	69fb      	ldr	r3, [r7, #28]
 801f3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f3fe:	69fa      	ldr	r2, [r7, #28]
 801f400:	3230      	adds	r2, #48	@ 0x30
 801f402:	4611      	mov	r1, r2
 801f404:	6878      	ldr	r0, [r7, #4]
 801f406:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801f408:	69fb      	ldr	r3, [r7, #28]
 801f40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f40c:	61fb      	str	r3, [r7, #28]
 801f40e:	69fb      	ldr	r3, [r7, #28]
 801f410:	2b00      	cmp	r3, #0
 801f412:	d1eb      	bne.n	801f3ec <free_pool+0x44>
      }
    }
    mem->virt_sarray_list = NULL;
 801f414:	697b      	ldr	r3, [r7, #20]
 801f416:	2200      	movs	r2, #0
 801f418:	645a      	str	r2, [r3, #68]	@ 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801f41a:	697b      	ldr	r3, [r7, #20]
 801f41c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f41e:	61bb      	str	r3, [r7, #24]
 801f420:	e010      	b.n	801f444 <free_pool+0x9c>
      if (bptr->b_s_open) {	/* there may be no backing store */
 801f422:	69bb      	ldr	r3, [r7, #24]
 801f424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f426:	2b00      	cmp	r3, #0
 801f428:	d009      	beq.n	801f43e <free_pool+0x96>
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 801f42a:	69bb      	ldr	r3, [r7, #24]
 801f42c:	2200      	movs	r2, #0
 801f42e:	629a      	str	r2, [r3, #40]	@ 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 801f430:	69bb      	ldr	r3, [r7, #24]
 801f432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f434:	69ba      	ldr	r2, [r7, #24]
 801f436:	3230      	adds	r2, #48	@ 0x30
 801f438:	4611      	mov	r1, r2
 801f43a:	6878      	ldr	r0, [r7, #4]
 801f43c:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801f43e:	69bb      	ldr	r3, [r7, #24]
 801f440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f442:	61bb      	str	r3, [r7, #24]
 801f444:	69bb      	ldr	r3, [r7, #24]
 801f446:	2b00      	cmp	r3, #0
 801f448:	d1eb      	bne.n	801f422 <free_pool+0x7a>
      }
    }
    mem->virt_barray_list = NULL;
 801f44a:	697b      	ldr	r3, [r7, #20]
 801f44c:	2200      	movs	r2, #0
 801f44e:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 801f450:	697a      	ldr	r2, [r7, #20]
 801f452:	683b      	ldr	r3, [r7, #0]
 801f454:	330e      	adds	r3, #14
 801f456:	009b      	lsls	r3, r3, #2
 801f458:	4413      	add	r3, r2
 801f45a:	685b      	ldr	r3, [r3, #4]
 801f45c:	623b      	str	r3, [r7, #32]
  mem->large_list[pool_id] = NULL;
 801f45e:	697a      	ldr	r2, [r7, #20]
 801f460:	683b      	ldr	r3, [r7, #0]
 801f462:	330e      	adds	r3, #14
 801f464:	009b      	lsls	r3, r3, #2
 801f466:	4413      	add	r3, r2
 801f468:	2200      	movs	r2, #0
 801f46a:	605a      	str	r2, [r3, #4]

  while (lhdr_ptr != NULL) {
 801f46c:	e018      	b.n	801f4a0 <free_pool+0xf8>
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 801f46e:	6a3b      	ldr	r3, [r7, #32]
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	60bb      	str	r3, [r7, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 801f474:	6a3b      	ldr	r3, [r7, #32]
 801f476:	685a      	ldr	r2, [r3, #4]
		  lhdr_ptr->hdr.bytes_left +
 801f478:	6a3b      	ldr	r3, [r7, #32]
 801f47a:	689b      	ldr	r3, [r3, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 801f47c:	4413      	add	r3, r2
 801f47e:	3310      	adds	r3, #16
 801f480:	60fb      	str	r3, [r7, #12]
		  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 801f482:	68fa      	ldr	r2, [r7, #12]
 801f484:	6a39      	ldr	r1, [r7, #32]
 801f486:	6878      	ldr	r0, [r7, #4]
 801f488:	f000 f91f 	bl	801f6ca <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 801f48c:	697b      	ldr	r3, [r7, #20]
 801f48e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f490:	461a      	mov	r2, r3
 801f492:	68fb      	ldr	r3, [r7, #12]
 801f494:	1ad3      	subs	r3, r2, r3
 801f496:	461a      	mov	r2, r3
 801f498:	697b      	ldr	r3, [r7, #20]
 801f49a:	64da      	str	r2, [r3, #76]	@ 0x4c
    lhdr_ptr = next_lhdr_ptr;
 801f49c:	68bb      	ldr	r3, [r7, #8]
 801f49e:	623b      	str	r3, [r7, #32]
  while (lhdr_ptr != NULL) {
 801f4a0:	6a3b      	ldr	r3, [r7, #32]
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d1e3      	bne.n	801f46e <free_pool+0xc6>
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 801f4a6:	697a      	ldr	r2, [r7, #20]
 801f4a8:	683b      	ldr	r3, [r7, #0]
 801f4aa:	330c      	adds	r3, #12
 801f4ac:	009b      	lsls	r3, r3, #2
 801f4ae:	4413      	add	r3, r2
 801f4b0:	685b      	ldr	r3, [r3, #4]
 801f4b2:	627b      	str	r3, [r7, #36]	@ 0x24
  mem->small_list[pool_id] = NULL;
 801f4b4:	697a      	ldr	r2, [r7, #20]
 801f4b6:	683b      	ldr	r3, [r7, #0]
 801f4b8:	330c      	adds	r3, #12
 801f4ba:	009b      	lsls	r3, r3, #2
 801f4bc:	4413      	add	r3, r2
 801f4be:	2200      	movs	r2, #0
 801f4c0:	605a      	str	r2, [r3, #4]

  while (shdr_ptr != NULL) {
 801f4c2:	e018      	b.n	801f4f6 <free_pool+0x14e>
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 801f4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	613b      	str	r3, [r7, #16]
    space_freed = shdr_ptr->hdr.bytes_used +
 801f4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4cc:	685a      	ldr	r2, [r3, #4]
		  shdr_ptr->hdr.bytes_left +
 801f4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4d0:	689b      	ldr	r3, [r3, #8]
    space_freed = shdr_ptr->hdr.bytes_used +
 801f4d2:	4413      	add	r3, r2
 801f4d4:	3310      	adds	r3, #16
 801f4d6:	60fb      	str	r3, [r7, #12]
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801f4d8:	68fa      	ldr	r2, [r7, #12]
 801f4da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f4dc:	6878      	ldr	r0, [r7, #4]
 801f4de:	f000 f8da 	bl	801f696 <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801f4e2:	697b      	ldr	r3, [r7, #20]
 801f4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f4e6:	461a      	mov	r2, r3
 801f4e8:	68fb      	ldr	r3, [r7, #12]
 801f4ea:	1ad3      	subs	r3, r2, r3
 801f4ec:	461a      	mov	r2, r3
 801f4ee:	697b      	ldr	r3, [r7, #20]
 801f4f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    shdr_ptr = next_shdr_ptr;
 801f4f2:	693b      	ldr	r3, [r7, #16]
 801f4f4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (shdr_ptr != NULL) {
 801f4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d1e3      	bne.n	801f4c4 <free_pool+0x11c>
  }
}
 801f4fc:	bf00      	nop
 801f4fe:	bf00      	nop
 801f500:	3728      	adds	r7, #40	@ 0x28
 801f502:	46bd      	mov	sp, r7
 801f504:	bd80      	pop	{r7, pc}

0801f506 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 801f506:	b580      	push	{r7, lr}
 801f508:	b084      	sub	sp, #16
 801f50a:	af00      	add	r7, sp, #0
 801f50c:	6078      	str	r0, [r7, #4]

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801f50e:	2301      	movs	r3, #1
 801f510:	60fb      	str	r3, [r7, #12]
 801f512:	e006      	b.n	801f522 <self_destruct+0x1c>
    free_pool(cinfo, pool);
 801f514:	68f9      	ldr	r1, [r7, #12]
 801f516:	6878      	ldr	r0, [r7, #4]
 801f518:	f7ff ff46 	bl	801f3a8 <free_pool>
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801f51c:	68fb      	ldr	r3, [r7, #12]
 801f51e:	3b01      	subs	r3, #1
 801f520:	60fb      	str	r3, [r7, #12]
 801f522:	68fb      	ldr	r3, [r7, #12]
 801f524:	2b00      	cmp	r3, #0
 801f526:	daf5      	bge.n	801f514 <self_destruct+0xe>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	685b      	ldr	r3, [r3, #4]
 801f52c:	2254      	movs	r2, #84	@ 0x54
 801f52e:	4619      	mov	r1, r3
 801f530:	6878      	ldr	r0, [r7, #4]
 801f532:	f000 f8b0 	bl	801f696 <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	2200      	movs	r2, #0
 801f53a:	605a      	str	r2, [r3, #4]

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 801f53c:	6878      	ldr	r0, [r7, #4]
 801f53e:	f000 f8fd 	bl	801f73c <jpeg_mem_term>
}
 801f542:	bf00      	nop
 801f544:	3710      	adds	r7, #16
 801f546:	46bd      	mov	sp, r7
 801f548:	bd80      	pop	{r7, pc}
	...

0801f54c <jinit_memory_mgr>:
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL(void)
jinit_memory_mgr (j_common_ptr cinfo)
{
 801f54c:	b580      	push	{r7, lr}
 801f54e:	b086      	sub	sp, #24
 801f550:	af00      	add	r7, sp, #0
 801f552:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	2200      	movs	r2, #0
 801f558:	605a      	str	r2, [r3, #4]
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
 801f55a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801f55e:	613b      	str	r3, [r7, #16]
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
 801f560:	693b      	ldr	r3, [r7, #16]
 801f562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f566:	d008      	beq.n	801f57a <jinit_memory_mgr+0x2e>
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	2202      	movs	r2, #2
 801f56e:	615a      	str	r2, [r3, #20]
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	6878      	ldr	r0, [r7, #4]
 801f578:	4798      	blx	r3

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801f57a:	6878      	ldr	r0, [r7, #4]
 801f57c:	f000 f8d3 	bl	801f726 <jpeg_mem_init>
 801f580:	60f8      	str	r0, [r7, #12]

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 801f582:	2154      	movs	r1, #84	@ 0x54
 801f584:	6878      	ldr	r0, [r7, #4]
 801f586:	f000 f879 	bl	801f67c <jpeg_get_small>
 801f58a:	60b8      	str	r0, [r7, #8]

  if (mem == NULL) {
 801f58c:	68bb      	ldr	r3, [r7, #8]
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d10f      	bne.n	801f5b2 <jinit_memory_mgr+0x66>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801f592:	6878      	ldr	r0, [r7, #4]
 801f594:	f000 f8d2 	bl	801f73c <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 801f598:	687b      	ldr	r3, [r7, #4]
 801f59a:	681b      	ldr	r3, [r3, #0]
 801f59c:	2238      	movs	r2, #56	@ 0x38
 801f59e:	615a      	str	r2, [r3, #20]
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	2200      	movs	r2, #0
 801f5a6:	619a      	str	r2, [r3, #24]
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	6878      	ldr	r0, [r7, #4]
 801f5b0:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 801f5b2:	68bb      	ldr	r3, [r7, #8]
 801f5b4:	4a26      	ldr	r2, [pc, #152]	@ (801f650 <jinit_memory_mgr+0x104>)
 801f5b6:	601a      	str	r2, [r3, #0]
  mem->pub.alloc_large = alloc_large;
 801f5b8:	68bb      	ldr	r3, [r7, #8]
 801f5ba:	4a26      	ldr	r2, [pc, #152]	@ (801f654 <jinit_memory_mgr+0x108>)
 801f5bc:	605a      	str	r2, [r3, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801f5be:	68bb      	ldr	r3, [r7, #8]
 801f5c0:	4a25      	ldr	r2, [pc, #148]	@ (801f658 <jinit_memory_mgr+0x10c>)
 801f5c2:	609a      	str	r2, [r3, #8]
  mem->pub.alloc_barray = alloc_barray;
 801f5c4:	68bb      	ldr	r3, [r7, #8]
 801f5c6:	4a25      	ldr	r2, [pc, #148]	@ (801f65c <jinit_memory_mgr+0x110>)
 801f5c8:	60da      	str	r2, [r3, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 801f5ca:	68bb      	ldr	r3, [r7, #8]
 801f5cc:	4a24      	ldr	r2, [pc, #144]	@ (801f660 <jinit_memory_mgr+0x114>)
 801f5ce:	611a      	str	r2, [r3, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 801f5d0:	68bb      	ldr	r3, [r7, #8]
 801f5d2:	4a24      	ldr	r2, [pc, #144]	@ (801f664 <jinit_memory_mgr+0x118>)
 801f5d4:	615a      	str	r2, [r3, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801f5d6:	68bb      	ldr	r3, [r7, #8]
 801f5d8:	4a23      	ldr	r2, [pc, #140]	@ (801f668 <jinit_memory_mgr+0x11c>)
 801f5da:	619a      	str	r2, [r3, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801f5dc:	68bb      	ldr	r3, [r7, #8]
 801f5de:	4a23      	ldr	r2, [pc, #140]	@ (801f66c <jinit_memory_mgr+0x120>)
 801f5e0:	61da      	str	r2, [r3, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 801f5e2:	68bb      	ldr	r3, [r7, #8]
 801f5e4:	4a22      	ldr	r2, [pc, #136]	@ (801f670 <jinit_memory_mgr+0x124>)
 801f5e6:	621a      	str	r2, [r3, #32]
  mem->pub.free_pool = free_pool;
 801f5e8:	68bb      	ldr	r3, [r7, #8]
 801f5ea:	4a22      	ldr	r2, [pc, #136]	@ (801f674 <jinit_memory_mgr+0x128>)
 801f5ec:	625a      	str	r2, [r3, #36]	@ 0x24
  mem->pub.self_destruct = self_destruct;
 801f5ee:	68bb      	ldr	r3, [r7, #8]
 801f5f0:	4a21      	ldr	r2, [pc, #132]	@ (801f678 <jinit_memory_mgr+0x12c>)
 801f5f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 801f5f4:	68bb      	ldr	r3, [r7, #8]
 801f5f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801f5fa:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 801f5fc:	68bb      	ldr	r3, [r7, #8]
 801f5fe:	68fa      	ldr	r2, [r7, #12]
 801f600:	62da      	str	r2, [r3, #44]	@ 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801f602:	2301      	movs	r3, #1
 801f604:	617b      	str	r3, [r7, #20]
 801f606:	e010      	b.n	801f62a <jinit_memory_mgr+0xde>
    mem->small_list[pool] = NULL;
 801f608:	68ba      	ldr	r2, [r7, #8]
 801f60a:	697b      	ldr	r3, [r7, #20]
 801f60c:	330c      	adds	r3, #12
 801f60e:	009b      	lsls	r3, r3, #2
 801f610:	4413      	add	r3, r2
 801f612:	2200      	movs	r2, #0
 801f614:	605a      	str	r2, [r3, #4]
    mem->large_list[pool] = NULL;
 801f616:	68ba      	ldr	r2, [r7, #8]
 801f618:	697b      	ldr	r3, [r7, #20]
 801f61a:	330e      	adds	r3, #14
 801f61c:	009b      	lsls	r3, r3, #2
 801f61e:	4413      	add	r3, r2
 801f620:	2200      	movs	r2, #0
 801f622:	605a      	str	r2, [r3, #4]
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801f624:	697b      	ldr	r3, [r7, #20]
 801f626:	3b01      	subs	r3, #1
 801f628:	617b      	str	r3, [r7, #20]
 801f62a:	697b      	ldr	r3, [r7, #20]
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	daeb      	bge.n	801f608 <jinit_memory_mgr+0xbc>
  }
  mem->virt_sarray_list = NULL;
 801f630:	68bb      	ldr	r3, [r7, #8]
 801f632:	2200      	movs	r2, #0
 801f634:	645a      	str	r2, [r3, #68]	@ 0x44
  mem->virt_barray_list = NULL;
 801f636:	68bb      	ldr	r3, [r7, #8]
 801f638:	2200      	movs	r2, #0
 801f63a:	649a      	str	r2, [r3, #72]	@ 0x48

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 801f63c:	68bb      	ldr	r3, [r7, #8]
 801f63e:	2254      	movs	r2, #84	@ 0x54
 801f640:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 801f642:	68ba      	ldr	r2, [r7, #8]
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	605a      	str	r2, [r3, #4]
      }
    }
  }
#endif

}
 801f648:	bf00      	nop
 801f64a:	3718      	adds	r7, #24
 801f64c:	46bd      	mov	sp, r7
 801f64e:	bd80      	pop	{r7, pc}
 801f650:	0801e7a1 	.word	0x0801e7a1
 801f654:	0801e921 	.word	0x0801e921
 801f658:	0801e9e7 	.word	0x0801e9e7
 801f65c:	0801eaad 	.word	0x0801eaad
 801f660:	0801eb79 	.word	0x0801eb79
 801f664:	0801ebf5 	.word	0x0801ebf5
 801f668:	0801ec71 	.word	0x0801ec71
 801f66c:	0801f087 	.word	0x0801f087
 801f670:	0801f217 	.word	0x0801f217
 801f674:	0801f3a9 	.word	0x0801f3a9
 801f678:	0801f507 	.word	0x0801f507

0801f67c <jpeg_get_small>:
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
 801f67c:	b580      	push	{r7, lr}
 801f67e:	b082      	sub	sp, #8
 801f680:	af00      	add	r7, sp, #0
 801f682:	6078      	str	r0, [r7, #4]
 801f684:	6039      	str	r1, [r7, #0]
  return (void *) JMALLOC(sizeofobject);
 801f686:	6838      	ldr	r0, [r7, #0]
 801f688:	f002 fb84 	bl	8021d94 <malloc>
 801f68c:	4603      	mov	r3, r0
}
 801f68e:	4618      	mov	r0, r3
 801f690:	3708      	adds	r7, #8
 801f692:	46bd      	mov	sp, r7
 801f694:	bd80      	pop	{r7, pc}

0801f696 <jpeg_free_small>:

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
 801f696:	b580      	push	{r7, lr}
 801f698:	b084      	sub	sp, #16
 801f69a:	af00      	add	r7, sp, #0
 801f69c:	60f8      	str	r0, [r7, #12]
 801f69e:	60b9      	str	r1, [r7, #8]
 801f6a0:	607a      	str	r2, [r7, #4]
  JFREE(object);
 801f6a2:	68b8      	ldr	r0, [r7, #8]
 801f6a4:	f002 fb7e 	bl	8021da4 <free>
}
 801f6a8:	bf00      	nop
 801f6aa:	3710      	adds	r7, #16
 801f6ac:	46bd      	mov	sp, r7
 801f6ae:	bd80      	pop	{r7, pc}

0801f6b0 <jpeg_get_large>:
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
 801f6b0:	b580      	push	{r7, lr}
 801f6b2:	b082      	sub	sp, #8
 801f6b4:	af00      	add	r7, sp, #0
 801f6b6:	6078      	str	r0, [r7, #4]
 801f6b8:	6039      	str	r1, [r7, #0]
  return (void FAR *) JMALLOC(sizeofobject);
 801f6ba:	6838      	ldr	r0, [r7, #0]
 801f6bc:	f002 fb6a 	bl	8021d94 <malloc>
 801f6c0:	4603      	mov	r3, r0
}
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	3708      	adds	r7, #8
 801f6c6:	46bd      	mov	sp, r7
 801f6c8:	bd80      	pop	{r7, pc}

0801f6ca <jpeg_free_large>:

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
 801f6ca:	b580      	push	{r7, lr}
 801f6cc:	b084      	sub	sp, #16
 801f6ce:	af00      	add	r7, sp, #0
 801f6d0:	60f8      	str	r0, [r7, #12]
 801f6d2:	60b9      	str	r1, [r7, #8]
 801f6d4:	607a      	str	r2, [r7, #4]
  JFREE(object);
 801f6d6:	68b8      	ldr	r0, [r7, #8]
 801f6d8:	f002 fb64 	bl	8021da4 <free>
}
 801f6dc:	bf00      	nop
 801f6de:	3710      	adds	r7, #16
 801f6e0:	46bd      	mov	sp, r7
 801f6e2:	bd80      	pop	{r7, pc}

0801f6e4 <jpeg_mem_available>:
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
 801f6e4:	b480      	push	{r7}
 801f6e6:	b085      	sub	sp, #20
 801f6e8:	af00      	add	r7, sp, #0
 801f6ea:	60f8      	str	r0, [r7, #12]
 801f6ec:	60b9      	str	r1, [r7, #8]
 801f6ee:	607a      	str	r2, [r7, #4]
 801f6f0:	603b      	str	r3, [r7, #0]
  return max_bytes_needed;
 801f6f2:	687b      	ldr	r3, [r7, #4]
}
 801f6f4:	4618      	mov	r0, r3
 801f6f6:	3714      	adds	r7, #20
 801f6f8:	46bd      	mov	sp, r7
 801f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6fe:	4770      	bx	lr

0801f700 <jpeg_open_backing_store>:
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
 801f700:	b580      	push	{r7, lr}
 801f702:	b084      	sub	sp, #16
 801f704:	af00      	add	r7, sp, #0
 801f706:	60f8      	str	r0, [r7, #12]
 801f708:	60b9      	str	r1, [r7, #8]
 801f70a:	607a      	str	r2, [r7, #4]
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 801f70c:	68fb      	ldr	r3, [r7, #12]
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	2233      	movs	r2, #51	@ 0x33
 801f712:	615a      	str	r2, [r3, #20]
 801f714:	68fb      	ldr	r3, [r7, #12]
 801f716:	681b      	ldr	r3, [r3, #0]
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	68f8      	ldr	r0, [r7, #12]
 801f71c:	4798      	blx	r3
}
 801f71e:	bf00      	nop
 801f720:	3710      	adds	r7, #16
 801f722:	46bd      	mov	sp, r7
 801f724:	bd80      	pop	{r7, pc}

0801f726 <jpeg_mem_init>:
 * cleanup required.  Here, there isn't any.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
 801f726:	b480      	push	{r7}
 801f728:	b083      	sub	sp, #12
 801f72a:	af00      	add	r7, sp, #0
 801f72c:	6078      	str	r0, [r7, #4]
  return 0;			/* just set max_memory_to_use to 0 */
 801f72e:	2300      	movs	r3, #0
}
 801f730:	4618      	mov	r0, r3
 801f732:	370c      	adds	r7, #12
 801f734:	46bd      	mov	sp, r7
 801f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f73a:	4770      	bx	lr

0801f73c <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
 801f73c:	b480      	push	{r7}
 801f73e:	b083      	sub	sp, #12
 801f740:	af00      	add	r7, sp, #0
 801f742:	6078      	str	r0, [r7, #4]
}
 801f744:	bf00      	nop
 801f746:	370c      	adds	r7, #12
 801f748:	46bd      	mov	sp, r7
 801f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f74e:	4770      	bx	lr

0801f750 <select_ncolors>:
LOCAL(int)
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
 801f750:	b580      	push	{r7, lr}
 801f752:	b08a      	sub	sp, #40	@ 0x28
 801f754:	af00      	add	r7, sp, #0
 801f756:	6078      	str	r0, [r7, #4]
 801f758:	6039      	str	r1, [r7, #0]
  int nc = cinfo->out_color_components; /* number of color components */
 801f75a:	687b      	ldr	r3, [r7, #4]
 801f75c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f75e:	613b      	str	r3, [r7, #16]
  int max_colors = cinfo->desired_number_of_colors;
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f764:	60fb      	str	r3, [r7, #12]
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
 801f766:	2301      	movs	r3, #1
 801f768:	623b      	str	r3, [r7, #32]
  do {
    iroot++;
 801f76a:	6a3b      	ldr	r3, [r7, #32]
 801f76c:	3301      	adds	r3, #1
 801f76e:	623b      	str	r3, [r7, #32]
    temp = iroot;		/* set temp = iroot ** nc */
 801f770:	6a3b      	ldr	r3, [r7, #32]
 801f772:	617b      	str	r3, [r7, #20]
    for (i = 1; i < nc; i++)
 801f774:	2301      	movs	r3, #1
 801f776:	61fb      	str	r3, [r7, #28]
 801f778:	e007      	b.n	801f78a <select_ncolors+0x3a>
      temp *= iroot;
 801f77a:	697b      	ldr	r3, [r7, #20]
 801f77c:	6a3a      	ldr	r2, [r7, #32]
 801f77e:	fb02 f303 	mul.w	r3, r2, r3
 801f782:	617b      	str	r3, [r7, #20]
    for (i = 1; i < nc; i++)
 801f784:	69fb      	ldr	r3, [r7, #28]
 801f786:	3301      	adds	r3, #1
 801f788:	61fb      	str	r3, [r7, #28]
 801f78a:	69fa      	ldr	r2, [r7, #28]
 801f78c:	693b      	ldr	r3, [r7, #16]
 801f78e:	429a      	cmp	r2, r3
 801f790:	dbf3      	blt.n	801f77a <select_ncolors+0x2a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 801f792:	697a      	ldr	r2, [r7, #20]
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	429a      	cmp	r2, r3
 801f798:	dde7      	ble.n	801f76a <select_ncolors+0x1a>
  iroot--;			/* now iroot = floor(root) */
 801f79a:	6a3b      	ldr	r3, [r7, #32]
 801f79c:	3b01      	subs	r3, #1
 801f79e:	623b      	str	r3, [r7, #32]

  /* Must have at least 2 color values per component */
  if (iroot < 2)
 801f7a0:	6a3b      	ldr	r3, [r7, #32]
 801f7a2:	2b01      	cmp	r3, #1
 801f7a4:	dc0c      	bgt.n	801f7c0 <select_ncolors+0x70>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	681b      	ldr	r3, [r3, #0]
 801f7aa:	223a      	movs	r2, #58	@ 0x3a
 801f7ac:	615a      	str	r2, [r3, #20]
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	697a      	ldr	r2, [r7, #20]
 801f7b4:	619a      	str	r2, [r3, #24]
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	6878      	ldr	r0, [r7, #4]
 801f7be:	4798      	blx	r3

  /* Initialize to iroot color values for each component */
  total_colors = 1;
 801f7c0:	2301      	movs	r3, #1
 801f7c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < nc; i++) {
 801f7c4:	2300      	movs	r3, #0
 801f7c6:	61fb      	str	r3, [r7, #28]
 801f7c8:	e00d      	b.n	801f7e6 <select_ncolors+0x96>
    Ncolors[i] = iroot;
 801f7ca:	69fb      	ldr	r3, [r7, #28]
 801f7cc:	009b      	lsls	r3, r3, #2
 801f7ce:	683a      	ldr	r2, [r7, #0]
 801f7d0:	4413      	add	r3, r2
 801f7d2:	6a3a      	ldr	r2, [r7, #32]
 801f7d4:	601a      	str	r2, [r3, #0]
    total_colors *= iroot;
 801f7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7d8:	6a3a      	ldr	r2, [r7, #32]
 801f7da:	fb02 f303 	mul.w	r3, r2, r3
 801f7de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < nc; i++) {
 801f7e0:	69fb      	ldr	r3, [r7, #28]
 801f7e2:	3301      	adds	r3, #1
 801f7e4:	61fb      	str	r3, [r7, #28]
 801f7e6:	69fa      	ldr	r2, [r7, #28]
 801f7e8:	693b      	ldr	r3, [r7, #16]
 801f7ea:	429a      	cmp	r2, r3
 801f7ec:	dbed      	blt.n	801f7ca <select_ncolors+0x7a>
   * Sometimes, the first component can be incremented more than once!
   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  do {
    changed = FALSE;
 801f7ee:	2300      	movs	r3, #0
 801f7f0:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nc; i++) {
 801f7f2:	2300      	movs	r3, #0
 801f7f4:	61fb      	str	r3, [r7, #28]
 801f7f6:	e030      	b.n	801f85a <select_ncolors+0x10a>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801f7fe:	2b02      	cmp	r3, #2
 801f800:	d104      	bne.n	801f80c <select_ncolors+0xbc>
 801f802:	4a1d      	ldr	r2, [pc, #116]	@ (801f878 <select_ncolors+0x128>)
 801f804:	69fb      	ldr	r3, [r7, #28]
 801f806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f80a:	e000      	b.n	801f80e <select_ncolors+0xbe>
 801f80c:	69fb      	ldr	r3, [r7, #28]
 801f80e:	60bb      	str	r3, [r7, #8]
      /* calculate new total_colors if Ncolors[j] is incremented */
      temp = total_colors / Ncolors[j];
 801f810:	68bb      	ldr	r3, [r7, #8]
 801f812:	009b      	lsls	r3, r3, #2
 801f814:	683a      	ldr	r2, [r7, #0]
 801f816:	4413      	add	r3, r2
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f81c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f820:	617b      	str	r3, [r7, #20]
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 801f822:	68bb      	ldr	r3, [r7, #8]
 801f824:	009b      	lsls	r3, r3, #2
 801f826:	683a      	ldr	r2, [r7, #0]
 801f828:	4413      	add	r3, r2
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	1c5a      	adds	r2, r3, #1
 801f82e:	697b      	ldr	r3, [r7, #20]
 801f830:	fb02 f303 	mul.w	r3, r2, r3
 801f834:	617b      	str	r3, [r7, #20]
      if (temp > (long) max_colors)
 801f836:	697a      	ldr	r2, [r7, #20]
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	429a      	cmp	r2, r3
 801f83c:	dc12      	bgt.n	801f864 <select_ncolors+0x114>
	break;			/* won't fit, done with this pass */
      Ncolors[j]++;		/* OK, apply the increment */
 801f83e:	68bb      	ldr	r3, [r7, #8]
 801f840:	009b      	lsls	r3, r3, #2
 801f842:	683a      	ldr	r2, [r7, #0]
 801f844:	4413      	add	r3, r2
 801f846:	681a      	ldr	r2, [r3, #0]
 801f848:	3201      	adds	r2, #1
 801f84a:	601a      	str	r2, [r3, #0]
      total_colors = (int) temp;
 801f84c:	697b      	ldr	r3, [r7, #20]
 801f84e:	627b      	str	r3, [r7, #36]	@ 0x24
      changed = TRUE;
 801f850:	2301      	movs	r3, #1
 801f852:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nc; i++) {
 801f854:	69fb      	ldr	r3, [r7, #28]
 801f856:	3301      	adds	r3, #1
 801f858:	61fb      	str	r3, [r7, #28]
 801f85a:	69fa      	ldr	r2, [r7, #28]
 801f85c:	693b      	ldr	r3, [r7, #16]
 801f85e:	429a      	cmp	r2, r3
 801f860:	dbca      	blt.n	801f7f8 <select_ncolors+0xa8>
 801f862:	e000      	b.n	801f866 <select_ncolors+0x116>
	break;			/* won't fit, done with this pass */
 801f864:	bf00      	nop
    }
  } while (changed);
 801f866:	69bb      	ldr	r3, [r7, #24]
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d1c0      	bne.n	801f7ee <select_ncolors+0x9e>

  return total_colors;
 801f86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801f86e:	4618      	mov	r0, r3
 801f870:	3728      	adds	r7, #40	@ 0x28
 801f872:	46bd      	mov	sp, r7
 801f874:	bd80      	pop	{r7, pc}
 801f876:	bf00      	nop
 801f878:	08024404 	.word	0x08024404

0801f87c <output_value>:

LOCAL(int)
output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
 801f87c:	b480      	push	{r7}
 801f87e:	b085      	sub	sp, #20
 801f880:	af00      	add	r7, sp, #0
 801f882:	60f8      	str	r0, [r7, #12]
 801f884:	60b9      	str	r1, [r7, #8]
 801f886:	607a      	str	r2, [r7, #4]
 801f888:	603b      	str	r3, [r7, #0]
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801f88a:	687a      	ldr	r2, [r7, #4]
 801f88c:	4613      	mov	r3, r2
 801f88e:	021b      	lsls	r3, r3, #8
 801f890:	1a9a      	subs	r2, r3, r2
 801f892:	683b      	ldr	r3, [r7, #0]
 801f894:	0fd9      	lsrs	r1, r3, #31
 801f896:	440b      	add	r3, r1
 801f898:	105b      	asrs	r3, r3, #1
 801f89a:	441a      	add	r2, r3
 801f89c:	683b      	ldr	r3, [r7, #0]
 801f89e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 801f8a2:	4618      	mov	r0, r3
 801f8a4:	3714      	adds	r7, #20
 801f8a6:	46bd      	mov	sp, r7
 801f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8ac:	4770      	bx	lr

0801f8ae <largest_input_value>:

LOCAL(int)
largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
 801f8ae:	b480      	push	{r7}
 801f8b0:	b085      	sub	sp, #20
 801f8b2:	af00      	add	r7, sp, #0
 801f8b4:	60f8      	str	r0, [r7, #12]
 801f8b6:	60b9      	str	r1, [r7, #8]
 801f8b8:	607a      	str	r2, [r7, #4]
 801f8ba:	603b      	str	r3, [r7, #0]
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	005b      	lsls	r3, r3, #1
 801f8c0:	1c5a      	adds	r2, r3, #1
 801f8c2:	4613      	mov	r3, r2
 801f8c4:	021b      	lsls	r3, r3, #8
 801f8c6:	1a9a      	subs	r2, r3, r2
 801f8c8:	683b      	ldr	r3, [r7, #0]
 801f8ca:	441a      	add	r2, r3
 801f8cc:	683b      	ldr	r3, [r7, #0]
 801f8ce:	005b      	lsls	r3, r3, #1
 801f8d0:	fb92 f3f3 	sdiv	r3, r2, r3
}
 801f8d4:	4618      	mov	r0, r3
 801f8d6:	3714      	adds	r7, #20
 801f8d8:	46bd      	mov	sp, r7
 801f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8de:	4770      	bx	lr

0801f8e0 <create_colormap>:
 * Create the colormap.
 */

LOCAL(void)
create_colormap (j_decompress_ptr cinfo)
{
 801f8e0:	b590      	push	{r4, r7, lr}
 801f8e2:	b08f      	sub	sp, #60	@ 0x3c
 801f8e4:	af00      	add	r7, sp, #0
 801f8e6:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801f8ee:	623b      	str	r3, [r7, #32]
  JSAMPARRAY colormap;		/* Created colormap */
  int total_colors;		/* Number of distinct output colors */
  int i,j,k, nci, blksize, blkdist, ptr, val;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 801f8f0:	6a3b      	ldr	r3, [r7, #32]
 801f8f2:	3320      	adds	r3, #32
 801f8f4:	4619      	mov	r1, r3
 801f8f6:	6878      	ldr	r0, [r7, #4]
 801f8f8:	f7ff ff2a 	bl	801f750 <select_ncolors>
 801f8fc:	61f8      	str	r0, [r7, #28]

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f902:	2b03      	cmp	r3, #3
 801f904:	d120      	bne.n	801f948 <create_colormap+0x68>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	3318      	adds	r3, #24
 801f90c:	61bb      	str	r3, [r7, #24]
 801f90e:	69bb      	ldr	r3, [r7, #24]
 801f910:	69fa      	ldr	r2, [r7, #28]
 801f912:	601a      	str	r2, [r3, #0]
 801f914:	69bb      	ldr	r3, [r7, #24]
 801f916:	3304      	adds	r3, #4
 801f918:	6a3a      	ldr	r2, [r7, #32]
 801f91a:	6a12      	ldr	r2, [r2, #32]
 801f91c:	601a      	str	r2, [r3, #0]
 801f91e:	69bb      	ldr	r3, [r7, #24]
 801f920:	3308      	adds	r3, #8
 801f922:	6a3a      	ldr	r2, [r7, #32]
 801f924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801f926:	601a      	str	r2, [r3, #0]
 801f928:	69bb      	ldr	r3, [r7, #24]
 801f92a:	330c      	adds	r3, #12
 801f92c:	6a3a      	ldr	r2, [r7, #32]
 801f92e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801f930:	601a      	str	r2, [r3, #0]
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	2260      	movs	r2, #96	@ 0x60
 801f938:	615a      	str	r2, [r3, #20]
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	685b      	ldr	r3, [r3, #4]
 801f940:	2101      	movs	r1, #1
 801f942:	6878      	ldr	r0, [r7, #4]
 801f944:	4798      	blx	r3
 801f946:	e00d      	b.n	801f964 <create_colormap+0x84>
	     total_colors, cquantize->Ncolors[0],
	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
  else
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	2261      	movs	r2, #97	@ 0x61
 801f94e:	615a      	str	r2, [r3, #20]
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	681b      	ldr	r3, [r3, #0]
 801f954:	69fa      	ldr	r2, [r7, #28]
 801f956:	619a      	str	r2, [r3, #24]
 801f958:	687b      	ldr	r3, [r7, #4]
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	685b      	ldr	r3, [r3, #4]
 801f95e:	2101      	movs	r1, #1
 801f960:	6878      	ldr	r0, [r7, #4]
 801f962:	4798      	blx	r3

  /* Allocate and fill in the colormap. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	685b      	ldr	r3, [r3, #4]
 801f968:	689c      	ldr	r4, [r3, #8]
 801f96a:	69fa      	ldr	r2, [r7, #28]
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
  colormap = (*cinfo->mem->alloc_sarray)
 801f970:	2101      	movs	r1, #1
 801f972:	6878      	ldr	r0, [r7, #4]
 801f974:	47a0      	blx	r4
 801f976:	6178      	str	r0, [r7, #20]

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;
 801f978:	69fb      	ldr	r3, [r7, #28]
 801f97a:	62bb      	str	r3, [r7, #40]	@ 0x28

  for (i = 0; i < cinfo->out_color_components; i++) {
 801f97c:	2300      	movs	r3, #0
 801f97e:	637b      	str	r3, [r7, #52]	@ 0x34
 801f980:	e045      	b.n	801fa0e <create_colormap+0x12e>
    /* fill in colormap entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801f982:	6a3b      	ldr	r3, [r7, #32]
 801f984:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801f986:	3208      	adds	r2, #8
 801f988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f98c:	613b      	str	r3, [r7, #16]
    blksize = blkdist / nci;
 801f98e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f990:	693b      	ldr	r3, [r7, #16]
 801f992:	fb92 f3f3 	sdiv	r3, r2, r3
 801f996:	60fb      	str	r3, [r7, #12]
    for (j = 0; j < nci; j++) {
 801f998:	2300      	movs	r3, #0
 801f99a:	633b      	str	r3, [r7, #48]	@ 0x30
 801f99c:	e02e      	b.n	801f9fc <create_colormap+0x11c>
      /* Compute j'th output value (out of nci) for component */
      val = output_value(cinfo, i, j, nci-1);
 801f99e:	693b      	ldr	r3, [r7, #16]
 801f9a0:	3b01      	subs	r3, #1
 801f9a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f9a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f9a6:	6878      	ldr	r0, [r7, #4]
 801f9a8:	f7ff ff68 	bl	801f87c <output_value>
 801f9ac:	60b8      	str	r0, [r7, #8]
      /* Fill in all colormap entries that have this value of this component */
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801f9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9b0:	68fa      	ldr	r2, [r7, #12]
 801f9b2:	fb02 f303 	mul.w	r3, r2, r3
 801f9b6:	627b      	str	r3, [r7, #36]	@ 0x24
 801f9b8:	e019      	b.n	801f9ee <create_colormap+0x10e>
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
 801f9ba:	2300      	movs	r3, #0
 801f9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f9be:	e00e      	b.n	801f9de <create_colormap+0xfe>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 801f9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f9c2:	009b      	lsls	r3, r3, #2
 801f9c4:	697a      	ldr	r2, [r7, #20]
 801f9c6:	4413      	add	r3, r2
 801f9c8:	681b      	ldr	r3, [r3, #0]
 801f9ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f9cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f9ce:	440a      	add	r2, r1
 801f9d0:	4413      	add	r3, r2
 801f9d2:	68ba      	ldr	r2, [r7, #8]
 801f9d4:	b2d2      	uxtb	r2, r2
 801f9d6:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < blksize; k++)
 801f9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f9da:	3301      	adds	r3, #1
 801f9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f9de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f9e0:	68fb      	ldr	r3, [r7, #12]
 801f9e2:	429a      	cmp	r2, r3
 801f9e4:	dbec      	blt.n	801f9c0 <create_colormap+0xe0>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801f9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f9ea:	4413      	add	r3, r2
 801f9ec:	627b      	str	r3, [r7, #36]	@ 0x24
 801f9ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f9f0:	69fb      	ldr	r3, [r7, #28]
 801f9f2:	429a      	cmp	r2, r3
 801f9f4:	dbe1      	blt.n	801f9ba <create_colormap+0xda>
    for (j = 0; j < nci; j++) {
 801f9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9f8:	3301      	adds	r3, #1
 801f9fa:	633b      	str	r3, [r7, #48]	@ 0x30
 801f9fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f9fe:	693b      	ldr	r3, [r7, #16]
 801fa00:	429a      	cmp	r2, r3
 801fa02:	dbcc      	blt.n	801f99e <create_colormap+0xbe>
      }
    }
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 801fa04:	68fb      	ldr	r3, [r7, #12]
 801fa06:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < cinfo->out_color_components; i++) {
 801fa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fa0a:	3301      	adds	r3, #1
 801fa0c:	637b      	str	r3, [r7, #52]	@ 0x34
 801fa0e:	687b      	ldr	r3, [r7, #4]
 801fa10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fa12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801fa14:	429a      	cmp	r2, r3
 801fa16:	dbb4      	blt.n	801f982 <create_colormap+0xa2>
  }

  /* Save the colormap in private storage,
   * where it will survive color quantization mode changes.
   */
  cquantize->sv_colormap = colormap;
 801fa18:	6a3b      	ldr	r3, [r7, #32]
 801fa1a:	697a      	ldr	r2, [r7, #20]
 801fa1c:	611a      	str	r2, [r3, #16]
  cquantize->sv_actual = total_colors;
 801fa1e:	6a3b      	ldr	r3, [r7, #32]
 801fa20:	69fa      	ldr	r2, [r7, #28]
 801fa22:	615a      	str	r2, [r3, #20]
}
 801fa24:	bf00      	nop
 801fa26:	373c      	adds	r7, #60	@ 0x3c
 801fa28:	46bd      	mov	sp, r7
 801fa2a:	bd90      	pop	{r4, r7, pc}

0801fa2c <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 801fa2c:	b590      	push	{r4, r7, lr}
 801fa2e:	b08d      	sub	sp, #52	@ 0x34
 801fa30:	af00      	add	r7, sp, #0
 801fa32:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801fa3a:	617b      	str	r3, [r7, #20]
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801fa42:	2b01      	cmp	r3, #1
 801fa44:	d106      	bne.n	801fa54 <create_colorindex+0x28>
    pad = MAXJSAMPLE*2;
 801fa46:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 801fa4a:	61bb      	str	r3, [r7, #24]
    cquantize->is_padded = TRUE;
 801fa4c:	697b      	ldr	r3, [r7, #20]
 801fa4e:	2201      	movs	r2, #1
 801fa50:	61da      	str	r2, [r3, #28]
 801fa52:	e004      	b.n	801fa5e <create_colorindex+0x32>
  } else {
    pad = 0;
 801fa54:	2300      	movs	r3, #0
 801fa56:	61bb      	str	r3, [r7, #24]
    cquantize->is_padded = FALSE;
 801fa58:	697b      	ldr	r3, [r7, #20]
 801fa5a:	2200      	movs	r2, #0
 801fa5c:	61da      	str	r2, [r3, #28]
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	685b      	ldr	r3, [r3, #4]
 801fa62:	689c      	ldr	r4, [r3, #8]
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
 801fa64:	69bb      	ldr	r3, [r7, #24]
 801fa66:	f503 7380 	add.w	r3, r3, #256	@ 0x100
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801fa6a:	461a      	mov	r2, r3
     (JDIMENSION) cinfo->out_color_components);
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801fa70:	2101      	movs	r1, #1
 801fa72:	6878      	ldr	r0, [r7, #4]
 801fa74:	47a0      	blx	r4
 801fa76:	4602      	mov	r2, r0
 801fa78:	697b      	ldr	r3, [r7, #20]
 801fa7a:	619a      	str	r2, [r3, #24]

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 801fa7c:	697b      	ldr	r3, [r7, #20]
 801fa7e:	695b      	ldr	r3, [r3, #20]
 801fa80:	623b      	str	r3, [r7, #32]

  for (i = 0; i < cinfo->out_color_components; i++) {
 801fa82:	2300      	movs	r3, #0
 801fa84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fa86:	e06e      	b.n	801fb66 <create_colorindex+0x13a>
    /* fill in colorindex entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801fa88:	697b      	ldr	r3, [r7, #20]
 801fa8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fa8c:	3208      	adds	r2, #8
 801fa8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fa92:	613b      	str	r3, [r7, #16]
    blksize = blksize / nci;
 801fa94:	6a3a      	ldr	r2, [r7, #32]
 801fa96:	693b      	ldr	r3, [r7, #16]
 801fa98:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa9c:	623b      	str	r3, [r7, #32]

    /* adjust colorindex pointers to provide padding at negative indexes. */
    if (pad)
 801fa9e:	69bb      	ldr	r3, [r7, #24]
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d00c      	beq.n	801fabe <create_colorindex+0x92>
      cquantize->colorindex[i] += MAXJSAMPLE;
 801faa4:	697b      	ldr	r3, [r7, #20]
 801faa6:	699a      	ldr	r2, [r3, #24]
 801faa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801faaa:	009b      	lsls	r3, r3, #2
 801faac:	4413      	add	r3, r2
 801faae:	681a      	ldr	r2, [r3, #0]
 801fab0:	697b      	ldr	r3, [r7, #20]
 801fab2:	6999      	ldr	r1, [r3, #24]
 801fab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fab6:	009b      	lsls	r3, r3, #2
 801fab8:	440b      	add	r3, r1
 801faba:	32ff      	adds	r2, #255	@ 0xff
 801fabc:	601a      	str	r2, [r3, #0]

    /* in loop, val = index of current output value, */
    /* and k = largest j that maps to current val */
    indexptr = cquantize->colorindex[i];
 801fabe:	697b      	ldr	r3, [r7, #20]
 801fac0:	699a      	ldr	r2, [r3, #24]
 801fac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fac4:	009b      	lsls	r3, r3, #2
 801fac6:	4413      	add	r3, r2
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	60fb      	str	r3, [r7, #12]
    val = 0;
 801facc:	2300      	movs	r3, #0
 801face:	61fb      	str	r3, [r7, #28]
    k = largest_input_value(cinfo, i, 0, nci-1);
 801fad0:	693b      	ldr	r3, [r7, #16]
 801fad2:	3b01      	subs	r3, #1
 801fad4:	2200      	movs	r2, #0
 801fad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801fad8:	6878      	ldr	r0, [r7, #4]
 801fada:	f7ff fee8 	bl	801f8ae <largest_input_value>
 801fade:	6278      	str	r0, [r7, #36]	@ 0x24
    for (j = 0; j <= MAXJSAMPLE; j++) {
 801fae0:	2300      	movs	r3, #0
 801fae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fae4:	e01c      	b.n	801fb20 <create_colorindex+0xf4>
      while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
 801fae6:	69fb      	ldr	r3, [r7, #28]
 801fae8:	3301      	adds	r3, #1
 801faea:	61fb      	str	r3, [r7, #28]
 801faec:	693b      	ldr	r3, [r7, #16]
 801faee:	3b01      	subs	r3, #1
 801faf0:	69fa      	ldr	r2, [r7, #28]
 801faf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801faf4:	6878      	ldr	r0, [r7, #4]
 801faf6:	f7ff feda 	bl	801f8ae <largest_input_value>
 801fafa:	6278      	str	r0, [r7, #36]	@ 0x24
      while (j > k)		/* advance val if past boundary */
 801fafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fb00:	429a      	cmp	r2, r3
 801fb02:	dcf0      	bgt.n	801fae6 <create_colorindex+0xba>
      /* premultiply so that no multiplication needed in main processing */
      indexptr[j] = (JSAMPLE) (val * blksize);
 801fb04:	69fb      	ldr	r3, [r7, #28]
 801fb06:	b2d9      	uxtb	r1, r3
 801fb08:	6a3b      	ldr	r3, [r7, #32]
 801fb0a:	b2da      	uxtb	r2, r3
 801fb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb0e:	68f8      	ldr	r0, [r7, #12]
 801fb10:	4403      	add	r3, r0
 801fb12:	fb11 f202 	smulbb	r2, r1, r2
 801fb16:	b2d2      	uxtb	r2, r2
 801fb18:	701a      	strb	r2, [r3, #0]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 801fb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb1c:	3301      	adds	r3, #1
 801fb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb22:	2bff      	cmp	r3, #255	@ 0xff
 801fb24:	ddea      	ble.n	801fafc <create_colorindex+0xd0>
    }
    /* Pad at both ends if necessary */
    if (pad)
 801fb26:	69bb      	ldr	r3, [r7, #24]
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d019      	beq.n	801fb60 <create_colorindex+0x134>
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801fb2c:	2301      	movs	r3, #1
 801fb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fb30:	e013      	b.n	801fb5a <create_colorindex+0x12e>
	indexptr[-j] = indexptr[0];
 801fb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb34:	425b      	negs	r3, r3
 801fb36:	461a      	mov	r2, r3
 801fb38:	68fb      	ldr	r3, [r7, #12]
 801fb3a:	4413      	add	r3, r2
 801fb3c:	68fa      	ldr	r2, [r7, #12]
 801fb3e:	7812      	ldrb	r2, [r2, #0]
 801fb40:	701a      	strb	r2, [r3, #0]
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 801fb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb44:	33ff      	adds	r3, #255	@ 0xff
 801fb46:	461a      	mov	r2, r3
 801fb48:	68fb      	ldr	r3, [r7, #12]
 801fb4a:	4413      	add	r3, r2
 801fb4c:	68fa      	ldr	r2, [r7, #12]
 801fb4e:	f892 20ff 	ldrb.w	r2, [r2, #255]	@ 0xff
 801fb52:	701a      	strb	r2, [r3, #0]
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801fb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb56:	3301      	adds	r3, #1
 801fb58:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb5c:	2bff      	cmp	r3, #255	@ 0xff
 801fb5e:	dde8      	ble.n	801fb32 <create_colorindex+0x106>
  for (i = 0; i < cinfo->out_color_components; i++) {
 801fb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fb62:	3301      	adds	r3, #1
 801fb64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fb6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fb6c:	429a      	cmp	r2, r3
 801fb6e:	db8b      	blt.n	801fa88 <create_colorindex+0x5c>
      }
  }
}
 801fb70:	bf00      	nop
 801fb72:	bf00      	nop
 801fb74:	3734      	adds	r7, #52	@ 0x34
 801fb76:	46bd      	mov	sp, r7
 801fb78:	bd90      	pop	{r4, r7, pc}
	...

0801fb7c <make_odither_array>:
 * distinct output values.
 */

LOCAL(ODITHER_MATRIX_PTR)
make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
 801fb7c:	b580      	push	{r7, lr}
 801fb7e:	b088      	sub	sp, #32
 801fb80:	af00      	add	r7, sp, #0
 801fb82:	6078      	str	r0, [r7, #4]
 801fb84:	6039      	str	r1, [r7, #0]
  ODITHER_MATRIX_PTR odither;
  int j,k;
  INT32 num,den;

  odither = (ODITHER_MATRIX_PTR)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	685b      	ldr	r3, [r3, #4]
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801fb90:	2101      	movs	r1, #1
 801fb92:	6878      	ldr	r0, [r7, #4]
 801fb94:	4798      	blx	r3
 801fb96:	6178      	str	r0, [r7, #20]
  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
   * Hence the dither value for the matrix cell with fill order f
   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
   * On 16-bit-int machine, be careful to avoid overflow.
   */
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 801fb98:	683b      	ldr	r3, [r7, #0]
 801fb9a:	3b01      	subs	r3, #1
 801fb9c:	025b      	lsls	r3, r3, #9
 801fb9e:	613b      	str	r3, [r7, #16]
  for (j = 0; j < ODITHER_SIZE; j++) {
 801fba0:	2300      	movs	r3, #0
 801fba2:	61fb      	str	r3, [r7, #28]
 801fba4:	e02e      	b.n	801fc04 <make_odither_array+0x88>
    for (k = 0; k < ODITHER_SIZE; k++) {
 801fba6:	2300      	movs	r3, #0
 801fba8:	61bb      	str	r3, [r7, #24]
 801fbaa:	e025      	b.n	801fbf8 <make_odither_array+0x7c>
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 801fbac:	4a19      	ldr	r2, [pc, #100]	@ (801fc14 <make_odither_array+0x98>)
 801fbae:	69fb      	ldr	r3, [r7, #28]
 801fbb0:	011b      	lsls	r3, r3, #4
 801fbb2:	441a      	add	r2, r3
 801fbb4:	69bb      	ldr	r3, [r7, #24]
 801fbb6:	4413      	add	r3, r2
 801fbb8:	781b      	ldrb	r3, [r3, #0]
 801fbba:	005b      	lsls	r3, r3, #1
 801fbbc:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 801fbc0:	4613      	mov	r3, r2
 801fbc2:	021b      	lsls	r3, r3, #8
 801fbc4:	1a9b      	subs	r3, r3, r2
 801fbc6:	60fb      	str	r3, [r7, #12]
	    * MAXJSAMPLE;
      /* Ensure round towards zero despite C's lack of consistency
       * about rounding negative values in integer division...
       */
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 801fbc8:	68fb      	ldr	r3, [r7, #12]
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	da06      	bge.n	801fbdc <make_odither_array+0x60>
 801fbce:	68fb      	ldr	r3, [r7, #12]
 801fbd0:	425a      	negs	r2, r3
 801fbd2:	693b      	ldr	r3, [r7, #16]
 801fbd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbd8:	425b      	negs	r3, r3
 801fbda:	e003      	b.n	801fbe4 <make_odither_array+0x68>
 801fbdc:	68fa      	ldr	r2, [r7, #12]
 801fbde:	693b      	ldr	r3, [r7, #16]
 801fbe0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbe4:	69fa      	ldr	r2, [r7, #28]
 801fbe6:	0192      	lsls	r2, r2, #6
 801fbe8:	6979      	ldr	r1, [r7, #20]
 801fbea:	440a      	add	r2, r1
 801fbec:	69b9      	ldr	r1, [r7, #24]
 801fbee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (k = 0; k < ODITHER_SIZE; k++) {
 801fbf2:	69bb      	ldr	r3, [r7, #24]
 801fbf4:	3301      	adds	r3, #1
 801fbf6:	61bb      	str	r3, [r7, #24]
 801fbf8:	69bb      	ldr	r3, [r7, #24]
 801fbfa:	2b0f      	cmp	r3, #15
 801fbfc:	ddd6      	ble.n	801fbac <make_odither_array+0x30>
  for (j = 0; j < ODITHER_SIZE; j++) {
 801fbfe:	69fb      	ldr	r3, [r7, #28]
 801fc00:	3301      	adds	r3, #1
 801fc02:	61fb      	str	r3, [r7, #28]
 801fc04:	69fb      	ldr	r3, [r7, #28]
 801fc06:	2b0f      	cmp	r3, #15
 801fc08:	ddcd      	ble.n	801fba6 <make_odither_array+0x2a>
    }
  }
  return odither;
 801fc0a:	697b      	ldr	r3, [r7, #20]
}
 801fc0c:	4618      	mov	r0, r3
 801fc0e:	3720      	adds	r7, #32
 801fc10:	46bd      	mov	sp, r7
 801fc12:	bd80      	pop	{r7, pc}
 801fc14:	08024304 	.word	0x08024304

0801fc18 <create_odither_tables>:
 * share a dither table.
 */

LOCAL(void)
create_odither_tables (j_decompress_ptr cinfo)
{
 801fc18:	b580      	push	{r7, lr}
 801fc1a:	b088      	sub	sp, #32
 801fc1c:	af00      	add	r7, sp, #0
 801fc1e:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801fc26:	613b      	str	r3, [r7, #16]
  ODITHER_MATRIX_PTR odither;
  int i, j, nci;

  for (i = 0; i < cinfo->out_color_components; i++) {
 801fc28:	2300      	movs	r3, #0
 801fc2a:	61bb      	str	r3, [r7, #24]
 801fc2c:	e033      	b.n	801fc96 <create_odither_tables+0x7e>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801fc2e:	693b      	ldr	r3, [r7, #16]
 801fc30:	69ba      	ldr	r2, [r7, #24]
 801fc32:	3208      	adds	r2, #8
 801fc34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fc38:	60fb      	str	r3, [r7, #12]
    odither = NULL;		/* search for matching prior component */
 801fc3a:	2300      	movs	r3, #0
 801fc3c:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < i; j++) {
 801fc3e:	2300      	movs	r3, #0
 801fc40:	617b      	str	r3, [r7, #20]
 801fc42:	e012      	b.n	801fc6a <create_odither_tables+0x52>
      if (nci == cquantize->Ncolors[j]) {
 801fc44:	693b      	ldr	r3, [r7, #16]
 801fc46:	697a      	ldr	r2, [r7, #20]
 801fc48:	3208      	adds	r2, #8
 801fc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801fc4e:	68fa      	ldr	r2, [r7, #12]
 801fc50:	429a      	cmp	r2, r3
 801fc52:	d107      	bne.n	801fc64 <create_odither_tables+0x4c>
	odither = cquantize->odither[j];
 801fc54:	693a      	ldr	r2, [r7, #16]
 801fc56:	697b      	ldr	r3, [r7, #20]
 801fc58:	330c      	adds	r3, #12
 801fc5a:	009b      	lsls	r3, r3, #2
 801fc5c:	4413      	add	r3, r2
 801fc5e:	685b      	ldr	r3, [r3, #4]
 801fc60:	61fb      	str	r3, [r7, #28]
	break;
 801fc62:	e006      	b.n	801fc72 <create_odither_tables+0x5a>
    for (j = 0; j < i; j++) {
 801fc64:	697b      	ldr	r3, [r7, #20]
 801fc66:	3301      	adds	r3, #1
 801fc68:	617b      	str	r3, [r7, #20]
 801fc6a:	697a      	ldr	r2, [r7, #20]
 801fc6c:	69bb      	ldr	r3, [r7, #24]
 801fc6e:	429a      	cmp	r2, r3
 801fc70:	dbe8      	blt.n	801fc44 <create_odither_tables+0x2c>
      }
    }
    if (odither == NULL)	/* need a new table? */
 801fc72:	69fb      	ldr	r3, [r7, #28]
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d104      	bne.n	801fc82 <create_odither_tables+0x6a>
      odither = make_odither_array(cinfo, nci);
 801fc78:	68f9      	ldr	r1, [r7, #12]
 801fc7a:	6878      	ldr	r0, [r7, #4]
 801fc7c:	f7ff ff7e 	bl	801fb7c <make_odither_array>
 801fc80:	61f8      	str	r0, [r7, #28]
    cquantize->odither[i] = odither;
 801fc82:	693a      	ldr	r2, [r7, #16]
 801fc84:	69bb      	ldr	r3, [r7, #24]
 801fc86:	330c      	adds	r3, #12
 801fc88:	009b      	lsls	r3, r3, #2
 801fc8a:	4413      	add	r3, r2
 801fc8c:	69fa      	ldr	r2, [r7, #28]
 801fc8e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801fc90:	69bb      	ldr	r3, [r7, #24]
 801fc92:	3301      	adds	r3, #1
 801fc94:	61bb      	str	r3, [r7, #24]
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fc9a:	69ba      	ldr	r2, [r7, #24]
 801fc9c:	429a      	cmp	r2, r3
 801fc9e:	dbc6      	blt.n	801fc2e <create_odither_tables+0x16>
  }
}
 801fca0:	bf00      	nop
 801fca2:	bf00      	nop
 801fca4:	3720      	adds	r7, #32
 801fca6:	46bd      	mov	sp, r7
 801fca8:	bd80      	pop	{r7, pc}

0801fcaa <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 801fcaa:	b4f0      	push	{r4, r5, r6, r7}
 801fcac:	b08a      	sub	sp, #40	@ 0x28
 801fcae:	af00      	add	r7, sp, #0
 801fcb0:	60f8      	str	r0, [r7, #12]
 801fcb2:	60b9      	str	r1, [r7, #8]
 801fcb4:	607a      	str	r2, [r7, #4]
 801fcb6:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801fcb8:	68fb      	ldr	r3, [r7, #12]
 801fcba:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801fcbe:	61fb      	str	r3, [r7, #28]
  JSAMPARRAY colorindex = cquantize->colorindex;
 801fcc0:	69fb      	ldr	r3, [r7, #28]
 801fcc2:	699b      	ldr	r3, [r3, #24]
 801fcc4:	61bb      	str	r3, [r7, #24]
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801fcc6:	68fb      	ldr	r3, [r7, #12]
 801fcc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fcca:	617b      	str	r3, [r7, #20]
  register int nc = cinfo->out_color_components;
 801fccc:	68fb      	ldr	r3, [r7, #12]
 801fcce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fcd0:	4618      	mov	r0, r3

  for (row = 0; row < num_rows; row++) {
 801fcd2:	2300      	movs	r3, #0
 801fcd4:	627b      	str	r3, [r7, #36]	@ 0x24
 801fcd6:	e02d      	b.n	801fd34 <color_quantize+0x8a>
    ptrin = input_buf[row];
 801fcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fcda:	009b      	lsls	r3, r3, #2
 801fcdc:	68ba      	ldr	r2, [r7, #8]
 801fcde:	4413      	add	r3, r2
 801fce0:	681e      	ldr	r6, [r3, #0]
    ptrout = output_buf[row];
 801fce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fce4:	009b      	lsls	r3, r3, #2
 801fce6:	687a      	ldr	r2, [r7, #4]
 801fce8:	4413      	add	r3, r2
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	4619      	mov	r1, r3
    for (col = width; col > 0; col--) {
 801fcee:	697b      	ldr	r3, [r7, #20]
 801fcf0:	623b      	str	r3, [r7, #32]
 801fcf2:	e019      	b.n	801fd28 <color_quantize+0x7e>
      pixcode = 0;
 801fcf4:	2500      	movs	r5, #0
      for (ci = 0; ci < nc; ci++) {
 801fcf6:	2400      	movs	r4, #0
 801fcf8:	e00b      	b.n	801fd12 <color_quantize+0x68>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 801fcfa:	4623      	mov	r3, r4
 801fcfc:	009b      	lsls	r3, r3, #2
 801fcfe:	69ba      	ldr	r2, [r7, #24]
 801fd00:	4413      	add	r3, r2
 801fd02:	681a      	ldr	r2, [r3, #0]
 801fd04:	4633      	mov	r3, r6
 801fd06:	1c5e      	adds	r6, r3, #1
 801fd08:	781b      	ldrb	r3, [r3, #0]
 801fd0a:	4413      	add	r3, r2
 801fd0c:	781b      	ldrb	r3, [r3, #0]
 801fd0e:	441d      	add	r5, r3
      for (ci = 0; ci < nc; ci++) {
 801fd10:	3401      	adds	r4, #1
 801fd12:	4603      	mov	r3, r0
 801fd14:	429c      	cmp	r4, r3
 801fd16:	dbf0      	blt.n	801fcfa <color_quantize+0x50>
      }
      *ptrout++ = (JSAMPLE) pixcode;
 801fd18:	460b      	mov	r3, r1
 801fd1a:	1c5a      	adds	r2, r3, #1
 801fd1c:	4611      	mov	r1, r2
 801fd1e:	b2ea      	uxtb	r2, r5
 801fd20:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 801fd22:	6a3b      	ldr	r3, [r7, #32]
 801fd24:	3b01      	subs	r3, #1
 801fd26:	623b      	str	r3, [r7, #32]
 801fd28:	6a3b      	ldr	r3, [r7, #32]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d1e2      	bne.n	801fcf4 <color_quantize+0x4a>
  for (row = 0; row < num_rows; row++) {
 801fd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd30:	3301      	adds	r3, #1
 801fd32:	627b      	str	r3, [r7, #36]	@ 0x24
 801fd34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fd36:	683b      	ldr	r3, [r7, #0]
 801fd38:	429a      	cmp	r2, r3
 801fd3a:	dbcd      	blt.n	801fcd8 <color_quantize+0x2e>
    }
  }
}
 801fd3c:	bf00      	nop
 801fd3e:	bf00      	nop
 801fd40:	3728      	adds	r7, #40	@ 0x28
 801fd42:	46bd      	mov	sp, r7
 801fd44:	bcf0      	pop	{r4, r5, r6, r7}
 801fd46:	4770      	bx	lr

0801fd48 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 801fd48:	b4f0      	push	{r4, r5, r6, r7}
 801fd4a:	b08c      	sub	sp, #48	@ 0x30
 801fd4c:	af00      	add	r7, sp, #0
 801fd4e:	60f8      	str	r0, [r7, #12]
 801fd50:	60b9      	str	r1, [r7, #8]
 801fd52:	607a      	str	r2, [r7, #4]
 801fd54:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801fd56:	68fb      	ldr	r3, [r7, #12]
 801fd58:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801fd5c:	627b      	str	r3, [r7, #36]	@ 0x24
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801fd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd60:	699b      	ldr	r3, [r3, #24]
 801fd62:	681b      	ldr	r3, [r3, #0]
 801fd64:	623b      	str	r3, [r7, #32]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801fd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd68:	699b      	ldr	r3, [r3, #24]
 801fd6a:	685b      	ldr	r3, [r3, #4]
 801fd6c:	61fb      	str	r3, [r7, #28]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801fd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fd70:	699b      	ldr	r3, [r3, #24]
 801fd72:	689b      	ldr	r3, [r3, #8]
 801fd74:	61bb      	str	r3, [r7, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801fd76:	68fb      	ldr	r3, [r7, #12]
 801fd78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fd7a:	617b      	str	r3, [r7, #20]

  for (row = 0; row < num_rows; row++) {
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fd80:	e031      	b.n	801fde6 <color_quantize3+0x9e>
    ptrin = input_buf[row];
 801fd82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd84:	009b      	lsls	r3, r3, #2
 801fd86:	68ba      	ldr	r2, [r7, #8]
 801fd88:	4413      	add	r3, r2
 801fd8a:	681c      	ldr	r4, [r3, #0]
    ptrout = output_buf[row];
 801fd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd8e:	009b      	lsls	r3, r3, #2
 801fd90:	687a      	ldr	r2, [r7, #4]
 801fd92:	4413      	add	r3, r2
 801fd94:	681e      	ldr	r6, [r3, #0]
    for (col = width; col > 0; col--) {
 801fd96:	697b      	ldr	r3, [r7, #20]
 801fd98:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fd9a:	e01e      	b.n	801fdda <color_quantize3+0x92>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 801fd9c:	4623      	mov	r3, r4
 801fd9e:	1c5c      	adds	r4, r3, #1
 801fda0:	781b      	ldrb	r3, [r3, #0]
 801fda2:	461a      	mov	r2, r3
 801fda4:	6a3b      	ldr	r3, [r7, #32]
 801fda6:	4413      	add	r3, r2
 801fda8:	781b      	ldrb	r3, [r3, #0]
 801fdaa:	461d      	mov	r5, r3
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801fdac:	4623      	mov	r3, r4
 801fdae:	1c5c      	adds	r4, r3, #1
 801fdb0:	781b      	ldrb	r3, [r3, #0]
 801fdb2:	461a      	mov	r2, r3
 801fdb4:	69fb      	ldr	r3, [r7, #28]
 801fdb6:	4413      	add	r3, r2
 801fdb8:	781b      	ldrb	r3, [r3, #0]
 801fdba:	441d      	add	r5, r3
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 801fdbc:	4623      	mov	r3, r4
 801fdbe:	1c5c      	adds	r4, r3, #1
 801fdc0:	781b      	ldrb	r3, [r3, #0]
 801fdc2:	461a      	mov	r2, r3
 801fdc4:	69bb      	ldr	r3, [r7, #24]
 801fdc6:	4413      	add	r3, r2
 801fdc8:	781b      	ldrb	r3, [r3, #0]
 801fdca:	441d      	add	r5, r3
      *ptrout++ = (JSAMPLE) pixcode;
 801fdcc:	4633      	mov	r3, r6
 801fdce:	1c5e      	adds	r6, r3, #1
 801fdd0:	b2ea      	uxtb	r2, r5
 801fdd2:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 801fdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdd6:	3b01      	subs	r3, #1
 801fdd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d1dd      	bne.n	801fd9c <color_quantize3+0x54>
  for (row = 0; row < num_rows; row++) {
 801fde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fde2:	3301      	adds	r3, #1
 801fde4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fde6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fde8:	683b      	ldr	r3, [r7, #0]
 801fdea:	429a      	cmp	r2, r3
 801fdec:	dbc9      	blt.n	801fd82 <color_quantize3+0x3a>
    }
  }
}
 801fdee:	bf00      	nop
 801fdf0:	bf00      	nop
 801fdf2:	3730      	adds	r7, #48	@ 0x30
 801fdf4:	46bd      	mov	sp, r7
 801fdf6:	bcf0      	pop	{r4, r5, r6, r7}
 801fdf8:	4770      	bx	lr

0801fdfa <quantize_ord_dither>:

METHODDEF(void)
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
 801fdfa:	b5b0      	push	{r4, r5, r7, lr}
 801fdfc:	b08e      	sub	sp, #56	@ 0x38
 801fdfe:	af00      	add	r7, sp, #0
 801fe00:	60f8      	str	r0, [r7, #12]
 801fe02:	60b9      	str	r1, [r7, #8]
 801fe04:	607a      	str	r2, [r7, #4]
 801fe06:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801fe08:	68fb      	ldr	r3, [r7, #12]
 801fe0a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801fe0e:	627b      	str	r3, [r7, #36]	@ 0x24
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
 801fe10:	68fb      	ldr	r3, [r7, #12]
 801fe12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801fe14:	623b      	str	r3, [r7, #32]
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801fe16:	68fb      	ldr	r3, [r7, #12]
 801fe18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fe1a:	61fb      	str	r3, [r7, #28]

  for (row = 0; row < num_rows; row++) {
 801fe1c:	2300      	movs	r3, #0
 801fe1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fe20:	e061      	b.n	801fee6 <quantize_ord_dither+0xec>
    /* Initialize output values to 0 so can process components separately */
    FMEMZERO((void FAR *) output_buf[row],
 801fe22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fe24:	009b      	lsls	r3, r3, #2
 801fe26:	687a      	ldr	r2, [r7, #4]
 801fe28:	4413      	add	r3, r2
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	69fa      	ldr	r2, [r7, #28]
 801fe2e:	2100      	movs	r1, #0
 801fe30:	4618      	mov	r0, r3
 801fe32:	f002 f88d 	bl	8021f50 <memset>
	     (size_t) (width * SIZEOF(JSAMPLE)));
    row_index = cquantize->row_index;
 801fe36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fe3a:	61bb      	str	r3, [r7, #24]
    for (ci = 0; ci < nc; ci++) {
 801fe3c:	2300      	movs	r3, #0
 801fe3e:	633b      	str	r3, [r7, #48]	@ 0x30
 801fe40:	e042      	b.n	801fec8 <quantize_ord_dither+0xce>
      input_ptr = input_buf[row] + ci;
 801fe42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fe44:	009b      	lsls	r3, r3, #2
 801fe46:	68ba      	ldr	r2, [r7, #8]
 801fe48:	4413      	add	r3, r2
 801fe4a:	681a      	ldr	r2, [r3, #0]
 801fe4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe4e:	18d5      	adds	r5, r2, r3
      output_ptr = output_buf[row];
 801fe50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fe52:	009b      	lsls	r3, r3, #2
 801fe54:	687a      	ldr	r2, [r7, #4]
 801fe56:	4413      	add	r3, r2
 801fe58:	681c      	ldr	r4, [r3, #0]
      colorindex_ci = cquantize->colorindex[ci];
 801fe5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fe5c:	699a      	ldr	r2, [r3, #24]
 801fe5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe60:	009b      	lsls	r3, r3, #2
 801fe62:	4413      	add	r3, r2
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	617b      	str	r3, [r7, #20]
      dither = cquantize->odither[ci][row_index];
 801fe68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fe6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe6c:	330c      	adds	r3, #12
 801fe6e:	009b      	lsls	r3, r3, #2
 801fe70:	4413      	add	r3, r2
 801fe72:	685a      	ldr	r2, [r3, #4]
 801fe74:	69bb      	ldr	r3, [r7, #24]
 801fe76:	019b      	lsls	r3, r3, #6
 801fe78:	4413      	add	r3, r2
 801fe7a:	613b      	str	r3, [r7, #16]
      col_index = 0;
 801fe7c:	2300      	movs	r3, #0
 801fe7e:	637b      	str	r3, [r7, #52]	@ 0x34

      for (col = width; col > 0; col--) {
 801fe80:	69fb      	ldr	r3, [r7, #28]
 801fe82:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fe84:	e01a      	b.n	801febc <quantize_ord_dither+0xc2>
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801fe86:	7822      	ldrb	r2, [r4, #0]
 801fe88:	782b      	ldrb	r3, [r5, #0]
 801fe8a:	4618      	mov	r0, r3
 801fe8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fe8e:	009b      	lsls	r3, r3, #2
 801fe90:	6939      	ldr	r1, [r7, #16]
 801fe92:	440b      	add	r3, r1
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	4403      	add	r3, r0
 801fe98:	4619      	mov	r1, r3
 801fe9a:	697b      	ldr	r3, [r7, #20]
 801fe9c:	440b      	add	r3, r1
 801fe9e:	781b      	ldrb	r3, [r3, #0]
 801fea0:	4413      	add	r3, r2
 801fea2:	b2db      	uxtb	r3, r3
 801fea4:	7023      	strb	r3, [r4, #0]
	input_ptr += nc;
 801fea6:	6a3b      	ldr	r3, [r7, #32]
 801fea8:	441d      	add	r5, r3
	output_ptr++;
 801feaa:	3401      	adds	r4, #1
	col_index = (col_index + 1) & ODITHER_MASK;
 801feac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801feae:	3301      	adds	r3, #1
 801feb0:	f003 030f 	and.w	r3, r3, #15
 801feb4:	637b      	str	r3, [r7, #52]	@ 0x34
      for (col = width; col > 0; col--) {
 801feb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801feb8:	3b01      	subs	r3, #1
 801feba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801febc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d1e1      	bne.n	801fe86 <quantize_ord_dither+0x8c>
    for (ci = 0; ci < nc; ci++) {
 801fec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fec4:	3301      	adds	r3, #1
 801fec6:	633b      	str	r3, [r7, #48]	@ 0x30
 801fec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801feca:	6a3b      	ldr	r3, [r7, #32]
 801fecc:	429a      	cmp	r2, r3
 801fece:	dbb8      	blt.n	801fe42 <quantize_ord_dither+0x48>
      }
    }
    /* Advance row index for next row */
    row_index = (row_index + 1) & ODITHER_MASK;
 801fed0:	69bb      	ldr	r3, [r7, #24]
 801fed2:	3301      	adds	r3, #1
 801fed4:	f003 030f 	and.w	r3, r3, #15
 801fed8:	61bb      	str	r3, [r7, #24]
    cquantize->row_index = row_index;
 801feda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fedc:	69ba      	ldr	r2, [r7, #24]
 801fede:	631a      	str	r2, [r3, #48]	@ 0x30
  for (row = 0; row < num_rows; row++) {
 801fee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fee2:	3301      	adds	r3, #1
 801fee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fee8:	683b      	ldr	r3, [r7, #0]
 801feea:	429a      	cmp	r2, r3
 801feec:	db99      	blt.n	801fe22 <quantize_ord_dither+0x28>
  }
}
 801feee:	bf00      	nop
 801fef0:	bf00      	nop
 801fef2:	3738      	adds	r7, #56	@ 0x38
 801fef4:	46bd      	mov	sp, r7
 801fef6:	bdb0      	pop	{r4, r5, r7, pc}

0801fef8 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 801fef8:	b4f0      	push	{r4, r5, r6, r7}
 801fefa:	b090      	sub	sp, #64	@ 0x40
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	60f8      	str	r0, [r7, #12]
 801ff00:	60b9      	str	r1, [r7, #8]
 801ff02:	607a      	str	r2, [r7, #4]
 801ff04:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801ff06:	68fb      	ldr	r3, [r7, #12]
 801ff08:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 801ff0c:	633b      	str	r3, [r7, #48]	@ 0x30
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801ff0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff10:	699b      	ldr	r3, [r3, #24]
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801ff16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff18:	699b      	ldr	r3, [r3, #24]
 801ff1a:	685b      	ldr	r3, [r3, #4]
 801ff1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801ff1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff20:	699b      	ldr	r3, [r3, #24]
 801ff22:	689b      	ldr	r3, [r3, #8]
 801ff24:	627b      	str	r3, [r7, #36]	@ 0x24
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801ff26:	68fb      	ldr	r3, [r7, #12]
 801ff28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ff2a:	623b      	str	r3, [r7, #32]

  for (row = 0; row < num_rows; row++) {
 801ff2c:	2300      	movs	r3, #0
 801ff2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ff30:	e06a      	b.n	8020008 <quantize3_ord_dither+0x110>
    row_index = cquantize->row_index;
 801ff32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ff36:	61fb      	str	r3, [r7, #28]
    input_ptr = input_buf[row];
 801ff38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff3a:	009b      	lsls	r3, r3, #2
 801ff3c:	68ba      	ldr	r2, [r7, #8]
 801ff3e:	4413      	add	r3, r2
 801ff40:	681c      	ldr	r4, [r3, #0]
    output_ptr = output_buf[row];
 801ff42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ff44:	009b      	lsls	r3, r3, #2
 801ff46:	687a      	ldr	r2, [r7, #4]
 801ff48:	4413      	add	r3, r2
 801ff4a:	681e      	ldr	r6, [r3, #0]
    dither0 = cquantize->odither[0][row_index];
 801ff4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ff50:	69fb      	ldr	r3, [r7, #28]
 801ff52:	019b      	lsls	r3, r3, #6
 801ff54:	4413      	add	r3, r2
 801ff56:	61bb      	str	r3, [r7, #24]
    dither1 = cquantize->odither[1][row_index];
 801ff58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ff5c:	69fb      	ldr	r3, [r7, #28]
 801ff5e:	019b      	lsls	r3, r3, #6
 801ff60:	4413      	add	r3, r2
 801ff62:	617b      	str	r3, [r7, #20]
    dither2 = cquantize->odither[2][row_index];
 801ff64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ff68:	69fb      	ldr	r3, [r7, #28]
 801ff6a:	019b      	lsls	r3, r3, #6
 801ff6c:	4413      	add	r3, r2
 801ff6e:	613b      	str	r3, [r7, #16]
    col_index = 0;
 801ff70:	2300      	movs	r3, #0
 801ff72:	63fb      	str	r3, [r7, #60]	@ 0x3c

    for (col = width; col > 0; col--) {
 801ff74:	6a3b      	ldr	r3, [r7, #32]
 801ff76:	637b      	str	r3, [r7, #52]	@ 0x34
 801ff78:	e038      	b.n	801ffec <quantize3_ord_dither+0xf4>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801ff7a:	4623      	mov	r3, r4
 801ff7c:	1c5c      	adds	r4, r3, #1
 801ff7e:	781b      	ldrb	r3, [r3, #0]
 801ff80:	4619      	mov	r1, r3
 801ff82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ff84:	009b      	lsls	r3, r3, #2
 801ff86:	69ba      	ldr	r2, [r7, #24]
 801ff88:	4413      	add	r3, r2
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	440b      	add	r3, r1
 801ff8e:	461a      	mov	r2, r3
 801ff90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ff92:	4413      	add	r3, r2
 801ff94:	781b      	ldrb	r3, [r3, #0]
 801ff96:	461d      	mov	r5, r3
					dither0[col_index]]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801ff98:	4623      	mov	r3, r4
 801ff9a:	1c5c      	adds	r4, r3, #1
 801ff9c:	781b      	ldrb	r3, [r3, #0]
 801ff9e:	4619      	mov	r1, r3
 801ffa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ffa2:	009b      	lsls	r3, r3, #2
 801ffa4:	697a      	ldr	r2, [r7, #20]
 801ffa6:	4413      	add	r3, r2
 801ffa8:	681b      	ldr	r3, [r3, #0]
 801ffaa:	440b      	add	r3, r1
 801ffac:	461a      	mov	r2, r3
 801ffae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ffb0:	4413      	add	r3, r2
 801ffb2:	781b      	ldrb	r3, [r3, #0]
 801ffb4:	441d      	add	r5, r3
					dither1[col_index]]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 801ffb6:	4623      	mov	r3, r4
 801ffb8:	1c5c      	adds	r4, r3, #1
 801ffba:	781b      	ldrb	r3, [r3, #0]
 801ffbc:	4619      	mov	r1, r3
 801ffbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ffc0:	009b      	lsls	r3, r3, #2
 801ffc2:	693a      	ldr	r2, [r7, #16]
 801ffc4:	4413      	add	r3, r2
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	440b      	add	r3, r1
 801ffca:	461a      	mov	r2, r3
 801ffcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ffce:	4413      	add	r3, r2
 801ffd0:	781b      	ldrb	r3, [r3, #0]
 801ffd2:	441d      	add	r5, r3
					dither2[col_index]]);
      *output_ptr++ = (JSAMPLE) pixcode;
 801ffd4:	4633      	mov	r3, r6
 801ffd6:	1c5e      	adds	r6, r3, #1
 801ffd8:	b2ea      	uxtb	r2, r5
 801ffda:	701a      	strb	r2, [r3, #0]
      col_index = (col_index + 1) & ODITHER_MASK;
 801ffdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ffde:	3301      	adds	r3, #1
 801ffe0:	f003 030f 	and.w	r3, r3, #15
 801ffe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (col = width; col > 0; col--) {
 801ffe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffe8:	3b01      	subs	r3, #1
 801ffea:	637b      	str	r3, [r7, #52]	@ 0x34
 801ffec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d1c3      	bne.n	801ff7a <quantize3_ord_dither+0x82>
    }
    row_index = (row_index + 1) & ODITHER_MASK;
 801fff2:	69fb      	ldr	r3, [r7, #28]
 801fff4:	3301      	adds	r3, #1
 801fff6:	f003 030f 	and.w	r3, r3, #15
 801fffa:	61fb      	str	r3, [r7, #28]
    cquantize->row_index = row_index;
 801fffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fffe:	69fa      	ldr	r2, [r7, #28]
 8020000:	631a      	str	r2, [r3, #48]	@ 0x30
  for (row = 0; row < num_rows; row++) {
 8020002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020004:	3301      	adds	r3, #1
 8020006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802000a:	683b      	ldr	r3, [r7, #0]
 802000c:	429a      	cmp	r2, r3
 802000e:	db90      	blt.n	801ff32 <quantize3_ord_dither+0x3a>
  }
}
 8020010:	bf00      	nop
 8020012:	bf00      	nop
 8020014:	3740      	adds	r7, #64	@ 0x40
 8020016:	46bd      	mov	sp, r7
 8020018:	bcf0      	pop	{r4, r5, r6, r7}
 802001a:	4770      	bx	lr

0802001c <quantize_fs_dither>:

METHODDEF(void)
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
 802001c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020020:	b094      	sub	sp, #80	@ 0x50
 8020022:	af00      	add	r7, sp, #0
 8020024:	60f8      	str	r0, [r7, #12]
 8020026:	60b9      	str	r1, [r7, #8]
 8020028:	607a      	str	r2, [r7, #4]
 802002a:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802002c:	68fb      	ldr	r3, [r7, #12]
 802002e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8020032:	633b      	str	r3, [r7, #48]	@ 0x30
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 802003a:	68fb      	ldr	r3, [r7, #12]
 802003c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802003e:	62bb      	str	r3, [r7, #40]	@ 0x28
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8020040:	68fb      	ldr	r3, [r7, #12]
 8020042:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8020046:	627b      	str	r3, [r7, #36]	@ 0x24
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 8020048:	2300      	movs	r3, #0
 802004a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802004c:	e0b1      	b.n	80201b2 <quantize_fs_dither+0x196>
    /* Initialize output values to 0 so can process components separately */
    FMEMZERO((void FAR *) output_buf[row],
 802004e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020050:	009b      	lsls	r3, r3, #2
 8020052:	687a      	ldr	r2, [r7, #4]
 8020054:	4413      	add	r3, r2
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802005a:	2100      	movs	r1, #0
 802005c:	4618      	mov	r0, r3
 802005e:	f001 ff77 	bl	8021f50 <memset>
	     (size_t) (width * SIZEOF(JSAMPLE)));
    for (ci = 0; ci < nc; ci++) {
 8020062:	2300      	movs	r3, #0
 8020064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020066:	e092      	b.n	802018e <quantize_fs_dither+0x172>
      input_ptr = input_buf[row] + ci;
 8020068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802006a:	009b      	lsls	r3, r3, #2
 802006c:	68ba      	ldr	r2, [r7, #8]
 802006e:	4413      	add	r3, r2
 8020070:	681a      	ldr	r2, [r3, #0]
 8020072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020074:	eb02 0803 	add.w	r8, r2, r3
      output_ptr = output_buf[row];
 8020078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802007a:	009b      	lsls	r3, r3, #2
 802007c:	687a      	ldr	r2, [r7, #4]
 802007e:	4413      	add	r3, r2
 8020080:	681e      	ldr	r6, [r3, #0]
      if (cquantize->on_odd_row) {
 8020082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020086:	2b00      	cmp	r3, #0
 8020088:	d019      	beq.n	80200be <quantize_fs_dither+0xa2>
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 802008a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802008c:	3b01      	subs	r3, #1
 802008e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020090:	fb02 f303 	mul.w	r3, r2, r3
 8020094:	4498      	add	r8, r3
	output_ptr += width-1;
 8020096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020098:	3b01      	subs	r3, #1
 802009a:	441e      	add	r6, r3
	dir = -1;
 802009c:	f04f 33ff 	mov.w	r3, #4294967295
 80200a0:	647b      	str	r3, [r7, #68]	@ 0x44
	dirnc = -nc;
 80200a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200a4:	425b      	negs	r3, r3
 80200a6:	643b      	str	r3, [r7, #64]	@ 0x40
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80200a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80200aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80200ac:	3310      	adds	r3, #16
 80200ae:	009b      	lsls	r3, r3, #2
 80200b0:	4413      	add	r3, r2
 80200b2:	685a      	ldr	r2, [r3, #4]
 80200b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200b6:	3301      	adds	r3, #1
 80200b8:	005b      	lsls	r3, r3, #1
 80200ba:	18d5      	adds	r5, r2, r3
 80200bc:	e009      	b.n	80200d2 <quantize_fs_dither+0xb6>
      } else {
	/* work left to right in this row */
	dir = 1;
 80200be:	2301      	movs	r3, #1
 80200c0:	647b      	str	r3, [r7, #68]	@ 0x44
	dirnc = nc;
 80200c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80200c4:	643b      	str	r3, [r7, #64]	@ 0x40
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
 80200c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80200c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80200ca:	3310      	adds	r3, #16
 80200cc:	009b      	lsls	r3, r3, #2
 80200ce:	4413      	add	r3, r2
 80200d0:	685d      	ldr	r5, [r3, #4]
      }
      colorindex_ci = cquantize->colorindex[ci];
 80200d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200d4:	699a      	ldr	r2, [r3, #24]
 80200d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80200d8:	009b      	lsls	r3, r3, #2
 80200da:	4413      	add	r3, r2
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	623b      	str	r3, [r7, #32]
      colormap_ci = cquantize->sv_colormap[ci];
 80200e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200e2:	691a      	ldr	r2, [r3, #16]
 80200e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80200e6:	009b      	lsls	r3, r3, #2
 80200e8:	4413      	add	r3, r2
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	61fb      	str	r3, [r7, #28]
      /* Preset error values: no error propagated to first pixel from left */
      cur = 0;
 80200ee:	2400      	movs	r4, #0
      /* and no error propagated to row below yet */
      belowerr = bpreverr = 0;
 80200f0:	2300      	movs	r3, #0
 80200f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80200f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80200f6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      for (col = width; col > 0; col--) {
 80200f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80200fc:	e03e      	b.n	802017c <quantize_fs_dither+0x160>
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80200fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020100:	005b      	lsls	r3, r3, #1
 8020102:	442b      	add	r3, r5
 8020104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020108:	4423      	add	r3, r4
 802010a:	3308      	adds	r3, #8
 802010c:	111c      	asrs	r4, r3, #4
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
 802010e:	f898 3000 	ldrb.w	r3, [r8]
 8020112:	441c      	add	r4, r3
	cur = GETJSAMPLE(range_limit[cur]);
 8020114:	4622      	mov	r2, r4
 8020116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020118:	4413      	add	r3, r2
 802011a:	781b      	ldrb	r3, [r3, #0]
 802011c:	461c      	mov	r4, r3
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 802011e:	4622      	mov	r2, r4
 8020120:	6a3b      	ldr	r3, [r7, #32]
 8020122:	4413      	add	r3, r2
 8020124:	781b      	ldrb	r3, [r3, #0]
 8020126:	61bb      	str	r3, [r7, #24]
	*output_ptr += (JSAMPLE) pixcode;
 8020128:	7832      	ldrb	r2, [r6, #0]
 802012a:	69bb      	ldr	r3, [r7, #24]
 802012c:	b2db      	uxtb	r3, r3
 802012e:	4413      	add	r3, r2
 8020130:	b2db      	uxtb	r3, r3
 8020132:	7033      	strb	r3, [r6, #0]
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8020134:	69bb      	ldr	r3, [r7, #24]
 8020136:	69fa      	ldr	r2, [r7, #28]
 8020138:	4413      	add	r3, r2
 802013a:	781b      	ldrb	r3, [r3, #0]
 802013c:	1ae4      	subs	r4, r4, r3
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
 802013e:	617c      	str	r4, [r7, #20]
	delta = cur * 2;
 8020140:	0063      	lsls	r3, r4, #1
 8020142:	613b      	str	r3, [r7, #16]
	cur += delta;		/* form error * 3 */
 8020144:	693b      	ldr	r3, [r7, #16]
 8020146:	441c      	add	r4, r3
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8020148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802014a:	b29a      	uxth	r2, r3
 802014c:	b2a3      	uxth	r3, r4
 802014e:	4413      	add	r3, r2
 8020150:	b29b      	uxth	r3, r3
 8020152:	b21b      	sxth	r3, r3
 8020154:	802b      	strh	r3, [r5, #0]
	cur += delta;		/* form error * 5 */
 8020156:	693b      	ldr	r3, [r7, #16]
 8020158:	441c      	add	r4, r3
	bpreverr = belowerr + cur;
 802015a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802015c:	4423      	add	r3, r4
 802015e:	64bb      	str	r3, [r7, #72]	@ 0x48
	belowerr = bnexterr;
 8020160:	697b      	ldr	r3, [r7, #20]
 8020162:	64fb      	str	r3, [r7, #76]	@ 0x4c
	cur += delta;		/* form error * 7 */
 8020164:	693b      	ldr	r3, [r7, #16]
 8020166:	441c      	add	r4, r3
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
 8020168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802016a:	4498      	add	r8, r3
	output_ptr += dir;	/* advance output ptr to next column */
 802016c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802016e:	441e      	add	r6, r3
	errorptr += dir;	/* advance errorptr to current column */
 8020170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020172:	005b      	lsls	r3, r3, #1
 8020174:	441d      	add	r5, r3
      for (col = width; col > 0; col--) {
 8020176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020178:	3b01      	subs	r3, #1
 802017a:	637b      	str	r3, [r7, #52]	@ 0x34
 802017c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802017e:	2b00      	cmp	r3, #0
 8020180:	d1bd      	bne.n	80200fe <quantize_fs_dither+0xe2>
      }
      /* Post-loop cleanup: we must unload the final error value into the
       * final fserrors[] entry.  Note we need not unload belowerr because
       * it is for the dummy column before or after the actual array.
       */
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8020182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020184:	b21b      	sxth	r3, r3
 8020186:	802b      	strh	r3, [r5, #0]
    for (ci = 0; ci < nc; ci++) {
 8020188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802018a:	3301      	adds	r3, #1
 802018c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802018e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020192:	429a      	cmp	r2, r3
 8020194:	f6ff af68 	blt.w	8020068 <quantize_fs_dither+0x4c>
    }
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8020198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802019a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802019c:	2b00      	cmp	r3, #0
 802019e:	bf0c      	ite	eq
 80201a0:	2301      	moveq	r3, #1
 80201a2:	2300      	movne	r3, #0
 80201a4:	b2db      	uxtb	r3, r3
 80201a6:	461a      	mov	r2, r3
 80201a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201aa:	655a      	str	r2, [r3, #84]	@ 0x54
  for (row = 0; row < num_rows; row++) {
 80201ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80201ae:	3301      	adds	r3, #1
 80201b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80201b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80201b4:	683b      	ldr	r3, [r7, #0]
 80201b6:	429a      	cmp	r2, r3
 80201b8:	f6ff af49 	blt.w	802004e <quantize_fs_dither+0x32>
  }
}
 80201bc:	bf00      	nop
 80201be:	bf00      	nop
 80201c0:	3750      	adds	r7, #80	@ 0x50
 80201c2:	46bd      	mov	sp, r7
 80201c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080201c8 <alloc_fs_workspace>:
 * Allocate workspace for Floyd-Steinberg errors.
 */

LOCAL(void)
alloc_fs_workspace (j_decompress_ptr cinfo)
{
 80201c8:	b580      	push	{r7, lr}
 80201ca:	b086      	sub	sp, #24
 80201cc:	af00      	add	r7, sp, #0
 80201ce:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80201d6:	613b      	str	r3, [r7, #16]
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201dc:	3302      	adds	r3, #2
 80201de:	005b      	lsls	r3, r3, #1
 80201e0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80201e2:	2300      	movs	r3, #0
 80201e4:	617b      	str	r3, [r7, #20]
 80201e6:	e010      	b.n	802020a <alloc_fs_workspace+0x42>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	685b      	ldr	r3, [r3, #4]
 80201ec:	685b      	ldr	r3, [r3, #4]
 80201ee:	68fa      	ldr	r2, [r7, #12]
 80201f0:	2101      	movs	r1, #1
 80201f2:	6878      	ldr	r0, [r7, #4]
 80201f4:	4798      	blx	r3
 80201f6:	4601      	mov	r1, r0
    cquantize->fserrors[i] = (FSERRPTR)
 80201f8:	693a      	ldr	r2, [r7, #16]
 80201fa:	697b      	ldr	r3, [r7, #20]
 80201fc:	3310      	adds	r3, #16
 80201fe:	009b      	lsls	r3, r3, #2
 8020200:	4413      	add	r3, r2
 8020202:	6059      	str	r1, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8020204:	697b      	ldr	r3, [r7, #20]
 8020206:	3301      	adds	r3, #1
 8020208:	617b      	str	r3, [r7, #20]
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802020e:	697a      	ldr	r2, [r7, #20]
 8020210:	429a      	cmp	r2, r3
 8020212:	dbe9      	blt.n	80201e8 <alloc_fs_workspace+0x20>
  }
}
 8020214:	bf00      	nop
 8020216:	bf00      	nop
 8020218:	3718      	adds	r7, #24
 802021a:	46bd      	mov	sp, r7
 802021c:	bd80      	pop	{r7, pc}
	...

08020220 <start_pass_1_quant>:
 * Initialize for one-pass color quantization.
 */

METHODDEF(void)
start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 8020220:	b580      	push	{r7, lr}
 8020222:	b086      	sub	sp, #24
 8020224:	af00      	add	r7, sp, #0
 8020226:	6078      	str	r0, [r7, #4]
 8020228:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8020230:	613b      	str	r3, [r7, #16]
  size_t arraysize;
  int i;

  /* Install my colormap. */
  cinfo->colormap = cquantize->sv_colormap;
 8020232:	693b      	ldr	r3, [r7, #16]
 8020234:	691a      	ldr	r2, [r3, #16]
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 802023c:	693b      	ldr	r3, [r7, #16]
 802023e:	695a      	ldr	r2, [r3, #20]
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 802024c:	2b02      	cmp	r3, #2
 802024e:	d02f      	beq.n	80202b0 <start_pass_1_quant+0x90>
 8020250:	2b02      	cmp	r3, #2
 8020252:	dc56      	bgt.n	8020302 <start_pass_1_quant+0xe2>
 8020254:	2b00      	cmp	r3, #0
 8020256:	d002      	beq.n	802025e <start_pass_1_quant+0x3e>
 8020258:	2b01      	cmp	r3, #1
 802025a:	d00c      	beq.n	8020276 <start_pass_1_quant+0x56>
 802025c:	e051      	b.n	8020302 <start_pass_1_quant+0xe2>
  case JDITHER_NONE:
    if (cinfo->out_color_components == 3)
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020262:	2b03      	cmp	r3, #3
 8020264:	d103      	bne.n	802026e <start_pass_1_quant+0x4e>
      cquantize->pub.color_quantize = color_quantize3;
 8020266:	693b      	ldr	r3, [r7, #16]
 8020268:	4a2d      	ldr	r2, [pc, #180]	@ (8020320 <start_pass_1_quant+0x100>)
 802026a:	605a      	str	r2, [r3, #4]
    else
      cquantize->pub.color_quantize = color_quantize;
    break;
 802026c:	e054      	b.n	8020318 <start_pass_1_quant+0xf8>
      cquantize->pub.color_quantize = color_quantize;
 802026e:	693b      	ldr	r3, [r7, #16]
 8020270:	4a2c      	ldr	r2, [pc, #176]	@ (8020324 <start_pass_1_quant+0x104>)
 8020272:	605a      	str	r2, [r3, #4]
    break;
 8020274:	e050      	b.n	8020318 <start_pass_1_quant+0xf8>
  case JDITHER_ORDERED:
    if (cinfo->out_color_components == 3)
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802027a:	2b03      	cmp	r3, #3
 802027c:	d103      	bne.n	8020286 <start_pass_1_quant+0x66>
      cquantize->pub.color_quantize = quantize3_ord_dither;
 802027e:	693b      	ldr	r3, [r7, #16]
 8020280:	4a29      	ldr	r2, [pc, #164]	@ (8020328 <start_pass_1_quant+0x108>)
 8020282:	605a      	str	r2, [r3, #4]
 8020284:	e002      	b.n	802028c <start_pass_1_quant+0x6c>
    else
      cquantize->pub.color_quantize = quantize_ord_dither;
 8020286:	693b      	ldr	r3, [r7, #16]
 8020288:	4a28      	ldr	r2, [pc, #160]	@ (802032c <start_pass_1_quant+0x10c>)
 802028a:	605a      	str	r2, [r3, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 802028c:	693b      	ldr	r3, [r7, #16]
 802028e:	2200      	movs	r2, #0
 8020290:	631a      	str	r2, [r3, #48]	@ 0x30
    /* If user changed to ordered dither from another mode,
     * we must recreate the color index table with padding.
     * This will cost extra space, but probably isn't very likely.
     */
    if (! cquantize->is_padded)
 8020292:	693b      	ldr	r3, [r7, #16]
 8020294:	69db      	ldr	r3, [r3, #28]
 8020296:	2b00      	cmp	r3, #0
 8020298:	d102      	bne.n	80202a0 <start_pass_1_quant+0x80>
      create_colorindex(cinfo);
 802029a:	6878      	ldr	r0, [r7, #4]
 802029c:	f7ff fbc6 	bl	801fa2c <create_colorindex>
    /* Create ordered-dither tables if we didn't already. */
    if (cquantize->odither[0] == NULL)
 80202a0:	693b      	ldr	r3, [r7, #16]
 80202a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d136      	bne.n	8020316 <start_pass_1_quant+0xf6>
      create_odither_tables(cinfo);
 80202a8:	6878      	ldr	r0, [r7, #4]
 80202aa:	f7ff fcb5 	bl	801fc18 <create_odither_tables>
    break;
 80202ae:	e032      	b.n	8020316 <start_pass_1_quant+0xf6>
  case JDITHER_FS:
    cquantize->pub.color_quantize = quantize_fs_dither;
 80202b0:	693b      	ldr	r3, [r7, #16]
 80202b2:	4a1f      	ldr	r2, [pc, #124]	@ (8020330 <start_pass_1_quant+0x110>)
 80202b4:	605a      	str	r2, [r3, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 80202b6:	693b      	ldr	r3, [r7, #16]
 80202b8:	2200      	movs	r2, #0
 80202ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Allocate Floyd-Steinberg workspace if didn't already. */
    if (cquantize->fserrors[0] == NULL)
 80202bc:	693b      	ldr	r3, [r7, #16]
 80202be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d102      	bne.n	80202ca <start_pass_1_quant+0xaa>
      alloc_fs_workspace(cinfo);
 80202c4:	6878      	ldr	r0, [r7, #4]
 80202c6:	f7ff ff7f 	bl	80201c8 <alloc_fs_workspace>
    /* Initialize the propagated errors to zero. */
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80202ce:	3302      	adds	r3, #2
 80202d0:	005b      	lsls	r3, r3, #1
 80202d2:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < cinfo->out_color_components; i++)
 80202d4:	2300      	movs	r3, #0
 80202d6:	617b      	str	r3, [r7, #20]
 80202d8:	e00d      	b.n	80202f6 <start_pass_1_quant+0xd6>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 80202da:	693a      	ldr	r2, [r7, #16]
 80202dc:	697b      	ldr	r3, [r7, #20]
 80202de:	3310      	adds	r3, #16
 80202e0:	009b      	lsls	r3, r3, #2
 80202e2:	4413      	add	r3, r2
 80202e4:	685b      	ldr	r3, [r3, #4]
 80202e6:	68fa      	ldr	r2, [r7, #12]
 80202e8:	2100      	movs	r1, #0
 80202ea:	4618      	mov	r0, r3
 80202ec:	f001 fe30 	bl	8021f50 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 80202f0:	697b      	ldr	r3, [r7, #20]
 80202f2:	3301      	adds	r3, #1
 80202f4:	617b      	str	r3, [r7, #20]
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80202fa:	697a      	ldr	r2, [r7, #20]
 80202fc:	429a      	cmp	r2, r3
 80202fe:	dbec      	blt.n	80202da <start_pass_1_quant+0xba>
    break;
 8020300:	e00a      	b.n	8020318 <start_pass_1_quant+0xf8>
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8020302:	687b      	ldr	r3, [r7, #4]
 8020304:	681b      	ldr	r3, [r3, #0]
 8020306:	2231      	movs	r2, #49	@ 0x31
 8020308:	615a      	str	r2, [r3, #20]
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	681b      	ldr	r3, [r3, #0]
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	6878      	ldr	r0, [r7, #4]
 8020312:	4798      	blx	r3
    break;
 8020314:	e000      	b.n	8020318 <start_pass_1_quant+0xf8>
    break;
 8020316:	bf00      	nop
  }
}
 8020318:	bf00      	nop
 802031a:	3718      	adds	r7, #24
 802031c:	46bd      	mov	sp, r7
 802031e:	bd80      	pop	{r7, pc}
 8020320:	0801fd49 	.word	0x0801fd49
 8020324:	0801fcab 	.word	0x0801fcab
 8020328:	0801fef9 	.word	0x0801fef9
 802032c:	0801fdfb 	.word	0x0801fdfb
 8020330:	0802001d 	.word	0x0802001d

08020334 <finish_pass_1_quant>:
 * Finish up at the end of the pass.
 */

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
 8020334:	b480      	push	{r7}
 8020336:	b083      	sub	sp, #12
 8020338:	af00      	add	r7, sp, #0
 802033a:	6078      	str	r0, [r7, #4]
  /* no work in 1-pass case */
}
 802033c:	bf00      	nop
 802033e:	370c      	adds	r7, #12
 8020340:	46bd      	mov	sp, r7
 8020342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020346:	4770      	bx	lr

08020348 <new_color_map_1_quant>:
 * Shouldn't get to this module!
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
 8020348:	b580      	push	{r7, lr}
 802034a:	b082      	sub	sp, #8
 802034c:	af00      	add	r7, sp, #0
 802034e:	6078      	str	r0, [r7, #4]
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	222f      	movs	r2, #47	@ 0x2f
 8020356:	615a      	str	r2, [r3, #20]
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	681b      	ldr	r3, [r3, #0]
 802035c:	681b      	ldr	r3, [r3, #0]
 802035e:	6878      	ldr	r0, [r7, #4]
 8020360:	4798      	blx	r3
}
 8020362:	bf00      	nop
 8020364:	3708      	adds	r7, #8
 8020366:	46bd      	mov	sp, r7
 8020368:	bd80      	pop	{r7, pc}
	...

0802036c <jinit_1pass_quantizer>:
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL(void)
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
 802036c:	b580      	push	{r7, lr}
 802036e:	b084      	sub	sp, #16
 8020370:	af00      	add	r7, sp, #0
 8020372:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	685b      	ldr	r3, [r3, #4]
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	2258      	movs	r2, #88	@ 0x58
 802037c:	2101      	movs	r1, #1
 802037e:	6878      	ldr	r0, [r7, #4]
 8020380:	4798      	blx	r3
 8020382:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	68fa      	ldr	r2, [r7, #12]
 8020388:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 802038c:	68fb      	ldr	r3, [r7, #12]
 802038e:	4a22      	ldr	r2, [pc, #136]	@ (8020418 <jinit_1pass_quantizer+0xac>)
 8020390:	601a      	str	r2, [r3, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8020392:	68fb      	ldr	r3, [r7, #12]
 8020394:	4a21      	ldr	r2, [pc, #132]	@ (802041c <jinit_1pass_quantizer+0xb0>)
 8020396:	609a      	str	r2, [r3, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	4a21      	ldr	r2, [pc, #132]	@ (8020420 <jinit_1pass_quantizer+0xb4>)
 802039c:	60da      	str	r2, [r3, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 802039e:	68fb      	ldr	r3, [r7, #12]
 80203a0:	2200      	movs	r2, #0
 80203a2:	645a      	str	r2, [r3, #68]	@ 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	2200      	movs	r2, #0
 80203a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80203ae:	2b04      	cmp	r3, #4
 80203b0:	dd0c      	ble.n	80203cc <jinit_1pass_quantizer+0x60>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	681b      	ldr	r3, [r3, #0]
 80203b6:	2239      	movs	r2, #57	@ 0x39
 80203b8:	615a      	str	r2, [r3, #20]
 80203ba:	687b      	ldr	r3, [r7, #4]
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	2204      	movs	r2, #4
 80203c0:	619a      	str	r2, [r3, #24]
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	681b      	ldr	r3, [r3, #0]
 80203c8:	6878      	ldr	r0, [r7, #4]
 80203ca:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80203d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80203d4:	dd0d      	ble.n	80203f2 <jinit_1pass_quantizer+0x86>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	681b      	ldr	r3, [r3, #0]
 80203da:	223b      	movs	r2, #59	@ 0x3b
 80203dc:	615a      	str	r2, [r3, #20]
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80203e6:	619a      	str	r2, [r3, #24]
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	681b      	ldr	r3, [r3, #0]
 80203ee:	6878      	ldr	r0, [r7, #4]
 80203f0:	4798      	blx	r3

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
 80203f2:	6878      	ldr	r0, [r7, #4]
 80203f4:	f7ff fa74 	bl	801f8e0 <create_colormap>
  create_colorindex(cinfo);
 80203f8:	6878      	ldr	r0, [r7, #4]
 80203fa:	f7ff fb17 	bl	801fa2c <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 80203fe:	687b      	ldr	r3, [r7, #4]
 8020400:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8020404:	2b02      	cmp	r3, #2
 8020406:	d102      	bne.n	802040e <jinit_1pass_quantizer+0xa2>
    alloc_fs_workspace(cinfo);
 8020408:	6878      	ldr	r0, [r7, #4]
 802040a:	f7ff fedd 	bl	80201c8 <alloc_fs_workspace>
}
 802040e:	bf00      	nop
 8020410:	3710      	adds	r7, #16
 8020412:	46bd      	mov	sp, r7
 8020414:	bd80      	pop	{r7, pc}
 8020416:	bf00      	nop
 8020418:	08020221 	.word	0x08020221
 802041c:	08020335 	.word	0x08020335
 8020420:	08020349 	.word	0x08020349

08020424 <prescan_quantize>:
 */

METHODDEF(void)
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY output_buf, int num_rows)
{
 8020424:	b4f0      	push	{r4, r5, r6, r7}
 8020426:	b088      	sub	sp, #32
 8020428:	af00      	add	r7, sp, #0
 802042a:	60f8      	str	r0, [r7, #12]
 802042c:	60b9      	str	r1, [r7, #8]
 802042e:	607a      	str	r2, [r7, #4]
 8020430:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8020438:	617b      	str	r3, [r7, #20]
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 802043a:	697b      	ldr	r3, [r7, #20]
 802043c:	699e      	ldr	r6, [r3, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 802043e:	68fb      	ldr	r3, [r7, #12]
 8020440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020442:	613b      	str	r3, [r7, #16]

  for (row = 0; row < num_rows; row++) {
 8020444:	2300      	movs	r3, #0
 8020446:	61fb      	str	r3, [r7, #28]
 8020448:	e02e      	b.n	80204a8 <prescan_quantize+0x84>
    ptr = input_buf[row];
 802044a:	69fb      	ldr	r3, [r7, #28]
 802044c:	009b      	lsls	r3, r3, #2
 802044e:	68ba      	ldr	r2, [r7, #8]
 8020450:	4413      	add	r3, r2
 8020452:	681c      	ldr	r4, [r3, #0]
    for (col = width; col > 0; col--) {
 8020454:	693b      	ldr	r3, [r7, #16]
 8020456:	61bb      	str	r3, [r7, #24]
 8020458:	e020      	b.n	802049c <prescan_quantize+0x78>
      /* get pixel value and index into the histogram */
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 802045a:	7823      	ldrb	r3, [r4, #0]
 802045c:	08db      	lsrs	r3, r3, #3
 802045e:	b2db      	uxtb	r3, r3
 8020460:	009b      	lsls	r3, r3, #2
 8020462:	4433      	add	r3, r6
 8020464:	681a      	ldr	r2, [r3, #0]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8020466:	1c63      	adds	r3, r4, #1
 8020468:	781b      	ldrb	r3, [r3, #0]
 802046a:	089b      	lsrs	r3, r3, #2
 802046c:	b2db      	uxtb	r3, r3
 802046e:	019b      	lsls	r3, r3, #6
 8020470:	441a      	add	r2, r3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8020472:	1ca3      	adds	r3, r4, #2
 8020474:	781b      	ldrb	r3, [r3, #0]
 8020476:	08db      	lsrs	r3, r3, #3
 8020478:	b2db      	uxtb	r3, r3
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 802047a:	005b      	lsls	r3, r3, #1
 802047c:	18d5      	adds	r5, r2, r3
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
 802047e:	882b      	ldrh	r3, [r5, #0]
 8020480:	3301      	adds	r3, #1
 8020482:	b29b      	uxth	r3, r3
 8020484:	802b      	strh	r3, [r5, #0]
 8020486:	882b      	ldrh	r3, [r5, #0]
 8020488:	2b00      	cmp	r3, #0
 802048a:	d103      	bne.n	8020494 <prescan_quantize+0x70>
	(*histp)--;
 802048c:	882b      	ldrh	r3, [r5, #0]
 802048e:	3b01      	subs	r3, #1
 8020490:	b29b      	uxth	r3, r3
 8020492:	802b      	strh	r3, [r5, #0]
      ptr += 3;
 8020494:	3403      	adds	r4, #3
    for (col = width; col > 0; col--) {
 8020496:	69bb      	ldr	r3, [r7, #24]
 8020498:	3b01      	subs	r3, #1
 802049a:	61bb      	str	r3, [r7, #24]
 802049c:	69bb      	ldr	r3, [r7, #24]
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d1db      	bne.n	802045a <prescan_quantize+0x36>
  for (row = 0; row < num_rows; row++) {
 80204a2:	69fb      	ldr	r3, [r7, #28]
 80204a4:	3301      	adds	r3, #1
 80204a6:	61fb      	str	r3, [r7, #28]
 80204a8:	69fa      	ldr	r2, [r7, #28]
 80204aa:	683b      	ldr	r3, [r7, #0]
 80204ac:	429a      	cmp	r2, r3
 80204ae:	dbcc      	blt.n	802044a <prescan_quantize+0x26>
    }
  }
}
 80204b0:	bf00      	nop
 80204b2:	bf00      	nop
 80204b4:	3720      	adds	r7, #32
 80204b6:	46bd      	mov	sp, r7
 80204b8:	bcf0      	pop	{r4, r5, r6, r7}
 80204ba:	4770      	bx	lr

080204bc <find_biggest_color_pop>:

LOCAL(boxptr)
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
 80204bc:	b4f0      	push	{r4, r5, r6, r7}
 80204be:	b084      	sub	sp, #16
 80204c0:	af00      	add	r7, sp, #0
 80204c2:	6078      	str	r0, [r7, #4]
 80204c4:	6039      	str	r1, [r7, #0]
  register boxptr boxp;
  register int i;
  register long maxc = 0;
 80204c6:	2600      	movs	r6, #0
  boxptr which = NULL;
 80204c8:	2300      	movs	r3, #0
 80204ca:	60fb      	str	r3, [r7, #12]
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80204cc:	2500      	movs	r5, #0
 80204ce:	687c      	ldr	r4, [r7, #4]
 80204d0:	e009      	b.n	80204e6 <find_biggest_color_pop+0x2a>
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 80204d2:	69e3      	ldr	r3, [r4, #28]
 80204d4:	429e      	cmp	r6, r3
 80204d6:	da04      	bge.n	80204e2 <find_biggest_color_pop+0x26>
 80204d8:	69a3      	ldr	r3, [r4, #24]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	dd01      	ble.n	80204e2 <find_biggest_color_pop+0x26>
      which = boxp;
 80204de:	60fc      	str	r4, [r7, #12]
      maxc = boxp->colorcount;
 80204e0:	69e6      	ldr	r6, [r4, #28]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80204e2:	3501      	adds	r5, #1
 80204e4:	3420      	adds	r4, #32
 80204e6:	683b      	ldr	r3, [r7, #0]
 80204e8:	429d      	cmp	r5, r3
 80204ea:	dbf2      	blt.n	80204d2 <find_biggest_color_pop+0x16>
    }
  }
  return which;
 80204ec:	68fb      	ldr	r3, [r7, #12]
}
 80204ee:	4618      	mov	r0, r3
 80204f0:	3710      	adds	r7, #16
 80204f2:	46bd      	mov	sp, r7
 80204f4:	bcf0      	pop	{r4, r5, r6, r7}
 80204f6:	4770      	bx	lr

080204f8 <find_biggest_volume>:

LOCAL(boxptr)
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
 80204f8:	b4f0      	push	{r4, r5, r6, r7}
 80204fa:	b084      	sub	sp, #16
 80204fc:	af00      	add	r7, sp, #0
 80204fe:	6078      	str	r0, [r7, #4]
 8020500:	6039      	str	r1, [r7, #0]
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
 8020502:	2600      	movs	r6, #0
  boxptr which = NULL;
 8020504:	2300      	movs	r3, #0
 8020506:	60fb      	str	r3, [r7, #12]
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8020508:	2500      	movs	r5, #0
 802050a:	687c      	ldr	r4, [r7, #4]
 802050c:	e006      	b.n	802051c <find_biggest_volume+0x24>
    if (boxp->volume > maxv) {
 802050e:	69a3      	ldr	r3, [r4, #24]
 8020510:	429e      	cmp	r6, r3
 8020512:	da01      	bge.n	8020518 <find_biggest_volume+0x20>
      which = boxp;
 8020514:	60fc      	str	r4, [r7, #12]
      maxv = boxp->volume;
 8020516:	69a6      	ldr	r6, [r4, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8020518:	3501      	adds	r5, #1
 802051a:	3420      	adds	r4, #32
 802051c:	683b      	ldr	r3, [r7, #0]
 802051e:	429d      	cmp	r5, r3
 8020520:	dbf5      	blt.n	802050e <find_biggest_volume+0x16>
    }
  }
  return which;
 8020522:	68fb      	ldr	r3, [r7, #12]
}
 8020524:	4618      	mov	r0, r3
 8020526:	3710      	adds	r7, #16
 8020528:	46bd      	mov	sp, r7
 802052a:	bcf0      	pop	{r4, r5, r6, r7}
 802052c:	4770      	bx	lr

0802052e <update_box>:

LOCAL(void)
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
 802052e:	b480      	push	{r7}
 8020530:	b093      	sub	sp, #76	@ 0x4c
 8020532:	af00      	add	r7, sp, #0
 8020534:	6078      	str	r0, [r7, #4]
 8020536:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 802053e:	61bb      	str	r3, [r7, #24]
  hist3d histogram = cquantize->histogram;
 8020540:	69bb      	ldr	r3, [r7, #24]
 8020542:	699b      	ldr	r3, [r3, #24]
 8020544:	617b      	str	r3, [r7, #20]
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8020546:	683b      	ldr	r3, [r7, #0]
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	637b      	str	r3, [r7, #52]	@ 0x34
 802054c:	683b      	ldr	r3, [r7, #0]
 802054e:	685b      	ldr	r3, [r3, #4]
 8020550:	633b      	str	r3, [r7, #48]	@ 0x30
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8020552:	683b      	ldr	r3, [r7, #0]
 8020554:	689b      	ldr	r3, [r3, #8]
 8020556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020558:	683b      	ldr	r3, [r7, #0]
 802055a:	68db      	ldr	r3, [r3, #12]
 802055c:	62bb      	str	r3, [r7, #40]	@ 0x28
  c2min = boxp->c2min;  c2max = boxp->c2max;
 802055e:	683b      	ldr	r3, [r7, #0]
 8020560:	691b      	ldr	r3, [r3, #16]
 8020562:	627b      	str	r3, [r7, #36]	@ 0x24
 8020564:	683b      	ldr	r3, [r7, #0]
 8020566:	695b      	ldr	r3, [r3, #20]
 8020568:	623b      	str	r3, [r7, #32]
  
  if (c0max > c0min)
 802056a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802056c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802056e:	429a      	cmp	r2, r3
 8020570:	dd35      	ble.n	80205de <update_box+0xb0>
    for (c0 = c0min; c0 <= c0max; c0++)
 8020572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020574:	643b      	str	r3, [r7, #64]	@ 0x40
 8020576:	e02e      	b.n	80205d6 <update_box+0xa8>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8020578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802057c:	e024      	b.n	80205c8 <update_box+0x9a>
	histp = & histogram[c0][c1][c2min];
 802057e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020580:	009b      	lsls	r3, r3, #2
 8020582:	697a      	ldr	r2, [r7, #20]
 8020584:	4413      	add	r3, r2
 8020586:	681a      	ldr	r2, [r3, #0]
 8020588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802058a:	019b      	lsls	r3, r3, #6
 802058c:	441a      	add	r2, r3
 802058e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020590:	005b      	lsls	r3, r3, #1
 8020592:	4413      	add	r3, r2
 8020594:	647b      	str	r3, [r7, #68]	@ 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 8020596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020598:	63bb      	str	r3, [r7, #56]	@ 0x38
 802059a:	e00e      	b.n	80205ba <update_box+0x8c>
	  if (*histp++ != 0) {
 802059c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802059e:	1c9a      	adds	r2, r3, #2
 80205a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80205a2:	881b      	ldrh	r3, [r3, #0]
 80205a4:	2b00      	cmp	r3, #0
 80205a6:	d005      	beq.n	80205b4 <update_box+0x86>
	    boxp->c0min = c0min = c0;
 80205a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80205aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80205ac:	683b      	ldr	r3, [r7, #0]
 80205ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80205b0:	601a      	str	r2, [r3, #0]
	    goto have_c0min;
 80205b2:	e015      	b.n	80205e0 <update_box+0xb2>
	for (c2 = c2min; c2 <= c2max; c2++)
 80205b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80205b6:	3301      	adds	r3, #1
 80205b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80205ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80205bc:	6a3b      	ldr	r3, [r7, #32]
 80205be:	429a      	cmp	r2, r3
 80205c0:	ddec      	ble.n	802059c <update_box+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80205c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80205c4:	3301      	adds	r3, #1
 80205c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80205c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80205ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80205cc:	429a      	cmp	r2, r3
 80205ce:	ddd6      	ble.n	802057e <update_box+0x50>
    for (c0 = c0min; c0 <= c0max; c0++)
 80205d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80205d2:	3301      	adds	r3, #1
 80205d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80205d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80205d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80205da:	429a      	cmp	r2, r3
 80205dc:	ddcc      	ble.n	8020578 <update_box+0x4a>
	  }
      }
 have_c0min:
 80205de:	bf00      	nop
  if (c0max > c0min)
 80205e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80205e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205e4:	429a      	cmp	r2, r3
 80205e6:	dd35      	ble.n	8020654 <update_box+0x126>
    for (c0 = c0max; c0 >= c0min; c0--)
 80205e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80205ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80205ec:	e02e      	b.n	802064c <update_box+0x11e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80205ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80205f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80205f2:	e024      	b.n	802063e <update_box+0x110>
	histp = & histogram[c0][c1][c2min];
 80205f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80205f6:	009b      	lsls	r3, r3, #2
 80205f8:	697a      	ldr	r2, [r7, #20]
 80205fa:	4413      	add	r3, r2
 80205fc:	681a      	ldr	r2, [r3, #0]
 80205fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020600:	019b      	lsls	r3, r3, #6
 8020602:	441a      	add	r2, r3
 8020604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020606:	005b      	lsls	r3, r3, #1
 8020608:	4413      	add	r3, r2
 802060a:	647b      	str	r3, [r7, #68]	@ 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 802060c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802060e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020610:	e00e      	b.n	8020630 <update_box+0x102>
	  if (*histp++ != 0) {
 8020612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020614:	1c9a      	adds	r2, r3, #2
 8020616:	647a      	str	r2, [r7, #68]	@ 0x44
 8020618:	881b      	ldrh	r3, [r3, #0]
 802061a:	2b00      	cmp	r3, #0
 802061c:	d005      	beq.n	802062a <update_box+0xfc>
	    boxp->c0max = c0max = c0;
 802061e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020620:	633b      	str	r3, [r7, #48]	@ 0x30
 8020622:	683b      	ldr	r3, [r7, #0]
 8020624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020626:	605a      	str	r2, [r3, #4]
	    goto have_c0max;
 8020628:	e015      	b.n	8020656 <update_box+0x128>
	for (c2 = c2min; c2 <= c2max; c2++)
 802062a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802062c:	3301      	adds	r3, #1
 802062e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020632:	6a3b      	ldr	r3, [r7, #32]
 8020634:	429a      	cmp	r2, r3
 8020636:	ddec      	ble.n	8020612 <update_box+0xe4>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8020638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802063a:	3301      	adds	r3, #1
 802063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802063e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020642:	429a      	cmp	r2, r3
 8020644:	ddd6      	ble.n	80205f4 <update_box+0xc6>
    for (c0 = c0max; c0 >= c0min; c0--)
 8020646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020648:	3b01      	subs	r3, #1
 802064a:	643b      	str	r3, [r7, #64]	@ 0x40
 802064c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802064e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020650:	429a      	cmp	r2, r3
 8020652:	dacc      	bge.n	80205ee <update_box+0xc0>
	  }
      }
 have_c0max:
 8020654:	bf00      	nop
  if (c1max > c1min)
 8020656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802065a:	429a      	cmp	r2, r3
 802065c:	dd35      	ble.n	80206ca <update_box+0x19c>
    for (c1 = c1min; c1 <= c1max; c1++)
 802065e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020662:	e02e      	b.n	80206c2 <update_box+0x194>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8020664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020666:	643b      	str	r3, [r7, #64]	@ 0x40
 8020668:	e024      	b.n	80206b4 <update_box+0x186>
	histp = & histogram[c0][c1][c2min];
 802066a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802066c:	009b      	lsls	r3, r3, #2
 802066e:	697a      	ldr	r2, [r7, #20]
 8020670:	4413      	add	r3, r2
 8020672:	681a      	ldr	r2, [r3, #0]
 8020674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020676:	019b      	lsls	r3, r3, #6
 8020678:	441a      	add	r2, r3
 802067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802067c:	005b      	lsls	r3, r3, #1
 802067e:	4413      	add	r3, r2
 8020680:	647b      	str	r3, [r7, #68]	@ 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 8020682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020684:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020686:	e00e      	b.n	80206a6 <update_box+0x178>
	  if (*histp++ != 0) {
 8020688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802068a:	1c9a      	adds	r2, r3, #2
 802068c:	647a      	str	r2, [r7, #68]	@ 0x44
 802068e:	881b      	ldrh	r3, [r3, #0]
 8020690:	2b00      	cmp	r3, #0
 8020692:	d005      	beq.n	80206a0 <update_box+0x172>
	    boxp->c1min = c1min = c1;
 8020694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020698:	683b      	ldr	r3, [r7, #0]
 802069a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802069c:	609a      	str	r2, [r3, #8]
	    goto have_c1min;
 802069e:	e015      	b.n	80206cc <update_box+0x19e>
	for (c2 = c2min; c2 <= c2max; c2++)
 80206a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80206a2:	3301      	adds	r3, #1
 80206a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80206a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80206a8:	6a3b      	ldr	r3, [r7, #32]
 80206aa:	429a      	cmp	r2, r3
 80206ac:	ddec      	ble.n	8020688 <update_box+0x15a>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80206ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80206b0:	3301      	adds	r3, #1
 80206b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80206b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80206b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80206b8:	429a      	cmp	r2, r3
 80206ba:	ddd6      	ble.n	802066a <update_box+0x13c>
    for (c1 = c1min; c1 <= c1max; c1++)
 80206bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80206be:	3301      	adds	r3, #1
 80206c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80206c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80206c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80206c6:	429a      	cmp	r2, r3
 80206c8:	ddcc      	ble.n	8020664 <update_box+0x136>
	  }
      }
 have_c1min:
 80206ca:	bf00      	nop
  if (c1max > c1min)
 80206cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80206ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80206d0:	429a      	cmp	r2, r3
 80206d2:	dd35      	ble.n	8020740 <update_box+0x212>
    for (c1 = c1max; c1 >= c1min; c1--)
 80206d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80206d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80206d8:	e02e      	b.n	8020738 <update_box+0x20a>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80206da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80206dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80206de:	e024      	b.n	802072a <update_box+0x1fc>
	histp = & histogram[c0][c1][c2min];
 80206e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80206e2:	009b      	lsls	r3, r3, #2
 80206e4:	697a      	ldr	r2, [r7, #20]
 80206e6:	4413      	add	r3, r2
 80206e8:	681a      	ldr	r2, [r3, #0]
 80206ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80206ec:	019b      	lsls	r3, r3, #6
 80206ee:	441a      	add	r2, r3
 80206f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206f2:	005b      	lsls	r3, r3, #1
 80206f4:	4413      	add	r3, r2
 80206f6:	647b      	str	r3, [r7, #68]	@ 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 80206f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80206fc:	e00e      	b.n	802071c <update_box+0x1ee>
	  if (*histp++ != 0) {
 80206fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020700:	1c9a      	adds	r2, r3, #2
 8020702:	647a      	str	r2, [r7, #68]	@ 0x44
 8020704:	881b      	ldrh	r3, [r3, #0]
 8020706:	2b00      	cmp	r3, #0
 8020708:	d005      	beq.n	8020716 <update_box+0x1e8>
	    boxp->c1max = c1max = c1;
 802070a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802070c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802070e:	683b      	ldr	r3, [r7, #0]
 8020710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020712:	60da      	str	r2, [r3, #12]
	    goto have_c1max;
 8020714:	e015      	b.n	8020742 <update_box+0x214>
	for (c2 = c2min; c2 <= c2max; c2++)
 8020716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020718:	3301      	adds	r3, #1
 802071a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802071c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802071e:	6a3b      	ldr	r3, [r7, #32]
 8020720:	429a      	cmp	r2, r3
 8020722:	ddec      	ble.n	80206fe <update_box+0x1d0>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8020724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020726:	3301      	adds	r3, #1
 8020728:	643b      	str	r3, [r7, #64]	@ 0x40
 802072a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802072c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802072e:	429a      	cmp	r2, r3
 8020730:	ddd6      	ble.n	80206e0 <update_box+0x1b2>
    for (c1 = c1max; c1 >= c1min; c1--)
 8020732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020734:	3b01      	subs	r3, #1
 8020736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020738:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802073a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802073c:	429a      	cmp	r2, r3
 802073e:	dacc      	bge.n	80206da <update_box+0x1ac>
	  }
      }
 have_c1max:
 8020740:	bf00      	nop
  if (c2max > c2min)
 8020742:	6a3a      	ldr	r2, [r7, #32]
 8020744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020746:	429a      	cmp	r2, r3
 8020748:	dd36      	ble.n	80207b8 <update_box+0x28a>
    for (c2 = c2min; c2 <= c2max; c2++)
 802074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802074c:	63bb      	str	r3, [r7, #56]	@ 0x38
 802074e:	e02f      	b.n	80207b0 <update_box+0x282>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8020750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020752:	643b      	str	r3, [r7, #64]	@ 0x40
 8020754:	e025      	b.n	80207a2 <update_box+0x274>
	histp = & histogram[c0][c1min][c2];
 8020756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020758:	009b      	lsls	r3, r3, #2
 802075a:	697a      	ldr	r2, [r7, #20]
 802075c:	4413      	add	r3, r2
 802075e:	681a      	ldr	r2, [r3, #0]
 8020760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020762:	019b      	lsls	r3, r3, #6
 8020764:	441a      	add	r2, r3
 8020766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020768:	005b      	lsls	r3, r3, #1
 802076a:	4413      	add	r3, r2
 802076c:	647b      	str	r3, [r7, #68]	@ 0x44
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 802076e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020772:	e00f      	b.n	8020794 <update_box+0x266>
	  if (*histp != 0) {
 8020774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020776:	881b      	ldrh	r3, [r3, #0]
 8020778:	2b00      	cmp	r3, #0
 802077a:	d005      	beq.n	8020788 <update_box+0x25a>
	    boxp->c2min = c2min = c2;
 802077c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802077e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020780:	683b      	ldr	r3, [r7, #0]
 8020782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020784:	611a      	str	r2, [r3, #16]
	    goto have_c2min;
 8020786:	e018      	b.n	80207ba <update_box+0x28c>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8020788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802078a:	3301      	adds	r3, #1
 802078c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802078e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020790:	3340      	adds	r3, #64	@ 0x40
 8020792:	647b      	str	r3, [r7, #68]	@ 0x44
 8020794:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020798:	429a      	cmp	r2, r3
 802079a:	ddeb      	ble.n	8020774 <update_box+0x246>
      for (c0 = c0min; c0 <= c0max; c0++) {
 802079c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802079e:	3301      	adds	r3, #1
 80207a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80207a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80207a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80207a6:	429a      	cmp	r2, r3
 80207a8:	ddd5      	ble.n	8020756 <update_box+0x228>
    for (c2 = c2min; c2 <= c2max; c2++)
 80207aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80207ac:	3301      	adds	r3, #1
 80207ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80207b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80207b2:	6a3b      	ldr	r3, [r7, #32]
 80207b4:	429a      	cmp	r2, r3
 80207b6:	ddcb      	ble.n	8020750 <update_box+0x222>
	  }
      }
 have_c2min:
 80207b8:	bf00      	nop
  if (c2max > c2min)
 80207ba:	6a3a      	ldr	r2, [r7, #32]
 80207bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207be:	429a      	cmp	r2, r3
 80207c0:	dd36      	ble.n	8020830 <update_box+0x302>
    for (c2 = c2max; c2 >= c2min; c2--)
 80207c2:	6a3b      	ldr	r3, [r7, #32]
 80207c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80207c6:	e02f      	b.n	8020828 <update_box+0x2fa>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80207c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80207cc:	e025      	b.n	802081a <update_box+0x2ec>
	histp = & histogram[c0][c1min][c2];
 80207ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80207d0:	009b      	lsls	r3, r3, #2
 80207d2:	697a      	ldr	r2, [r7, #20]
 80207d4:	4413      	add	r3, r2
 80207d6:	681a      	ldr	r2, [r3, #0]
 80207d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207da:	019b      	lsls	r3, r3, #6
 80207dc:	441a      	add	r2, r3
 80207de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80207e0:	005b      	lsls	r3, r3, #1
 80207e2:	4413      	add	r3, r2
 80207e4:	647b      	str	r3, [r7, #68]	@ 0x44
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80207e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80207ea:	e00f      	b.n	802080c <update_box+0x2de>
	  if (*histp != 0) {
 80207ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80207ee:	881b      	ldrh	r3, [r3, #0]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d005      	beq.n	8020800 <update_box+0x2d2>
	    boxp->c2max = c2max = c2;
 80207f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80207f6:	623b      	str	r3, [r7, #32]
 80207f8:	683b      	ldr	r3, [r7, #0]
 80207fa:	6a3a      	ldr	r2, [r7, #32]
 80207fc:	615a      	str	r2, [r3, #20]
	    goto have_c2max;
 80207fe:	e018      	b.n	8020832 <update_box+0x304>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8020800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020802:	3301      	adds	r3, #1
 8020804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020808:	3340      	adds	r3, #64	@ 0x40
 802080a:	647b      	str	r3, [r7, #68]	@ 0x44
 802080c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802080e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020810:	429a      	cmp	r2, r3
 8020812:	ddeb      	ble.n	80207ec <update_box+0x2be>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8020814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020816:	3301      	adds	r3, #1
 8020818:	643b      	str	r3, [r7, #64]	@ 0x40
 802081a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802081c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802081e:	429a      	cmp	r2, r3
 8020820:	ddd5      	ble.n	80207ce <update_box+0x2a0>
    for (c2 = c2max; c2 >= c2min; c2--)
 8020822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020824:	3b01      	subs	r3, #1
 8020826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802082c:	429a      	cmp	r2, r3
 802082e:	dacb      	bge.n	80207c8 <update_box+0x29a>
	  }
      }
 have_c2max:
 8020830:	bf00      	nop
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8020832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020836:	1ad3      	subs	r3, r2, r3
 8020838:	00db      	lsls	r3, r3, #3
 802083a:	005b      	lsls	r3, r3, #1
 802083c:	613b      	str	r3, [r7, #16]
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 802083e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020842:	1ad3      	subs	r3, r2, r3
 8020844:	009a      	lsls	r2, r3, #2
 8020846:	4613      	mov	r3, r2
 8020848:	005b      	lsls	r3, r3, #1
 802084a:	4413      	add	r3, r2
 802084c:	60fb      	str	r3, [r7, #12]
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 802084e:	6a3a      	ldr	r2, [r7, #32]
 8020850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020852:	1ad3      	subs	r3, r2, r3
 8020854:	00db      	lsls	r3, r3, #3
 8020856:	60bb      	str	r3, [r7, #8]
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8020858:	693b      	ldr	r3, [r7, #16]
 802085a:	fb03 f203 	mul.w	r2, r3, r3
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	fb03 f303 	mul.w	r3, r3, r3
 8020864:	441a      	add	r2, r3
 8020866:	68bb      	ldr	r3, [r7, #8]
 8020868:	fb03 f303 	mul.w	r3, r3, r3
 802086c:	441a      	add	r2, r3
 802086e:	683b      	ldr	r3, [r7, #0]
 8020870:	619a      	str	r2, [r3, #24]
  
  /* Now scan remaining volume of box and compute population */
  ccount = 0;
 8020872:	2300      	movs	r3, #0
 8020874:	61fb      	str	r3, [r7, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 8020876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020878:	643b      	str	r3, [r7, #64]	@ 0x40
 802087a:	e02c      	b.n	80208d6 <update_box+0x3a8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 802087c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020880:	e022      	b.n	80208c8 <update_box+0x39a>
      histp = & histogram[c0][c1][c2min];
 8020882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020884:	009b      	lsls	r3, r3, #2
 8020886:	697a      	ldr	r2, [r7, #20]
 8020888:	4413      	add	r3, r2
 802088a:	681a      	ldr	r2, [r3, #0]
 802088c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802088e:	019b      	lsls	r3, r3, #6
 8020890:	441a      	add	r2, r3
 8020892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020894:	005b      	lsls	r3, r3, #1
 8020896:	4413      	add	r3, r2
 8020898:	647b      	str	r3, [r7, #68]	@ 0x44
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 802089a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802089c:	63bb      	str	r3, [r7, #56]	@ 0x38
 802089e:	e00c      	b.n	80208ba <update_box+0x38c>
	if (*histp != 0) {
 80208a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80208a2:	881b      	ldrh	r3, [r3, #0]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d002      	beq.n	80208ae <update_box+0x380>
	  ccount++;
 80208a8:	69fb      	ldr	r3, [r7, #28]
 80208aa:	3301      	adds	r3, #1
 80208ac:	61fb      	str	r3, [r7, #28]
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80208ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208b0:	3301      	adds	r3, #1
 80208b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80208b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80208b6:	3302      	adds	r3, #2
 80208b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80208ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80208bc:	6a3b      	ldr	r3, [r7, #32]
 80208be:	429a      	cmp	r2, r3
 80208c0:	ddee      	ble.n	80208a0 <update_box+0x372>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80208c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80208c4:	3301      	adds	r3, #1
 80208c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80208c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80208ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80208cc:	429a      	cmp	r2, r3
 80208ce:	ddd8      	ble.n	8020882 <update_box+0x354>
  for (c0 = c0min; c0 <= c0max; c0++)
 80208d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80208d2:	3301      	adds	r3, #1
 80208d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80208d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80208d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80208da:	429a      	cmp	r2, r3
 80208dc:	ddce      	ble.n	802087c <update_box+0x34e>
	}
    }
  boxp->colorcount = ccount;
 80208de:	683b      	ldr	r3, [r7, #0]
 80208e0:	69fa      	ldr	r2, [r7, #28]
 80208e2:	61da      	str	r2, [r3, #28]
}
 80208e4:	bf00      	nop
 80208e6:	374c      	adds	r7, #76	@ 0x4c
 80208e8:	46bd      	mov	sp, r7
 80208ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ee:	4770      	bx	lr

080208f0 <median_cut>:

LOCAL(int)
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
 80208f0:	b5b0      	push	{r4, r5, r7, lr}
 80208f2:	b08a      	sub	sp, #40	@ 0x28
 80208f4:	af00      	add	r7, sp, #0
 80208f6:	60f8      	str	r0, [r7, #12]
 80208f8:	60b9      	str	r1, [r7, #8]
 80208fa:	607a      	str	r2, [r7, #4]
 80208fc:	603b      	str	r3, [r7, #0]
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
 80208fe:	e085      	b.n	8020a0c <median_cut+0x11c>
    /* Select box to split.
     * Current algorithm: by population for first half, then by volume.
     */
    if (numboxes*2 <= desired_colors) {
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	005b      	lsls	r3, r3, #1
 8020904:	683a      	ldr	r2, [r7, #0]
 8020906:	429a      	cmp	r2, r3
 8020908:	db05      	blt.n	8020916 <median_cut+0x26>
      b1 = find_biggest_color_pop(boxlist, numboxes);
 802090a:	6879      	ldr	r1, [r7, #4]
 802090c:	68b8      	ldr	r0, [r7, #8]
 802090e:	f7ff fdd5 	bl	80204bc <find_biggest_color_pop>
 8020912:	4604      	mov	r4, r0
 8020914:	e004      	b.n	8020920 <median_cut+0x30>
    } else {
      b1 = find_biggest_volume(boxlist, numboxes);
 8020916:	6879      	ldr	r1, [r7, #4]
 8020918:	68b8      	ldr	r0, [r7, #8]
 802091a:	f7ff fded 	bl	80204f8 <find_biggest_volume>
 802091e:	4604      	mov	r4, r0
    }
    if (b1 == NULL)		/* no splittable boxes left! */
 8020920:	2c00      	cmp	r4, #0
 8020922:	d079      	beq.n	8020a18 <median_cut+0x128>
      break;
    b2 = &boxlist[numboxes];	/* where new box will go */
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	015b      	lsls	r3, r3, #5
 8020928:	68ba      	ldr	r2, [r7, #8]
 802092a:	18d5      	adds	r5, r2, r3
    /* Copy the color bounds to the new box. */
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 802092c:	6863      	ldr	r3, [r4, #4]
 802092e:	606b      	str	r3, [r5, #4]
 8020930:	68e3      	ldr	r3, [r4, #12]
 8020932:	60eb      	str	r3, [r5, #12]
 8020934:	6963      	ldr	r3, [r4, #20]
 8020936:	616b      	str	r3, [r5, #20]
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8020938:	6823      	ldr	r3, [r4, #0]
 802093a:	602b      	str	r3, [r5, #0]
 802093c:	68a3      	ldr	r3, [r4, #8]
 802093e:	60ab      	str	r3, [r5, #8]
 8020940:	6923      	ldr	r3, [r4, #16]
 8020942:	612b      	str	r3, [r5, #16]
    /* Choose which axis to split the box on.
     * Current algorithm: longest scaled axis.
     * See notes in update_box about scaling distances.
     */
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8020944:	6862      	ldr	r2, [r4, #4]
 8020946:	6823      	ldr	r3, [r4, #0]
 8020948:	1ad3      	subs	r3, r2, r3
 802094a:	00db      	lsls	r3, r3, #3
 802094c:	005b      	lsls	r3, r3, #1
 802094e:	61fb      	str	r3, [r7, #28]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8020950:	68e2      	ldr	r2, [r4, #12]
 8020952:	68a3      	ldr	r3, [r4, #8]
 8020954:	1ad3      	subs	r3, r2, r3
 8020956:	009a      	lsls	r2, r3, #2
 8020958:	4613      	mov	r3, r2
 802095a:	005b      	lsls	r3, r3, #1
 802095c:	4413      	add	r3, r2
 802095e:	61bb      	str	r3, [r7, #24]
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8020960:	6962      	ldr	r2, [r4, #20]
 8020962:	6923      	ldr	r3, [r4, #16]
 8020964:	1ad3      	subs	r3, r2, r3
 8020966:	00db      	lsls	r3, r3, #3
 8020968:	617b      	str	r3, [r7, #20]
    /* We want to break any ties in favor of green, then red, blue last.
     * This code does the right thing for R,G,B or B,G,R color orders only.
     */
#if RGB_RED == 0
    cmax = c1; n = 1;
 802096a:	69bb      	ldr	r3, [r7, #24]
 802096c:	623b      	str	r3, [r7, #32]
 802096e:	2301      	movs	r3, #1
 8020970:	627b      	str	r3, [r7, #36]	@ 0x24
    if (c0 > cmax) { cmax = c0; n = 0; }
 8020972:	69fa      	ldr	r2, [r7, #28]
 8020974:	6a3b      	ldr	r3, [r7, #32]
 8020976:	429a      	cmp	r2, r3
 8020978:	dd03      	ble.n	8020982 <median_cut+0x92>
 802097a:	69fb      	ldr	r3, [r7, #28]
 802097c:	623b      	str	r3, [r7, #32]
 802097e:	2300      	movs	r3, #0
 8020980:	627b      	str	r3, [r7, #36]	@ 0x24
    if (c2 > cmax) { n = 2; }
 8020982:	697a      	ldr	r2, [r7, #20]
 8020984:	6a3b      	ldr	r3, [r7, #32]
 8020986:	429a      	cmp	r2, r3
 8020988:	dd01      	ble.n	802098e <median_cut+0x9e>
 802098a:	2302      	movs	r3, #2
 802098c:	627b      	str	r3, [r7, #36]	@ 0x24
     * Current algorithm: split at halfway point.
     * (Since the box has been shrunk to minimum volume,
     * any split will produce two nonempty subboxes.)
     * Note that lb value is max for lower box, so must be < old max.
     */
    switch (n) {
 802098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020990:	2b02      	cmp	r3, #2
 8020992:	d023      	beq.n	80209dc <median_cut+0xec>
 8020994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020996:	2b02      	cmp	r3, #2
 8020998:	dc2d      	bgt.n	80209f6 <median_cut+0x106>
 802099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802099c:	2b00      	cmp	r3, #0
 802099e:	d003      	beq.n	80209a8 <median_cut+0xb8>
 80209a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209a2:	2b01      	cmp	r3, #1
 80209a4:	d00d      	beq.n	80209c2 <median_cut+0xd2>
 80209a6:	e026      	b.n	80209f6 <median_cut+0x106>
    case 0:
      lb = (b1->c0max + b1->c0min) / 2;
 80209a8:	6862      	ldr	r2, [r4, #4]
 80209aa:	6823      	ldr	r3, [r4, #0]
 80209ac:	4413      	add	r3, r2
 80209ae:	0fda      	lsrs	r2, r3, #31
 80209b0:	4413      	add	r3, r2
 80209b2:	105b      	asrs	r3, r3, #1
 80209b4:	613b      	str	r3, [r7, #16]
      b1->c0max = lb;
 80209b6:	693b      	ldr	r3, [r7, #16]
 80209b8:	6063      	str	r3, [r4, #4]
      b2->c0min = lb+1;
 80209ba:	693b      	ldr	r3, [r7, #16]
 80209bc:	3301      	adds	r3, #1
 80209be:	602b      	str	r3, [r5, #0]
      break;
 80209c0:	e019      	b.n	80209f6 <median_cut+0x106>
    case 1:
      lb = (b1->c1max + b1->c1min) / 2;
 80209c2:	68e2      	ldr	r2, [r4, #12]
 80209c4:	68a3      	ldr	r3, [r4, #8]
 80209c6:	4413      	add	r3, r2
 80209c8:	0fda      	lsrs	r2, r3, #31
 80209ca:	4413      	add	r3, r2
 80209cc:	105b      	asrs	r3, r3, #1
 80209ce:	613b      	str	r3, [r7, #16]
      b1->c1max = lb;
 80209d0:	693b      	ldr	r3, [r7, #16]
 80209d2:	60e3      	str	r3, [r4, #12]
      b2->c1min = lb+1;
 80209d4:	693b      	ldr	r3, [r7, #16]
 80209d6:	3301      	adds	r3, #1
 80209d8:	60ab      	str	r3, [r5, #8]
      break;
 80209da:	e00c      	b.n	80209f6 <median_cut+0x106>
    case 2:
      lb = (b1->c2max + b1->c2min) / 2;
 80209dc:	6962      	ldr	r2, [r4, #20]
 80209de:	6923      	ldr	r3, [r4, #16]
 80209e0:	4413      	add	r3, r2
 80209e2:	0fda      	lsrs	r2, r3, #31
 80209e4:	4413      	add	r3, r2
 80209e6:	105b      	asrs	r3, r3, #1
 80209e8:	613b      	str	r3, [r7, #16]
      b1->c2max = lb;
 80209ea:	693b      	ldr	r3, [r7, #16]
 80209ec:	6163      	str	r3, [r4, #20]
      b2->c2min = lb+1;
 80209ee:	693b      	ldr	r3, [r7, #16]
 80209f0:	3301      	adds	r3, #1
 80209f2:	612b      	str	r3, [r5, #16]
      break;
 80209f4:	bf00      	nop
    }
    /* Update stats for boxes */
    update_box(cinfo, b1);
 80209f6:	4621      	mov	r1, r4
 80209f8:	68f8      	ldr	r0, [r7, #12]
 80209fa:	f7ff fd98 	bl	802052e <update_box>
    update_box(cinfo, b2);
 80209fe:	4629      	mov	r1, r5
 8020a00:	68f8      	ldr	r0, [r7, #12]
 8020a02:	f7ff fd94 	bl	802052e <update_box>
    numboxes++;
 8020a06:	687b      	ldr	r3, [r7, #4]
 8020a08:	3301      	adds	r3, #1
 8020a0a:	607b      	str	r3, [r7, #4]
  while (numboxes < desired_colors) {
 8020a0c:	687a      	ldr	r2, [r7, #4]
 8020a0e:	683b      	ldr	r3, [r7, #0]
 8020a10:	429a      	cmp	r2, r3
 8020a12:	f6ff af75 	blt.w	8020900 <median_cut+0x10>
 8020a16:	e000      	b.n	8020a1a <median_cut+0x12a>
      break;
 8020a18:	bf00      	nop
  }
  return numboxes;
 8020a1a:	687b      	ldr	r3, [r7, #4]
}
 8020a1c:	4618      	mov	r0, r3
 8020a1e:	3728      	adds	r7, #40	@ 0x28
 8020a20:	46bd      	mov	sp, r7
 8020a22:	bdb0      	pop	{r4, r5, r7, pc}

08020a24 <compute_color>:


LOCAL(void)
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
 8020a24:	b480      	push	{r7}
 8020a26:	b097      	sub	sp, #92	@ 0x5c
 8020a28:	af00      	add	r7, sp, #0
 8020a2a:	60f8      	str	r0, [r7, #12]
 8020a2c:	60b9      	str	r1, [r7, #8]
 8020a2e:	607a      	str	r2, [r7, #4]
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8020a30:	68fb      	ldr	r3, [r7, #12]
 8020a32:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8020a36:	637b      	str	r3, [r7, #52]	@ 0x34
  hist3d histogram = cquantize->histogram;
 8020a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020a3a:	699b      	ldr	r3, [r3, #24]
 8020a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
 8020a3e:	2300      	movs	r3, #0
 8020a40:	647b      	str	r3, [r7, #68]	@ 0x44
  long c0total = 0;
 8020a42:	2300      	movs	r3, #0
 8020a44:	643b      	str	r3, [r7, #64]	@ 0x40
  long c1total = 0;
 8020a46:	2300      	movs	r3, #0
 8020a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  long c2total = 0;
 8020a4a:	2300      	movs	r3, #0
 8020a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8020a4e:	68bb      	ldr	r3, [r7, #8]
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020a54:	68bb      	ldr	r3, [r7, #8]
 8020a56:	685b      	ldr	r3, [r3, #4]
 8020a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8020a5a:	68bb      	ldr	r3, [r7, #8]
 8020a5c:	689b      	ldr	r3, [r3, #8]
 8020a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020a60:	68bb      	ldr	r3, [r7, #8]
 8020a62:	68db      	ldr	r3, [r3, #12]
 8020a64:	623b      	str	r3, [r7, #32]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8020a66:	68bb      	ldr	r3, [r7, #8]
 8020a68:	691b      	ldr	r3, [r3, #16]
 8020a6a:	61fb      	str	r3, [r7, #28]
 8020a6c:	68bb      	ldr	r3, [r7, #8]
 8020a6e:	695b      	ldr	r3, [r3, #20]
 8020a70:	61bb      	str	r3, [r7, #24]
  
  for (c0 = c0min; c0 <= c0max; c0++)
 8020a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020a74:	653b      	str	r3, [r7, #80]	@ 0x50
 8020a76:	e049      	b.n	8020b0c <compute_color+0xe8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8020a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020a7c:	e03f      	b.n	8020afe <compute_color+0xda>
      histp = & histogram[c0][c1][c2min];
 8020a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020a80:	009b      	lsls	r3, r3, #2
 8020a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020a84:	4413      	add	r3, r2
 8020a86:	681a      	ldr	r2, [r3, #0]
 8020a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020a8a:	019b      	lsls	r3, r3, #6
 8020a8c:	441a      	add	r2, r3
 8020a8e:	69fb      	ldr	r3, [r7, #28]
 8020a90:	005b      	lsls	r3, r3, #1
 8020a92:	4413      	add	r3, r2
 8020a94:	657b      	str	r3, [r7, #84]	@ 0x54
      for (c2 = c2min; c2 <= c2max; c2++) {
 8020a96:	69fb      	ldr	r3, [r7, #28]
 8020a98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020a9a:	e029      	b.n	8020af0 <compute_color+0xcc>
	if ((count = *histp++) != 0) {
 8020a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020a9e:	1c9a      	adds	r2, r3, #2
 8020aa0:	657a      	str	r2, [r7, #84]	@ 0x54
 8020aa2:	881b      	ldrh	r3, [r3, #0]
 8020aa4:	617b      	str	r3, [r7, #20]
 8020aa6:	697b      	ldr	r3, [r7, #20]
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d01e      	beq.n	8020aea <compute_color+0xc6>
	  total += count;
 8020aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020aae:	697b      	ldr	r3, [r7, #20]
 8020ab0:	4413      	add	r3, r2
 8020ab2:	647b      	str	r3, [r7, #68]	@ 0x44
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8020ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020ab6:	00db      	lsls	r3, r3, #3
 8020ab8:	3304      	adds	r3, #4
 8020aba:	697a      	ldr	r2, [r7, #20]
 8020abc:	fb02 f303 	mul.w	r3, r2, r3
 8020ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020ac2:	4413      	add	r3, r2
 8020ac4:	643b      	str	r3, [r7, #64]	@ 0x40
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8020ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020ac8:	009b      	lsls	r3, r3, #2
 8020aca:	3302      	adds	r3, #2
 8020acc:	697a      	ldr	r2, [r7, #20]
 8020ace:	fb02 f303 	mul.w	r3, r2, r3
 8020ad2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020ad4:	4413      	add	r3, r2
 8020ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8020ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020ada:	00db      	lsls	r3, r3, #3
 8020adc:	3304      	adds	r3, #4
 8020ade:	697a      	ldr	r2, [r7, #20]
 8020ae0:	fb02 f303 	mul.w	r3, r2, r3
 8020ae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020ae6:	4413      	add	r3, r2
 8020ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
      for (c2 = c2min; c2 <= c2max; c2++) {
 8020aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020aec:	3301      	adds	r3, #1
 8020aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020af2:	69bb      	ldr	r3, [r7, #24]
 8020af4:	429a      	cmp	r2, r3
 8020af6:	ddd1      	ble.n	8020a9c <compute_color+0x78>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8020af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020afa:	3301      	adds	r3, #1
 8020afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020afe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8020b00:	6a3b      	ldr	r3, [r7, #32]
 8020b02:	429a      	cmp	r2, r3
 8020b04:	ddbb      	ble.n	8020a7e <compute_color+0x5a>
  for (c0 = c0min; c0 <= c0max; c0++)
 8020b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020b08:	3301      	adds	r3, #1
 8020b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8020b0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8020b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b10:	429a      	cmp	r2, r3
 8020b12:	ddb1      	ble.n	8020a78 <compute_color+0x54>
	}
      }
    }
  
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8020b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020b16:	105a      	asrs	r2, r3, #1
 8020b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020b1a:	441a      	add	r2, r3
 8020b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020b1e:	fb92 f1f3 	sdiv	r1, r2, r3
 8020b22:	68fb      	ldr	r3, [r7, #12]
 8020b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020b28:	681a      	ldr	r2, [r3, #0]
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	4413      	add	r3, r2
 8020b2e:	b2ca      	uxtb	r2, r1
 8020b30:	701a      	strb	r2, [r3, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8020b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020b34:	105a      	asrs	r2, r3, #1
 8020b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020b38:	441a      	add	r2, r3
 8020b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020b3c:	fb92 f1f3 	sdiv	r1, r2, r3
 8020b40:	68fb      	ldr	r3, [r7, #12]
 8020b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020b46:	3304      	adds	r3, #4
 8020b48:	681a      	ldr	r2, [r3, #0]
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	4413      	add	r3, r2
 8020b4e:	b2ca      	uxtb	r2, r1
 8020b50:	701a      	strb	r2, [r3, #0]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8020b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020b54:	105a      	asrs	r2, r3, #1
 8020b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020b58:	441a      	add	r2, r3
 8020b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020b5c:	fb92 f1f3 	sdiv	r1, r2, r3
 8020b60:	68fb      	ldr	r3, [r7, #12]
 8020b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020b66:	3308      	adds	r3, #8
 8020b68:	681a      	ldr	r2, [r3, #0]
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	4413      	add	r3, r2
 8020b6e:	b2ca      	uxtb	r2, r1
 8020b70:	701a      	strb	r2, [r3, #0]
}
 8020b72:	bf00      	nop
 8020b74:	375c      	adds	r7, #92	@ 0x5c
 8020b76:	46bd      	mov	sp, r7
 8020b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b7c:	4770      	bx	lr

08020b7e <select_colors>:


LOCAL(void)
select_colors (j_decompress_ptr cinfo, int desired_colors)
/* Master routine for color selection */
{
 8020b7e:	b580      	push	{r7, lr}
 8020b80:	b086      	sub	sp, #24
 8020b82:	af00      	add	r7, sp, #0
 8020b84:	6078      	str	r0, [r7, #4]
 8020b86:	6039      	str	r1, [r7, #0]
  boxptr boxlist;
  int numboxes;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	685b      	ldr	r3, [r3, #4]
 8020b8c:	681b      	ldr	r3, [r3, #0]
 8020b8e:	683a      	ldr	r2, [r7, #0]
 8020b90:	0152      	lsls	r2, r2, #5
 8020b92:	2101      	movs	r1, #1
 8020b94:	6878      	ldr	r0, [r7, #4]
 8020b96:	4798      	blx	r3
 8020b98:	6138      	str	r0, [r7, #16]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
 8020b9a:	2301      	movs	r3, #1
 8020b9c:	60fb      	str	r3, [r7, #12]
  boxlist[0].c0min = 0;
 8020b9e:	693b      	ldr	r3, [r7, #16]
 8020ba0:	2200      	movs	r2, #0
 8020ba2:	601a      	str	r2, [r3, #0]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8020ba4:	693b      	ldr	r3, [r7, #16]
 8020ba6:	221f      	movs	r2, #31
 8020ba8:	605a      	str	r2, [r3, #4]
  boxlist[0].c1min = 0;
 8020baa:	693b      	ldr	r3, [r7, #16]
 8020bac:	2200      	movs	r2, #0
 8020bae:	609a      	str	r2, [r3, #8]
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8020bb0:	693b      	ldr	r3, [r7, #16]
 8020bb2:	223f      	movs	r2, #63	@ 0x3f
 8020bb4:	60da      	str	r2, [r3, #12]
  boxlist[0].c2min = 0;
 8020bb6:	693b      	ldr	r3, [r7, #16]
 8020bb8:	2200      	movs	r2, #0
 8020bba:	611a      	str	r2, [r3, #16]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8020bbc:	693b      	ldr	r3, [r7, #16]
 8020bbe:	221f      	movs	r2, #31
 8020bc0:	615a      	str	r2, [r3, #20]
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
 8020bc2:	6939      	ldr	r1, [r7, #16]
 8020bc4:	6878      	ldr	r0, [r7, #4]
 8020bc6:	f7ff fcb2 	bl	802052e <update_box>
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
 8020bca:	683b      	ldr	r3, [r7, #0]
 8020bcc:	68fa      	ldr	r2, [r7, #12]
 8020bce:	6939      	ldr	r1, [r7, #16]
 8020bd0:	6878      	ldr	r0, [r7, #4]
 8020bd2:	f7ff fe8d 	bl	80208f0 <median_cut>
 8020bd6:	60f8      	str	r0, [r7, #12]
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
 8020bd8:	2300      	movs	r3, #0
 8020bda:	617b      	str	r3, [r7, #20]
 8020bdc:	e00b      	b.n	8020bf6 <select_colors+0x78>
    compute_color(cinfo, & boxlist[i], i);
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	015b      	lsls	r3, r3, #5
 8020be2:	693a      	ldr	r2, [r7, #16]
 8020be4:	4413      	add	r3, r2
 8020be6:	697a      	ldr	r2, [r7, #20]
 8020be8:	4619      	mov	r1, r3
 8020bea:	6878      	ldr	r0, [r7, #4]
 8020bec:	f7ff ff1a 	bl	8020a24 <compute_color>
  for (i = 0; i < numboxes; i++)
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]
 8020bf6:	697a      	ldr	r2, [r7, #20]
 8020bf8:	68fb      	ldr	r3, [r7, #12]
 8020bfa:	429a      	cmp	r2, r3
 8020bfc:	dbef      	blt.n	8020bde <select_colors+0x60>
  cinfo->actual_number_of_colors = numboxes;
 8020bfe:	687b      	ldr	r3, [r7, #4]
 8020c00:	68fa      	ldr	r2, [r7, #12]
 8020c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	2262      	movs	r2, #98	@ 0x62
 8020c0c:	615a      	str	r2, [r3, #20]
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	681b      	ldr	r3, [r3, #0]
 8020c12:	68fa      	ldr	r2, [r7, #12]
 8020c14:	619a      	str	r2, [r3, #24]
 8020c16:	687b      	ldr	r3, [r7, #4]
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	685b      	ldr	r3, [r3, #4]
 8020c1c:	2101      	movs	r1, #1
 8020c1e:	6878      	ldr	r0, [r7, #4]
 8020c20:	4798      	blx	r3
}
 8020c22:	bf00      	nop
 8020c24:	3718      	adds	r7, #24
 8020c26:	46bd      	mov	sp, r7
 8020c28:	bd80      	pop	{r7, pc}

08020c2a <find_nearby_colors>:
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
 8020c2a:	b490      	push	{r4, r7}
 8020c2c:	f5ad 6d89 	sub.w	sp, sp, #1096	@ 0x448
 8020c30:	af00      	add	r7, sp, #0
 8020c32:	f507 6489 	add.w	r4, r7, #1096	@ 0x448
 8020c36:	f2a4 443c 	subw	r4, r4, #1084	@ 0x43c
 8020c3a:	6020      	str	r0, [r4, #0]
 8020c3c:	f507 6089 	add.w	r0, r7, #1096	@ 0x448
 8020c40:	f5a0 6088 	sub.w	r0, r0, #1088	@ 0x440
 8020c44:	6001      	str	r1, [r0, #0]
 8020c46:	f507 6189 	add.w	r1, r7, #1096	@ 0x448
 8020c4a:	f2a1 4144 	subw	r1, r1, #1092	@ 0x444
 8020c4e:	600a      	str	r2, [r1, #0]
 8020c50:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8020c54:	f5a2 6289 	sub.w	r2, r2, #1096	@ 0x448
 8020c58:	6013      	str	r3, [r2, #0]
  int numcolors = cinfo->actual_number_of_colors;
 8020c5a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020c5e:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8020c62:	681b      	ldr	r3, [r3, #0]
 8020c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020c68:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8020c6c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020c70:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	3318      	adds	r3, #24
 8020c78:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
  centerc0 = (minc0 + maxc0) >> 1;
 8020c7c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020c80:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8020c84:	681a      	ldr	r2, [r3, #0]
 8020c86:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8020c8a:	4413      	add	r3, r2
 8020c8c:	105b      	asrs	r3, r3, #1
 8020c8e:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8020c92:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020c96:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	331c      	adds	r3, #28
 8020c9e:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
  centerc1 = (minc1 + maxc1) >> 1;
 8020ca2:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020ca6:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8020caa:	681a      	ldr	r2, [r3, #0]
 8020cac:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8020cb0:	4413      	add	r3, r2
 8020cb2:	105b      	asrs	r3, r3, #1
 8020cb4:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8020cb8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020cbc:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	3318      	adds	r3, #24
 8020cc4:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
  centerc2 = (minc2 + maxc2) >> 1;
 8020cc8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020ccc:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8020cd0:	681a      	ldr	r2, [r3, #0]
 8020cd2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8020cd6:	4413      	add	r3, r2
 8020cd8:	105b      	asrs	r3, r3, #1
 8020cda:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
   *  2. its maximum squared-distance to any point in the update box.
   * Both of these can be found by considering only the corners of the box.
   * We save the minimum distance for each color in mindist[];
   * only the smallest maximum distance is of interest.
   */
  minmaxdist = 0x7FFFFFFFL;
 8020cde:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8020ce2:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c

  for (i = 0; i < numcolors; i++) {
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8020cec:	e1d0      	b.n	8021090 <find_nearby_colors+0x466>
    /* We compute the squared-c0-distance term, then add in the other two. */
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8020cee:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020cf2:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8020cf6:	681b      	ldr	r3, [r3, #0]
 8020cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020cfc:	681a      	ldr	r2, [r3, #0]
 8020cfe:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8020d02:	4413      	add	r3, r2
 8020d04:	781b      	ldrb	r3, [r3, #0]
 8020d06:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    if (x < minc0) {
 8020d0a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020d0e:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8020d12:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020d16:	681b      	ldr	r3, [r3, #0]
 8020d18:	429a      	cmp	r2, r3
 8020d1a:	da1f      	bge.n	8020d5c <find_nearby_colors+0x132>
      tdist = (x - minc0) * C0_SCALE;
 8020d1c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020d20:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8020d24:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020d28:	681b      	ldr	r3, [r3, #0]
 8020d2a:	1ad3      	subs	r3, r2, r3
 8020d2c:	005b      	lsls	r3, r3, #1
 8020d2e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      min_dist = tdist*tdist;
 8020d32:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020d36:	fb03 f303 	mul.w	r3, r3, r3
 8020d3a:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
      tdist = (x - maxc0) * C0_SCALE;
 8020d3e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020d42:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8020d46:	1ad3      	subs	r3, r2, r3
 8020d48:	005b      	lsls	r3, r3, #1
 8020d4a:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      max_dist = tdist*tdist;
 8020d4e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020d52:	fb03 f303 	mul.w	r3, r3, r3
 8020d56:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8020d5a:	e04e      	b.n	8020dfa <find_nearby_colors+0x1d0>
    } else if (x > maxc0) {
 8020d5c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020d60:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8020d64:	429a      	cmp	r2, r3
 8020d66:	dd1f      	ble.n	8020da8 <find_nearby_colors+0x17e>
      tdist = (x - maxc0) * C0_SCALE;
 8020d68:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020d6c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8020d70:	1ad3      	subs	r3, r2, r3
 8020d72:	005b      	lsls	r3, r3, #1
 8020d74:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      min_dist = tdist*tdist;
 8020d78:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020d7c:	fb03 f303 	mul.w	r3, r3, r3
 8020d80:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
      tdist = (x - minc0) * C0_SCALE;
 8020d84:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020d88:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8020d8c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020d90:	681b      	ldr	r3, [r3, #0]
 8020d92:	1ad3      	subs	r3, r2, r3
 8020d94:	005b      	lsls	r3, r3, #1
 8020d96:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      max_dist = tdist*tdist;
 8020d9a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020d9e:	fb03 f303 	mul.w	r3, r3, r3
 8020da2:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8020da6:	e028      	b.n	8020dfa <find_nearby_colors+0x1d0>
    } else {
      /* within cell range so no contribution to min_dist */
      min_dist = 0;
 8020da8:	2300      	movs	r3, #0
 8020daa:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
      if (x <= centerc0) {
 8020dae:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020db2:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8020db6:	429a      	cmp	r2, r3
 8020db8:	dc0e      	bgt.n	8020dd8 <find_nearby_colors+0x1ae>
	tdist = (x - maxc0) * C0_SCALE;
 8020dba:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020dbe:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8020dc2:	1ad3      	subs	r3, r2, r3
 8020dc4:	005b      	lsls	r3, r3, #1
 8020dc6:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	max_dist = tdist*tdist;
 8020dca:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020dce:	fb03 f303 	mul.w	r3, r3, r3
 8020dd2:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8020dd6:	e010      	b.n	8020dfa <find_nearby_colors+0x1d0>
      } else {
	tdist = (x - minc0) * C0_SCALE;
 8020dd8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020ddc:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8020de0:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	1ad3      	subs	r3, r2, r3
 8020de8:	005b      	lsls	r3, r3, #1
 8020dea:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	max_dist = tdist*tdist;
 8020dee:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020df2:	fb03 f303 	mul.w	r3, r3, r3
 8020df6:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
      }
    }

    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8020dfa:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020dfe:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8020e02:	681b      	ldr	r3, [r3, #0]
 8020e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020e08:	3304      	adds	r3, #4
 8020e0a:	681a      	ldr	r2, [r3, #0]
 8020e0c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8020e10:	4413      	add	r3, r2
 8020e12:	781b      	ldrb	r3, [r3, #0]
 8020e14:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    if (x < minc1) {
 8020e18:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020e1c:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8020e20:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	429a      	cmp	r2, r3
 8020e28:	da29      	bge.n	8020e7e <find_nearby_colors+0x254>
      tdist = (x - minc1) * C1_SCALE;
 8020e2a:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020e2e:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8020e32:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020e36:	681b      	ldr	r3, [r3, #0]
 8020e38:	1ad2      	subs	r2, r2, r3
 8020e3a:	4613      	mov	r3, r2
 8020e3c:	005b      	lsls	r3, r3, #1
 8020e3e:	4413      	add	r3, r2
 8020e40:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      min_dist += tdist*tdist;
 8020e44:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020e48:	fb03 f303 	mul.w	r3, r3, r3
 8020e4c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 8020e50:	4413      	add	r3, r2
 8020e52:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
      tdist = (x - maxc1) * C1_SCALE;
 8020e56:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020e5a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8020e5e:	1ad2      	subs	r2, r2, r3
 8020e60:	4613      	mov	r3, r2
 8020e62:	005b      	lsls	r3, r3, #1
 8020e64:	4413      	add	r3, r2
 8020e66:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      max_dist += tdist*tdist;
 8020e6a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020e6e:	fb03 f303 	mul.w	r3, r3, r3
 8020e72:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8020e76:	4413      	add	r3, r2
 8020e78:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8020e7c:	e05f      	b.n	8020f3e <find_nearby_colors+0x314>
    } else if (x > maxc1) {
 8020e7e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020e82:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8020e86:	429a      	cmp	r2, r3
 8020e88:	dd29      	ble.n	8020ede <find_nearby_colors+0x2b4>
      tdist = (x - maxc1) * C1_SCALE;
 8020e8a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020e8e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8020e92:	1ad2      	subs	r2, r2, r3
 8020e94:	4613      	mov	r3, r2
 8020e96:	005b      	lsls	r3, r3, #1
 8020e98:	4413      	add	r3, r2
 8020e9a:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      min_dist += tdist*tdist;
 8020e9e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020ea2:	fb03 f303 	mul.w	r3, r3, r3
 8020ea6:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 8020eaa:	4413      	add	r3, r2
 8020eac:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
      tdist = (x - minc1) * C1_SCALE;
 8020eb0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020eb4:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8020eb8:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020ebc:	681b      	ldr	r3, [r3, #0]
 8020ebe:	1ad2      	subs	r2, r2, r3
 8020ec0:	4613      	mov	r3, r2
 8020ec2:	005b      	lsls	r3, r3, #1
 8020ec4:	4413      	add	r3, r2
 8020ec6:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      max_dist += tdist*tdist;
 8020eca:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020ece:	fb03 f303 	mul.w	r3, r3, r3
 8020ed2:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8020ed6:	4413      	add	r3, r2
 8020ed8:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8020edc:	e02f      	b.n	8020f3e <find_nearby_colors+0x314>
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc1) {
 8020ede:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020ee2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8020ee6:	429a      	cmp	r2, r3
 8020ee8:	dc13      	bgt.n	8020f12 <find_nearby_colors+0x2e8>
	tdist = (x - maxc1) * C1_SCALE;
 8020eea:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020eee:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 8020ef2:	1ad2      	subs	r2, r2, r3
 8020ef4:	4613      	mov	r3, r2
 8020ef6:	005b      	lsls	r3, r3, #1
 8020ef8:	4413      	add	r3, r2
 8020efa:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	max_dist += tdist*tdist;
 8020efe:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020f02:	fb03 f303 	mul.w	r3, r3, r3
 8020f06:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8020f0a:	4413      	add	r3, r2
 8020f0c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8020f10:	e015      	b.n	8020f3e <find_nearby_colors+0x314>
      } else {
	tdist = (x - minc1) * C1_SCALE;
 8020f12:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020f16:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8020f1a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020f1e:	681b      	ldr	r3, [r3, #0]
 8020f20:	1ad2      	subs	r2, r2, r3
 8020f22:	4613      	mov	r3, r2
 8020f24:	005b      	lsls	r3, r3, #1
 8020f26:	4413      	add	r3, r2
 8020f28:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	max_dist += tdist*tdist;
 8020f2c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020f30:	fb03 f303 	mul.w	r3, r3, r3
 8020f34:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8020f38:	4413      	add	r3, r2
 8020f3a:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
      }
    }

    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8020f3e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020f42:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8020f46:	681b      	ldr	r3, [r3, #0]
 8020f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020f4c:	3308      	adds	r3, #8
 8020f4e:	681a      	ldr	r2, [r3, #0]
 8020f50:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8020f54:	4413      	add	r3, r2
 8020f56:	781b      	ldrb	r3, [r3, #0]
 8020f58:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    if (x < minc2) {
 8020f5c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020f60:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8020f64:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	429a      	cmp	r2, r3
 8020f6c:	da23      	bge.n	8020fb6 <find_nearby_colors+0x38c>
      tdist = (x - minc2) * C2_SCALE;
 8020f6e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020f72:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8020f76:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020f7a:	681b      	ldr	r3, [r3, #0]
 8020f7c:	1ad3      	subs	r3, r2, r3
 8020f7e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      min_dist += tdist*tdist;
 8020f82:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020f86:	fb03 f303 	mul.w	r3, r3, r3
 8020f8a:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 8020f8e:	4413      	add	r3, r2
 8020f90:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
      tdist = (x - maxc2) * C2_SCALE;
 8020f94:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020f98:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8020f9c:	1ad3      	subs	r3, r2, r3
 8020f9e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      max_dist += tdist*tdist;
 8020fa2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020fa6:	fb03 f303 	mul.w	r3, r3, r3
 8020faa:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8020fae:	4413      	add	r3, r2
 8020fb0:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8020fb4:	e053      	b.n	802105e <find_nearby_colors+0x434>
    } else if (x > maxc2) {
 8020fb6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020fba:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8020fbe:	429a      	cmp	r2, r3
 8020fc0:	dd23      	ble.n	802100a <find_nearby_colors+0x3e0>
      tdist = (x - maxc2) * C2_SCALE;
 8020fc2:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020fc6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8020fca:	1ad3      	subs	r3, r2, r3
 8020fcc:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      min_dist += tdist*tdist;
 8020fd0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020fd4:	fb03 f303 	mul.w	r3, r3, r3
 8020fd8:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 8020fdc:	4413      	add	r3, r2
 8020fde:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
      tdist = (x - minc2) * C2_SCALE;
 8020fe2:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8020fe6:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8020fea:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8020fee:	681b      	ldr	r3, [r3, #0]
 8020ff0:	1ad3      	subs	r3, r2, r3
 8020ff2:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
      max_dist += tdist*tdist;
 8020ff6:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8020ffa:	fb03 f303 	mul.w	r3, r3, r3
 8020ffe:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8021002:	4413      	add	r3, r2
 8021004:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8021008:	e029      	b.n	802105e <find_nearby_colors+0x434>
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc2) {
 802100a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 802100e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8021012:	429a      	cmp	r2, r3
 8021014:	dc10      	bgt.n	8021038 <find_nearby_colors+0x40e>
	tdist = (x - maxc2) * C2_SCALE;
 8021016:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 802101a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 802101e:	1ad3      	subs	r3, r2, r3
 8021020:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	max_dist += tdist*tdist;
 8021024:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8021028:	fb03 f303 	mul.w	r3, r3, r3
 802102c:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8021030:	4413      	add	r3, r2
 8021032:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8021036:	e012      	b.n	802105e <find_nearby_colors+0x434>
      } else {
	tdist = (x - minc2) * C2_SCALE;
 8021038:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 802103c:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8021040:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8021044:	681b      	ldr	r3, [r3, #0]
 8021046:	1ad3      	subs	r3, r2, r3
 8021048:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
	max_dist += tdist*tdist;
 802104c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8021050:	fb03 f303 	mul.w	r3, r3, r3
 8021054:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8021058:	4413      	add	r3, r2
 802105a:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
      }
    }

    mindist[i] = min_dist;	/* save away the results */
 802105e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8021062:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 8021066:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 802106a:	f8d7 1438 	ldr.w	r1, [r7, #1080]	@ 0x438
 802106e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (max_dist < minmaxdist)
 8021072:	f8d7 2434 	ldr.w	r2, [r7, #1076]	@ 0x434
 8021076:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 802107a:	429a      	cmp	r2, r3
 802107c:	da03      	bge.n	8021086 <find_nearby_colors+0x45c>
      minmaxdist = max_dist;
 802107e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8021082:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
  for (i = 0; i < numcolors; i++) {
 8021086:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 802108a:	3301      	adds	r3, #1
 802108c:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8021090:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 8021094:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8021098:	429a      	cmp	r2, r3
 802109a:	f6ff ae28 	blt.w	8020cee <find_nearby_colors+0xc4>

  /* Now we know that no cell in the update box is more than minmaxdist
   * away from some colormap entry.  Therefore, only colors that are
   * within minmaxdist of some part of the box need be considered.
   */
  ncolors = 0;
 802109e:	2300      	movs	r3, #0
 80210a0:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
  for (i = 0; i < numcolors; i++) {
 80210a4:	2300      	movs	r3, #0
 80210a6:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80210aa:	e01d      	b.n	80210e8 <find_nearby_colors+0x4be>
    if (mindist[i] <= minmaxdist)
 80210ac:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80210b0:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 80210b4:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 80210b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80210bc:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 80210c0:	429a      	cmp	r2, r3
 80210c2:	db0c      	blt.n	80210de <find_nearby_colors+0x4b4>
      colorlist[ncolors++] = (JSAMPLE) i;
 80210c4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80210c8:	1c5a      	adds	r2, r3, #1
 80210ca:	f8c7 2440 	str.w	r2, [r7, #1088]	@ 0x440
 80210ce:	461a      	mov	r2, r3
 80210d0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80210d4:	4413      	add	r3, r2
 80210d6:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 80210da:	b2d2      	uxtb	r2, r2
 80210dc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < numcolors; i++) {
 80210de:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80210e2:	3301      	adds	r3, #1
 80210e4:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80210e8:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 80210ec:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80210f0:	429a      	cmp	r2, r3
 80210f2:	dbdb      	blt.n	80210ac <find_nearby_colors+0x482>
  }
  return ncolors;
 80210f4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
}
 80210f8:	4618      	mov	r0, r3
 80210fa:	f507 6789 	add.w	r7, r7, #1096	@ 0x448
 80210fe:	46bd      	mov	sp, r7
 8021100:	bc90      	pop	{r4, r7}
 8021102:	4770      	bx	lr

08021104 <find_best_colors>:
 * given the list of candidate colors prepared by find_nearby_colors.
 * Return the indexes of the closest entries in the bestcolor[] array.
 * This routine uses Thomas' incremental distance calculation method to
 * find the distance from a colormap entry to successive cells in the box.
 */
{
 8021104:	b4f0      	push	{r4, r5, r6, r7}
 8021106:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 802110a:	af00      	add	r7, sp, #0
 802110c:	f507 7412 	add.w	r4, r7, #584	@ 0x248
 8021110:	f5a4 740f 	sub.w	r4, r4, #572	@ 0x23c
 8021114:	6020      	str	r0, [r4, #0]
 8021116:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 802111a:	f5a0 7010 	sub.w	r0, r0, #576	@ 0x240
 802111e:	6001      	str	r1, [r0, #0]
 8021120:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8021124:	f5a1 7111 	sub.w	r1, r1, #580	@ 0x244
 8021128:	600a      	str	r2, [r1, #0]
 802112a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 802112e:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8021132:	6013      	str	r3, [r2, #0]
  INT32 inc0, inc1, inc2;	/* initial values for increments */
  /* This array holds the distance to the nearest-so-far color for each cell */
  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Initialize best-distance for each cell of the update box */
  bptr = bestdist;
 8021134:	f107 0414 	add.w	r4, r7, #20
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8021138:	237f      	movs	r3, #127	@ 0x7f
 802113a:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 802113e:	e009      	b.n	8021154 <find_best_colors+0x50>
    *bptr++ = 0x7FFFFFFFL;
 8021140:	4623      	mov	r3, r4
 8021142:	1d1c      	adds	r4, r3, #4
 8021144:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8021148:	601a      	str	r2, [r3, #0]
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 802114a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 802114e:	3b01      	subs	r3, #1
 8021150:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8021154:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8021158:	2b00      	cmp	r3, #0
 802115a:	daf1      	bge.n	8021140 <find_best_colors+0x3c>
  /* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
  
  for (i = 0; i < numcolors; i++) {
 802115c:	2300      	movs	r3, #0
 802115e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8021162:	e0e7      	b.n	8021334 <find_best_colors+0x230>
    icolor = GETJSAMPLE(colorlist[i]);
 8021164:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8021168:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 802116c:	4413      	add	r3, r2
 802116e:	781b      	ldrb	r3, [r3, #0]
 8021170:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
    /* Compute (square of) distance from minc0/c1/c2 to this color */
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8021174:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8021178:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 802117c:	681b      	ldr	r3, [r3, #0]
 802117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021182:	681a      	ldr	r2, [r3, #0]
 8021184:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8021188:	4413      	add	r3, r2
 802118a:	781b      	ldrb	r3, [r3, #0]
 802118c:	461a      	mov	r2, r3
 802118e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8021192:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8021196:	681b      	ldr	r3, [r3, #0]
 8021198:	1a9b      	subs	r3, r3, r2
 802119a:	005b      	lsls	r3, r3, #1
 802119c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    dist0 = inc0*inc0;
 80211a0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80211a4:	fb03 f303 	mul.w	r3, r3, r3
 80211a8:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80211ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80211b0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80211b4:	681b      	ldr	r3, [r3, #0]
 80211b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80211ba:	3304      	adds	r3, #4
 80211bc:	681a      	ldr	r2, [r3, #0]
 80211be:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80211c2:	4413      	add	r3, r2
 80211c4:	781b      	ldrb	r3, [r3, #0]
 80211c6:	461a      	mov	r2, r3
 80211c8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80211cc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80211d0:	681b      	ldr	r3, [r3, #0]
 80211d2:	1a9a      	subs	r2, r3, r2
 80211d4:	4613      	mov	r3, r2
 80211d6:	005b      	lsls	r3, r3, #1
 80211d8:	4413      	add	r3, r2
 80211da:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    dist0 += inc1*inc1;
 80211de:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80211e2:	fb03 f303 	mul.w	r3, r3, r3
 80211e6:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 80211ea:	4413      	add	r3, r2
 80211ec:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80211f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80211f4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80211fe:	3308      	adds	r3, #8
 8021200:	681a      	ldr	r2, [r3, #0]
 8021202:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8021206:	4413      	add	r3, r2
 8021208:	781b      	ldrb	r3, [r3, #0]
 802120a:	461a      	mov	r2, r3
 802120c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8021210:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	1a9b      	subs	r3, r3, r2
 8021218:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    dist0 += inc2*inc2;
 802121c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8021220:	fb03 f303 	mul.w	r3, r3, r3
 8021224:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8021228:	4413      	add	r3, r2
 802122a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
    /* Form the initial difference increments */
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 802122e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8021232:	3308      	adds	r3, #8
 8021234:	015b      	lsls	r3, r3, #5
 8021236:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 802123a:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 802123e:	4613      	mov	r3, r2
 8021240:	005b      	lsls	r3, r3, #1
 8021242:	4413      	add	r3, r2
 8021244:	00db      	lsls	r3, r3, #3
 8021246:	3390      	adds	r3, #144	@ 0x90
 8021248:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 802124c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8021250:	3304      	adds	r3, #4
 8021252:	011b      	lsls	r3, r3, #4
 8021254:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
    /* Now loop over all cells in box, updating distance per Thomas method */
    bptr = bestdist;
 8021258:	f107 0414 	add.w	r4, r7, #20
    cptr = bestcolor;
 802125c:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8021260:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    xx0 = inc0;
 8021264:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8021268:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 802126c:	2303      	movs	r3, #3
 802126e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8021272:	e056      	b.n	8021322 <find_best_colors+0x21e>
      dist1 = dist0;
 8021274:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8021278:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
      xx1 = inc1;
 802127c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8021280:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8021284:	2307      	movs	r3, #7
 8021286:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 802128a:	e034      	b.n	80212f6 <find_best_colors+0x1f2>
	dist2 = dist1;
 802128c:	f8d7 522c 	ldr.w	r5, [r7, #556]	@ 0x22c
	xx2 = inc2;
 8021290:	f8d7 6214 	ldr.w	r6, [r7, #532]	@ 0x214
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8021294:	2303      	movs	r3, #3
 8021296:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 802129a:	e016      	b.n	80212ca <find_best_colors+0x1c6>
	  if (dist2 < *bptr) {
 802129c:	6823      	ldr	r3, [r4, #0]
 802129e:	429d      	cmp	r5, r3
 80212a0:	da06      	bge.n	80212b0 <find_best_colors+0x1ac>
	    *bptr = dist2;
 80212a2:	6025      	str	r5, [r4, #0]
	    *cptr = (JSAMPLE) icolor;
 80212a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 80212a8:	b2da      	uxtb	r2, r3
 80212aa:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80212ae:	701a      	strb	r2, [r3, #0]
	  }
	  dist2 += xx2;
 80212b0:	4435      	add	r5, r6
	  xx2 += 2 * STEP_C2 * STEP_C2;
 80212b2:	3680      	adds	r6, #128	@ 0x80
	  bptr++;
 80212b4:	3404      	adds	r4, #4
	  cptr++;
 80212b6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80212ba:	3301      	adds	r3, #1
 80212bc:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 80212c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80212c4:	3b01      	subs	r3, #1
 80212c6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80212ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	dae4      	bge.n	802129c <find_best_colors+0x198>
	}
	dist1 += xx1;
 80212d2:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80212d6:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80212da:	4413      	add	r3, r2
 80212dc:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
	xx1 += 2 * STEP_C1 * STEP_C1;
 80212e0:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80212e4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80212e8:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 80212ec:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80212f0:	3b01      	subs	r3, #1
 80212f2:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80212f6:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	dac6      	bge.n	802128c <find_best_colors+0x188>
      }
      dist0 += xx0;
 80212fe:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8021302:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8021306:	4413      	add	r3, r2
 8021308:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
      xx0 += 2 * STEP_C0 * STEP_C0;
 802130c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8021310:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8021314:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8021318:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 802131c:	3b01      	subs	r3, #1
 802131e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8021322:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8021326:	2b00      	cmp	r3, #0
 8021328:	daa4      	bge.n	8021274 <find_best_colors+0x170>
  for (i = 0; i < numcolors; i++) {
 802132a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 802132e:	3301      	adds	r3, #1
 8021330:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8021334:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8021338:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 802133c:	429a      	cmp	r2, r3
 802133e:	f6ff af11 	blt.w	8021164 <find_best_colors+0x60>
    }
  }
}
 8021342:	bf00      	nop
 8021344:	bf00      	nop
 8021346:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 802134a:	46bd      	mov	sp, r7
 802134c:	bcf0      	pop	{r4, r5, r6, r7}
 802134e:	4770      	bx	lr

08021350 <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8021350:	b5b0      	push	{r4, r5, r7, lr}
 8021352:	b0f2      	sub	sp, #456	@ 0x1c8
 8021354:	af04      	add	r7, sp, #16
 8021356:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 802135a:	f5a4 74d6 	sub.w	r4, r4, #428	@ 0x1ac
 802135e:	6020      	str	r0, [r4, #0]
 8021360:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8021364:	f5a0 70d8 	sub.w	r0, r0, #432	@ 0x1b0
 8021368:	6001      	str	r1, [r0, #0]
 802136a:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 802136e:	f5a1 71da 	sub.w	r1, r1, #436	@ 0x1b4
 8021372:	600a      	str	r2, [r1, #0]
 8021374:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8021378:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 802137c:	6013      	str	r3, [r2, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802137e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8021382:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 802138c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  hist3d histogram = cquantize->histogram;
 8021390:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8021394:	699b      	ldr	r3, [r3, #24]
 8021396:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  int numcolors;		/* number of candidate colors */
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
 802139a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 802139e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80213a2:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80213a6:	f5a2 72d8 	sub.w	r2, r2, #432	@ 0x1b0
 80213aa:	6812      	ldr	r2, [r2, #0]
 80213ac:	1092      	asrs	r2, r2, #2
 80213ae:	601a      	str	r2, [r3, #0]
  c1 >>= BOX_C1_LOG;
 80213b0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80213b4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80213b8:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80213bc:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 80213c0:	6812      	ldr	r2, [r2, #0]
 80213c2:	10d2      	asrs	r2, r2, #3
 80213c4:	601a      	str	r2, [r3, #0]
  c2 >>= BOX_C2_LOG;
 80213c6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80213ca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80213ce:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80213d2:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 80213d6:	6812      	ldr	r2, [r2, #0]
 80213d8:	1092      	asrs	r2, r2, #2
 80213da:	601a      	str	r2, [r3, #0]

  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 80213dc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80213e0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	015b      	lsls	r3, r3, #5
 80213e8:	3304      	adds	r3, #4
 80213ea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80213ee:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80213f2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	015b      	lsls	r3, r3, #5
 80213fa:	3302      	adds	r3, #2
 80213fc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8021400:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8021404:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	015b      	lsls	r3, r3, #5
 802140c:	3304      	adds	r3, #4
 802140e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
  
  /* Determine which colormap entries are close enough to be candidates
   * for the nearest entry to some cell in the update box.
   */
  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
 8021412:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8021416:	f5a3 70d6 	sub.w	r0, r3, #428	@ 0x1ac
 802141a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 802141e:	9300      	str	r3, [sp, #0]
 8021420:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8021424:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8021428:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 802142c:	6800      	ldr	r0, [r0, #0]
 802142e:	f7ff fbfc 	bl	8020c2a <find_nearby_colors>
 8021432:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194

  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
 8021436:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 802143a:	f5a3 70d6 	sub.w	r0, r3, #428	@ 0x1ac
 802143e:	f107 0314 	add.w	r3, r7, #20
 8021442:	9302      	str	r3, [sp, #8]
 8021444:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8021448:	9301      	str	r3, [sp, #4]
 802144a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 802144e:	9300      	str	r3, [sp, #0]
 8021450:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8021454:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8021458:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 802145c:	6800      	ldr	r0, [r0, #0]
 802145e:	f7ff fe51 	bl	8021104 <find_best_colors>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8021462:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8021466:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 802146a:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 802146e:	f5a2 72d8 	sub.w	r2, r2, #432	@ 0x1b0
 8021472:	6812      	ldr	r2, [r2, #0]
 8021474:	0092      	lsls	r2, r2, #2
 8021476:	601a      	str	r2, [r3, #0]
  c1 <<= BOX_C1_LOG;
 8021478:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 802147c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8021480:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8021484:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 8021488:	6812      	ldr	r2, [r2, #0]
 802148a:	00d2      	lsls	r2, r2, #3
 802148c:	601a      	str	r2, [r3, #0]
  c2 <<= BOX_C2_LOG;
 802148e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8021492:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8021496:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 802149a:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 802149e:	6812      	ldr	r2, [r2, #0]
 80214a0:	0092      	lsls	r2, r2, #2
 80214a2:	601a      	str	r2, [r3, #0]
  cptr = bestcolor;
 80214a4:	f107 0414 	add.w	r4, r7, #20
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80214a8:	2300      	movs	r3, #0
 80214aa:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80214ae:	e045      	b.n	802153c <fill_inverse_cmap+0x1ec>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80214b0:	2300      	movs	r3, #0
 80214b2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80214b6:	e038      	b.n	802152a <fill_inverse_cmap+0x1da>
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 80214b8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80214bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80214c0:	681a      	ldr	r2, [r3, #0]
 80214c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80214c6:	4413      	add	r3, r2
 80214c8:	009b      	lsls	r3, r3, #2
 80214ca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80214ce:	4413      	add	r3, r2
 80214d0:	681a      	ldr	r2, [r3, #0]
 80214d2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80214d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80214da:	6819      	ldr	r1, [r3, #0]
 80214dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80214e0:	440b      	add	r3, r1
 80214e2:	019b      	lsls	r3, r3, #6
 80214e4:	441a      	add	r2, r3
 80214e6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80214ea:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	005b      	lsls	r3, r3, #1
 80214f2:	18d5      	adds	r5, r2, r3
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80214f4:	2300      	movs	r3, #0
 80214f6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80214fa:	e00d      	b.n	8021518 <fill_inverse_cmap+0x1c8>
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80214fc:	4623      	mov	r3, r4
 80214fe:	1c5c      	adds	r4, r3, #1
 8021500:	781b      	ldrb	r3, [r3, #0]
 8021502:	461a      	mov	r2, r3
 8021504:	462b      	mov	r3, r5
 8021506:	1c9d      	adds	r5, r3, #2
 8021508:	3201      	adds	r2, #1
 802150a:	b292      	uxth	r2, r2
 802150c:	801a      	strh	r2, [r3, #0]
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 802150e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8021512:	3301      	adds	r3, #1
 8021514:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8021518:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 802151c:	2b03      	cmp	r3, #3
 802151e:	dded      	ble.n	80214fc <fill_inverse_cmap+0x1ac>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8021520:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8021524:	3301      	adds	r3, #1
 8021526:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 802152a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 802152e:	2b07      	cmp	r3, #7
 8021530:	ddc2      	ble.n	80214b8 <fill_inverse_cmap+0x168>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8021532:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8021536:	3301      	adds	r3, #1
 8021538:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 802153c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8021540:	2b03      	cmp	r3, #3
 8021542:	ddb5      	ble.n	80214b0 <fill_inverse_cmap+0x160>
      }
    }
  }
}
 8021544:	bf00      	nop
 8021546:	bf00      	nop
 8021548:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 802154c:	46bd      	mov	sp, r7
 802154e:	bdb0      	pop	{r4, r5, r7, pc}

08021550 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8021550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021554:	b08a      	sub	sp, #40	@ 0x28
 8021556:	af00      	add	r7, sp, #0
 8021558:	60f8      	str	r0, [r7, #12]
 802155a:	60b9      	str	r1, [r7, #8]
 802155c:	607a      	str	r2, [r7, #4]
 802155e:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8021560:	68fb      	ldr	r3, [r7, #12]
 8021562:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8021566:	61fb      	str	r3, [r7, #28]
  hist3d histogram = cquantize->histogram;
 8021568:	69fb      	ldr	r3, [r7, #28]
 802156a:	699b      	ldr	r3, [r3, #24]
 802156c:	61bb      	str	r3, [r7, #24]
  register JSAMPROW inptr, outptr;
  register histptr cachep;
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 802156e:	68fb      	ldr	r3, [r7, #12]
 8021570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021572:	617b      	str	r3, [r7, #20]

  for (row = 0; row < num_rows; row++) {
 8021574:	2300      	movs	r3, #0
 8021576:	627b      	str	r3, [r7, #36]	@ 0x24
 8021578:	e042      	b.n	8021600 <pass2_no_dither+0xb0>
    inptr = input_buf[row];
 802157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802157c:	009b      	lsls	r3, r3, #2
 802157e:	68ba      	ldr	r2, [r7, #8]
 8021580:	4413      	add	r3, r2
 8021582:	681c      	ldr	r4, [r3, #0]
    outptr = output_buf[row];
 8021584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021586:	009b      	lsls	r3, r3, #2
 8021588:	687a      	ldr	r2, [r7, #4]
 802158a:	4413      	add	r3, r2
 802158c:	681e      	ldr	r6, [r3, #0]
    for (col = width; col > 0; col--) {
 802158e:	697b      	ldr	r3, [r7, #20]
 8021590:	623b      	str	r3, [r7, #32]
 8021592:	e02f      	b.n	80215f4 <pass2_no_dither+0xa4>
      /* get pixel value and index into the cache */
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8021594:	4623      	mov	r3, r4
 8021596:	1c5c      	adds	r4, r3, #1
 8021598:	781b      	ldrb	r3, [r3, #0]
 802159a:	08db      	lsrs	r3, r3, #3
 802159c:	b2db      	uxtb	r3, r3
 802159e:	4699      	mov	r9, r3
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80215a0:	4623      	mov	r3, r4
 80215a2:	1c5c      	adds	r4, r3, #1
 80215a4:	781b      	ldrb	r3, [r3, #0]
 80215a6:	089b      	lsrs	r3, r3, #2
 80215a8:	b2db      	uxtb	r3, r3
 80215aa:	469a      	mov	sl, r3
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80215ac:	4623      	mov	r3, r4
 80215ae:	1c5c      	adds	r4, r3, #1
 80215b0:	781b      	ldrb	r3, [r3, #0]
 80215b2:	08db      	lsrs	r3, r3, #3
 80215b4:	b2db      	uxtb	r3, r3
 80215b6:	4698      	mov	r8, r3
      cachep = & histogram[c0][c1][c2];
 80215b8:	464b      	mov	r3, r9
 80215ba:	009b      	lsls	r3, r3, #2
 80215bc:	69ba      	ldr	r2, [r7, #24]
 80215be:	4413      	add	r3, r2
 80215c0:	681a      	ldr	r2, [r3, #0]
 80215c2:	4653      	mov	r3, sl
 80215c4:	019b      	lsls	r3, r3, #6
 80215c6:	441a      	add	r2, r3
 80215c8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80215cc:	18d5      	adds	r5, r2, r3
      /* If we have not seen this color before, find nearest colormap entry */
      /* and update the cache */
      if (*cachep == 0)
 80215ce:	882b      	ldrh	r3, [r5, #0]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d105      	bne.n	80215e0 <pass2_no_dither+0x90>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 80215d4:	4643      	mov	r3, r8
 80215d6:	4652      	mov	r2, sl
 80215d8:	4649      	mov	r1, r9
 80215da:	68f8      	ldr	r0, [r7, #12]
 80215dc:	f7ff feb8 	bl	8021350 <fill_inverse_cmap>
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
 80215e0:	882b      	ldrh	r3, [r5, #0]
 80215e2:	b2da      	uxtb	r2, r3
 80215e4:	4633      	mov	r3, r6
 80215e6:	1c5e      	adds	r6, r3, #1
 80215e8:	3a01      	subs	r2, #1
 80215ea:	b2d2      	uxtb	r2, r2
 80215ec:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 80215ee:	6a3b      	ldr	r3, [r7, #32]
 80215f0:	3b01      	subs	r3, #1
 80215f2:	623b      	str	r3, [r7, #32]
 80215f4:	6a3b      	ldr	r3, [r7, #32]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d1cc      	bne.n	8021594 <pass2_no_dither+0x44>
  for (row = 0; row < num_rows; row++) {
 80215fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215fc:	3301      	adds	r3, #1
 80215fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8021600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021602:	683b      	ldr	r3, [r7, #0]
 8021604:	429a      	cmp	r2, r3
 8021606:	dbb8      	blt.n	802157a <pass2_no_dither+0x2a>
    }
  }
}
 8021608:	bf00      	nop
 802160a:	bf00      	nop
 802160c:	3728      	adds	r7, #40	@ 0x28
 802160e:	46bd      	mov	sp, r7
 8021610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08021614 <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 8021614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021618:	b09c      	sub	sp, #112	@ 0x70
 802161a:	af00      	add	r7, sp, #0
 802161c:	6178      	str	r0, [r7, #20]
 802161e:	6139      	str	r1, [r7, #16]
 8021620:	60fa      	str	r2, [r7, #12]
 8021622:	60bb      	str	r3, [r7, #8]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8021624:	697b      	ldr	r3, [r7, #20]
 8021626:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 802162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  hist3d histogram = cquantize->histogram;
 802162c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802162e:	699b      	ldr	r3, [r3, #24]
 8021630:	63bb      	str	r3, [r7, #56]	@ 0x38
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8021632:	697b      	ldr	r3, [r7, #20]
 8021634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021636:	637b      	str	r3, [r7, #52]	@ 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8021638:	697b      	ldr	r3, [r7, #20]
 802163a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 802163e:	633b      	str	r3, [r7, #48]	@ 0x30
  int *error_limit = cquantize->error_limiter;
 8021640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 8021646:	697b      	ldr	r3, [r7, #20]
 8021648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802164c:	681b      	ldr	r3, [r3, #0]
 802164e:	62bb      	str	r3, [r7, #40]	@ 0x28
  JSAMPROW colormap1 = cinfo->colormap[1];
 8021650:	697b      	ldr	r3, [r7, #20]
 8021652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021656:	685b      	ldr	r3, [r3, #4]
 8021658:	627b      	str	r3, [r7, #36]	@ 0x24
  JSAMPROW colormap2 = cinfo->colormap[2];
 802165a:	697b      	ldr	r3, [r7, #20]
 802165c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021660:	689b      	ldr	r3, [r3, #8]
 8021662:	623b      	str	r3, [r7, #32]
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 8021664:	2300      	movs	r3, #0
 8021666:	647b      	str	r3, [r7, #68]	@ 0x44
 8021668:	e115      	b.n	8021896 <pass2_fs_dither+0x282>
    inptr = input_buf[row];
 802166a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802166c:	009b      	lsls	r3, r3, #2
 802166e:	693a      	ldr	r2, [r7, #16]
 8021670:	4413      	add	r3, r2
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	657b      	str	r3, [r7, #84]	@ 0x54
    outptr = output_buf[row];
 8021676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021678:	009b      	lsls	r3, r3, #2
 802167a:	68fa      	ldr	r2, [r7, #12]
 802167c:	4413      	add	r3, r2
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	653b      	str	r3, [r7, #80]	@ 0x50
    if (cquantize->on_odd_row) {
 8021682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021686:	2b00      	cmp	r3, #0
 8021688:	d020      	beq.n	80216cc <pass2_fs_dither+0xb8>
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 802168a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802168c:	4613      	mov	r3, r2
 802168e:	005b      	lsls	r3, r3, #1
 8021690:	4413      	add	r3, r2
 8021692:	3b03      	subs	r3, #3
 8021694:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021696:	4413      	add	r3, r2
 8021698:	657b      	str	r3, [r7, #84]	@ 0x54
      outptr += width-1;
 802169a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802169c:	3b01      	subs	r3, #1
 802169e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80216a0:	4413      	add	r3, r2
 80216a2:	653b      	str	r3, [r7, #80]	@ 0x50
      dir = -1;
 80216a4:	f04f 33ff 	mov.w	r3, #4294967295
 80216a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      dir3 = -3;
 80216aa:	f06f 0302 	mvn.w	r3, #2
 80216ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80216b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216b2:	6a19      	ldr	r1, [r3, #32]
 80216b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80216b6:	1c5a      	adds	r2, r3, #1
 80216b8:	4613      	mov	r3, r2
 80216ba:	005b      	lsls	r3, r3, #1
 80216bc:	4413      	add	r3, r2
 80216be:	005b      	lsls	r3, r3, #1
 80216c0:	18cb      	adds	r3, r1, r3
 80216c2:	607b      	str	r3, [r7, #4]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 80216c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216c6:	2200      	movs	r2, #0
 80216c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80216ca:	e009      	b.n	80216e0 <pass2_fs_dither+0xcc>
    } else {
      /* work left to right in this row */
      dir = 1;
 80216cc:	2301      	movs	r3, #1
 80216ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      dir3 = 3;
 80216d0:	2303      	movs	r3, #3
 80216d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      errorptr = cquantize->fserrors; /* => entry before first real column */
 80216d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216d6:	6a1b      	ldr	r3, [r3, #32]
 80216d8:	607b      	str	r3, [r7, #4]
      cquantize->on_odd_row = TRUE; /* flip for next time */
 80216da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80216dc:	2201      	movs	r2, #1
 80216de:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    /* Preset error values: no error propagated to first pixel from left */
    cur0 = cur1 = cur2 = 0;
 80216e0:	2400      	movs	r4, #0
 80216e2:	4625      	mov	r5, r4
 80216e4:	462e      	mov	r6, r5
    /* and no error propagated to row below yet */
    belowerr0 = belowerr1 = belowerr2 = 0;
 80216e6:	2300      	movs	r3, #0
 80216e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80216ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80216ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80216ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80216f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80216f2:	2300      	movs	r3, #0
 80216f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80216f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80216f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80216fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80216fc:	663b      	str	r3, [r7, #96]	@ 0x60

    for (col = width; col > 0; col--) {
 80216fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021700:	643b      	str	r3, [r7, #64]	@ 0x40
 8021702:	e0b5      	b.n	8021870 <pass2_fs_dither+0x25c>
       * round the error term (which is expressed * 16) to an integer.
       * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
       * for either sign of the error value.
       * Note: errorptr points to *previous* column's array entry.
       */
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8021704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021706:	005b      	lsls	r3, r3, #1
 8021708:	687a      	ldr	r2, [r7, #4]
 802170a:	4413      	add	r3, r2
 802170c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021710:	4433      	add	r3, r6
 8021712:	3308      	adds	r3, #8
 8021714:	111e      	asrs	r6, r3, #4
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8021716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021718:	3301      	adds	r3, #1
 802171a:	005b      	lsls	r3, r3, #1
 802171c:	4413      	add	r3, r2
 802171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021722:	442b      	add	r3, r5
 8021724:	3308      	adds	r3, #8
 8021726:	111d      	asrs	r5, r3, #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8021728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802172a:	3302      	adds	r3, #2
 802172c:	005b      	lsls	r3, r3, #1
 802172e:	4413      	add	r3, r2
 8021730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021734:	4423      	add	r3, r4
 8021736:	3308      	adds	r3, #8
 8021738:	111c      	asrs	r4, r3, #4
      /* Limit the error using transfer function set by init_error_limit.
       * See comments with init_error_limit for rationale.
       */
      cur0 = error_limit[cur0];
 802173a:	4633      	mov	r3, r6
 802173c:	009b      	lsls	r3, r3, #2
 802173e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021740:	4413      	add	r3, r2
 8021742:	681e      	ldr	r6, [r3, #0]
      cur1 = error_limit[cur1];
 8021744:	462b      	mov	r3, r5
 8021746:	009b      	lsls	r3, r3, #2
 8021748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802174a:	4413      	add	r3, r2
 802174c:	681d      	ldr	r5, [r3, #0]
      cur2 = error_limit[cur2];
 802174e:	4623      	mov	r3, r4
 8021750:	009b      	lsls	r3, r3, #2
 8021752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021754:	4413      	add	r3, r2
 8021756:	681c      	ldr	r4, [r3, #0]
      /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
       * The maximum error is +- MAXJSAMPLE (or less with error limiting);
       * this sets the required size of the range_limit array.
       */
      cur0 += GETJSAMPLE(inptr[0]);
 8021758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802175a:	781b      	ldrb	r3, [r3, #0]
 802175c:	441e      	add	r6, r3
      cur1 += GETJSAMPLE(inptr[1]);
 802175e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021760:	3301      	adds	r3, #1
 8021762:	781b      	ldrb	r3, [r3, #0]
 8021764:	441d      	add	r5, r3
      cur2 += GETJSAMPLE(inptr[2]);
 8021766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021768:	3302      	adds	r3, #2
 802176a:	781b      	ldrb	r3, [r3, #0]
 802176c:	441c      	add	r4, r3
      cur0 = GETJSAMPLE(range_limit[cur0]);
 802176e:	4632      	mov	r2, r6
 8021770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021772:	4413      	add	r3, r2
 8021774:	781b      	ldrb	r3, [r3, #0]
 8021776:	461e      	mov	r6, r3
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8021778:	462a      	mov	r2, r5
 802177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802177c:	4413      	add	r3, r2
 802177e:	781b      	ldrb	r3, [r3, #0]
 8021780:	461d      	mov	r5, r3
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8021782:	4622      	mov	r2, r4
 8021784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021786:	4413      	add	r3, r2
 8021788:	781b      	ldrb	r3, [r3, #0]
 802178a:	461c      	mov	r4, r3
      /* Index into the cache with adjusted pixel value */
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 802178c:	10f3      	asrs	r3, r6, #3
 802178e:	009b      	lsls	r3, r3, #2
 8021790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021792:	4413      	add	r3, r2
 8021794:	681a      	ldr	r2, [r3, #0]
 8021796:	10ab      	asrs	r3, r5, #2
 8021798:	019b      	lsls	r3, r3, #6
 802179a:	441a      	add	r2, r3
 802179c:	10e3      	asrs	r3, r4, #3
 802179e:	005b      	lsls	r3, r3, #1
 80217a0:	4413      	add	r3, r2
 80217a2:	61fb      	str	r3, [r7, #28]
      /* If we have not seen this color before, find nearest colormap */
      /* entry and update the cache */
      if (*cachep == 0)
 80217a4:	69fb      	ldr	r3, [r7, #28]
 80217a6:	881b      	ldrh	r3, [r3, #0]
 80217a8:	2b00      	cmp	r3, #0
 80217aa:	d105      	bne.n	80217b8 <pass2_fs_dither+0x1a4>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 80217ac:	10f1      	asrs	r1, r6, #3
 80217ae:	10aa      	asrs	r2, r5, #2
 80217b0:	10e3      	asrs	r3, r4, #3
 80217b2:	6978      	ldr	r0, [r7, #20]
 80217b4:	f7ff fdcc 	bl	8021350 <fill_inverse_cmap>
      /* Now emit the colormap index for this cell */
      { register int pixcode = *cachep - 1;
 80217b8:	69fb      	ldr	r3, [r7, #28]
 80217ba:	881b      	ldrh	r3, [r3, #0]
 80217bc:	f103 38ff 	add.w	r8, r3, #4294967295
	*outptr = (JSAMPLE) pixcode;
 80217c0:	fa5f f288 	uxtb.w	r2, r8
 80217c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80217c6:	701a      	strb	r2, [r3, #0]
	/* Compute representation error for this pixel */
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 80217c8:	4642      	mov	r2, r8
 80217ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80217cc:	4413      	add	r3, r2
 80217ce:	781b      	ldrb	r3, [r3, #0]
 80217d0:	1af6      	subs	r6, r6, r3
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 80217d2:	4642      	mov	r2, r8
 80217d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217d6:	4413      	add	r3, r2
 80217d8:	781b      	ldrb	r3, [r3, #0]
 80217da:	1aed      	subs	r5, r5, r3
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 80217dc:	4642      	mov	r2, r8
 80217de:	6a3b      	ldr	r3, [r7, #32]
 80217e0:	4413      	add	r3, r2
 80217e2:	781b      	ldrb	r3, [r3, #0]
 80217e4:	1ae4      	subs	r4, r4, r3
       * Add these into the running sums, and simultaneously shift the
       * next-line error sums left by 1 column.
       */
      { register LOCFSERROR bnexterr, delta;

	bnexterr = cur0;	/* Process component 0 */
 80217e6:	4630      	mov	r0, r6
	delta = cur0 * 2;
 80217e8:	ea4f 0846 	mov.w	r8, r6, lsl #1
	cur0 += delta;		/* form error * 3 */
 80217ec:	4446      	add	r6, r8
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80217ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80217f0:	b29a      	uxth	r2, r3
 80217f2:	b2b3      	uxth	r3, r6
 80217f4:	4413      	add	r3, r2
 80217f6:	b29b      	uxth	r3, r3
 80217f8:	b21b      	sxth	r3, r3
 80217fa:	6879      	ldr	r1, [r7, #4]
 80217fc:	800b      	strh	r3, [r1, #0]
	cur0 += delta;		/* form error * 5 */
 80217fe:	4446      	add	r6, r8
	bpreverr0 = belowerr0 + cur0;
 8021800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8021802:	4433      	add	r3, r6
 8021804:	663b      	str	r3, [r7, #96]	@ 0x60
	belowerr0 = bnexterr;
 8021806:	66f8      	str	r0, [r7, #108]	@ 0x6c
	cur0 += delta;		/* form error * 7 */
 8021808:	4446      	add	r6, r8
	bnexterr = cur1;	/* Process component 1 */
 802180a:	4628      	mov	r0, r5
	delta = cur1 * 2;
 802180c:	ea4f 0845 	mov.w	r8, r5, lsl #1
	cur1 += delta;		/* form error * 3 */
 8021810:	4445      	add	r5, r8
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8021812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8021814:	b29a      	uxth	r2, r3
 8021816:	b2ab      	uxth	r3, r5
 8021818:	4413      	add	r3, r2
 802181a:	b29a      	uxth	r2, r3
 802181c:	1c8b      	adds	r3, r1, #2
 802181e:	b212      	sxth	r2, r2
 8021820:	801a      	strh	r2, [r3, #0]
	cur1 += delta;		/* form error * 5 */
 8021822:	4445      	add	r5, r8
	bpreverr1 = belowerr1 + cur1;
 8021824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8021826:	442b      	add	r3, r5
 8021828:	65fb      	str	r3, [r7, #92]	@ 0x5c
	belowerr1 = bnexterr;
 802182a:	66b8      	str	r0, [r7, #104]	@ 0x68
	cur1 += delta;		/* form error * 7 */
 802182c:	4445      	add	r5, r8
	bnexterr = cur2;	/* Process component 2 */
 802182e:	4620      	mov	r0, r4
	delta = cur2 * 2;
 8021830:	ea4f 0844 	mov.w	r8, r4, lsl #1
	cur2 += delta;		/* form error * 3 */
 8021834:	4444      	add	r4, r8
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8021836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8021838:	b29a      	uxth	r2, r3
 802183a:	b2a3      	uxth	r3, r4
 802183c:	4413      	add	r3, r2
 802183e:	b29a      	uxth	r2, r3
 8021840:	1d0b      	adds	r3, r1, #4
 8021842:	b212      	sxth	r2, r2
 8021844:	801a      	strh	r2, [r3, #0]
	cur2 += delta;		/* form error * 5 */
 8021846:	4444      	add	r4, r8
	bpreverr2 = belowerr2 + cur2;
 8021848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802184a:	4423      	add	r3, r4
 802184c:	65bb      	str	r3, [r7, #88]	@ 0x58
	belowerr2 = bnexterr;
 802184e:	6678      	str	r0, [r7, #100]	@ 0x64
	cur2 += delta;		/* form error * 7 */
 8021850:	4444      	add	r4, r8
      }
      /* At this point curN contains the 7/16 error value to be propagated
       * to the next pixel on the current line, and all the errors for the
       * next line have been shifted over.  We are therefore ready to move on.
       */
      inptr += dir3;		/* Advance pixel pointers to next column */
 8021852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021854:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8021856:	4413      	add	r3, r2
 8021858:	657b      	str	r3, [r7, #84]	@ 0x54
      outptr += dir;
 802185a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802185c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802185e:	4413      	add	r3, r2
 8021860:	653b      	str	r3, [r7, #80]	@ 0x50
      errorptr += dir3;		/* advance errorptr to current column */
 8021862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021864:	005b      	lsls	r3, r3, #1
 8021866:	18cb      	adds	r3, r1, r3
 8021868:	607b      	str	r3, [r7, #4]
    for (col = width; col > 0; col--) {
 802186a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802186c:	3b01      	subs	r3, #1
 802186e:	643b      	str	r3, [r7, #64]	@ 0x40
 8021870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021872:	2b00      	cmp	r3, #0
 8021874:	f47f af46 	bne.w	8021704 <pass2_fs_dither+0xf0>
    }
    /* Post-loop cleanup: we must unload the final error values into the
     * final fserrors[] entry.  Note we need not unload belowerrN because
     * it is for the dummy column before or after the actual array.
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8021878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802187a:	b21b      	sxth	r3, r3
 802187c:	6879      	ldr	r1, [r7, #4]
 802187e:	800b      	strh	r3, [r1, #0]
    errorptr[1] = (FSERROR) bpreverr1;
 8021880:	1c8b      	adds	r3, r1, #2
 8021882:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8021884:	b212      	sxth	r2, r2
 8021886:	801a      	strh	r2, [r3, #0]
    errorptr[2] = (FSERROR) bpreverr2;
 8021888:	1d0b      	adds	r3, r1, #4
 802188a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 802188c:	b212      	sxth	r2, r2
 802188e:	801a      	strh	r2, [r3, #0]
  for (row = 0; row < num_rows; row++) {
 8021890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021892:	3301      	adds	r3, #1
 8021894:	647b      	str	r3, [r7, #68]	@ 0x44
 8021896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021898:	68bb      	ldr	r3, [r7, #8]
 802189a:	429a      	cmp	r2, r3
 802189c:	f6ff aee5 	blt.w	802166a <pass2_fs_dither+0x56>
  }
}
 80218a0:	bf00      	nop
 80218a2:	bf00      	nop
 80218a4:	3770      	adds	r7, #112	@ 0x70
 80218a6:	46bd      	mov	sp, r7
 80218a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080218ac <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 80218ac:	b580      	push	{r7, lr}
 80218ae:	b086      	sub	sp, #24
 80218b0:	af00      	add	r7, sp, #0
 80218b2:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80218ba:	60fb      	str	r3, [r7, #12]
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 80218bc:	687b      	ldr	r3, [r7, #4]
 80218be:	685b      	ldr	r3, [r3, #4]
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 80218c6:	2101      	movs	r1, #1
 80218c8:	6878      	ldr	r0, [r7, #4]
 80218ca:	4798      	blx	r3
 80218cc:	60b8      	str	r0, [r7, #8]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 80218ce:	68bb      	ldr	r3, [r7, #8]
 80218d0:	f503 737f 	add.w	r3, r3, #1020	@ 0x3fc
 80218d4:	60bb      	str	r3, [r7, #8]
  cquantize->error_limiter = table;
 80218d6:	68fb      	ldr	r3, [r7, #12]
 80218d8:	68ba      	ldr	r2, [r7, #8]
 80218da:	629a      	str	r2, [r3, #40]	@ 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
 80218dc:	2300      	movs	r3, #0
 80218de:	613b      	str	r3, [r7, #16]
  for (in = 0; in < STEPSIZE; in++, out++) {
 80218e0:	2300      	movs	r3, #0
 80218e2:	617b      	str	r3, [r7, #20]
 80218e4:	e016      	b.n	8021914 <init_error_limit+0x68>
    table[in] = out; table[-in] = -out;
 80218e6:	697b      	ldr	r3, [r7, #20]
 80218e8:	009b      	lsls	r3, r3, #2
 80218ea:	68ba      	ldr	r2, [r7, #8]
 80218ec:	4413      	add	r3, r2
 80218ee:	693a      	ldr	r2, [r7, #16]
 80218f0:	601a      	str	r2, [r3, #0]
 80218f2:	697a      	ldr	r2, [r7, #20]
 80218f4:	4613      	mov	r3, r2
 80218f6:	079b      	lsls	r3, r3, #30
 80218f8:	1a9b      	subs	r3, r3, r2
 80218fa:	009b      	lsls	r3, r3, #2
 80218fc:	461a      	mov	r2, r3
 80218fe:	68bb      	ldr	r3, [r7, #8]
 8021900:	4413      	add	r3, r2
 8021902:	693a      	ldr	r2, [r7, #16]
 8021904:	4252      	negs	r2, r2
 8021906:	601a      	str	r2, [r3, #0]
  for (in = 0; in < STEPSIZE; in++, out++) {
 8021908:	697b      	ldr	r3, [r7, #20]
 802190a:	3301      	adds	r3, #1
 802190c:	617b      	str	r3, [r7, #20]
 802190e:	693b      	ldr	r3, [r7, #16]
 8021910:	3301      	adds	r3, #1
 8021912:	613b      	str	r3, [r7, #16]
 8021914:	697b      	ldr	r3, [r7, #20]
 8021916:	2b0f      	cmp	r3, #15
 8021918:	dde5      	ble.n	80218e6 <init_error_limit+0x3a>
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 802191a:	e01f      	b.n	802195c <init_error_limit+0xb0>
    table[in] = out; table[-in] = -out;
 802191c:	697b      	ldr	r3, [r7, #20]
 802191e:	009b      	lsls	r3, r3, #2
 8021920:	68ba      	ldr	r2, [r7, #8]
 8021922:	4413      	add	r3, r2
 8021924:	693a      	ldr	r2, [r7, #16]
 8021926:	601a      	str	r2, [r3, #0]
 8021928:	697a      	ldr	r2, [r7, #20]
 802192a:	4613      	mov	r3, r2
 802192c:	079b      	lsls	r3, r3, #30
 802192e:	1a9b      	subs	r3, r3, r2
 8021930:	009b      	lsls	r3, r3, #2
 8021932:	461a      	mov	r2, r3
 8021934:	68bb      	ldr	r3, [r7, #8]
 8021936:	4413      	add	r3, r2
 8021938:	693a      	ldr	r2, [r7, #16]
 802193a:	4252      	negs	r2, r2
 802193c:	601a      	str	r2, [r3, #0]
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 802193e:	697b      	ldr	r3, [r7, #20]
 8021940:	3301      	adds	r3, #1
 8021942:	617b      	str	r3, [r7, #20]
 8021944:	697b      	ldr	r3, [r7, #20]
 8021946:	f003 0301 	and.w	r3, r3, #1
 802194a:	2b00      	cmp	r3, #0
 802194c:	bf0c      	ite	eq
 802194e:	2301      	moveq	r3, #1
 8021950:	2300      	movne	r3, #0
 8021952:	b2db      	uxtb	r3, r3
 8021954:	461a      	mov	r2, r3
 8021956:	693b      	ldr	r3, [r7, #16]
 8021958:	4413      	add	r3, r2
 802195a:	613b      	str	r3, [r7, #16]
 802195c:	697b      	ldr	r3, [r7, #20]
 802195e:	2b2f      	cmp	r3, #47	@ 0x2f
 8021960:	dddc      	ble.n	802191c <init_error_limit+0x70>
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
 8021962:	e013      	b.n	802198c <init_error_limit+0xe0>
    table[in] = out; table[-in] = -out;
 8021964:	697b      	ldr	r3, [r7, #20]
 8021966:	009b      	lsls	r3, r3, #2
 8021968:	68ba      	ldr	r2, [r7, #8]
 802196a:	4413      	add	r3, r2
 802196c:	693a      	ldr	r2, [r7, #16]
 802196e:	601a      	str	r2, [r3, #0]
 8021970:	697a      	ldr	r2, [r7, #20]
 8021972:	4613      	mov	r3, r2
 8021974:	079b      	lsls	r3, r3, #30
 8021976:	1a9b      	subs	r3, r3, r2
 8021978:	009b      	lsls	r3, r3, #2
 802197a:	461a      	mov	r2, r3
 802197c:	68bb      	ldr	r3, [r7, #8]
 802197e:	4413      	add	r3, r2
 8021980:	693a      	ldr	r2, [r7, #16]
 8021982:	4252      	negs	r2, r2
 8021984:	601a      	str	r2, [r3, #0]
  for (; in <= MAXJSAMPLE; in++) {
 8021986:	697b      	ldr	r3, [r7, #20]
 8021988:	3301      	adds	r3, #1
 802198a:	617b      	str	r3, [r7, #20]
 802198c:	697b      	ldr	r3, [r7, #20]
 802198e:	2bff      	cmp	r3, #255	@ 0xff
 8021990:	dde8      	ble.n	8021964 <init_error_limit+0xb8>
  }
#undef STEPSIZE
}
 8021992:	bf00      	nop
 8021994:	bf00      	nop
 8021996:	3718      	adds	r7, #24
 8021998:	46bd      	mov	sp, r7
 802199a:	bd80      	pop	{r7, pc}

0802199c <finish_pass1>:
 * Finish up at the end of each pass.
 */

METHODDEF(void)
finish_pass1 (j_decompress_ptr cinfo)
{
 802199c:	b580      	push	{r7, lr}
 802199e:	b084      	sub	sp, #16
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80219aa:	60fb      	str	r3, [r7, #12]

  /* Select the representative colors and fill in cinfo->colormap */
  cinfo->colormap = cquantize->sv_colormap;
 80219ac:	68fb      	ldr	r3, [r7, #12]
 80219ae:	691a      	ldr	r2, [r3, #16]
 80219b0:	687b      	ldr	r3, [r7, #4]
 80219b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  select_colors(cinfo, cquantize->desired);
 80219b6:	68fb      	ldr	r3, [r7, #12]
 80219b8:	695b      	ldr	r3, [r3, #20]
 80219ba:	4619      	mov	r1, r3
 80219bc:	6878      	ldr	r0, [r7, #4]
 80219be:	f7ff f8de 	bl	8020b7e <select_colors>
  /* Force next pass to zero the color index table */
  cquantize->needs_zeroed = TRUE;
 80219c2:	68fb      	ldr	r3, [r7, #12]
 80219c4:	2201      	movs	r2, #1
 80219c6:	61da      	str	r2, [r3, #28]
}
 80219c8:	bf00      	nop
 80219ca:	3710      	adds	r7, #16
 80219cc:	46bd      	mov	sp, r7
 80219ce:	bd80      	pop	{r7, pc}

080219d0 <finish_pass2>:


METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
 80219d0:	b480      	push	{r7}
 80219d2:	b083      	sub	sp, #12
 80219d4:	af00      	add	r7, sp, #0
 80219d6:	6078      	str	r0, [r7, #4]
  /* no work */
}
 80219d8:	bf00      	nop
 80219da:	370c      	adds	r7, #12
 80219dc:	46bd      	mov	sp, r7
 80219de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219e2:	4770      	bx	lr

080219e4 <start_pass_2_quant>:
 * Initialize for each processing pass.
 */

METHODDEF(void)
start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 80219e4:	b580      	push	{r7, lr}
 80219e6:	b086      	sub	sp, #24
 80219e8:	af00      	add	r7, sp, #0
 80219ea:	6078      	str	r0, [r7, #4]
 80219ec:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80219ee:	687b      	ldr	r3, [r7, #4]
 80219f0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80219f4:	613b      	str	r3, [r7, #16]
  hist3d histogram = cquantize->histogram;
 80219f6:	693b      	ldr	r3, [r7, #16]
 80219f8:	699b      	ldr	r3, [r3, #24]
 80219fa:	60fb      	str	r3, [r7, #12]
  int i;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d003      	beq.n	8021a0e <start_pass_2_quant+0x2a>
    cinfo->dither_mode = JDITHER_FS;
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	2202      	movs	r2, #2
 8021a0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  if (is_pre_scan) {
 8021a0e:	683b      	ldr	r3, [r7, #0]
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	d009      	beq.n	8021a28 <start_pass_2_quant+0x44>
    /* Set up method pointers */
    cquantize->pub.color_quantize = prescan_quantize;
 8021a14:	693b      	ldr	r3, [r7, #16]
 8021a16:	4a44      	ldr	r2, [pc, #272]	@ (8021b28 <start_pass_2_quant+0x144>)
 8021a18:	605a      	str	r2, [r3, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8021a1a:	693b      	ldr	r3, [r7, #16]
 8021a1c:	4a43      	ldr	r2, [pc, #268]	@ (8021b2c <start_pass_2_quant+0x148>)
 8021a1e:	609a      	str	r2, [r3, #8]
    cquantize->needs_zeroed = TRUE; /* Always zero histogram */
 8021a20:	693b      	ldr	r3, [r7, #16]
 8021a22:	2201      	movs	r2, #1
 8021a24:	61da      	str	r2, [r3, #28]
 8021a26:	e060      	b.n	8021aea <start_pass_2_quant+0x106>
  } else {
    /* Set up method pointers */
    if (cinfo->dither_mode == JDITHER_FS)
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8021a2e:	2b02      	cmp	r3, #2
 8021a30:	d103      	bne.n	8021a3a <start_pass_2_quant+0x56>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8021a32:	693b      	ldr	r3, [r7, #16]
 8021a34:	4a3e      	ldr	r2, [pc, #248]	@ (8021b30 <start_pass_2_quant+0x14c>)
 8021a36:	605a      	str	r2, [r3, #4]
 8021a38:	e002      	b.n	8021a40 <start_pass_2_quant+0x5c>
    else
      cquantize->pub.color_quantize = pass2_no_dither;
 8021a3a:	693b      	ldr	r3, [r7, #16]
 8021a3c:	4a3d      	ldr	r2, [pc, #244]	@ (8021b34 <start_pass_2_quant+0x150>)
 8021a3e:	605a      	str	r2, [r3, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8021a40:	693b      	ldr	r3, [r7, #16]
 8021a42:	4a3d      	ldr	r2, [pc, #244]	@ (8021b38 <start_pass_2_quant+0x154>)
 8021a44:	609a      	str	r2, [r3, #8]

    /* Make sure color count is acceptable */
    i = cinfo->actual_number_of_colors;
 8021a46:	687b      	ldr	r3, [r7, #4]
 8021a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021a4c:	617b      	str	r3, [r7, #20]
    if (i < 1)
 8021a4e:	697b      	ldr	r3, [r7, #20]
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	dc0c      	bgt.n	8021a6e <start_pass_2_quant+0x8a>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	223a      	movs	r2, #58	@ 0x3a
 8021a5a:	615a      	str	r2, [r3, #20]
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	681b      	ldr	r3, [r3, #0]
 8021a60:	2201      	movs	r2, #1
 8021a62:	619a      	str	r2, [r3, #24]
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	6878      	ldr	r0, [r7, #4]
 8021a6c:	4798      	blx	r3
    if (i > MAXNUMCOLORS)
 8021a6e:	697b      	ldr	r3, [r7, #20]
 8021a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021a74:	dd0d      	ble.n	8021a92 <start_pass_2_quant+0xae>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	681b      	ldr	r3, [r3, #0]
 8021a7a:	223b      	movs	r2, #59	@ 0x3b
 8021a7c:	615a      	str	r2, [r3, #20]
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	681b      	ldr	r3, [r3, #0]
 8021a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021a86:	619a      	str	r2, [r3, #24]
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	681b      	ldr	r3, [r3, #0]
 8021a8c:	681b      	ldr	r3, [r3, #0]
 8021a8e:	6878      	ldr	r0, [r7, #4]
 8021a90:	4798      	blx	r3

    if (cinfo->dither_mode == JDITHER_FS) {
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8021a98:	2b02      	cmp	r3, #2
 8021a9a:	d126      	bne.n	8021aea <start_pass_2_quant+0x106>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8021aa0:	4613      	mov	r3, r2
 8021aa2:	005b      	lsls	r3, r3, #1
 8021aa4:	4413      	add	r3, r2
 8021aa6:	005b      	lsls	r3, r3, #1
 8021aa8:	330c      	adds	r3, #12
 8021aaa:	60bb      	str	r3, [r7, #8]
				   (3 * SIZEOF(FSERROR)));
      /* Allocate Floyd-Steinberg workspace if we didn't already. */
      if (cquantize->fserrors == NULL)
 8021aac:	693b      	ldr	r3, [r7, #16]
 8021aae:	6a1b      	ldr	r3, [r3, #32]
 8021ab0:	2b00      	cmp	r3, #0
 8021ab2:	d109      	bne.n	8021ac8 <start_pass_2_quant+0xe4>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	685b      	ldr	r3, [r3, #4]
 8021ab8:	685b      	ldr	r3, [r3, #4]
 8021aba:	68ba      	ldr	r2, [r7, #8]
 8021abc:	2101      	movs	r1, #1
 8021abe:	6878      	ldr	r0, [r7, #4]
 8021ac0:	4798      	blx	r3
 8021ac2:	4602      	mov	r2, r0
 8021ac4:	693b      	ldr	r3, [r7, #16]
 8021ac6:	621a      	str	r2, [r3, #32]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
      /* Initialize the propagated errors to zero. */
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8021ac8:	693b      	ldr	r3, [r7, #16]
 8021aca:	6a1b      	ldr	r3, [r3, #32]
 8021acc:	68ba      	ldr	r2, [r7, #8]
 8021ace:	2100      	movs	r1, #0
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	f000 fa3d 	bl	8021f50 <memset>
      /* Make the error-limit table if we didn't already. */
      if (cquantize->error_limiter == NULL)
 8021ad6:	693b      	ldr	r3, [r7, #16]
 8021ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	d102      	bne.n	8021ae4 <start_pass_2_quant+0x100>
	init_error_limit(cinfo);
 8021ade:	6878      	ldr	r0, [r7, #4]
 8021ae0:	f7ff fee4 	bl	80218ac <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8021ae4:	693b      	ldr	r3, [r7, #16]
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

  }
  /* Zero the histogram or inverse color map, if necessary */
  if (cquantize->needs_zeroed) {
 8021aea:	693b      	ldr	r3, [r7, #16]
 8021aec:	69db      	ldr	r3, [r3, #28]
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d016      	beq.n	8021b20 <start_pass_2_quant+0x13c>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8021af2:	2300      	movs	r3, #0
 8021af4:	617b      	str	r3, [r7, #20]
 8021af6:	e00d      	b.n	8021b14 <start_pass_2_quant+0x130>
      FMEMZERO((void FAR *) histogram[i],
 8021af8:	697b      	ldr	r3, [r7, #20]
 8021afa:	009b      	lsls	r3, r3, #2
 8021afc:	68fa      	ldr	r2, [r7, #12]
 8021afe:	4413      	add	r3, r2
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8021b06:	2100      	movs	r1, #0
 8021b08:	4618      	mov	r0, r3
 8021b0a:	f000 fa21 	bl	8021f50 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8021b0e:	697b      	ldr	r3, [r7, #20]
 8021b10:	3301      	adds	r3, #1
 8021b12:	617b      	str	r3, [r7, #20]
 8021b14:	697b      	ldr	r3, [r7, #20]
 8021b16:	2b1f      	cmp	r3, #31
 8021b18:	ddee      	ble.n	8021af8 <start_pass_2_quant+0x114>
	       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
    }
    cquantize->needs_zeroed = FALSE;
 8021b1a:	693b      	ldr	r3, [r7, #16]
 8021b1c:	2200      	movs	r2, #0
 8021b1e:	61da      	str	r2, [r3, #28]
  }
}
 8021b20:	bf00      	nop
 8021b22:	3718      	adds	r7, #24
 8021b24:	46bd      	mov	sp, r7
 8021b26:	bd80      	pop	{r7, pc}
 8021b28:	08020425 	.word	0x08020425
 8021b2c:	0802199d 	.word	0x0802199d
 8021b30:	08021615 	.word	0x08021615
 8021b34:	08021551 	.word	0x08021551
 8021b38:	080219d1 	.word	0x080219d1

08021b3c <new_color_map_2_quant>:
 * Switch to a new external colormap between output passes.
 */

METHODDEF(void)
new_color_map_2_quant (j_decompress_ptr cinfo)
{
 8021b3c:	b480      	push	{r7}
 8021b3e:	b085      	sub	sp, #20
 8021b40:	af00      	add	r7, sp, #0
 8021b42:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8021b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8021b4c:	68fb      	ldr	r3, [r7, #12]
 8021b4e:	2201      	movs	r2, #1
 8021b50:	61da      	str	r2, [r3, #28]
}
 8021b52:	bf00      	nop
 8021b54:	3714      	adds	r7, #20
 8021b56:	46bd      	mov	sp, r7
 8021b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b5c:	4770      	bx	lr
	...

08021b60 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8021b60:	b590      	push	{r4, r7, lr}
 8021b62:	b087      	sub	sp, #28
 8021b64:	af00      	add	r7, sp, #0
 8021b66:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8021b68:	687b      	ldr	r3, [r7, #4]
 8021b6a:	685b      	ldr	r3, [r3, #4]
 8021b6c:	681b      	ldr	r3, [r3, #0]
 8021b6e:	222c      	movs	r2, #44	@ 0x2c
 8021b70:	2101      	movs	r1, #1
 8021b72:	6878      	ldr	r0, [r7, #4]
 8021b74:	4798      	blx	r3
 8021b76:	6138      	str	r0, [r7, #16]
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	693a      	ldr	r2, [r7, #16]
 8021b7c:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  cquantize->pub.start_pass = start_pass_2_quant;
 8021b80:	693b      	ldr	r3, [r7, #16]
 8021b82:	4a4f      	ldr	r2, [pc, #316]	@ (8021cc0 <jinit_2pass_quantizer+0x160>)
 8021b84:	601a      	str	r2, [r3, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8021b86:	693b      	ldr	r3, [r7, #16]
 8021b88:	4a4e      	ldr	r2, [pc, #312]	@ (8021cc4 <jinit_2pass_quantizer+0x164>)
 8021b8a:	60da      	str	r2, [r3, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8021b8c:	693b      	ldr	r3, [r7, #16]
 8021b8e:	2200      	movs	r2, #0
 8021b90:	621a      	str	r2, [r3, #32]
  cquantize->error_limiter = NULL;
 8021b92:	693b      	ldr	r3, [r7, #16]
 8021b94:	2200      	movs	r2, #0
 8021b96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8021b9c:	2b03      	cmp	r3, #3
 8021b9e:	d008      	beq.n	8021bb2 <jinit_2pass_quantizer+0x52>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	681b      	ldr	r3, [r3, #0]
 8021ba4:	2230      	movs	r2, #48	@ 0x30
 8021ba6:	615a      	str	r2, [r3, #20]
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	681b      	ldr	r3, [r3, #0]
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	6878      	ldr	r0, [r7, #4]
 8021bb0:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8021bb2:	687b      	ldr	r3, [r7, #4]
 8021bb4:	685b      	ldr	r3, [r3, #4]
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	2280      	movs	r2, #128	@ 0x80
 8021bba:	2101      	movs	r1, #1
 8021bbc:	6878      	ldr	r0, [r7, #4]
 8021bbe:	4798      	blx	r3
 8021bc0:	4602      	mov	r2, r0
 8021bc2:	693b      	ldr	r3, [r7, #16]
 8021bc4:	619a      	str	r2, [r3, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8021bc6:	2300      	movs	r3, #0
 8021bc8:	617b      	str	r3, [r7, #20]
 8021bca:	e011      	b.n	8021bf0 <jinit_2pass_quantizer+0x90>
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	685b      	ldr	r3, [r3, #4]
 8021bd0:	685b      	ldr	r3, [r3, #4]
 8021bd2:	693a      	ldr	r2, [r7, #16]
 8021bd4:	6991      	ldr	r1, [r2, #24]
 8021bd6:	697a      	ldr	r2, [r7, #20]
 8021bd8:	0092      	lsls	r2, r2, #2
 8021bda:	188c      	adds	r4, r1, r2
 8021bdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8021be0:	2101      	movs	r1, #1
 8021be2:	6878      	ldr	r0, [r7, #4]
 8021be4:	4798      	blx	r3
 8021be6:	4603      	mov	r3, r0
 8021be8:	6023      	str	r3, [r4, #0]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8021bea:	697b      	ldr	r3, [r7, #20]
 8021bec:	3301      	adds	r3, #1
 8021bee:	617b      	str	r3, [r7, #20]
 8021bf0:	697b      	ldr	r3, [r7, #20]
 8021bf2:	2b1f      	cmp	r3, #31
 8021bf4:	ddea      	ble.n	8021bcc <jinit_2pass_quantizer+0x6c>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8021bf6:	693b      	ldr	r3, [r7, #16]
 8021bf8:	2201      	movs	r2, #1
 8021bfa:	61da      	str	r2, [r3, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8021bfc:	687b      	ldr	r3, [r7, #4]
 8021bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	d033      	beq.n	8021c6c <jinit_2pass_quantizer+0x10c>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8021c08:	60fb      	str	r3, [r7, #12]
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8021c0a:	68fb      	ldr	r3, [r7, #12]
 8021c0c:	2b07      	cmp	r3, #7
 8021c0e:	dc0c      	bgt.n	8021c2a <jinit_2pass_quantizer+0xca>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	223a      	movs	r2, #58	@ 0x3a
 8021c16:	615a      	str	r2, [r3, #20]
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	681b      	ldr	r3, [r3, #0]
 8021c1c:	2208      	movs	r2, #8
 8021c1e:	619a      	str	r2, [r3, #24]
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	681b      	ldr	r3, [r3, #0]
 8021c24:	681b      	ldr	r3, [r3, #0]
 8021c26:	6878      	ldr	r0, [r7, #4]
 8021c28:	4798      	blx	r3
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
 8021c2a:	68fb      	ldr	r3, [r7, #12]
 8021c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021c30:	dd0d      	ble.n	8021c4e <jinit_2pass_quantizer+0xee>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	681b      	ldr	r3, [r3, #0]
 8021c36:	223b      	movs	r2, #59	@ 0x3b
 8021c38:	615a      	str	r2, [r3, #20]
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	681b      	ldr	r3, [r3, #0]
 8021c3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021c42:	619a      	str	r2, [r3, #24]
 8021c44:	687b      	ldr	r3, [r7, #4]
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	6878      	ldr	r0, [r7, #4]
 8021c4c:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	685b      	ldr	r3, [r3, #4]
 8021c52:	689c      	ldr	r4, [r3, #8]
 8021c54:	68fa      	ldr	r2, [r7, #12]
 8021c56:	2303      	movs	r3, #3
 8021c58:	2101      	movs	r1, #1
 8021c5a:	6878      	ldr	r0, [r7, #4]
 8021c5c:	47a0      	blx	r4
 8021c5e:	4602      	mov	r2, r0
 8021c60:	693b      	ldr	r3, [r7, #16]
 8021c62:	611a      	str	r2, [r3, #16]
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8021c64:	693b      	ldr	r3, [r7, #16]
 8021c66:	68fa      	ldr	r2, [r7, #12]
 8021c68:	615a      	str	r2, [r3, #20]
 8021c6a:	e002      	b.n	8021c72 <jinit_2pass_quantizer+0x112>
  } else
    cquantize->sv_colormap = NULL;
 8021c6c:	693b      	ldr	r3, [r7, #16]
 8021c6e:	2200      	movs	r2, #0
 8021c70:	611a      	str	r2, [r3, #16]

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8021c72:	687b      	ldr	r3, [r7, #4]
 8021c74:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d003      	beq.n	8021c84 <jinit_2pass_quantizer+0x124>
    cinfo->dither_mode = JDITHER_FS;
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	2202      	movs	r2, #2
 8021c80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Allocate Floyd-Steinberg workspace if necessary.
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8021c8a:	2b02      	cmp	r3, #2
 8021c8c:	d113      	bne.n	8021cb6 <jinit_2pass_quantizer+0x156>
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8021c8e:	687b      	ldr	r3, [r7, #4]
 8021c90:	685b      	ldr	r3, [r3, #4]
 8021c92:	685c      	ldr	r4, [r3, #4]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8021c98:	4613      	mov	r3, r2
 8021c9a:	005b      	lsls	r3, r3, #1
 8021c9c:	4413      	add	r3, r2
 8021c9e:	005b      	lsls	r3, r3, #1
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
 8021ca0:	330c      	adds	r3, #12
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8021ca2:	461a      	mov	r2, r3
 8021ca4:	2101      	movs	r1, #1
 8021ca6:	6878      	ldr	r0, [r7, #4]
 8021ca8:	47a0      	blx	r4
 8021caa:	4602      	mov	r2, r0
 8021cac:	693b      	ldr	r3, [r7, #16]
 8021cae:	621a      	str	r2, [r3, #32]
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8021cb0:	6878      	ldr	r0, [r7, #4]
 8021cb2:	f7ff fdfb 	bl	80218ac <init_error_limit>
  }
}
 8021cb6:	bf00      	nop
 8021cb8:	371c      	adds	r7, #28
 8021cba:	46bd      	mov	sp, r7
 8021cbc:	bd90      	pop	{r4, r7, pc}
 8021cbe:	bf00      	nop
 8021cc0:	080219e5 	.word	0x080219e5
 8021cc4:	08021b3d 	.word	0x08021b3d

08021cc8 <jdiv_round_up>:

GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
 8021cc8:	b480      	push	{r7}
 8021cca:	b083      	sub	sp, #12
 8021ccc:	af00      	add	r7, sp, #0
 8021cce:	6078      	str	r0, [r7, #4]
 8021cd0:	6039      	str	r1, [r7, #0]
  return (a + b - 1L) / b;
 8021cd2:	687a      	ldr	r2, [r7, #4]
 8021cd4:	683b      	ldr	r3, [r7, #0]
 8021cd6:	4413      	add	r3, r2
 8021cd8:	1e5a      	subs	r2, r3, #1
 8021cda:	683b      	ldr	r3, [r7, #0]
 8021cdc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8021ce0:	4618      	mov	r0, r3
 8021ce2:	370c      	adds	r7, #12
 8021ce4:	46bd      	mov	sp, r7
 8021ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cea:	4770      	bx	lr

08021cec <jround_up>:

GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
 8021cec:	b480      	push	{r7}
 8021cee:	b083      	sub	sp, #12
 8021cf0:	af00      	add	r7, sp, #0
 8021cf2:	6078      	str	r0, [r7, #4]
 8021cf4:	6039      	str	r1, [r7, #0]
  a += b - 1L;
 8021cf6:	683b      	ldr	r3, [r7, #0]
 8021cf8:	3b01      	subs	r3, #1
 8021cfa:	687a      	ldr	r2, [r7, #4]
 8021cfc:	4413      	add	r3, r2
 8021cfe:	607b      	str	r3, [r7, #4]
  return a - (a % b);
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	683a      	ldr	r2, [r7, #0]
 8021d04:	fb93 f2f2 	sdiv	r2, r3, r2
 8021d08:	6839      	ldr	r1, [r7, #0]
 8021d0a:	fb01 f202 	mul.w	r2, r1, r2
 8021d0e:	1a9b      	subs	r3, r3, r2
 8021d10:	687a      	ldr	r2, [r7, #4]
 8021d12:	1ad3      	subs	r3, r2, r3
}
 8021d14:	4618      	mov	r0, r3
 8021d16:	370c      	adds	r7, #12
 8021d18:	46bd      	mov	sp, r7
 8021d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d1e:	4770      	bx	lr

08021d20 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8021d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d22:	b085      	sub	sp, #20
 8021d24:	af00      	add	r7, sp, #0
 8021d26:	60f8      	str	r0, [r7, #12]
 8021d28:	60b9      	str	r1, [r7, #8]
 8021d2a:	607a      	str	r2, [r7, #4]
 8021d2c:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
 8021d2e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8021d30:	68bb      	ldr	r3, [r7, #8]
 8021d32:	009b      	lsls	r3, r3, #2
 8021d34:	68fa      	ldr	r2, [r7, #12]
 8021d36:	4413      	add	r3, r2
 8021d38:	60fb      	str	r3, [r7, #12]
  output_array += dest_row;
 8021d3a:	683b      	ldr	r3, [r7, #0]
 8021d3c:	009b      	lsls	r3, r3, #2
 8021d3e:	687a      	ldr	r2, [r7, #4]
 8021d40:	4413      	add	r3, r2
 8021d42:	607b      	str	r3, [r7, #4]

  for (row = num_rows; row > 0; row--) {
 8021d44:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8021d46:	e00c      	b.n	8021d62 <jcopy_sample_rows+0x42>
    inptr = *input_array++;
 8021d48:	68fb      	ldr	r3, [r7, #12]
 8021d4a:	1d1a      	adds	r2, r3, #4
 8021d4c:	60fa      	str	r2, [r7, #12]
 8021d4e:	6819      	ldr	r1, [r3, #0]
    outptr = *output_array++;
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	1d1a      	adds	r2, r3, #4
 8021d54:	607a      	str	r2, [r7, #4]
 8021d56:	681e      	ldr	r6, [r3, #0]
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
 8021d58:	462a      	mov	r2, r5
 8021d5a:	4630      	mov	r0, r6
 8021d5c:	f000 f93c 	bl	8021fd8 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8021d60:	3c01      	subs	r4, #1
 8021d62:	2c00      	cmp	r4, #0
 8021d64:	dcf0      	bgt.n	8021d48 <jcopy_sample_rows+0x28>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8021d66:	bf00      	nop
 8021d68:	bf00      	nop
 8021d6a:	3714      	adds	r7, #20
 8021d6c:	46bd      	mov	sp, r7
 8021d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021d70 <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8021d70:	b580      	push	{r7, lr}
 8021d72:	b084      	sub	sp, #16
 8021d74:	af00      	add	r7, sp, #0
 8021d76:	60f8      	str	r0, [r7, #12]
 8021d78:	60b9      	str	r1, [r7, #8]
 8021d7a:	607a      	str	r2, [r7, #4]
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	01db      	lsls	r3, r3, #7
 8021d80:	461a      	mov	r2, r3
 8021d82:	68f9      	ldr	r1, [r7, #12]
 8021d84:	68b8      	ldr	r0, [r7, #8]
 8021d86:	f000 f927 	bl	8021fd8 <memcpy>
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
    *outptr++ = *inptr++;
  }
#endif
}
 8021d8a:	bf00      	nop
 8021d8c:	3710      	adds	r7, #16
 8021d8e:	46bd      	mov	sp, r7
 8021d90:	bd80      	pop	{r7, pc}
	...

08021d94 <malloc>:
 8021d94:	4b02      	ldr	r3, [pc, #8]	@ (8021da0 <malloc+0xc>)
 8021d96:	4601      	mov	r1, r0
 8021d98:	6818      	ldr	r0, [r3, #0]
 8021d9a:	f000 b82d 	b.w	8021df8 <_malloc_r>
 8021d9e:	bf00      	nop
 8021da0:	20000024 	.word	0x20000024

08021da4 <free>:
 8021da4:	4b02      	ldr	r3, [pc, #8]	@ (8021db0 <free+0xc>)
 8021da6:	4601      	mov	r1, r0
 8021da8:	6818      	ldr	r0, [r3, #0]
 8021daa:	f000 b923 	b.w	8021ff4 <_free_r>
 8021dae:	bf00      	nop
 8021db0:	20000024 	.word	0x20000024

08021db4 <sbrk_aligned>:
 8021db4:	b570      	push	{r4, r5, r6, lr}
 8021db6:	4e0f      	ldr	r6, [pc, #60]	@ (8021df4 <sbrk_aligned+0x40>)
 8021db8:	460c      	mov	r4, r1
 8021dba:	6831      	ldr	r1, [r6, #0]
 8021dbc:	4605      	mov	r5, r0
 8021dbe:	b911      	cbnz	r1, 8021dc6 <sbrk_aligned+0x12>
 8021dc0:	f000 f8ce 	bl	8021f60 <_sbrk_r>
 8021dc4:	6030      	str	r0, [r6, #0]
 8021dc6:	4621      	mov	r1, r4
 8021dc8:	4628      	mov	r0, r5
 8021dca:	f000 f8c9 	bl	8021f60 <_sbrk_r>
 8021dce:	1c43      	adds	r3, r0, #1
 8021dd0:	d103      	bne.n	8021dda <sbrk_aligned+0x26>
 8021dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8021dd6:	4620      	mov	r0, r4
 8021dd8:	bd70      	pop	{r4, r5, r6, pc}
 8021dda:	1cc4      	adds	r4, r0, #3
 8021ddc:	f024 0403 	bic.w	r4, r4, #3
 8021de0:	42a0      	cmp	r0, r4
 8021de2:	d0f8      	beq.n	8021dd6 <sbrk_aligned+0x22>
 8021de4:	1a21      	subs	r1, r4, r0
 8021de6:	4628      	mov	r0, r5
 8021de8:	f000 f8ba 	bl	8021f60 <_sbrk_r>
 8021dec:	3001      	adds	r0, #1
 8021dee:	d1f2      	bne.n	8021dd6 <sbrk_aligned+0x22>
 8021df0:	e7ef      	b.n	8021dd2 <sbrk_aligned+0x1e>
 8021df2:	bf00      	nop
 8021df4:	200003c8 	.word	0x200003c8

08021df8 <_malloc_r>:
 8021df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021dfc:	1ccd      	adds	r5, r1, #3
 8021dfe:	f025 0503 	bic.w	r5, r5, #3
 8021e02:	3508      	adds	r5, #8
 8021e04:	2d0c      	cmp	r5, #12
 8021e06:	bf38      	it	cc
 8021e08:	250c      	movcc	r5, #12
 8021e0a:	2d00      	cmp	r5, #0
 8021e0c:	4606      	mov	r6, r0
 8021e0e:	db01      	blt.n	8021e14 <_malloc_r+0x1c>
 8021e10:	42a9      	cmp	r1, r5
 8021e12:	d904      	bls.n	8021e1e <_malloc_r+0x26>
 8021e14:	230c      	movs	r3, #12
 8021e16:	6033      	str	r3, [r6, #0]
 8021e18:	2000      	movs	r0, #0
 8021e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021ef4 <_malloc_r+0xfc>
 8021e22:	f000 f869 	bl	8021ef8 <__malloc_lock>
 8021e26:	f8d8 3000 	ldr.w	r3, [r8]
 8021e2a:	461c      	mov	r4, r3
 8021e2c:	bb44      	cbnz	r4, 8021e80 <_malloc_r+0x88>
 8021e2e:	4629      	mov	r1, r5
 8021e30:	4630      	mov	r0, r6
 8021e32:	f7ff ffbf 	bl	8021db4 <sbrk_aligned>
 8021e36:	1c43      	adds	r3, r0, #1
 8021e38:	4604      	mov	r4, r0
 8021e3a:	d158      	bne.n	8021eee <_malloc_r+0xf6>
 8021e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8021e40:	4627      	mov	r7, r4
 8021e42:	2f00      	cmp	r7, #0
 8021e44:	d143      	bne.n	8021ece <_malloc_r+0xd6>
 8021e46:	2c00      	cmp	r4, #0
 8021e48:	d04b      	beq.n	8021ee2 <_malloc_r+0xea>
 8021e4a:	6823      	ldr	r3, [r4, #0]
 8021e4c:	4639      	mov	r1, r7
 8021e4e:	4630      	mov	r0, r6
 8021e50:	eb04 0903 	add.w	r9, r4, r3
 8021e54:	f000 f884 	bl	8021f60 <_sbrk_r>
 8021e58:	4581      	cmp	r9, r0
 8021e5a:	d142      	bne.n	8021ee2 <_malloc_r+0xea>
 8021e5c:	6821      	ldr	r1, [r4, #0]
 8021e5e:	1a6d      	subs	r5, r5, r1
 8021e60:	4629      	mov	r1, r5
 8021e62:	4630      	mov	r0, r6
 8021e64:	f7ff ffa6 	bl	8021db4 <sbrk_aligned>
 8021e68:	3001      	adds	r0, #1
 8021e6a:	d03a      	beq.n	8021ee2 <_malloc_r+0xea>
 8021e6c:	6823      	ldr	r3, [r4, #0]
 8021e6e:	442b      	add	r3, r5
 8021e70:	6023      	str	r3, [r4, #0]
 8021e72:	f8d8 3000 	ldr.w	r3, [r8]
 8021e76:	685a      	ldr	r2, [r3, #4]
 8021e78:	bb62      	cbnz	r2, 8021ed4 <_malloc_r+0xdc>
 8021e7a:	f8c8 7000 	str.w	r7, [r8]
 8021e7e:	e00f      	b.n	8021ea0 <_malloc_r+0xa8>
 8021e80:	6822      	ldr	r2, [r4, #0]
 8021e82:	1b52      	subs	r2, r2, r5
 8021e84:	d420      	bmi.n	8021ec8 <_malloc_r+0xd0>
 8021e86:	2a0b      	cmp	r2, #11
 8021e88:	d917      	bls.n	8021eba <_malloc_r+0xc2>
 8021e8a:	1961      	adds	r1, r4, r5
 8021e8c:	42a3      	cmp	r3, r4
 8021e8e:	6025      	str	r5, [r4, #0]
 8021e90:	bf18      	it	ne
 8021e92:	6059      	strne	r1, [r3, #4]
 8021e94:	6863      	ldr	r3, [r4, #4]
 8021e96:	bf08      	it	eq
 8021e98:	f8c8 1000 	streq.w	r1, [r8]
 8021e9c:	5162      	str	r2, [r4, r5]
 8021e9e:	604b      	str	r3, [r1, #4]
 8021ea0:	4630      	mov	r0, r6
 8021ea2:	f000 f82f 	bl	8021f04 <__malloc_unlock>
 8021ea6:	f104 000b 	add.w	r0, r4, #11
 8021eaa:	1d23      	adds	r3, r4, #4
 8021eac:	f020 0007 	bic.w	r0, r0, #7
 8021eb0:	1ac2      	subs	r2, r0, r3
 8021eb2:	bf1c      	itt	ne
 8021eb4:	1a1b      	subne	r3, r3, r0
 8021eb6:	50a3      	strne	r3, [r4, r2]
 8021eb8:	e7af      	b.n	8021e1a <_malloc_r+0x22>
 8021eba:	6862      	ldr	r2, [r4, #4]
 8021ebc:	42a3      	cmp	r3, r4
 8021ebe:	bf0c      	ite	eq
 8021ec0:	f8c8 2000 	streq.w	r2, [r8]
 8021ec4:	605a      	strne	r2, [r3, #4]
 8021ec6:	e7eb      	b.n	8021ea0 <_malloc_r+0xa8>
 8021ec8:	4623      	mov	r3, r4
 8021eca:	6864      	ldr	r4, [r4, #4]
 8021ecc:	e7ae      	b.n	8021e2c <_malloc_r+0x34>
 8021ece:	463c      	mov	r4, r7
 8021ed0:	687f      	ldr	r7, [r7, #4]
 8021ed2:	e7b6      	b.n	8021e42 <_malloc_r+0x4a>
 8021ed4:	461a      	mov	r2, r3
 8021ed6:	685b      	ldr	r3, [r3, #4]
 8021ed8:	42a3      	cmp	r3, r4
 8021eda:	d1fb      	bne.n	8021ed4 <_malloc_r+0xdc>
 8021edc:	2300      	movs	r3, #0
 8021ede:	6053      	str	r3, [r2, #4]
 8021ee0:	e7de      	b.n	8021ea0 <_malloc_r+0xa8>
 8021ee2:	230c      	movs	r3, #12
 8021ee4:	6033      	str	r3, [r6, #0]
 8021ee6:	4630      	mov	r0, r6
 8021ee8:	f000 f80c 	bl	8021f04 <__malloc_unlock>
 8021eec:	e794      	b.n	8021e18 <_malloc_r+0x20>
 8021eee:	6005      	str	r5, [r0, #0]
 8021ef0:	e7d6      	b.n	8021ea0 <_malloc_r+0xa8>
 8021ef2:	bf00      	nop
 8021ef4:	200003cc 	.word	0x200003cc

08021ef8 <__malloc_lock>:
 8021ef8:	4801      	ldr	r0, [pc, #4]	@ (8021f00 <__malloc_lock+0x8>)
 8021efa:	f000 b86b 	b.w	8021fd4 <__retarget_lock_acquire_recursive>
 8021efe:	bf00      	nop
 8021f00:	2000050c 	.word	0x2000050c

08021f04 <__malloc_unlock>:
 8021f04:	4801      	ldr	r0, [pc, #4]	@ (8021f0c <__malloc_unlock+0x8>)
 8021f06:	f000 b866 	b.w	8021fd6 <__retarget_lock_release_recursive>
 8021f0a:	bf00      	nop
 8021f0c:	2000050c 	.word	0x2000050c

08021f10 <siprintf>:
 8021f10:	b40e      	push	{r1, r2, r3}
 8021f12:	b500      	push	{lr}
 8021f14:	b09c      	sub	sp, #112	@ 0x70
 8021f16:	ab1d      	add	r3, sp, #116	@ 0x74
 8021f18:	9002      	str	r0, [sp, #8]
 8021f1a:	9006      	str	r0, [sp, #24]
 8021f1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8021f20:	4809      	ldr	r0, [pc, #36]	@ (8021f48 <siprintf+0x38>)
 8021f22:	9107      	str	r1, [sp, #28]
 8021f24:	9104      	str	r1, [sp, #16]
 8021f26:	4909      	ldr	r1, [pc, #36]	@ (8021f4c <siprintf+0x3c>)
 8021f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f2c:	9105      	str	r1, [sp, #20]
 8021f2e:	6800      	ldr	r0, [r0, #0]
 8021f30:	9301      	str	r3, [sp, #4]
 8021f32:	a902      	add	r1, sp, #8
 8021f34:	f000 f904 	bl	8022140 <_svfiprintf_r>
 8021f38:	9b02      	ldr	r3, [sp, #8]
 8021f3a:	2200      	movs	r2, #0
 8021f3c:	701a      	strb	r2, [r3, #0]
 8021f3e:	b01c      	add	sp, #112	@ 0x70
 8021f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8021f44:	b003      	add	sp, #12
 8021f46:	4770      	bx	lr
 8021f48:	20000024 	.word	0x20000024
 8021f4c:	ffff0208 	.word	0xffff0208

08021f50 <memset>:
 8021f50:	4402      	add	r2, r0
 8021f52:	4603      	mov	r3, r0
 8021f54:	4293      	cmp	r3, r2
 8021f56:	d100      	bne.n	8021f5a <memset+0xa>
 8021f58:	4770      	bx	lr
 8021f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8021f5e:	e7f9      	b.n	8021f54 <memset+0x4>

08021f60 <_sbrk_r>:
 8021f60:	b538      	push	{r3, r4, r5, lr}
 8021f62:	4d06      	ldr	r5, [pc, #24]	@ (8021f7c <_sbrk_r+0x1c>)
 8021f64:	2300      	movs	r3, #0
 8021f66:	4604      	mov	r4, r0
 8021f68:	4608      	mov	r0, r1
 8021f6a:	602b      	str	r3, [r5, #0]
 8021f6c:	f7df fa9c 	bl	80014a8 <_sbrk>
 8021f70:	1c43      	adds	r3, r0, #1
 8021f72:	d102      	bne.n	8021f7a <_sbrk_r+0x1a>
 8021f74:	682b      	ldr	r3, [r5, #0]
 8021f76:	b103      	cbz	r3, 8021f7a <_sbrk_r+0x1a>
 8021f78:	6023      	str	r3, [r4, #0]
 8021f7a:	bd38      	pop	{r3, r4, r5, pc}
 8021f7c:	20000508 	.word	0x20000508

08021f80 <__errno>:
 8021f80:	4b01      	ldr	r3, [pc, #4]	@ (8021f88 <__errno+0x8>)
 8021f82:	6818      	ldr	r0, [r3, #0]
 8021f84:	4770      	bx	lr
 8021f86:	bf00      	nop
 8021f88:	20000024 	.word	0x20000024

08021f8c <__libc_init_array>:
 8021f8c:	b570      	push	{r4, r5, r6, lr}
 8021f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8021fc4 <__libc_init_array+0x38>)
 8021f90:	4c0d      	ldr	r4, [pc, #52]	@ (8021fc8 <__libc_init_array+0x3c>)
 8021f92:	1b64      	subs	r4, r4, r5
 8021f94:	10a4      	asrs	r4, r4, #2
 8021f96:	2600      	movs	r6, #0
 8021f98:	42a6      	cmp	r6, r4
 8021f9a:	d109      	bne.n	8021fb0 <__libc_init_array+0x24>
 8021f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8021fcc <__libc_init_array+0x40>)
 8021f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8021fd0 <__libc_init_array+0x44>)
 8021fa0:	f000 fba8 	bl	80226f4 <_init>
 8021fa4:	1b64      	subs	r4, r4, r5
 8021fa6:	10a4      	asrs	r4, r4, #2
 8021fa8:	2600      	movs	r6, #0
 8021faa:	42a6      	cmp	r6, r4
 8021fac:	d105      	bne.n	8021fba <__libc_init_array+0x2e>
 8021fae:	bd70      	pop	{r4, r5, r6, pc}
 8021fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8021fb4:	4798      	blx	r3
 8021fb6:	3601      	adds	r6, #1
 8021fb8:	e7ee      	b.n	8021f98 <__libc_init_array+0xc>
 8021fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8021fbe:	4798      	blx	r3
 8021fc0:	3601      	adds	r6, #1
 8021fc2:	e7f2      	b.n	8021faa <__libc_init_array+0x1e>
 8021fc4:	08024938 	.word	0x08024938
 8021fc8:	08024938 	.word	0x08024938
 8021fcc:	08024938 	.word	0x08024938
 8021fd0:	0802493c 	.word	0x0802493c

08021fd4 <__retarget_lock_acquire_recursive>:
 8021fd4:	4770      	bx	lr

08021fd6 <__retarget_lock_release_recursive>:
 8021fd6:	4770      	bx	lr

08021fd8 <memcpy>:
 8021fd8:	440a      	add	r2, r1
 8021fda:	4291      	cmp	r1, r2
 8021fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8021fe0:	d100      	bne.n	8021fe4 <memcpy+0xc>
 8021fe2:	4770      	bx	lr
 8021fe4:	b510      	push	{r4, lr}
 8021fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021fee:	4291      	cmp	r1, r2
 8021ff0:	d1f9      	bne.n	8021fe6 <memcpy+0xe>
 8021ff2:	bd10      	pop	{r4, pc}

08021ff4 <_free_r>:
 8021ff4:	b538      	push	{r3, r4, r5, lr}
 8021ff6:	4605      	mov	r5, r0
 8021ff8:	2900      	cmp	r1, #0
 8021ffa:	d041      	beq.n	8022080 <_free_r+0x8c>
 8021ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022000:	1f0c      	subs	r4, r1, #4
 8022002:	2b00      	cmp	r3, #0
 8022004:	bfb8      	it	lt
 8022006:	18e4      	addlt	r4, r4, r3
 8022008:	f7ff ff76 	bl	8021ef8 <__malloc_lock>
 802200c:	4a1d      	ldr	r2, [pc, #116]	@ (8022084 <_free_r+0x90>)
 802200e:	6813      	ldr	r3, [r2, #0]
 8022010:	b933      	cbnz	r3, 8022020 <_free_r+0x2c>
 8022012:	6063      	str	r3, [r4, #4]
 8022014:	6014      	str	r4, [r2, #0]
 8022016:	4628      	mov	r0, r5
 8022018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802201c:	f7ff bf72 	b.w	8021f04 <__malloc_unlock>
 8022020:	42a3      	cmp	r3, r4
 8022022:	d908      	bls.n	8022036 <_free_r+0x42>
 8022024:	6820      	ldr	r0, [r4, #0]
 8022026:	1821      	adds	r1, r4, r0
 8022028:	428b      	cmp	r3, r1
 802202a:	bf01      	itttt	eq
 802202c:	6819      	ldreq	r1, [r3, #0]
 802202e:	685b      	ldreq	r3, [r3, #4]
 8022030:	1809      	addeq	r1, r1, r0
 8022032:	6021      	streq	r1, [r4, #0]
 8022034:	e7ed      	b.n	8022012 <_free_r+0x1e>
 8022036:	461a      	mov	r2, r3
 8022038:	685b      	ldr	r3, [r3, #4]
 802203a:	b10b      	cbz	r3, 8022040 <_free_r+0x4c>
 802203c:	42a3      	cmp	r3, r4
 802203e:	d9fa      	bls.n	8022036 <_free_r+0x42>
 8022040:	6811      	ldr	r1, [r2, #0]
 8022042:	1850      	adds	r0, r2, r1
 8022044:	42a0      	cmp	r0, r4
 8022046:	d10b      	bne.n	8022060 <_free_r+0x6c>
 8022048:	6820      	ldr	r0, [r4, #0]
 802204a:	4401      	add	r1, r0
 802204c:	1850      	adds	r0, r2, r1
 802204e:	4283      	cmp	r3, r0
 8022050:	6011      	str	r1, [r2, #0]
 8022052:	d1e0      	bne.n	8022016 <_free_r+0x22>
 8022054:	6818      	ldr	r0, [r3, #0]
 8022056:	685b      	ldr	r3, [r3, #4]
 8022058:	6053      	str	r3, [r2, #4]
 802205a:	4408      	add	r0, r1
 802205c:	6010      	str	r0, [r2, #0]
 802205e:	e7da      	b.n	8022016 <_free_r+0x22>
 8022060:	d902      	bls.n	8022068 <_free_r+0x74>
 8022062:	230c      	movs	r3, #12
 8022064:	602b      	str	r3, [r5, #0]
 8022066:	e7d6      	b.n	8022016 <_free_r+0x22>
 8022068:	6820      	ldr	r0, [r4, #0]
 802206a:	1821      	adds	r1, r4, r0
 802206c:	428b      	cmp	r3, r1
 802206e:	bf04      	itt	eq
 8022070:	6819      	ldreq	r1, [r3, #0]
 8022072:	685b      	ldreq	r3, [r3, #4]
 8022074:	6063      	str	r3, [r4, #4]
 8022076:	bf04      	itt	eq
 8022078:	1809      	addeq	r1, r1, r0
 802207a:	6021      	streq	r1, [r4, #0]
 802207c:	6054      	str	r4, [r2, #4]
 802207e:	e7ca      	b.n	8022016 <_free_r+0x22>
 8022080:	bd38      	pop	{r3, r4, r5, pc}
 8022082:	bf00      	nop
 8022084:	200003cc 	.word	0x200003cc

08022088 <__ssputs_r>:
 8022088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802208c:	688e      	ldr	r6, [r1, #8]
 802208e:	461f      	mov	r7, r3
 8022090:	42be      	cmp	r6, r7
 8022092:	680b      	ldr	r3, [r1, #0]
 8022094:	4682      	mov	sl, r0
 8022096:	460c      	mov	r4, r1
 8022098:	4690      	mov	r8, r2
 802209a:	d82d      	bhi.n	80220f8 <__ssputs_r+0x70>
 802209c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80220a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80220a4:	d026      	beq.n	80220f4 <__ssputs_r+0x6c>
 80220a6:	6965      	ldr	r5, [r4, #20]
 80220a8:	6909      	ldr	r1, [r1, #16]
 80220aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80220ae:	eba3 0901 	sub.w	r9, r3, r1
 80220b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80220b6:	1c7b      	adds	r3, r7, #1
 80220b8:	444b      	add	r3, r9
 80220ba:	106d      	asrs	r5, r5, #1
 80220bc:	429d      	cmp	r5, r3
 80220be:	bf38      	it	cc
 80220c0:	461d      	movcc	r5, r3
 80220c2:	0553      	lsls	r3, r2, #21
 80220c4:	d527      	bpl.n	8022116 <__ssputs_r+0x8e>
 80220c6:	4629      	mov	r1, r5
 80220c8:	f7ff fe96 	bl	8021df8 <_malloc_r>
 80220cc:	4606      	mov	r6, r0
 80220ce:	b360      	cbz	r0, 802212a <__ssputs_r+0xa2>
 80220d0:	6921      	ldr	r1, [r4, #16]
 80220d2:	464a      	mov	r2, r9
 80220d4:	f7ff ff80 	bl	8021fd8 <memcpy>
 80220d8:	89a3      	ldrh	r3, [r4, #12]
 80220da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80220de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80220e2:	81a3      	strh	r3, [r4, #12]
 80220e4:	6126      	str	r6, [r4, #16]
 80220e6:	6165      	str	r5, [r4, #20]
 80220e8:	444e      	add	r6, r9
 80220ea:	eba5 0509 	sub.w	r5, r5, r9
 80220ee:	6026      	str	r6, [r4, #0]
 80220f0:	60a5      	str	r5, [r4, #8]
 80220f2:	463e      	mov	r6, r7
 80220f4:	42be      	cmp	r6, r7
 80220f6:	d900      	bls.n	80220fa <__ssputs_r+0x72>
 80220f8:	463e      	mov	r6, r7
 80220fa:	6820      	ldr	r0, [r4, #0]
 80220fc:	4632      	mov	r2, r6
 80220fe:	4641      	mov	r1, r8
 8022100:	f000 faa8 	bl	8022654 <memmove>
 8022104:	68a3      	ldr	r3, [r4, #8]
 8022106:	1b9b      	subs	r3, r3, r6
 8022108:	60a3      	str	r3, [r4, #8]
 802210a:	6823      	ldr	r3, [r4, #0]
 802210c:	4433      	add	r3, r6
 802210e:	6023      	str	r3, [r4, #0]
 8022110:	2000      	movs	r0, #0
 8022112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022116:	462a      	mov	r2, r5
 8022118:	f000 fab6 	bl	8022688 <_realloc_r>
 802211c:	4606      	mov	r6, r0
 802211e:	2800      	cmp	r0, #0
 8022120:	d1e0      	bne.n	80220e4 <__ssputs_r+0x5c>
 8022122:	6921      	ldr	r1, [r4, #16]
 8022124:	4650      	mov	r0, sl
 8022126:	f7ff ff65 	bl	8021ff4 <_free_r>
 802212a:	230c      	movs	r3, #12
 802212c:	f8ca 3000 	str.w	r3, [sl]
 8022130:	89a3      	ldrh	r3, [r4, #12]
 8022132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022136:	81a3      	strh	r3, [r4, #12]
 8022138:	f04f 30ff 	mov.w	r0, #4294967295
 802213c:	e7e9      	b.n	8022112 <__ssputs_r+0x8a>
	...

08022140 <_svfiprintf_r>:
 8022140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022144:	4698      	mov	r8, r3
 8022146:	898b      	ldrh	r3, [r1, #12]
 8022148:	061b      	lsls	r3, r3, #24
 802214a:	b09d      	sub	sp, #116	@ 0x74
 802214c:	4607      	mov	r7, r0
 802214e:	460d      	mov	r5, r1
 8022150:	4614      	mov	r4, r2
 8022152:	d510      	bpl.n	8022176 <_svfiprintf_r+0x36>
 8022154:	690b      	ldr	r3, [r1, #16]
 8022156:	b973      	cbnz	r3, 8022176 <_svfiprintf_r+0x36>
 8022158:	2140      	movs	r1, #64	@ 0x40
 802215a:	f7ff fe4d 	bl	8021df8 <_malloc_r>
 802215e:	6028      	str	r0, [r5, #0]
 8022160:	6128      	str	r0, [r5, #16]
 8022162:	b930      	cbnz	r0, 8022172 <_svfiprintf_r+0x32>
 8022164:	230c      	movs	r3, #12
 8022166:	603b      	str	r3, [r7, #0]
 8022168:	f04f 30ff 	mov.w	r0, #4294967295
 802216c:	b01d      	add	sp, #116	@ 0x74
 802216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022172:	2340      	movs	r3, #64	@ 0x40
 8022174:	616b      	str	r3, [r5, #20]
 8022176:	2300      	movs	r3, #0
 8022178:	9309      	str	r3, [sp, #36]	@ 0x24
 802217a:	2320      	movs	r3, #32
 802217c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022180:	f8cd 800c 	str.w	r8, [sp, #12]
 8022184:	2330      	movs	r3, #48	@ 0x30
 8022186:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8022324 <_svfiprintf_r+0x1e4>
 802218a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802218e:	f04f 0901 	mov.w	r9, #1
 8022192:	4623      	mov	r3, r4
 8022194:	469a      	mov	sl, r3
 8022196:	f813 2b01 	ldrb.w	r2, [r3], #1
 802219a:	b10a      	cbz	r2, 80221a0 <_svfiprintf_r+0x60>
 802219c:	2a25      	cmp	r2, #37	@ 0x25
 802219e:	d1f9      	bne.n	8022194 <_svfiprintf_r+0x54>
 80221a0:	ebba 0b04 	subs.w	fp, sl, r4
 80221a4:	d00b      	beq.n	80221be <_svfiprintf_r+0x7e>
 80221a6:	465b      	mov	r3, fp
 80221a8:	4622      	mov	r2, r4
 80221aa:	4629      	mov	r1, r5
 80221ac:	4638      	mov	r0, r7
 80221ae:	f7ff ff6b 	bl	8022088 <__ssputs_r>
 80221b2:	3001      	adds	r0, #1
 80221b4:	f000 80a7 	beq.w	8022306 <_svfiprintf_r+0x1c6>
 80221b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80221ba:	445a      	add	r2, fp
 80221bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80221be:	f89a 3000 	ldrb.w	r3, [sl]
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	f000 809f 	beq.w	8022306 <_svfiprintf_r+0x1c6>
 80221c8:	2300      	movs	r3, #0
 80221ca:	f04f 32ff 	mov.w	r2, #4294967295
 80221ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80221d2:	f10a 0a01 	add.w	sl, sl, #1
 80221d6:	9304      	str	r3, [sp, #16]
 80221d8:	9307      	str	r3, [sp, #28]
 80221da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80221de:	931a      	str	r3, [sp, #104]	@ 0x68
 80221e0:	4654      	mov	r4, sl
 80221e2:	2205      	movs	r2, #5
 80221e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221e8:	484e      	ldr	r0, [pc, #312]	@ (8022324 <_svfiprintf_r+0x1e4>)
 80221ea:	f7dd fff9 	bl	80001e0 <memchr>
 80221ee:	9a04      	ldr	r2, [sp, #16]
 80221f0:	b9d8      	cbnz	r0, 802222a <_svfiprintf_r+0xea>
 80221f2:	06d0      	lsls	r0, r2, #27
 80221f4:	bf44      	itt	mi
 80221f6:	2320      	movmi	r3, #32
 80221f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80221fc:	0711      	lsls	r1, r2, #28
 80221fe:	bf44      	itt	mi
 8022200:	232b      	movmi	r3, #43	@ 0x2b
 8022202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022206:	f89a 3000 	ldrb.w	r3, [sl]
 802220a:	2b2a      	cmp	r3, #42	@ 0x2a
 802220c:	d015      	beq.n	802223a <_svfiprintf_r+0xfa>
 802220e:	9a07      	ldr	r2, [sp, #28]
 8022210:	4654      	mov	r4, sl
 8022212:	2000      	movs	r0, #0
 8022214:	f04f 0c0a 	mov.w	ip, #10
 8022218:	4621      	mov	r1, r4
 802221a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802221e:	3b30      	subs	r3, #48	@ 0x30
 8022220:	2b09      	cmp	r3, #9
 8022222:	d94b      	bls.n	80222bc <_svfiprintf_r+0x17c>
 8022224:	b1b0      	cbz	r0, 8022254 <_svfiprintf_r+0x114>
 8022226:	9207      	str	r2, [sp, #28]
 8022228:	e014      	b.n	8022254 <_svfiprintf_r+0x114>
 802222a:	eba0 0308 	sub.w	r3, r0, r8
 802222e:	fa09 f303 	lsl.w	r3, r9, r3
 8022232:	4313      	orrs	r3, r2
 8022234:	9304      	str	r3, [sp, #16]
 8022236:	46a2      	mov	sl, r4
 8022238:	e7d2      	b.n	80221e0 <_svfiprintf_r+0xa0>
 802223a:	9b03      	ldr	r3, [sp, #12]
 802223c:	1d19      	adds	r1, r3, #4
 802223e:	681b      	ldr	r3, [r3, #0]
 8022240:	9103      	str	r1, [sp, #12]
 8022242:	2b00      	cmp	r3, #0
 8022244:	bfbb      	ittet	lt
 8022246:	425b      	neglt	r3, r3
 8022248:	f042 0202 	orrlt.w	r2, r2, #2
 802224c:	9307      	strge	r3, [sp, #28]
 802224e:	9307      	strlt	r3, [sp, #28]
 8022250:	bfb8      	it	lt
 8022252:	9204      	strlt	r2, [sp, #16]
 8022254:	7823      	ldrb	r3, [r4, #0]
 8022256:	2b2e      	cmp	r3, #46	@ 0x2e
 8022258:	d10a      	bne.n	8022270 <_svfiprintf_r+0x130>
 802225a:	7863      	ldrb	r3, [r4, #1]
 802225c:	2b2a      	cmp	r3, #42	@ 0x2a
 802225e:	d132      	bne.n	80222c6 <_svfiprintf_r+0x186>
 8022260:	9b03      	ldr	r3, [sp, #12]
 8022262:	1d1a      	adds	r2, r3, #4
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	9203      	str	r2, [sp, #12]
 8022268:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802226c:	3402      	adds	r4, #2
 802226e:	9305      	str	r3, [sp, #20]
 8022270:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8022334 <_svfiprintf_r+0x1f4>
 8022274:	7821      	ldrb	r1, [r4, #0]
 8022276:	2203      	movs	r2, #3
 8022278:	4650      	mov	r0, sl
 802227a:	f7dd ffb1 	bl	80001e0 <memchr>
 802227e:	b138      	cbz	r0, 8022290 <_svfiprintf_r+0x150>
 8022280:	9b04      	ldr	r3, [sp, #16]
 8022282:	eba0 000a 	sub.w	r0, r0, sl
 8022286:	2240      	movs	r2, #64	@ 0x40
 8022288:	4082      	lsls	r2, r0
 802228a:	4313      	orrs	r3, r2
 802228c:	3401      	adds	r4, #1
 802228e:	9304      	str	r3, [sp, #16]
 8022290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022294:	4824      	ldr	r0, [pc, #144]	@ (8022328 <_svfiprintf_r+0x1e8>)
 8022296:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802229a:	2206      	movs	r2, #6
 802229c:	f7dd ffa0 	bl	80001e0 <memchr>
 80222a0:	2800      	cmp	r0, #0
 80222a2:	d036      	beq.n	8022312 <_svfiprintf_r+0x1d2>
 80222a4:	4b21      	ldr	r3, [pc, #132]	@ (802232c <_svfiprintf_r+0x1ec>)
 80222a6:	bb1b      	cbnz	r3, 80222f0 <_svfiprintf_r+0x1b0>
 80222a8:	9b03      	ldr	r3, [sp, #12]
 80222aa:	3307      	adds	r3, #7
 80222ac:	f023 0307 	bic.w	r3, r3, #7
 80222b0:	3308      	adds	r3, #8
 80222b2:	9303      	str	r3, [sp, #12]
 80222b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80222b6:	4433      	add	r3, r6
 80222b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80222ba:	e76a      	b.n	8022192 <_svfiprintf_r+0x52>
 80222bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80222c0:	460c      	mov	r4, r1
 80222c2:	2001      	movs	r0, #1
 80222c4:	e7a8      	b.n	8022218 <_svfiprintf_r+0xd8>
 80222c6:	2300      	movs	r3, #0
 80222c8:	3401      	adds	r4, #1
 80222ca:	9305      	str	r3, [sp, #20]
 80222cc:	4619      	mov	r1, r3
 80222ce:	f04f 0c0a 	mov.w	ip, #10
 80222d2:	4620      	mov	r0, r4
 80222d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80222d8:	3a30      	subs	r2, #48	@ 0x30
 80222da:	2a09      	cmp	r2, #9
 80222dc:	d903      	bls.n	80222e6 <_svfiprintf_r+0x1a6>
 80222de:	2b00      	cmp	r3, #0
 80222e0:	d0c6      	beq.n	8022270 <_svfiprintf_r+0x130>
 80222e2:	9105      	str	r1, [sp, #20]
 80222e4:	e7c4      	b.n	8022270 <_svfiprintf_r+0x130>
 80222e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80222ea:	4604      	mov	r4, r0
 80222ec:	2301      	movs	r3, #1
 80222ee:	e7f0      	b.n	80222d2 <_svfiprintf_r+0x192>
 80222f0:	ab03      	add	r3, sp, #12
 80222f2:	9300      	str	r3, [sp, #0]
 80222f4:	462a      	mov	r2, r5
 80222f6:	4b0e      	ldr	r3, [pc, #56]	@ (8022330 <_svfiprintf_r+0x1f0>)
 80222f8:	a904      	add	r1, sp, #16
 80222fa:	4638      	mov	r0, r7
 80222fc:	f3af 8000 	nop.w
 8022300:	1c42      	adds	r2, r0, #1
 8022302:	4606      	mov	r6, r0
 8022304:	d1d6      	bne.n	80222b4 <_svfiprintf_r+0x174>
 8022306:	89ab      	ldrh	r3, [r5, #12]
 8022308:	065b      	lsls	r3, r3, #25
 802230a:	f53f af2d 	bmi.w	8022168 <_svfiprintf_r+0x28>
 802230e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022310:	e72c      	b.n	802216c <_svfiprintf_r+0x2c>
 8022312:	ab03      	add	r3, sp, #12
 8022314:	9300      	str	r3, [sp, #0]
 8022316:	462a      	mov	r2, r5
 8022318:	4b05      	ldr	r3, [pc, #20]	@ (8022330 <_svfiprintf_r+0x1f0>)
 802231a:	a904      	add	r1, sp, #16
 802231c:	4638      	mov	r0, r7
 802231e:	f000 f879 	bl	8022414 <_printf_i>
 8022322:	e7ed      	b.n	8022300 <_svfiprintf_r+0x1c0>
 8022324:	080248fc 	.word	0x080248fc
 8022328:	08024906 	.word	0x08024906
 802232c:	00000000 	.word	0x00000000
 8022330:	08022089 	.word	0x08022089
 8022334:	08024902 	.word	0x08024902

08022338 <_printf_common>:
 8022338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802233c:	4616      	mov	r6, r2
 802233e:	4698      	mov	r8, r3
 8022340:	688a      	ldr	r2, [r1, #8]
 8022342:	690b      	ldr	r3, [r1, #16]
 8022344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022348:	4293      	cmp	r3, r2
 802234a:	bfb8      	it	lt
 802234c:	4613      	movlt	r3, r2
 802234e:	6033      	str	r3, [r6, #0]
 8022350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022354:	4607      	mov	r7, r0
 8022356:	460c      	mov	r4, r1
 8022358:	b10a      	cbz	r2, 802235e <_printf_common+0x26>
 802235a:	3301      	adds	r3, #1
 802235c:	6033      	str	r3, [r6, #0]
 802235e:	6823      	ldr	r3, [r4, #0]
 8022360:	0699      	lsls	r1, r3, #26
 8022362:	bf42      	ittt	mi
 8022364:	6833      	ldrmi	r3, [r6, #0]
 8022366:	3302      	addmi	r3, #2
 8022368:	6033      	strmi	r3, [r6, #0]
 802236a:	6825      	ldr	r5, [r4, #0]
 802236c:	f015 0506 	ands.w	r5, r5, #6
 8022370:	d106      	bne.n	8022380 <_printf_common+0x48>
 8022372:	f104 0a19 	add.w	sl, r4, #25
 8022376:	68e3      	ldr	r3, [r4, #12]
 8022378:	6832      	ldr	r2, [r6, #0]
 802237a:	1a9b      	subs	r3, r3, r2
 802237c:	42ab      	cmp	r3, r5
 802237e:	dc26      	bgt.n	80223ce <_printf_common+0x96>
 8022380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022384:	6822      	ldr	r2, [r4, #0]
 8022386:	3b00      	subs	r3, #0
 8022388:	bf18      	it	ne
 802238a:	2301      	movne	r3, #1
 802238c:	0692      	lsls	r2, r2, #26
 802238e:	d42b      	bmi.n	80223e8 <_printf_common+0xb0>
 8022390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022394:	4641      	mov	r1, r8
 8022396:	4638      	mov	r0, r7
 8022398:	47c8      	blx	r9
 802239a:	3001      	adds	r0, #1
 802239c:	d01e      	beq.n	80223dc <_printf_common+0xa4>
 802239e:	6823      	ldr	r3, [r4, #0]
 80223a0:	6922      	ldr	r2, [r4, #16]
 80223a2:	f003 0306 	and.w	r3, r3, #6
 80223a6:	2b04      	cmp	r3, #4
 80223a8:	bf02      	ittt	eq
 80223aa:	68e5      	ldreq	r5, [r4, #12]
 80223ac:	6833      	ldreq	r3, [r6, #0]
 80223ae:	1aed      	subeq	r5, r5, r3
 80223b0:	68a3      	ldr	r3, [r4, #8]
 80223b2:	bf0c      	ite	eq
 80223b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80223b8:	2500      	movne	r5, #0
 80223ba:	4293      	cmp	r3, r2
 80223bc:	bfc4      	itt	gt
 80223be:	1a9b      	subgt	r3, r3, r2
 80223c0:	18ed      	addgt	r5, r5, r3
 80223c2:	2600      	movs	r6, #0
 80223c4:	341a      	adds	r4, #26
 80223c6:	42b5      	cmp	r5, r6
 80223c8:	d11a      	bne.n	8022400 <_printf_common+0xc8>
 80223ca:	2000      	movs	r0, #0
 80223cc:	e008      	b.n	80223e0 <_printf_common+0xa8>
 80223ce:	2301      	movs	r3, #1
 80223d0:	4652      	mov	r2, sl
 80223d2:	4641      	mov	r1, r8
 80223d4:	4638      	mov	r0, r7
 80223d6:	47c8      	blx	r9
 80223d8:	3001      	adds	r0, #1
 80223da:	d103      	bne.n	80223e4 <_printf_common+0xac>
 80223dc:	f04f 30ff 	mov.w	r0, #4294967295
 80223e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223e4:	3501      	adds	r5, #1
 80223e6:	e7c6      	b.n	8022376 <_printf_common+0x3e>
 80223e8:	18e1      	adds	r1, r4, r3
 80223ea:	1c5a      	adds	r2, r3, #1
 80223ec:	2030      	movs	r0, #48	@ 0x30
 80223ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80223f2:	4422      	add	r2, r4
 80223f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80223f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80223fc:	3302      	adds	r3, #2
 80223fe:	e7c7      	b.n	8022390 <_printf_common+0x58>
 8022400:	2301      	movs	r3, #1
 8022402:	4622      	mov	r2, r4
 8022404:	4641      	mov	r1, r8
 8022406:	4638      	mov	r0, r7
 8022408:	47c8      	blx	r9
 802240a:	3001      	adds	r0, #1
 802240c:	d0e6      	beq.n	80223dc <_printf_common+0xa4>
 802240e:	3601      	adds	r6, #1
 8022410:	e7d9      	b.n	80223c6 <_printf_common+0x8e>
	...

08022414 <_printf_i>:
 8022414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022418:	7e0f      	ldrb	r7, [r1, #24]
 802241a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802241c:	2f78      	cmp	r7, #120	@ 0x78
 802241e:	4691      	mov	r9, r2
 8022420:	4680      	mov	r8, r0
 8022422:	460c      	mov	r4, r1
 8022424:	469a      	mov	sl, r3
 8022426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802242a:	d807      	bhi.n	802243c <_printf_i+0x28>
 802242c:	2f62      	cmp	r7, #98	@ 0x62
 802242e:	d80a      	bhi.n	8022446 <_printf_i+0x32>
 8022430:	2f00      	cmp	r7, #0
 8022432:	f000 80d2 	beq.w	80225da <_printf_i+0x1c6>
 8022436:	2f58      	cmp	r7, #88	@ 0x58
 8022438:	f000 80b9 	beq.w	80225ae <_printf_i+0x19a>
 802243c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022444:	e03a      	b.n	80224bc <_printf_i+0xa8>
 8022446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802244a:	2b15      	cmp	r3, #21
 802244c:	d8f6      	bhi.n	802243c <_printf_i+0x28>
 802244e:	a101      	add	r1, pc, #4	@ (adr r1, 8022454 <_printf_i+0x40>)
 8022450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022454:	080224ad 	.word	0x080224ad
 8022458:	080224c1 	.word	0x080224c1
 802245c:	0802243d 	.word	0x0802243d
 8022460:	0802243d 	.word	0x0802243d
 8022464:	0802243d 	.word	0x0802243d
 8022468:	0802243d 	.word	0x0802243d
 802246c:	080224c1 	.word	0x080224c1
 8022470:	0802243d 	.word	0x0802243d
 8022474:	0802243d 	.word	0x0802243d
 8022478:	0802243d 	.word	0x0802243d
 802247c:	0802243d 	.word	0x0802243d
 8022480:	080225c1 	.word	0x080225c1
 8022484:	080224eb 	.word	0x080224eb
 8022488:	0802257b 	.word	0x0802257b
 802248c:	0802243d 	.word	0x0802243d
 8022490:	0802243d 	.word	0x0802243d
 8022494:	080225e3 	.word	0x080225e3
 8022498:	0802243d 	.word	0x0802243d
 802249c:	080224eb 	.word	0x080224eb
 80224a0:	0802243d 	.word	0x0802243d
 80224a4:	0802243d 	.word	0x0802243d
 80224a8:	08022583 	.word	0x08022583
 80224ac:	6833      	ldr	r3, [r6, #0]
 80224ae:	1d1a      	adds	r2, r3, #4
 80224b0:	681b      	ldr	r3, [r3, #0]
 80224b2:	6032      	str	r2, [r6, #0]
 80224b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80224b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80224bc:	2301      	movs	r3, #1
 80224be:	e09d      	b.n	80225fc <_printf_i+0x1e8>
 80224c0:	6833      	ldr	r3, [r6, #0]
 80224c2:	6820      	ldr	r0, [r4, #0]
 80224c4:	1d19      	adds	r1, r3, #4
 80224c6:	6031      	str	r1, [r6, #0]
 80224c8:	0606      	lsls	r6, r0, #24
 80224ca:	d501      	bpl.n	80224d0 <_printf_i+0xbc>
 80224cc:	681d      	ldr	r5, [r3, #0]
 80224ce:	e003      	b.n	80224d8 <_printf_i+0xc4>
 80224d0:	0645      	lsls	r5, r0, #25
 80224d2:	d5fb      	bpl.n	80224cc <_printf_i+0xb8>
 80224d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80224d8:	2d00      	cmp	r5, #0
 80224da:	da03      	bge.n	80224e4 <_printf_i+0xd0>
 80224dc:	232d      	movs	r3, #45	@ 0x2d
 80224de:	426d      	negs	r5, r5
 80224e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80224e4:	4859      	ldr	r0, [pc, #356]	@ (802264c <_printf_i+0x238>)
 80224e6:	230a      	movs	r3, #10
 80224e8:	e011      	b.n	802250e <_printf_i+0xfa>
 80224ea:	6821      	ldr	r1, [r4, #0]
 80224ec:	6833      	ldr	r3, [r6, #0]
 80224ee:	0608      	lsls	r0, r1, #24
 80224f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80224f4:	d402      	bmi.n	80224fc <_printf_i+0xe8>
 80224f6:	0649      	lsls	r1, r1, #25
 80224f8:	bf48      	it	mi
 80224fa:	b2ad      	uxthmi	r5, r5
 80224fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80224fe:	4853      	ldr	r0, [pc, #332]	@ (802264c <_printf_i+0x238>)
 8022500:	6033      	str	r3, [r6, #0]
 8022502:	bf14      	ite	ne
 8022504:	230a      	movne	r3, #10
 8022506:	2308      	moveq	r3, #8
 8022508:	2100      	movs	r1, #0
 802250a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802250e:	6866      	ldr	r6, [r4, #4]
 8022510:	60a6      	str	r6, [r4, #8]
 8022512:	2e00      	cmp	r6, #0
 8022514:	bfa2      	ittt	ge
 8022516:	6821      	ldrge	r1, [r4, #0]
 8022518:	f021 0104 	bicge.w	r1, r1, #4
 802251c:	6021      	strge	r1, [r4, #0]
 802251e:	b90d      	cbnz	r5, 8022524 <_printf_i+0x110>
 8022520:	2e00      	cmp	r6, #0
 8022522:	d04b      	beq.n	80225bc <_printf_i+0x1a8>
 8022524:	4616      	mov	r6, r2
 8022526:	fbb5 f1f3 	udiv	r1, r5, r3
 802252a:	fb03 5711 	mls	r7, r3, r1, r5
 802252e:	5dc7      	ldrb	r7, [r0, r7]
 8022530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022534:	462f      	mov	r7, r5
 8022536:	42bb      	cmp	r3, r7
 8022538:	460d      	mov	r5, r1
 802253a:	d9f4      	bls.n	8022526 <_printf_i+0x112>
 802253c:	2b08      	cmp	r3, #8
 802253e:	d10b      	bne.n	8022558 <_printf_i+0x144>
 8022540:	6823      	ldr	r3, [r4, #0]
 8022542:	07df      	lsls	r7, r3, #31
 8022544:	d508      	bpl.n	8022558 <_printf_i+0x144>
 8022546:	6923      	ldr	r3, [r4, #16]
 8022548:	6861      	ldr	r1, [r4, #4]
 802254a:	4299      	cmp	r1, r3
 802254c:	bfde      	ittt	le
 802254e:	2330      	movle	r3, #48	@ 0x30
 8022550:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022554:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022558:	1b92      	subs	r2, r2, r6
 802255a:	6122      	str	r2, [r4, #16]
 802255c:	f8cd a000 	str.w	sl, [sp]
 8022560:	464b      	mov	r3, r9
 8022562:	aa03      	add	r2, sp, #12
 8022564:	4621      	mov	r1, r4
 8022566:	4640      	mov	r0, r8
 8022568:	f7ff fee6 	bl	8022338 <_printf_common>
 802256c:	3001      	adds	r0, #1
 802256e:	d14a      	bne.n	8022606 <_printf_i+0x1f2>
 8022570:	f04f 30ff 	mov.w	r0, #4294967295
 8022574:	b004      	add	sp, #16
 8022576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802257a:	6823      	ldr	r3, [r4, #0]
 802257c:	f043 0320 	orr.w	r3, r3, #32
 8022580:	6023      	str	r3, [r4, #0]
 8022582:	4833      	ldr	r0, [pc, #204]	@ (8022650 <_printf_i+0x23c>)
 8022584:	2778      	movs	r7, #120	@ 0x78
 8022586:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802258a:	6823      	ldr	r3, [r4, #0]
 802258c:	6831      	ldr	r1, [r6, #0]
 802258e:	061f      	lsls	r7, r3, #24
 8022590:	f851 5b04 	ldr.w	r5, [r1], #4
 8022594:	d402      	bmi.n	802259c <_printf_i+0x188>
 8022596:	065f      	lsls	r7, r3, #25
 8022598:	bf48      	it	mi
 802259a:	b2ad      	uxthmi	r5, r5
 802259c:	6031      	str	r1, [r6, #0]
 802259e:	07d9      	lsls	r1, r3, #31
 80225a0:	bf44      	itt	mi
 80225a2:	f043 0320 	orrmi.w	r3, r3, #32
 80225a6:	6023      	strmi	r3, [r4, #0]
 80225a8:	b11d      	cbz	r5, 80225b2 <_printf_i+0x19e>
 80225aa:	2310      	movs	r3, #16
 80225ac:	e7ac      	b.n	8022508 <_printf_i+0xf4>
 80225ae:	4827      	ldr	r0, [pc, #156]	@ (802264c <_printf_i+0x238>)
 80225b0:	e7e9      	b.n	8022586 <_printf_i+0x172>
 80225b2:	6823      	ldr	r3, [r4, #0]
 80225b4:	f023 0320 	bic.w	r3, r3, #32
 80225b8:	6023      	str	r3, [r4, #0]
 80225ba:	e7f6      	b.n	80225aa <_printf_i+0x196>
 80225bc:	4616      	mov	r6, r2
 80225be:	e7bd      	b.n	802253c <_printf_i+0x128>
 80225c0:	6833      	ldr	r3, [r6, #0]
 80225c2:	6825      	ldr	r5, [r4, #0]
 80225c4:	6961      	ldr	r1, [r4, #20]
 80225c6:	1d18      	adds	r0, r3, #4
 80225c8:	6030      	str	r0, [r6, #0]
 80225ca:	062e      	lsls	r6, r5, #24
 80225cc:	681b      	ldr	r3, [r3, #0]
 80225ce:	d501      	bpl.n	80225d4 <_printf_i+0x1c0>
 80225d0:	6019      	str	r1, [r3, #0]
 80225d2:	e002      	b.n	80225da <_printf_i+0x1c6>
 80225d4:	0668      	lsls	r0, r5, #25
 80225d6:	d5fb      	bpl.n	80225d0 <_printf_i+0x1bc>
 80225d8:	8019      	strh	r1, [r3, #0]
 80225da:	2300      	movs	r3, #0
 80225dc:	6123      	str	r3, [r4, #16]
 80225de:	4616      	mov	r6, r2
 80225e0:	e7bc      	b.n	802255c <_printf_i+0x148>
 80225e2:	6833      	ldr	r3, [r6, #0]
 80225e4:	1d1a      	adds	r2, r3, #4
 80225e6:	6032      	str	r2, [r6, #0]
 80225e8:	681e      	ldr	r6, [r3, #0]
 80225ea:	6862      	ldr	r2, [r4, #4]
 80225ec:	2100      	movs	r1, #0
 80225ee:	4630      	mov	r0, r6
 80225f0:	f7dd fdf6 	bl	80001e0 <memchr>
 80225f4:	b108      	cbz	r0, 80225fa <_printf_i+0x1e6>
 80225f6:	1b80      	subs	r0, r0, r6
 80225f8:	6060      	str	r0, [r4, #4]
 80225fa:	6863      	ldr	r3, [r4, #4]
 80225fc:	6123      	str	r3, [r4, #16]
 80225fe:	2300      	movs	r3, #0
 8022600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022604:	e7aa      	b.n	802255c <_printf_i+0x148>
 8022606:	6923      	ldr	r3, [r4, #16]
 8022608:	4632      	mov	r2, r6
 802260a:	4649      	mov	r1, r9
 802260c:	4640      	mov	r0, r8
 802260e:	47d0      	blx	sl
 8022610:	3001      	adds	r0, #1
 8022612:	d0ad      	beq.n	8022570 <_printf_i+0x15c>
 8022614:	6823      	ldr	r3, [r4, #0]
 8022616:	079b      	lsls	r3, r3, #30
 8022618:	d413      	bmi.n	8022642 <_printf_i+0x22e>
 802261a:	68e0      	ldr	r0, [r4, #12]
 802261c:	9b03      	ldr	r3, [sp, #12]
 802261e:	4298      	cmp	r0, r3
 8022620:	bfb8      	it	lt
 8022622:	4618      	movlt	r0, r3
 8022624:	e7a6      	b.n	8022574 <_printf_i+0x160>
 8022626:	2301      	movs	r3, #1
 8022628:	4632      	mov	r2, r6
 802262a:	4649      	mov	r1, r9
 802262c:	4640      	mov	r0, r8
 802262e:	47d0      	blx	sl
 8022630:	3001      	adds	r0, #1
 8022632:	d09d      	beq.n	8022570 <_printf_i+0x15c>
 8022634:	3501      	adds	r5, #1
 8022636:	68e3      	ldr	r3, [r4, #12]
 8022638:	9903      	ldr	r1, [sp, #12]
 802263a:	1a5b      	subs	r3, r3, r1
 802263c:	42ab      	cmp	r3, r5
 802263e:	dcf2      	bgt.n	8022626 <_printf_i+0x212>
 8022640:	e7eb      	b.n	802261a <_printf_i+0x206>
 8022642:	2500      	movs	r5, #0
 8022644:	f104 0619 	add.w	r6, r4, #25
 8022648:	e7f5      	b.n	8022636 <_printf_i+0x222>
 802264a:	bf00      	nop
 802264c:	0802490d 	.word	0x0802490d
 8022650:	0802491e 	.word	0x0802491e

08022654 <memmove>:
 8022654:	4288      	cmp	r0, r1
 8022656:	b510      	push	{r4, lr}
 8022658:	eb01 0402 	add.w	r4, r1, r2
 802265c:	d902      	bls.n	8022664 <memmove+0x10>
 802265e:	4284      	cmp	r4, r0
 8022660:	4623      	mov	r3, r4
 8022662:	d807      	bhi.n	8022674 <memmove+0x20>
 8022664:	1e43      	subs	r3, r0, #1
 8022666:	42a1      	cmp	r1, r4
 8022668:	d008      	beq.n	802267c <memmove+0x28>
 802266a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802266e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022672:	e7f8      	b.n	8022666 <memmove+0x12>
 8022674:	4402      	add	r2, r0
 8022676:	4601      	mov	r1, r0
 8022678:	428a      	cmp	r2, r1
 802267a:	d100      	bne.n	802267e <memmove+0x2a>
 802267c:	bd10      	pop	{r4, pc}
 802267e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022686:	e7f7      	b.n	8022678 <memmove+0x24>

08022688 <_realloc_r>:
 8022688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802268c:	4680      	mov	r8, r0
 802268e:	4615      	mov	r5, r2
 8022690:	460c      	mov	r4, r1
 8022692:	b921      	cbnz	r1, 802269e <_realloc_r+0x16>
 8022694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022698:	4611      	mov	r1, r2
 802269a:	f7ff bbad 	b.w	8021df8 <_malloc_r>
 802269e:	b92a      	cbnz	r2, 80226ac <_realloc_r+0x24>
 80226a0:	f7ff fca8 	bl	8021ff4 <_free_r>
 80226a4:	2400      	movs	r4, #0
 80226a6:	4620      	mov	r0, r4
 80226a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226ac:	f000 f81a 	bl	80226e4 <_malloc_usable_size_r>
 80226b0:	4285      	cmp	r5, r0
 80226b2:	4606      	mov	r6, r0
 80226b4:	d802      	bhi.n	80226bc <_realloc_r+0x34>
 80226b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80226ba:	d8f4      	bhi.n	80226a6 <_realloc_r+0x1e>
 80226bc:	4629      	mov	r1, r5
 80226be:	4640      	mov	r0, r8
 80226c0:	f7ff fb9a 	bl	8021df8 <_malloc_r>
 80226c4:	4607      	mov	r7, r0
 80226c6:	2800      	cmp	r0, #0
 80226c8:	d0ec      	beq.n	80226a4 <_realloc_r+0x1c>
 80226ca:	42b5      	cmp	r5, r6
 80226cc:	462a      	mov	r2, r5
 80226ce:	4621      	mov	r1, r4
 80226d0:	bf28      	it	cs
 80226d2:	4632      	movcs	r2, r6
 80226d4:	f7ff fc80 	bl	8021fd8 <memcpy>
 80226d8:	4621      	mov	r1, r4
 80226da:	4640      	mov	r0, r8
 80226dc:	f7ff fc8a 	bl	8021ff4 <_free_r>
 80226e0:	463c      	mov	r4, r7
 80226e2:	e7e0      	b.n	80226a6 <_realloc_r+0x1e>

080226e4 <_malloc_usable_size_r>:
 80226e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80226e8:	1f18      	subs	r0, r3, #4
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	bfbc      	itt	lt
 80226ee:	580b      	ldrlt	r3, [r1, r0]
 80226f0:	18c0      	addlt	r0, r0, r3
 80226f2:	4770      	bx	lr

080226f4 <_init>:
 80226f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226f6:	bf00      	nop
 80226f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226fa:	bc08      	pop	{r3}
 80226fc:	469e      	mov	lr, r3
 80226fe:	4770      	bx	lr

08022700 <_fini>:
 8022700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022702:	bf00      	nop
 8022704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022706:	bc08      	pop	{r3}
 8022708:	469e      	mov	lr, r3
 802270a:	4770      	bx	lr
